
/Users/christopherkosik/Documents/codes/KNELL_SYS/KNELL/target/5.5.0/boron/KNELL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006a5c  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000baa78  000baa78  0000aa78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000074  2003e530  000baa9c  0000e530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000024c  2003e5a8  2003e5a8  0001e5a8  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bab10  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bab14  000bab14  0001ab14  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bab1a  000bab1a  0001ab1a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bab3e  000bab3e  0001ab3e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00135996  00000000  00000000  0001ab42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00012498  00000000  00000000  001504d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003f198  00000000  00000000  00162970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003060  00000000  00000000  001a1b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000bba0  00000000  00000000  001a4b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018735  00000000  00000000  001b0708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003c5c4  00000000  00000000  001c8e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001459ac  00000000  00000000  00205401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008dbc  00000000  00000000  0034adb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <__aeabi_drsub>:
   b401c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4020:	e002      	b.n	b4028 <__adddf3>
   b4022:	bf00      	nop

000b4024 <__aeabi_dsub>:
   b4024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b4028 <__adddf3>:
   b4028:	b530      	push	{r4, r5, lr}
   b402a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b402e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4032:	ea94 0f05 	teq	r4, r5
   b4036:	bf08      	it	eq
   b4038:	ea90 0f02 	teqeq	r0, r2
   b403c:	bf1f      	itttt	ne
   b403e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4042:	ea55 0c02 	orrsne.w	ip, r5, r2
   b4046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b404e:	f000 80e2 	beq.w	b4216 <__adddf3+0x1ee>
   b4052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b4056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405a:	bfb8      	it	lt
   b405c:	426d      	neglt	r5, r5
   b405e:	dd0c      	ble.n	b407a <__adddf3+0x52>
   b4060:	442c      	add	r4, r5
   b4062:	ea80 0202 	eor.w	r2, r0, r2
   b4066:	ea81 0303 	eor.w	r3, r1, r3
   b406a:	ea82 0000 	eor.w	r0, r2, r0
   b406e:	ea83 0101 	eor.w	r1, r3, r1
   b4072:	ea80 0202 	eor.w	r2, r0, r2
   b4076:	ea81 0303 	eor.w	r3, r1, r3
   b407a:	2d36      	cmp	r5, #54	; 0x36
   b407c:	bf88      	it	hi
   b407e:	bd30      	pophi	{r4, r5, pc}
   b4080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b408c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4090:	d002      	beq.n	b4098 <__adddf3+0x70>
   b4092:	4240      	negs	r0, r0
   b4094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b409c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a4:	d002      	beq.n	b40ac <__adddf3+0x84>
   b40a6:	4252      	negs	r2, r2
   b40a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40ac:	ea94 0f05 	teq	r4, r5
   b40b0:	f000 80a7 	beq.w	b4202 <__adddf3+0x1da>
   b40b4:	f1a4 0401 	sub.w	r4, r4, #1
   b40b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b40bc:	db0d      	blt.n	b40da <__adddf3+0xb2>
   b40be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c2:	fa22 f205 	lsr.w	r2, r2, r5
   b40c6:	1880      	adds	r0, r0, r2
   b40c8:	f141 0100 	adc.w	r1, r1, #0
   b40cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d0:	1880      	adds	r0, r0, r2
   b40d2:	fa43 f305 	asr.w	r3, r3, r5
   b40d6:	4159      	adcs	r1, r3
   b40d8:	e00e      	b.n	b40f8 <__adddf3+0xd0>
   b40da:	f1a5 0520 	sub.w	r5, r5, #32
   b40de:	f10e 0e20 	add.w	lr, lr, #32
   b40e2:	2a01      	cmp	r2, #1
   b40e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40e8:	bf28      	it	cs
   b40ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40ee:	fa43 f305 	asr.w	r3, r3, r5
   b40f2:	18c0      	adds	r0, r0, r3
   b40f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b40fc:	d507      	bpl.n	b410e <__adddf3+0xe6>
   b40fe:	f04f 0e00 	mov.w	lr, #0
   b4102:	f1dc 0c00 	rsbs	ip, ip, #0
   b4106:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410a:	eb6e 0101 	sbc.w	r1, lr, r1
   b410e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4112:	d31b      	bcc.n	b414c <__adddf3+0x124>
   b4114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b4118:	d30c      	bcc.n	b4134 <__adddf3+0x10c>
   b411a:	0849      	lsrs	r1, r1, #1
   b411c:	ea5f 0030 	movs.w	r0, r0, rrx
   b4120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4124:	f104 0401 	add.w	r4, r4, #1
   b4128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b412c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4130:	f080 809a 	bcs.w	b4268 <__adddf3+0x240>
   b4134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4138:	bf08      	it	eq
   b413a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b413e:	f150 0000 	adcs.w	r0, r0, #0
   b4142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4146:	ea41 0105 	orr.w	r1, r1, r5
   b414a:	bd30      	pop	{r4, r5, pc}
   b414c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4150:	4140      	adcs	r0, r0
   b4152:	eb41 0101 	adc.w	r1, r1, r1
   b4156:	3c01      	subs	r4, #1
   b4158:	bf28      	it	cs
   b415a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b415e:	d2e9      	bcs.n	b4134 <__adddf3+0x10c>
   b4160:	f091 0f00 	teq	r1, #0
   b4164:	bf04      	itt	eq
   b4166:	4601      	moveq	r1, r0
   b4168:	2000      	moveq	r0, #0
   b416a:	fab1 f381 	clz	r3, r1
   b416e:	bf08      	it	eq
   b4170:	3320      	addeq	r3, #32
   b4172:	f1a3 030b 	sub.w	r3, r3, #11
   b4176:	f1b3 0220 	subs.w	r2, r3, #32
   b417a:	da0c      	bge.n	b4196 <__adddf3+0x16e>
   b417c:	320c      	adds	r2, #12
   b417e:	dd08      	ble.n	b4192 <__adddf3+0x16a>
   b4180:	f102 0c14 	add.w	ip, r2, #20
   b4184:	f1c2 020c 	rsb	r2, r2, #12
   b4188:	fa01 f00c 	lsl.w	r0, r1, ip
   b418c:	fa21 f102 	lsr.w	r1, r1, r2
   b4190:	e00c      	b.n	b41ac <__adddf3+0x184>
   b4192:	f102 0214 	add.w	r2, r2, #20
   b4196:	bfd8      	it	le
   b4198:	f1c2 0c20 	rsble	ip, r2, #32
   b419c:	fa01 f102 	lsl.w	r1, r1, r2
   b41a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a4:	bfdc      	itt	le
   b41a6:	ea41 010c 	orrle.w	r1, r1, ip
   b41aa:	4090      	lslle	r0, r2
   b41ac:	1ae4      	subs	r4, r4, r3
   b41ae:	bfa2      	ittt	ge
   b41b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b4:	4329      	orrge	r1, r5
   b41b6:	bd30      	popge	{r4, r5, pc}
   b41b8:	ea6f 0404 	mvn.w	r4, r4
   b41bc:	3c1f      	subs	r4, #31
   b41be:	da1c      	bge.n	b41fa <__adddf3+0x1d2>
   b41c0:	340c      	adds	r4, #12
   b41c2:	dc0e      	bgt.n	b41e2 <__adddf3+0x1ba>
   b41c4:	f104 0414 	add.w	r4, r4, #20
   b41c8:	f1c4 0220 	rsb	r2, r4, #32
   b41cc:	fa20 f004 	lsr.w	r0, r0, r4
   b41d0:	fa01 f302 	lsl.w	r3, r1, r2
   b41d4:	ea40 0003 	orr.w	r0, r0, r3
   b41d8:	fa21 f304 	lsr.w	r3, r1, r4
   b41dc:	ea45 0103 	orr.w	r1, r5, r3
   b41e0:	bd30      	pop	{r4, r5, pc}
   b41e2:	f1c4 040c 	rsb	r4, r4, #12
   b41e6:	f1c4 0220 	rsb	r2, r4, #32
   b41ea:	fa20 f002 	lsr.w	r0, r0, r2
   b41ee:	fa01 f304 	lsl.w	r3, r1, r4
   b41f2:	ea40 0003 	orr.w	r0, r0, r3
   b41f6:	4629      	mov	r1, r5
   b41f8:	bd30      	pop	{r4, r5, pc}
   b41fa:	fa21 f004 	lsr.w	r0, r1, r4
   b41fe:	4629      	mov	r1, r5
   b4200:	bd30      	pop	{r4, r5, pc}
   b4202:	f094 0f00 	teq	r4, #0
   b4206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420a:	bf06      	itte	eq
   b420c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4210:	3401      	addeq	r4, #1
   b4212:	3d01      	subne	r5, #1
   b4214:	e74e      	b.n	b40b4 <__adddf3+0x8c>
   b4216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421a:	bf18      	it	ne
   b421c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4220:	d029      	beq.n	b4276 <__adddf3+0x24e>
   b4222:	ea94 0f05 	teq	r4, r5
   b4226:	bf08      	it	eq
   b4228:	ea90 0f02 	teqeq	r0, r2
   b422c:	d005      	beq.n	b423a <__adddf3+0x212>
   b422e:	ea54 0c00 	orrs.w	ip, r4, r0
   b4232:	bf04      	itt	eq
   b4234:	4619      	moveq	r1, r3
   b4236:	4610      	moveq	r0, r2
   b4238:	bd30      	pop	{r4, r5, pc}
   b423a:	ea91 0f03 	teq	r1, r3
   b423e:	bf1e      	ittt	ne
   b4240:	2100      	movne	r1, #0
   b4242:	2000      	movne	r0, #0
   b4244:	bd30      	popne	{r4, r5, pc}
   b4246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424a:	d105      	bne.n	b4258 <__adddf3+0x230>
   b424c:	0040      	lsls	r0, r0, #1
   b424e:	4149      	adcs	r1, r1
   b4250:	bf28      	it	cs
   b4252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b4256:	bd30      	pop	{r4, r5, pc}
   b4258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b425c:	bf3c      	itt	cc
   b425e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4262:	bd30      	popcc	{r4, r5, pc}
   b4264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4270:	f04f 0000 	mov.w	r0, #0
   b4274:	bd30      	pop	{r4, r5, pc}
   b4276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427a:	bf1a      	itte	ne
   b427c:	4619      	movne	r1, r3
   b427e:	4610      	movne	r0, r2
   b4280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4284:	bf1c      	itt	ne
   b4286:	460b      	movne	r3, r1
   b4288:	4602      	movne	r2, r0
   b428a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b428e:	bf06      	itte	eq
   b4290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4294:	ea91 0f03 	teqeq	r1, r3
   b4298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b429c:	bd30      	pop	{r4, r5, pc}
   b429e:	bf00      	nop

000b42a0 <__aeabi_ui2d>:
   b42a0:	f090 0f00 	teq	r0, #0
   b42a4:	bf04      	itt	eq
   b42a6:	2100      	moveq	r1, #0
   b42a8:	4770      	bxeq	lr
   b42aa:	b530      	push	{r4, r5, lr}
   b42ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b4:	f04f 0500 	mov.w	r5, #0
   b42b8:	f04f 0100 	mov.w	r1, #0
   b42bc:	e750      	b.n	b4160 <__adddf3+0x138>
   b42be:	bf00      	nop

000b42c0 <__aeabi_i2d>:
   b42c0:	f090 0f00 	teq	r0, #0
   b42c4:	bf04      	itt	eq
   b42c6:	2100      	moveq	r1, #0
   b42c8:	4770      	bxeq	lr
   b42ca:	b530      	push	{r4, r5, lr}
   b42cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42d8:	bf48      	it	mi
   b42da:	4240      	negmi	r0, r0
   b42dc:	f04f 0100 	mov.w	r1, #0
   b42e0:	e73e      	b.n	b4160 <__adddf3+0x138>
   b42e2:	bf00      	nop

000b42e4 <__aeabi_f2d>:
   b42e4:	0042      	lsls	r2, r0, #1
   b42e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b42ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f2:	bf1f      	itttt	ne
   b42f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b42fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4300:	4770      	bxne	lr
   b4302:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b4306:	bf08      	it	eq
   b4308:	4770      	bxeq	lr
   b430a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b430e:	bf04      	itt	eq
   b4310:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4314:	4770      	bxeq	lr
   b4316:	b530      	push	{r4, r5, lr}
   b4318:	f44f 7460 	mov.w	r4, #896	; 0x380
   b431c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4324:	e71c      	b.n	b4160 <__adddf3+0x138>
   b4326:	bf00      	nop

000b4328 <__aeabi_ul2d>:
   b4328:	ea50 0201 	orrs.w	r2, r0, r1
   b432c:	bf08      	it	eq
   b432e:	4770      	bxeq	lr
   b4330:	b530      	push	{r4, r5, lr}
   b4332:	f04f 0500 	mov.w	r5, #0
   b4336:	e00a      	b.n	b434e <__aeabi_l2d+0x16>

000b4338 <__aeabi_l2d>:
   b4338:	ea50 0201 	orrs.w	r2, r0, r1
   b433c:	bf08      	it	eq
   b433e:	4770      	bxeq	lr
   b4340:	b530      	push	{r4, r5, lr}
   b4342:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b4346:	d502      	bpl.n	b434e <__aeabi_l2d+0x16>
   b4348:	4240      	negs	r0, r0
   b434a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b434e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4352:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b4356:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435a:	f43f aed8 	beq.w	b410e <__adddf3+0xe6>
   b435e:	f04f 0203 	mov.w	r2, #3
   b4362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4366:	bf18      	it	ne
   b4368:	3203      	addne	r2, #3
   b436a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436e:	bf18      	it	ne
   b4370:	3203      	addne	r2, #3
   b4372:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b4376:	f1c2 0320 	rsb	r3, r2, #32
   b437a:	fa00 fc03 	lsl.w	ip, r0, r3
   b437e:	fa20 f002 	lsr.w	r0, r0, r2
   b4382:	fa01 fe03 	lsl.w	lr, r1, r3
   b4386:	ea40 000e 	orr.w	r0, r0, lr
   b438a:	fa21 f102 	lsr.w	r1, r1, r2
   b438e:	4414      	add	r4, r2
   b4390:	e6bd      	b.n	b410e <__adddf3+0xe6>
   b4392:	bf00      	nop

000b4394 <__aeabi_dmul>:
   b4394:	b570      	push	{r4, r5, r6, lr}
   b4396:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b439e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a2:	bf1d      	ittte	ne
   b43a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43a8:	ea94 0f0c 	teqne	r4, ip
   b43ac:	ea95 0f0c 	teqne	r5, ip
   b43b0:	f000 f8de 	bleq	b4570 <__aeabi_dmul+0x1dc>
   b43b4:	442c      	add	r4, r5
   b43b6:	ea81 0603 	eor.w	r6, r1, r3
   b43ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43c6:	bf18      	it	ne
   b43c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d4:	d038      	beq.n	b4448 <__aeabi_dmul+0xb4>
   b43d6:	fba0 ce02 	umull	ip, lr, r0, r2
   b43da:	f04f 0500 	mov.w	r5, #0
   b43de:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ea:	f04f 0600 	mov.w	r6, #0
   b43ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f2:	f09c 0f00 	teq	ip, #0
   b43f6:	bf18      	it	ne
   b43f8:	f04e 0e01 	orrne.w	lr, lr, #1
   b43fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4400:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4404:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b4408:	d204      	bcs.n	b4414 <__aeabi_dmul+0x80>
   b440a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b440e:	416d      	adcs	r5, r5
   b4410:	eb46 0606 	adc.w	r6, r6, r6
   b4414:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b4418:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b441c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4420:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4424:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b4428:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b442c:	bf88      	it	hi
   b442e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4432:	d81e      	bhi.n	b4472 <__aeabi_dmul+0xde>
   b4434:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b4438:	bf08      	it	eq
   b443a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b443e:	f150 0000 	adcs.w	r0, r0, #0
   b4442:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4446:	bd70      	pop	{r4, r5, r6, pc}
   b4448:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b444c:	ea46 0101 	orr.w	r1, r6, r1
   b4450:	ea40 0002 	orr.w	r0, r0, r2
   b4454:	ea81 0103 	eor.w	r1, r1, r3
   b4458:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b445c:	bfc2      	ittt	gt
   b445e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4462:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4466:	bd70      	popgt	{r4, r5, r6, pc}
   b4468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b446c:	f04f 0e00 	mov.w	lr, #0
   b4470:	3c01      	subs	r4, #1
   b4472:	f300 80ab 	bgt.w	b45cc <__aeabi_dmul+0x238>
   b4476:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447a:	bfde      	ittt	le
   b447c:	2000      	movle	r0, #0
   b447e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4482:	bd70      	pople	{r4, r5, r6, pc}
   b4484:	f1c4 0400 	rsb	r4, r4, #0
   b4488:	3c20      	subs	r4, #32
   b448a:	da35      	bge.n	b44f8 <__aeabi_dmul+0x164>
   b448c:	340c      	adds	r4, #12
   b448e:	dc1b      	bgt.n	b44c8 <__aeabi_dmul+0x134>
   b4490:	f104 0414 	add.w	r4, r4, #20
   b4494:	f1c4 0520 	rsb	r5, r4, #32
   b4498:	fa00 f305 	lsl.w	r3, r0, r5
   b449c:	fa20 f004 	lsr.w	r0, r0, r4
   b44a0:	fa01 f205 	lsl.w	r2, r1, r5
   b44a4:	ea40 0002 	orr.w	r0, r0, r2
   b44a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b4:	fa21 f604 	lsr.w	r6, r1, r4
   b44b8:	eb42 0106 	adc.w	r1, r2, r6
   b44bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c0:	bf08      	it	eq
   b44c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44c6:	bd70      	pop	{r4, r5, r6, pc}
   b44c8:	f1c4 040c 	rsb	r4, r4, #12
   b44cc:	f1c4 0520 	rsb	r5, r4, #32
   b44d0:	fa00 f304 	lsl.w	r3, r0, r4
   b44d4:	fa20 f005 	lsr.w	r0, r0, r5
   b44d8:	fa01 f204 	lsl.w	r2, r1, r4
   b44dc:	ea40 0002 	orr.w	r0, r0, r2
   b44e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44e8:	f141 0100 	adc.w	r1, r1, #0
   b44ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f0:	bf08      	it	eq
   b44f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44f6:	bd70      	pop	{r4, r5, r6, pc}
   b44f8:	f1c4 0520 	rsb	r5, r4, #32
   b44fc:	fa00 f205 	lsl.w	r2, r0, r5
   b4500:	ea4e 0e02 	orr.w	lr, lr, r2
   b4504:	fa20 f304 	lsr.w	r3, r0, r4
   b4508:	fa01 f205 	lsl.w	r2, r1, r5
   b450c:	ea43 0302 	orr.w	r3, r3, r2
   b4510:	fa21 f004 	lsr.w	r0, r1, r4
   b4514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4518:	fa21 f204 	lsr.w	r2, r1, r4
   b451c:	ea20 0002 	bic.w	r0, r0, r2
   b4520:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4524:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b4528:	bf08      	it	eq
   b452a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b452e:	bd70      	pop	{r4, r5, r6, pc}
   b4530:	f094 0f00 	teq	r4, #0
   b4534:	d10f      	bne.n	b4556 <__aeabi_dmul+0x1c2>
   b4536:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453a:	0040      	lsls	r0, r0, #1
   b453c:	eb41 0101 	adc.w	r1, r1, r1
   b4540:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4544:	bf08      	it	eq
   b4546:	3c01      	subeq	r4, #1
   b4548:	d0f7      	beq.n	b453a <__aeabi_dmul+0x1a6>
   b454a:	ea41 0106 	orr.w	r1, r1, r6
   b454e:	f095 0f00 	teq	r5, #0
   b4552:	bf18      	it	ne
   b4554:	4770      	bxne	lr
   b4556:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455a:	0052      	lsls	r2, r2, #1
   b455c:	eb43 0303 	adc.w	r3, r3, r3
   b4560:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4564:	bf08      	it	eq
   b4566:	3d01      	subeq	r5, #1
   b4568:	d0f7      	beq.n	b455a <__aeabi_dmul+0x1c6>
   b456a:	ea43 0306 	orr.w	r3, r3, r6
   b456e:	4770      	bx	lr
   b4570:	ea94 0f0c 	teq	r4, ip
   b4574:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b4578:	bf18      	it	ne
   b457a:	ea95 0f0c 	teqne	r5, ip
   b457e:	d00c      	beq.n	b459a <__aeabi_dmul+0x206>
   b4580:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4584:	bf18      	it	ne
   b4586:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458a:	d1d1      	bne.n	b4530 <__aeabi_dmul+0x19c>
   b458c:	ea81 0103 	eor.w	r1, r1, r3
   b4590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4594:	f04f 0000 	mov.w	r0, #0
   b4598:	bd70      	pop	{r4, r5, r6, pc}
   b459a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b459e:	bf06      	itte	eq
   b45a0:	4610      	moveq	r0, r2
   b45a2:	4619      	moveq	r1, r3
   b45a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45a8:	d019      	beq.n	b45de <__aeabi_dmul+0x24a>
   b45aa:	ea94 0f0c 	teq	r4, ip
   b45ae:	d102      	bne.n	b45b6 <__aeabi_dmul+0x222>
   b45b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b4:	d113      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45b6:	ea95 0f0c 	teq	r5, ip
   b45ba:	d105      	bne.n	b45c8 <__aeabi_dmul+0x234>
   b45bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c0:	bf1c      	itt	ne
   b45c2:	4610      	movne	r0, r2
   b45c4:	4619      	movne	r1, r3
   b45c6:	d10a      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45c8:	ea81 0103 	eor.w	r1, r1, r3
   b45cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45d8:	f04f 0000 	mov.w	r0, #0
   b45dc:	bd70      	pop	{r4, r5, r6, pc}
   b45de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45e6:	bd70      	pop	{r4, r5, r6, pc}

000b45e8 <__aeabi_ddiv>:
   b45e8:	b570      	push	{r4, r5, r6, lr}
   b45ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45f6:	bf1d      	ittte	ne
   b45f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b45fc:	ea94 0f0c 	teqne	r4, ip
   b4600:	ea95 0f0c 	teqne	r5, ip
   b4604:	f000 f8a7 	bleq	b4756 <__aeabi_ddiv+0x16e>
   b4608:	eba4 0405 	sub.w	r4, r4, r5
   b460c:	ea81 0e03 	eor.w	lr, r1, r3
   b4610:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4614:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4618:	f000 8088 	beq.w	b472c <__aeabi_ddiv+0x144>
   b461c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4620:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4624:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b4628:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b462c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4630:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4634:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b4638:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b463c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4640:	429d      	cmp	r5, r3
   b4642:	bf08      	it	eq
   b4644:	4296      	cmpeq	r6, r2
   b4646:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b464e:	d202      	bcs.n	b4656 <__aeabi_ddiv+0x6e>
   b4650:	085b      	lsrs	r3, r3, #1
   b4652:	ea4f 0232 	mov.w	r2, r2, rrx
   b4656:	1ab6      	subs	r6, r6, r2
   b4658:	eb65 0503 	sbc.w	r5, r5, r3
   b465c:	085b      	lsrs	r3, r3, #1
   b465e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4662:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b4666:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466a:	ebb6 0e02 	subs.w	lr, r6, r2
   b466e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4672:	bf22      	ittt	cs
   b4674:	1ab6      	subcs	r6, r6, r2
   b4676:	4675      	movcs	r5, lr
   b4678:	ea40 000c 	orrcs.w	r0, r0, ip
   b467c:	085b      	lsrs	r3, r3, #1
   b467e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4682:	ebb6 0e02 	subs.w	lr, r6, r2
   b4686:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468a:	bf22      	ittt	cs
   b468c:	1ab6      	subcs	r6, r6, r2
   b468e:	4675      	movcs	r5, lr
   b4690:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4694:	085b      	lsrs	r3, r3, #1
   b4696:	ea4f 0232 	mov.w	r2, r2, rrx
   b469a:	ebb6 0e02 	subs.w	lr, r6, r2
   b469e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a2:	bf22      	ittt	cs
   b46a4:	1ab6      	subcs	r6, r6, r2
   b46a6:	4675      	movcs	r5, lr
   b46a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46ac:	085b      	lsrs	r3, r3, #1
   b46ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b46b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46ba:	bf22      	ittt	cs
   b46bc:	1ab6      	subcs	r6, r6, r2
   b46be:	4675      	movcs	r5, lr
   b46c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c4:	ea55 0e06 	orrs.w	lr, r5, r6
   b46c8:	d018      	beq.n	b46fc <__aeabi_ddiv+0x114>
   b46ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46e6:	d1c0      	bne.n	b466a <__aeabi_ddiv+0x82>
   b46e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46ec:	d10b      	bne.n	b4706 <__aeabi_ddiv+0x11e>
   b46ee:	ea41 0100 	orr.w	r1, r1, r0
   b46f2:	f04f 0000 	mov.w	r0, #0
   b46f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fa:	e7b6      	b.n	b466a <__aeabi_ddiv+0x82>
   b46fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4700:	bf04      	itt	eq
   b4702:	4301      	orreq	r1, r0
   b4704:	2000      	moveq	r0, #0
   b4706:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470a:	bf88      	it	hi
   b470c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4710:	f63f aeaf 	bhi.w	b4472 <__aeabi_dmul+0xde>
   b4714:	ebb5 0c03 	subs.w	ip, r5, r3
   b4718:	bf04      	itt	eq
   b471a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b471e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4722:	f150 0000 	adcs.w	r0, r0, #0
   b4726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472a:	bd70      	pop	{r4, r5, r6, pc}
   b472c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4730:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4734:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b4738:	bfc2      	ittt	gt
   b473a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b473e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4742:	bd70      	popgt	{r4, r5, r6, pc}
   b4744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4748:	f04f 0e00 	mov.w	lr, #0
   b474c:	3c01      	subs	r4, #1
   b474e:	e690      	b.n	b4472 <__aeabi_dmul+0xde>
   b4750:	ea45 0e06 	orr.w	lr, r5, r6
   b4754:	e68d      	b.n	b4472 <__aeabi_dmul+0xde>
   b4756:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475a:	ea94 0f0c 	teq	r4, ip
   b475e:	bf08      	it	eq
   b4760:	ea95 0f0c 	teqeq	r5, ip
   b4764:	f43f af3b 	beq.w	b45de <__aeabi_dmul+0x24a>
   b4768:	ea94 0f0c 	teq	r4, ip
   b476c:	d10a      	bne.n	b4784 <__aeabi_ddiv+0x19c>
   b476e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4772:	f47f af34 	bne.w	b45de <__aeabi_dmul+0x24a>
   b4776:	ea95 0f0c 	teq	r5, ip
   b477a:	f47f af25 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b477e:	4610      	mov	r0, r2
   b4780:	4619      	mov	r1, r3
   b4782:	e72c      	b.n	b45de <__aeabi_dmul+0x24a>
   b4784:	ea95 0f0c 	teq	r5, ip
   b4788:	d106      	bne.n	b4798 <__aeabi_ddiv+0x1b0>
   b478a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b478e:	f43f aefd 	beq.w	b458c <__aeabi_dmul+0x1f8>
   b4792:	4610      	mov	r0, r2
   b4794:	4619      	mov	r1, r3
   b4796:	e722      	b.n	b45de <__aeabi_dmul+0x24a>
   b4798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b479c:	bf18      	it	ne
   b479e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a2:	f47f aec5 	bne.w	b4530 <__aeabi_dmul+0x19c>
   b47a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47aa:	f47f af0d 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b47ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b2:	f47f aeeb 	bne.w	b458c <__aeabi_dmul+0x1f8>
   b47b6:	e712      	b.n	b45de <__aeabi_dmul+0x24a>

000b47b8 <__gedf2>:
   b47b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47bc:	e006      	b.n	b47cc <__cmpdf2+0x4>
   b47be:	bf00      	nop

000b47c0 <__ledf2>:
   b47c0:	f04f 0c01 	mov.w	ip, #1
   b47c4:	e002      	b.n	b47cc <__cmpdf2+0x4>
   b47c6:	bf00      	nop

000b47c8 <__cmpdf2>:
   b47c8:	f04f 0c01 	mov.w	ip, #1
   b47cc:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47dc:	bf18      	it	ne
   b47de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e2:	d01b      	beq.n	b481c <__cmpdf2+0x54>
   b47e4:	b001      	add	sp, #4
   b47e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ea:	bf0c      	ite	eq
   b47ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f0:	ea91 0f03 	teqne	r1, r3
   b47f4:	bf02      	ittt	eq
   b47f6:	ea90 0f02 	teqeq	r0, r2
   b47fa:	2000      	moveq	r0, #0
   b47fc:	4770      	bxeq	lr
   b47fe:	f110 0f00 	cmn.w	r0, #0
   b4802:	ea91 0f03 	teq	r1, r3
   b4806:	bf58      	it	pl
   b4808:	4299      	cmppl	r1, r3
   b480a:	bf08      	it	eq
   b480c:	4290      	cmpeq	r0, r2
   b480e:	bf2c      	ite	cs
   b4810:	17d8      	asrcs	r0, r3, #31
   b4812:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b4816:	f040 0001 	orr.w	r0, r0, #1
   b481a:	4770      	bx	lr
   b481c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4824:	d102      	bne.n	b482c <__cmpdf2+0x64>
   b4826:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482a:	d107      	bne.n	b483c <__cmpdf2+0x74>
   b482c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4834:	d1d6      	bne.n	b47e4 <__cmpdf2+0x1c>
   b4836:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483a:	d0d3      	beq.n	b47e4 <__cmpdf2+0x1c>
   b483c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4840:	4770      	bx	lr
   b4842:	bf00      	nop

000b4844 <__aeabi_cdrcmple>:
   b4844:	4684      	mov	ip, r0
   b4846:	4610      	mov	r0, r2
   b4848:	4662      	mov	r2, ip
   b484a:	468c      	mov	ip, r1
   b484c:	4619      	mov	r1, r3
   b484e:	4663      	mov	r3, ip
   b4850:	e000      	b.n	b4854 <__aeabi_cdcmpeq>
   b4852:	bf00      	nop

000b4854 <__aeabi_cdcmpeq>:
   b4854:	b501      	push	{r0, lr}
   b4856:	f7ff ffb7 	bl	b47c8 <__cmpdf2>
   b485a:	2800      	cmp	r0, #0
   b485c:	bf48      	it	mi
   b485e:	f110 0f00 	cmnmi.w	r0, #0
   b4862:	bd01      	pop	{r0, pc}

000b4864 <__aeabi_dcmpeq>:
   b4864:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4868:	f7ff fff4 	bl	b4854 <__aeabi_cdcmpeq>
   b486c:	bf0c      	ite	eq
   b486e:	2001      	moveq	r0, #1
   b4870:	2000      	movne	r0, #0
   b4872:	f85d fb08 	ldr.w	pc, [sp], #8
   b4876:	bf00      	nop

000b4878 <__aeabi_dcmplt>:
   b4878:	f84d ed08 	str.w	lr, [sp, #-8]!
   b487c:	f7ff ffea 	bl	b4854 <__aeabi_cdcmpeq>
   b4880:	bf34      	ite	cc
   b4882:	2001      	movcc	r0, #1
   b4884:	2000      	movcs	r0, #0
   b4886:	f85d fb08 	ldr.w	pc, [sp], #8
   b488a:	bf00      	nop

000b488c <__aeabi_dcmple>:
   b488c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4890:	f7ff ffe0 	bl	b4854 <__aeabi_cdcmpeq>
   b4894:	bf94      	ite	ls
   b4896:	2001      	movls	r0, #1
   b4898:	2000      	movhi	r0, #0
   b489a:	f85d fb08 	ldr.w	pc, [sp], #8
   b489e:	bf00      	nop

000b48a0 <__aeabi_dcmpge>:
   b48a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a4:	f7ff ffce 	bl	b4844 <__aeabi_cdrcmple>
   b48a8:	bf94      	ite	ls
   b48aa:	2001      	movls	r0, #1
   b48ac:	2000      	movhi	r0, #0
   b48ae:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b2:	bf00      	nop

000b48b4 <__aeabi_dcmpgt>:
   b48b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48b8:	f7ff ffc4 	bl	b4844 <__aeabi_cdrcmple>
   b48bc:	bf34      	ite	cc
   b48be:	2001      	movcc	r0, #1
   b48c0:	2000      	movcs	r0, #0
   b48c2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48c6:	bf00      	nop

000b48c8 <__aeabi_dcmpun>:
   b48c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d0:	d102      	bne.n	b48d8 <__aeabi_dcmpun+0x10>
   b48d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48d6:	d10a      	bne.n	b48ee <__aeabi_dcmpun+0x26>
   b48d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e0:	d102      	bne.n	b48e8 <__aeabi_dcmpun+0x20>
   b48e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48e6:	d102      	bne.n	b48ee <__aeabi_dcmpun+0x26>
   b48e8:	f04f 0000 	mov.w	r0, #0
   b48ec:	4770      	bx	lr
   b48ee:	f04f 0001 	mov.w	r0, #1
   b48f2:	4770      	bx	lr

000b48f4 <__aeabi_d2iz>:
   b48f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48fc:	d215      	bcs.n	b492a <__aeabi_d2iz+0x36>
   b48fe:	d511      	bpl.n	b4924 <__aeabi_d2iz+0x30>
   b4900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4908:	d912      	bls.n	b4930 <__aeabi_d2iz+0x3c>
   b490a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b490e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b4916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491a:	fa23 f002 	lsr.w	r0, r3, r2
   b491e:	bf18      	it	ne
   b4920:	4240      	negne	r0, r0
   b4922:	4770      	bx	lr
   b4924:	f04f 0000 	mov.w	r0, #0
   b4928:	4770      	bx	lr
   b492a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b492e:	d105      	bne.n	b493c <__aeabi_d2iz+0x48>
   b4930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4934:	bf08      	it	eq
   b4936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493a:	4770      	bx	lr
   b493c:	f04f 0000 	mov.w	r0, #0
   b4940:	4770      	bx	lr
   b4942:	bf00      	nop

000b4944 <__aeabi_d2uiz>:
   b4944:	004a      	lsls	r2, r1, #1
   b4946:	d211      	bcs.n	b496c <__aeabi_d2uiz+0x28>
   b4948:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b494c:	d211      	bcs.n	b4972 <__aeabi_d2uiz+0x2e>
   b494e:	d50d      	bpl.n	b496c <__aeabi_d2uiz+0x28>
   b4950:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4958:	d40e      	bmi.n	b4978 <__aeabi_d2uiz+0x34>
   b495a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b495e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b4966:	fa23 f002 	lsr.w	r0, r3, r2
   b496a:	4770      	bx	lr
   b496c:	f04f 0000 	mov.w	r0, #0
   b4970:	4770      	bx	lr
   b4972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4976:	d102      	bne.n	b497e <__aeabi_d2uiz+0x3a>
   b4978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b497c:	4770      	bx	lr
   b497e:	f04f 0000 	mov.w	r0, #0
   b4982:	4770      	bx	lr

000b4984 <__aeabi_d2f>:
   b4984:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b498c:	bf24      	itt	cs
   b498e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b4996:	d90d      	bls.n	b49b4 <__aeabi_d2f+0x30>
   b4998:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b499c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b49a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b49a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b49a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b49ac:	bf08      	it	eq
   b49ae:	f020 0001 	biceq.w	r0, r0, #1
   b49b2:	4770      	bx	lr
   b49b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b49b8:	d121      	bne.n	b49fe <__aeabi_d2f+0x7a>
   b49ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b49be:	bfbc      	itt	lt
   b49c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b49c4:	4770      	bxlt	lr
   b49c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49ce:	f1c2 0218 	rsb	r2, r2, #24
   b49d2:	f1c2 0c20 	rsb	ip, r2, #32
   b49d6:	fa10 f30c 	lsls.w	r3, r0, ip
   b49da:	fa20 f002 	lsr.w	r0, r0, r2
   b49de:	bf18      	it	ne
   b49e0:	f040 0001 	orrne.w	r0, r0, #1
   b49e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49ec:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49f0:	ea40 000c 	orr.w	r0, r0, ip
   b49f4:	fa23 f302 	lsr.w	r3, r3, r2
   b49f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b49fc:	e7cc      	b.n	b4998 <__aeabi_d2f+0x14>
   b49fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4a02:	d107      	bne.n	b4a14 <__aeabi_d2f+0x90>
   b4a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4a08:	bf1e      	ittt	ne
   b4a0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4a0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4a12:	4770      	bxne	lr
   b4a14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4a18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a20:	4770      	bx	lr
   b4a22:	bf00      	nop

000b4a24 <strcmp>:
   b4a24:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4a28:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4a2c:	2a01      	cmp	r2, #1
   b4a2e:	bf28      	it	cs
   b4a30:	429a      	cmpcs	r2, r3
   b4a32:	d0f7      	beq.n	b4a24 <strcmp>
   b4a34:	1ad0      	subs	r0, r2, r3
   b4a36:	4770      	bx	lr

000b4a38 <strlen>:
   b4a38:	4603      	mov	r3, r0
   b4a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a3e:	2a00      	cmp	r2, #0
   b4a40:	d1fb      	bne.n	b4a3a <strlen+0x2>
   b4a42:	1a18      	subs	r0, r3, r0
   b4a44:	3801      	subs	r0, #1
   b4a46:	4770      	bx	lr

000b4a48 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a48:	4809      	ldr	r0, [pc, #36]	; (b4a70 <module_user_pre_init+0x28>)
   b4a4a:	490a      	ldr	r1, [pc, #40]	; (b4a74 <module_user_pre_init+0x2c>)
   b4a4c:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a4e:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a50:	d005      	beq.n	b4a5e <module_user_pre_init+0x16>
   b4a52:	4a09      	ldr	r2, [pc, #36]	; (b4a78 <module_user_pre_init+0x30>)
   b4a54:	4282      	cmp	r2, r0
   b4a56:	d002      	beq.n	b4a5e <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a58:	1a12      	subs	r2, r2, r0
   b4a5a:	f005 fa39 	bl	b9ed0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4a5e:	4807      	ldr	r0, [pc, #28]	; (b4a7c <module_user_pre_init+0x34>)
   b4a60:	4a07      	ldr	r2, [pc, #28]	; (b4a80 <module_user_pre_init+0x38>)
   b4a62:	2100      	movs	r1, #0
   b4a64:	1a12      	subs	r2, r2, r0
   b4a66:	f005 fa5b 	bl	b9f20 <memset>
    return &link_global_data_start;
}
   b4a6a:	4801      	ldr	r0, [pc, #4]	; (b4a70 <module_user_pre_init+0x28>)
   b4a6c:	bd08      	pop	{r3, pc}
   b4a6e:	bf00      	nop
   b4a70:	2003e530 	.word	0x2003e530
   b4a74:	000baa9c 	.word	0x000baa9c
   b4a78:	2003e5a4 	.word	0x2003e5a4
   b4a7c:	2003e5a8 	.word	0x2003e5a8
   b4a80:	2003e7f4 	.word	0x2003e7f4

000b4a84 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a84:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a86:	4e07      	ldr	r6, [pc, #28]	; (b4aa4 <module_user_init+0x20>)
   b4a88:	4c07      	ldr	r4, [pc, #28]	; (b4aa8 <module_user_init+0x24>)
    module_user_init_hook();
   b4a8a:	f005 f837 	bl	b9afc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a8e:	1ba4      	subs	r4, r4, r6
   b4a90:	08a4      	lsrs	r4, r4, #2
   b4a92:	2500      	movs	r5, #0
   b4a94:	42ac      	cmp	r4, r5
   b4a96:	d100      	bne.n	b4a9a <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a98:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a9a:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a9e:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4aa0:	3501      	adds	r5, #1
   b4aa2:	e7f7      	b.n	b4a94 <module_user_init+0x10>
   b4aa4:	000baa54 	.word	0x000baa54
   b4aa8:	000baa78 	.word	0x000baa78

000b4aac <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4aac:	f000 b89e 	b.w	b4bec <setup>

000b4ab0 <module_user_loop>:
}

void module_user_loop() {
   b4ab0:	b508      	push	{r3, lr}
    loop();
   b4ab2:	f000 f983 	bl	b4dbc <loop>
    _post_loop();
}
   b4ab6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4aba:	f004 bfd7 	b.w	b9a6c <_post_loop>

000b4abe <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4abe:	f000 bce7 	b.w	b5490 <malloc>

000b4ac2 <_Znaj>:
   b4ac2:	f000 bce5 	b.w	b5490 <malloc>

000b4ac6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4ac6:	f000 bceb 	b.w	b54a0 <free>
	...

000b4acc <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4acc:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4ace:	4a03      	ldr	r2, [pc, #12]	; (b4adc <__cxa_pure_virtual+0x10>)
   b4ad0:	4903      	ldr	r1, [pc, #12]	; (b4ae0 <__cxa_pure_virtual+0x14>)
   b4ad2:	200c      	movs	r0, #12
   b4ad4:	f000 fc10 	bl	b52f8 <panic_>
  while (1);
   b4ad8:	e7fe      	b.n	b4ad8 <__cxa_pure_virtual+0xc>
   b4ada:	bf00      	nop
   b4adc:	000b5129 	.word	0x000b5129
   b4ae0:	000ba244 	.word	0x000ba244

000b4ae4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4ae4:	7800      	ldrb	r0, [r0, #0]
   b4ae6:	fab0 f080 	clz	r0, r0
   b4aea:	0940      	lsrs	r0, r0, #5
   b4aec:	4770      	bx	lr

000b4aee <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4aee:	2301      	movs	r3, #1
   b4af0:	7003      	strb	r3, [r0, #0]
   b4af2:	4770      	bx	lr

000b4af4 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b4af4:	4770      	bx	lr
	...

000b4af8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
/*
  Call back function to handle KNESL temperature value on the
  GATT env monitoring service.
*/
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context)
{
   b4af8:	b510      	push	{r4, lr}
  // Check if the received data length is valid
  if (len == 2)
   b4afa:	2902      	cmp	r1, #2
{
   b4afc:	ed2d 8b02 	vpush	{d8}
   b4b00:	460c      	mov	r4, r1
  if (len == 2)
   b4b02:	d11b      	bne.n	b4b3c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
  {
    // Convert the two uint8_t values to a float value
    int16_t rawValue = (data[1] << 8) | data[0];
    float receivedTemp = rawValue / 100.0;
   b4b04:	f9b0 0000 	ldrsh.w	r0, [r0]
   b4b08:	f7ff fbda 	bl	b42c0 <__aeabi_i2d>
   b4b0c:	4b0d      	ldr	r3, [pc, #52]	; (b4b44 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4c>)
   b4b0e:	2200      	movs	r2, #0
   b4b10:	f7ff fd6a 	bl	b45e8 <__aeabi_ddiv>
   b4b14:	f7ff ff36 	bl	b4984 <__aeabi_d2f>
   b4b18:	ee08 0a10 	vmov	s16, r0
    
    // Print the received float value
    Serial.print("Received Temp: ");
   b4b1c:	f004 ff5e 	bl	b99dc <_Z16_fetch_usbserialv>
   b4b20:	4909      	ldr	r1, [pc, #36]	; (b4b48 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x50>)
   b4b22:	f004 fc53 	bl	b93cc <_ZN5Print5printEPKc>
    Serial.println(receivedTemp);
   b4b26:	f004 ff59 	bl	b99dc <_Z16_fetch_usbserialv>
   b4b2a:	eeb0 0a48 	vmov.f32	s0, s16
  }
}
   b4b2e:	ecbd 8b02 	vpop	{d8}
    Serial.println(receivedTemp);
   b4b32:	4621      	mov	r1, r4
}
   b4b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(receivedTemp);
   b4b38:	f004 bd66 	b.w	b9608 <_ZN5Print7printlnEfi>
}
   b4b3c:	ecbd 8b02 	vpop	{d8}
   b4b40:	bd10      	pop	{r4, pc}
   b4b42:	bf00      	nop
   b4b44:	40590000 	.word	0x40590000
   b4b48:	000ba259 	.word	0x000ba259

000b4b4c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4b4c:	4b0a      	ldr	r3, [pc, #40]	; (b4b78 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4b4e:	b510      	push	{r4, lr}
   b4b50:	4604      	mov	r4, r0
   b4b52:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4b54:	f003 fd2c 	bl	b85b0 <_ZN5spark10LogManager8instanceEv>
   b4b58:	4621      	mov	r1, r4
   b4b5a:	f003 ff64 	bl	b8a26 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4b5e:	f004 ff3d 	bl	b99dc <_Z16_fetch_usbserialv>
   b4b62:	f004 ff2f 	bl	b99c4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4b66:	4620      	mov	r0, r4
   b4b68:	4b04      	ldr	r3, [pc, #16]	; (b4b7c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4b6a:	f840 3b04 	str.w	r3, [r0], #4
   b4b6e:	f003 fdf5 	bl	b875c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4b72:	4620      	mov	r0, r4
   b4b74:	bd10      	pop	{r4, pc}
   b4b76:	bf00      	nop
   b4b78:	000ba2dc 	.word	0x000ba2dc
   b4b7c:	000ba2c4 	.word	0x000ba2c4

000b4b80 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4b80:	b510      	push	{r4, lr}
   b4b82:	4604      	mov	r4, r0
    }
   b4b84:	f7ff ffe2 	bl	b4b4c <_ZN5spark16SerialLogHandlerD1Ev>
   b4b88:	4620      	mov	r0, r4
   b4b8a:	2124      	movs	r1, #36	; 0x24
   b4b8c:	f7ff ff9b 	bl	b4ac6 <_ZdlPvj>
   b4b90:	4620      	mov	r0, r4
   b4b92:	bd10      	pop	{r4, pc}

000b4b94 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b4b94:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4b96:	6843      	ldr	r3, [r0, #4]
   b4b98:	3b01      	subs	r3, #1
    {
   b4b9a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4b9c:	6043      	str	r3, [r0, #4]
   b4b9e:	b963      	cbnz	r3, b4bba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b4ba0:	6803      	ldr	r3, [r0, #0]
   b4ba2:	689b      	ldr	r3, [r3, #8]
   b4ba4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4ba6:	68a3      	ldr	r3, [r4, #8]
   b4ba8:	3b01      	subs	r3, #1
   b4baa:	60a3      	str	r3, [r4, #8]
   b4bac:	b92b      	cbnz	r3, b4bba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4bae:	6823      	ldr	r3, [r4, #0]
   b4bb0:	4620      	mov	r0, r4
   b4bb2:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4bb8:	4718      	bx	r3
    }
   b4bba:	bd10      	pop	{r4, pc}

000b4bbc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4bbc:	b40e      	push	{r1, r2, r3}
   b4bbe:	b500      	push	{lr}
   b4bc0:	b08c      	sub	sp, #48	; 0x30
   b4bc2:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4bc4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4bc8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4bcc:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4bce:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4bd2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4bd4:	6801      	ldr	r1, [r0, #0]
   b4bd6:	aa04      	add	r2, sp, #16
   b4bd8:	201e      	movs	r0, #30
    attr.flags = 0;
   b4bda:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4bde:	f000 fb9b 	bl	b5318 <log_message_v>
}
   b4be2:	b00c      	add	sp, #48	; 0x30
   b4be4:	f85d eb04 	ldr.w	lr, [sp], #4
   b4be8:	b003      	add	sp, #12
   b4bea:	4770      	bx	lr

000b4bec <setup>:
void setup() {
   b4bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4bf0:	4956      	ldr	r1, [pc, #344]	; (b4d4c <setup+0x160>)
   b4bf2:	4857      	ldr	r0, [pc, #348]	; (b4d50 <setup+0x164>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4bf4:	4c57      	ldr	r4, [pc, #348]	; (b4d54 <setup+0x168>)
   b4bf6:	b090      	sub	sp, #64	; 0x40
   b4bf8:	2300      	movs	r3, #0
   b4bfa:	2209      	movs	r2, #9
   b4bfc:	f000 fbc8 	bl	b5390 <spark_variable>
  initPowerSource = 3; //this should be USB/ wall power for our design
   b4c00:	4b55      	ldr	r3, [pc, #340]	; (b4d58 <setup+0x16c>)
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4c02:	6860      	ldr	r0, [r4, #4]
   b4c04:	2203      	movs	r2, #3
   b4c06:	601a      	str	r2, [r3, #0]
   b4c08:	2200      	movs	r2, #0
   b4c0a:	4611      	mov	r1, r2
   b4c0c:	f000 fbf8 	bl	b5400 <network_ready>
  if (Cellular.ready()) {
   b4c10:	b1a8      	cbz	r0, b4c3e <setup+0x52>
      CellularSignal sig = Cellular.RSSI();
   b4c12:	4621      	mov	r1, r4
   b4c14:	a808      	add	r0, sp, #32
   b4c16:	f002 ff61 	bl	b7adc <_ZN5spark13CellularClass4RSSIEv>
      cell_sig_str = sig.getStrength();
   b4c1a:	a808      	add	r0, sp, #32
   b4c1c:	f002 ffda 	bl	b7bd4 <_ZNK14CellularSignal11getStrengthEv>
   b4c20:	4b4e      	ldr	r3, [pc, #312]	; (b4d5c <setup+0x170>)
      cell_sig_qual = sig.getQuality();
   b4c22:	a808      	add	r0, sp, #32
      cell_sig_str = sig.getStrength();
   b4c24:	ed83 0a00 	vstr	s0, [r3]
      cell_sig_qual = sig.getQuality();
   b4c28:	f003 f804 	bl	b7c34 <_ZNK14CellularSignal10getQualityEv>
   b4c2c:	4b4c      	ldr	r3, [pc, #304]	; (b4d60 <setup+0x174>)
   b4c2e:	ed83 0a00 	vstr	s0, [r3]
      Serial.begin(9600);
   b4c32:	f004 fed3 	bl	b99dc <_Z16_fetch_usbserialv>
   b4c36:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4c3a:	f004 febf 	bl	b99bc <_ZN9USBSerial5beginEl>
    BLE.on();
   b4c3e:	f001 f941 	bl	b5ec4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c42:	f001 f989 	bl	b5f58 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setDeviceName("KNELL");
   b4c46:	f001 f93d 	bl	b5ec4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c4a:	4946      	ldr	r1, [pc, #280]	; (b4d64 <setup+0x178>)
   b4c4c:	f001 f98b 	bl	b5f66 <_ZNK8particle14BleLocalDevice13setDeviceNameEPKc>
    if(!peer.connected()){
   b4c50:	4845      	ldr	r0, [pc, #276]	; (b4d68 <setup+0x17c>)
   b4c52:	f001 f8a9 	bl	b5da8 <_ZNK8particle13BlePeerDevice9connectedEv>
   b4c56:	4604      	mov	r4, r0
   b4c58:	2800      	cmp	r0, #0
   b4c5a:	d173      	bne.n	b4d44 <setup+0x158>
      Vector<BleScanResult> scanResult = BLE.scan();
   b4c5c:	f001 f932 	bl	b5ec4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c60:	4601      	mov	r1, r0
   b4c62:	a801      	add	r0, sp, #4
   b4c64:	f002 fde2 	bl	b782c <_ZNK8particle14BleLocalDevice4scanEv>
    return true;
}

template<typename T, typename AllocatorT>
inline int spark::Vector<T, AllocatorT>::size() const {
    return size_;
   b4c68:	9a02      	ldr	r2, [sp, #8]
        if (scanResult.size()) {
   b4c6a:	2a00      	cmp	r2, #0
   b4c6c:	d058      	beq.n	b4d20 <setup+0x134>
          Log.info("%d devices found", scanResult.size());
   b4c6e:	493f      	ldr	r1, [pc, #252]	; (b4d6c <setup+0x180>)
   b4c70:	483f      	ldr	r0, [pc, #252]	; (b4d70 <setup+0x184>)
            if (scanResult[ii].address().toString() == DEVICE_ADDRESS.toString()) {
   b4c72:	f8df 8114 	ldr.w	r8, [pc, #276]	; b4d88 <setup+0x19c>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4c76:	4e3c      	ldr	r6, [pc, #240]	; (b4d68 <setup+0x17c>)
          Log.info("%d devices found", scanResult.size());
   b4c78:	f7ff ffa0 	bl	b4bbc <_ZNK5spark6Logger4infoEPKcz>
          for (int ii = 0; ii < scanResult.size(); ii++) {
   b4c7c:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
   b4c80:	429c      	cmp	r4, r3
   b4c82:	da4d      	bge.n	b4d20 <setup+0x134>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::operator[](int i) {
   b4c84:	2524      	movs	r5, #36	; 0x24
   b4c86:	4365      	muls	r5, r4
            if (scanResult[ii].address().toString() == DEVICE_ADDRESS.toString()) {
   b4c88:	2200      	movs	r2, #0
   b4c8a:	4429      	add	r1, r5
   b4c8c:	a804      	add	r0, sp, #16
   b4c8e:	f000 fe51 	bl	b5934 <_ZNK8particle10BleAddress8toStringEb>
   b4c92:	2200      	movs	r2, #0
   b4c94:	4641      	mov	r1, r8
   b4c96:	a808      	add	r0, sp, #32
   b4c98:	f000 fe4c 	bl	b5934 <_ZNK8particle10BleAddress8toStringEb>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4c9c:	a908      	add	r1, sp, #32
   b4c9e:	a804      	add	r0, sp, #16
   b4ca0:	f004 fdb5 	bl	b980e <_ZNK6String6equalsERKS_>
   b4ca4:	4607      	mov	r7, r0
   b4ca6:	a808      	add	r0, sp, #32
   b4ca8:	f004 fcc4 	bl	b9634 <_ZN6StringD1Ev>
   b4cac:	a804      	add	r0, sp, #16
   b4cae:	f004 fcc1 	bl	b9634 <_ZN6StringD1Ev>
   b4cb2:	2f00      	cmp	r7, #0
   b4cb4:	d032      	beq.n	b4d1c <setup+0x130>
              Serial.println("address found.");
   b4cb6:	f004 fe91 	bl	b99dc <_Z16_fetch_usbserialv>
   b4cba:	492e      	ldr	r1, [pc, #184]	; (b4d74 <setup+0x188>)
   b4cbc:	f004 fb99 	bl	b93f2 <_ZN5Print7printlnEPKc>
              peer = BLE.connect(scanResult[ii].address());
   b4cc0:	f001 f900 	bl	b5ec4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4cc4:	9a01      	ldr	r2, [sp, #4]
   b4cc6:	4601      	mov	r1, r0
   b4cc8:	2301      	movs	r3, #1
   b4cca:	442a      	add	r2, r5
   b4ccc:	a808      	add	r0, sp, #32
   b4cce:	f002 fc2d 	bl	b752c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b4cd2:	9b08      	ldr	r3, [sp, #32]
   b4cd4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b4cd6:	6033      	str	r3, [r6, #0]
	if (__tmp != _M_pi)
   b4cd8:	6873      	ldr	r3, [r6, #4]
   b4cda:	429d      	cmp	r5, r3
   b4cdc:	d008      	beq.n	b4cf0 <setup+0x104>
	    if (__tmp != 0)
   b4cde:	b115      	cbz	r5, b4ce6 <setup+0xfa>
    { ++_M_use_count; }
   b4ce0:	686b      	ldr	r3, [r5, #4]
   b4ce2:	3301      	adds	r3, #1
   b4ce4:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b4ce6:	6870      	ldr	r0, [r6, #4]
   b4ce8:	b108      	cbz	r0, b4cee <setup+0x102>
	      _M_pi->_M_release();
   b4cea:	f7ff ff53 	bl	b4b94 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b4cee:	6075      	str	r5, [r6, #4]
   b4cf0:	a808      	add	r0, sp, #32
   b4cf2:	f001 fa04 	bl	b60fe <_ZN8particle13BlePeerDeviceD1Ev>
              if (peer.connected()) {
   b4cf6:	4630      	mov	r0, r6
   b4cf8:	f001 f856 	bl	b5da8 <_ZNK8particle13BlePeerDevice9connectedEv>
   b4cfc:	b170      	cbz	r0, b4d1c <setup+0x130>
                Serial.println("CONNECTED.");
   b4cfe:	f004 fe6d 	bl	b99dc <_Z16_fetch_usbserialv>
   b4d02:	491d      	ldr	r1, [pc, #116]	; (b4d78 <setup+0x18c>)
   b4d04:	f004 fb75 	bl	b93f2 <_ZN5Print7printlnEPKc>
                peer.getCharacteristicByUUID(peerTempCharacteristic, tempUUID);
   b4d08:	4a1c      	ldr	r2, [pc, #112]	; (b4d7c <setup+0x190>)
   b4d0a:	491d      	ldr	r1, [pc, #116]	; (b4d80 <setup+0x194>)
   b4d0c:	4630      	mov	r0, r6
   b4d0e:	f002 f8a0 	bl	b6e52 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                peerTempCharacteristic.onDataReceived(onDataReceived);
   b4d12:	491c      	ldr	r1, [pc, #112]	; (b4d84 <setup+0x198>)
   b4d14:	481a      	ldr	r0, [pc, #104]	; (b4d80 <setup+0x194>)
   b4d16:	2200      	movs	r2, #0
   b4d18:	f002 f8c5 	bl	b6ea6 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
          for (int ii = 0; ii < scanResult.size(); ii++) {
   b4d1c:	3401      	adds	r4, #1
   b4d1e:	e7ad      	b.n	b4c7c <setup+0x90>
    destruct(data_, data_ + size_);
   b4d20:	e9dd 4301 	ldrd	r4, r3, [sp, #4]
   b4d24:	2524      	movs	r5, #36	; 0x24
   b4d26:	fb05 4503 	mla	r5, r5, r3, r4
        for (; p != end; ++p) {
   b4d2a:	42a5      	cmp	r5, r4
   b4d2c:	d007      	beq.n	b4d3e <setup+0x152>
    ::free(ptr);
   b4d2e:	6960      	ldr	r0, [r4, #20]
   b4d30:	f000 fbb6 	bl	b54a0 <free>
   b4d34:	68a0      	ldr	r0, [r4, #8]
   b4d36:	f000 fbb3 	bl	b54a0 <free>
        for (; p != end; ++p) {
   b4d3a:	3424      	adds	r4, #36	; 0x24
   b4d3c:	e7f5      	b.n	b4d2a <setup+0x13e>
    ::free(ptr);
   b4d3e:	9801      	ldr	r0, [sp, #4]
   b4d40:	f000 fbae 	bl	b54a0 <free>
}
   b4d44:	b010      	add	sp, #64	; 0x40
   b4d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4d4a:	bf00      	nop
   b4d4c:	2003e5e8 	.word	0x2003e5e8
   b4d50:	000ba269 	.word	0x000ba269
   b4d54:	2003e670 	.word	0x2003e670
   b4d58:	2003e600 	.word	0x2003e600
   b4d5c:	2003e5f4 	.word	0x2003e5f4
   b4d60:	2003e5f0 	.word	0x2003e5f0
   b4d64:	000ba279 	.word	0x000ba279
   b4d68:	2003e62c 	.word	0x2003e62c
   b4d6c:	000ba27f 	.word	0x000ba27f
   b4d70:	2003e6b4 	.word	0x2003e6b4
   b4d74:	000ba290 	.word	0x000ba290
   b4d78:	000ba29f 	.word	0x000ba29f
   b4d7c:	2003e5d4 	.word	0x2003e5d4
   b4d80:	2003e63c 	.word	0x2003e63c
   b4d84:	000b4af9 	.word	0x000b4af9
   b4d88:	2003e5b4 	.word	0x2003e5b4

000b4d8c <_Z19check_day_time_syncv>:
void check_day_time_sync() {
   b4d8c:	b510      	push	{r4, lr}
  if (millis() - lastSync > ONE_DAY_MILLIS) {
   b4d8e:	4c09      	ldr	r4, [pc, #36]	; (b4db4 <_Z19check_day_time_syncv+0x28>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4d90:	f000 f9d2 	bl	b5138 <HAL_Timer_Get_Milli_Seconds>
   b4d94:	6823      	ldr	r3, [r4, #0]
   b4d96:	1ac0      	subs	r0, r0, r3
   b4d98:	4b07      	ldr	r3, [pc, #28]	; (b4db8 <_Z19check_day_time_syncv+0x2c>)
   b4d9a:	4298      	cmp	r0, r3
   b4d9c:	d908      	bls.n	b4db0 <_Z19check_day_time_syncv+0x24>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4d9e:	f000 faff 	bl	b53a0 <spark_cloud_flag_connected>
        if (!connected()) {
   b4da2:	b110      	cbz	r0, b4daa <_Z19check_day_time_syncv+0x1e>
        return spark_sync_time(NULL);
   b4da4:	2000      	movs	r0, #0
   b4da6:	f000 fb03 	bl	b53b0 <spark_sync_time>
   b4daa:	f000 f9c5 	bl	b5138 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   b4dae:	6020      	str	r0, [r4, #0]
}
   b4db0:	bd10      	pop	{r4, pc}
   b4db2:	bf00      	nop
   b4db4:	2003e604 	.word	0x2003e604
   b4db8:	05265c00 	.word	0x05265c00

000b4dbc <loop>:
  check_day_time_sync();
   b4dbc:	f7ff bfe6 	b.w	b4d8c <_Z19check_day_time_syncv>

000b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4dc0:	b510      	push	{r4, lr}
   b4dc2:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b4dc4:	6800      	ldr	r0, [r0, #0]
   b4dc6:	b108      	cbz	r0, b4dcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b4dc8:	f7ff fee4 	bl	b4b94 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b4dcc:	4620      	mov	r0, r4
   b4dce:	bd10      	pop	{r4, pc}

000b4dd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4dd0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4dd2:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4dd6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4dd8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4dda:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4dde:	42ae      	cmp	r6, r5
   b4de0:	d004      	beq.n	b4dec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4de2:	4628      	mov	r0, r5
   b4de4:	f004 fc26 	bl	b9634 <_ZN6StringD1Ev>
   b4de8:	3514      	adds	r5, #20
   b4dea:	e7f8      	b.n	b4dde <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4dec:	6820      	ldr	r0, [r4, #0]
   b4dee:	f000 fb57 	bl	b54a0 <free>
}
   b4df2:	4620      	mov	r0, r4
   b4df4:	bd70      	pop	{r4, r5, r6, pc}

000b4df6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4df6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4dfa:	4604      	mov	r4, r0
   b4dfc:	460d      	mov	r5, r1
   b4dfe:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4e00:	d916      	bls.n	b4e30 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4e02:	4290      	cmp	r0, r2
   b4e04:	d215      	bcs.n	b4e32 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4e06:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4e0a:	1a75      	subs	r5, r6, r1
   b4e0c:	f1a1 0714 	sub.w	r7, r1, #20
   b4e10:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4e12:	42b7      	cmp	r7, r6
   b4e14:	d01c      	beq.n	b4e50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4e16:	b12c      	cbz	r4, b4e24 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4e18:	4631      	mov	r1, r6
   b4e1a:	4620      	mov	r0, r4
   b4e1c:	f004 fc87 	bl	b972e <_ZN6StringC1EOS_>
   b4e20:	7c33      	ldrb	r3, [r6, #16]
   b4e22:	7423      	strb	r3, [r4, #16]
   b4e24:	4630      	mov	r0, r6
   b4e26:	f004 fc05 	bl	b9634 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4e2a:	3e14      	subs	r6, #20
   b4e2c:	3c14      	subs	r4, #20
   b4e2e:	e7f0      	b.n	b4e12 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4e30:	d00e      	beq.n	b4e50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4e32:	42b5      	cmp	r5, r6
   b4e34:	d00c      	beq.n	b4e50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4e36:	b12c      	cbz	r4, b4e44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4e38:	4629      	mov	r1, r5
   b4e3a:	4620      	mov	r0, r4
   b4e3c:	f004 fc77 	bl	b972e <_ZN6StringC1EOS_>
   b4e40:	7c2b      	ldrb	r3, [r5, #16]
   b4e42:	7423      	strb	r3, [r4, #16]
   b4e44:	4628      	mov	r0, r5
   b4e46:	f004 fbf5 	bl	b9634 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4e4a:	3514      	adds	r5, #20
   b4e4c:	3414      	adds	r4, #20
   b4e4e:	e7f0      	b.n	b4e32 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e52 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4e56:	2300      	movs	r3, #0
   b4e58:	e9c0 3300 	strd	r3, r3, [r0]
   b4e5c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4e5e:	684f      	ldr	r7, [r1, #4]
   b4e60:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4e62:	4604      	mov	r4, r0
   b4e64:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4e66:	dd23      	ble.n	b4eb0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4e68:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4e6c:	fb08 f007 	mul.w	r0, r8, r7
   b4e70:	f000 fb0e 	bl	b5490 <malloc>
            if (!d) {
   b4e74:	4605      	mov	r5, r0
   b4e76:	b1d8      	cbz	r0, b4eb0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4e78:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4e7c:	fb08 1202 	mla	r2, r8, r2, r1
   b4e80:	f7ff ffb9 	bl	b4df6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4e84:	6820      	ldr	r0, [r4, #0]
   b4e86:	f000 fb0b 	bl	b54a0 <free>
        data_ = d;
   b4e8a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4e8c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4e8e:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4e92:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4e96:	45b8      	cmp	r8, r7
   b4e98:	d008      	beq.n	b4eac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4e9a:	4639      	mov	r1, r7
   b4e9c:	4628      	mov	r0, r5
   b4e9e:	f004 fc60 	bl	b9762 <_ZN6StringC1ERKS_>
   b4ea2:	7c3b      	ldrb	r3, [r7, #16]
   b4ea4:	742b      	strb	r3, [r5, #16]
   b4ea6:	3714      	adds	r7, #20
   b4ea8:	3514      	adds	r5, #20
   b4eaa:	e7f4      	b.n	b4e96 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4eac:	6873      	ldr	r3, [r6, #4]
   b4eae:	6063      	str	r3, [r4, #4]
}
   b4eb0:	4620      	mov	r0, r4
   b4eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4eb8 <_GLOBAL__sub_I_SystemMode>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4eb8:	4b3b      	ldr	r3, [pc, #236]	; (b4fa8 <_GLOBAL__sub_I_SystemMode+0xf0>)
   while(!tst_success) {
        // get here if event publish did not work, reattempt
        tst_success = Particle.publish("dev_events", test_status, PRIVATE, WITH_ACK);
      }

}
   b4eba:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4ebc:	2501      	movs	r5, #1
   b4ebe:	701d      	strb	r5, [r3, #0]
   b4ec0:	4b3a      	ldr	r3, [pc, #232]	; (b4fac <_GLOBAL__sub_I_SystemMode+0xf4>)
   b4ec2:	2208      	movs	r2, #8
   b4ec4:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4ec6:	4b3a      	ldr	r3, [pc, #232]	; (b4fb0 <_GLOBAL__sub_I_SystemMode+0xf8>)
    SleepResult() {}
   b4ec8:	4a3a      	ldr	r2, [pc, #232]	; (b4fb4 <_GLOBAL__sub_I_SystemMode+0xfc>)
   b4eca:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4ecc:	2400      	movs	r4, #0
   b4ece:	b08d      	sub	sp, #52	; 0x34
   b4ed0:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4ed4:	4628      	mov	r0, r5
   b4ed6:	f000 fa37 	bl	b5348 <set_system_mode>
SYSTEM_THREAD(ENABLED); // handles data/ cloud messaging in a seperate thread from our setup() and loop()
   b4eda:	4621      	mov	r1, r4
   b4edc:	4628      	mov	r0, r5
   b4ede:	f000 fa3b 	bl	b5358 <system_thread_set_state>
FuelGauge fuel; // fuel object used to access the battery monitoring circuit
   b4ee2:	4621      	mov	r1, r4
   b4ee4:	4834      	ldr	r0, [pc, #208]	; (b4fb8 <_GLOBAL__sub_I_SystemMode+0x100>)
        filter_(level, filters) {
   b4ee6:	4d35      	ldr	r5, [pc, #212]	; (b4fbc <_GLOBAL__sub_I_SystemMode+0x104>)
   b4ee8:	f002 ff2a 	bl	b7d40 <_ZN9FuelGaugeC1Eb>
        capacity_(0) {
   b4eec:	e9cd 4400 	strd	r4, r4, [sp]
   b4ef0:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4ef2:	f004 fd73 	bl	b99dc <_Z16_fetch_usbserialv>
   b4ef6:	4669      	mov	r1, sp
   b4ef8:	4606      	mov	r6, r0
   b4efa:	a803      	add	r0, sp, #12
   b4efc:	f7ff ffa9 	bl	b4e52 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4f00:	462f      	mov	r7, r5
        stream_(&stream) {
   b4f02:	a903      	add	r1, sp, #12
   b4f04:	a806      	add	r0, sp, #24
   b4f06:	f7ff ffa4 	bl	b4e52 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4f0a:	4b2d      	ldr	r3, [pc, #180]	; (b4fc0 <_GLOBAL__sub_I_SystemMode+0x108>)
   b4f0c:	f847 3b04 	str.w	r3, [r7], #4
   b4f10:	a906      	add	r1, sp, #24
   b4f12:	a809      	add	r0, sp, #36	; 0x24
   b4f14:	f7ff ff9d 	bl	b4e52 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4f18:	aa09      	add	r2, sp, #36	; 0x24
   b4f1a:	211e      	movs	r1, #30
   b4f1c:	4638      	mov	r0, r7
   b4f1e:	f003 fe65 	bl	b8bec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4f22:	a809      	add	r0, sp, #36	; 0x24
   b4f24:	f7ff ff54 	bl	b4dd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4f28:	a806      	add	r0, sp, #24
   b4f2a:	f7ff ff51 	bl	b4dd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4f2e:	4b25      	ldr	r3, [pc, #148]	; (b4fc4 <_GLOBAL__sub_I_SystemMode+0x10c>)
   b4f30:	602b      	str	r3, [r5, #0]
   b4f32:	622e      	str	r6, [r5, #32]
   b4f34:	a803      	add	r0, sp, #12
   b4f36:	f7ff ff4b 	bl	b4dd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4f3a:	4b23      	ldr	r3, [pc, #140]	; (b4fc8 <_GLOBAL__sub_I_SystemMode+0x110>)
   b4f3c:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b4f3e:	f004 fd4d 	bl	b99dc <_Z16_fetch_usbserialv>
   b4f42:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4f46:	f004 fd39 	bl	b99bc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4f4a:	f003 fb31 	bl	b85b0 <_ZN5spark10LogManager8instanceEv>
   b4f4e:	4629      	mov	r1, r5
   b4f50:	f003 fd22 	bl	b8998 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b4f54:	4668      	mov	r0, sp
   b4f56:	f7ff ff3b 	bl	b4dd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4f5a:	f000 f8ed 	bl	b5138 <HAL_Timer_Get_Milli_Seconds>
unsigned long lastSync = millis();
   b4f5e:	4b1b      	ldr	r3, [pc, #108]	; (b4fcc <_GLOBAL__sub_I_SystemMode+0x114>)
String powerSourceStr;
   b4f60:	491b      	ldr	r1, [pc, #108]	; (b4fd0 <_GLOBAL__sub_I_SystemMode+0x118>)
unsigned long lastSync = millis();
   b4f62:	6018      	str	r0, [r3, #0]
String powerSourceStr;
   b4f64:	481b      	ldr	r0, [pc, #108]	; (b4fd4 <_GLOBAL__sub_I_SystemMode+0x11c>)
   b4f66:	f004 fbb0 	bl	b96ca <_ZN6StringC1EPK19__FlashStringHelper>
String status;
   b4f6a:	4919      	ldr	r1, [pc, #100]	; (b4fd0 <_GLOBAL__sub_I_SystemMode+0x118>)
   b4f6c:	481a      	ldr	r0, [pc, #104]	; (b4fd8 <_GLOBAL__sub_I_SystemMode+0x120>)
   b4f6e:	f004 fbac 	bl	b96ca <_ZN6StringC1EPK19__FlashStringHelper>
BlePeerDevice peer;
   b4f72:	481a      	ldr	r0, [pc, #104]	; (b4fdc <_GLOBAL__sub_I_SystemMode+0x124>)
   b4f74:	f000 fef6 	bl	b5d64 <_ZN8particle13BlePeerDeviceC1Ev>
const BleUuid envMonitoringService(0x181A);
   b4f78:	f641 011a 	movw	r1, #6170	; 0x181a
   b4f7c:	4818      	ldr	r0, [pc, #96]	; (b4fe0 <_GLOBAL__sub_I_SystemMode+0x128>)
   b4f7e:	f000 fd3a 	bl	b59f6 <_ZN8particle7BleUuidC1Et>
const BleUuid tempUUID(0x2A6E);
   b4f82:	f642 216e 	movw	r1, #10862	; 0x2a6e
   b4f86:	4817      	ldr	r0, [pc, #92]	; (b4fe4 <_GLOBAL__sub_I_SystemMode+0x12c>)
   b4f88:	f000 fd35 	bl	b59f6 <_ZN8particle7BleUuidC1Et>
BleCharacteristic peerTempCharacteristic;
   b4f8c:	4816      	ldr	r0, [pc, #88]	; (b4fe8 <_GLOBAL__sub_I_SystemMode+0x130>)
   b4f8e:	f000 fe6d 	bl	b5c6c <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerBattCharacteristic;
   b4f92:	4816      	ldr	r0, [pc, #88]	; (b4fec <_GLOBAL__sub_I_SystemMode+0x134>)
   b4f94:	f000 fe6a 	bl	b5c6c <_ZN8particle17BleCharacteristicC1Ev>
const BleAddress DEVICE_ADDRESS("F8:A2:E9:EF:04:65");
   b4f98:	4915      	ldr	r1, [pc, #84]	; (b4ff0 <_GLOBAL__sub_I_SystemMode+0x138>)
   b4f9a:	4816      	ldr	r0, [pc, #88]	; (b4ff4 <_GLOBAL__sub_I_SystemMode+0x13c>)
   b4f9c:	4622      	mov	r2, r4
}
   b4f9e:	b00d      	add	sp, #52	; 0x34
   b4fa0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
const BleAddress DEVICE_ADDRESS("F8:A2:E9:EF:04:65");
   b4fa4:	f000 bc38 	b.w	b5818 <_ZN8particle10BleAddressC1EPKcNS_14BleAddressTypeE>
   b4fa8:	2003e5d0 	.word	0x2003e5d0
   b4fac:	2003e5d1 	.word	0x2003e5d1
   b4fb0:	2003e5a8 	.word	0x2003e5a8
   b4fb4:	ffff0000 	.word	0xffff0000
   b4fb8:	2003e5f8 	.word	0x2003e5f8
   b4fbc:	2003e608 	.word	0x2003e608
   b4fc0:	000ba2c4 	.word	0x000ba2c4
   b4fc4:	000ba6d0 	.word	0x000ba6d0
   b4fc8:	000ba2dc 	.word	0x000ba2dc
   b4fcc:	2003e604 	.word	0x2003e604
   b4fd0:	000ba696 	.word	0x000ba696
   b4fd4:	2003e644 	.word	0x2003e644
   b4fd8:	2003e654 	.word	0x2003e654
   b4fdc:	2003e62c 	.word	0x2003e62c
   b4fe0:	2003e5bc 	.word	0x2003e5bc
   b4fe4:	2003e5d4 	.word	0x2003e5d4
   b4fe8:	2003e63c 	.word	0x2003e63c
   b4fec:	2003e634 	.word	0x2003e634
   b4ff0:	000ba2aa 	.word	0x000ba2aa
   b4ff4:	2003e5b4 	.word	0x2003e5b4

000b4ff8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4ff8:	b508      	push	{r3, lr}
   b4ffa:	4b02      	ldr	r3, [pc, #8]	; (b5004 <hal_ble_stack_init+0xc>)
   b4ffc:	681b      	ldr	r3, [r3, #0]
   b4ffe:	689b      	ldr	r3, [r3, #8]
   b5000:	9301      	str	r3, [sp, #4]
   b5002:	bd08      	pop	{r3, pc}
   b5004:	00030278 	.word	0x00030278

000b5008 <hal_ble_gap_set_device_name>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events_deprecated, int(hal_ble_on_generic_evt_cb_deprecated_t, void*, void*))
DYNALIB_FN(6, hal_ble, hal_ble_gap_set_device_address, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
DYNALIB_FN(8, hal_ble, hal_ble_gap_set_device_name, int(const char*, size_t, void*))
   b5008:	b508      	push	{r3, lr}
   b500a:	4b02      	ldr	r3, [pc, #8]	; (b5014 <hal_ble_gap_set_device_name+0xc>)
   b500c:	681b      	ldr	r3, [r3, #0]
   b500e:	6a1b      	ldr	r3, [r3, #32]
   b5010:	9301      	str	r3, [sp, #4]
   b5012:	bd08      	pop	{r3, pc}
   b5014:	00030278 	.word	0x00030278

000b5018 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b5018:	b508      	push	{r3, lr}
   b501a:	4b02      	ldr	r3, [pc, #8]	; (b5024 <hal_ble_gap_start_scan+0xc>)
   b501c:	681b      	ldr	r3, [r3, #0]
   b501e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b5020:	9301      	str	r3, [sp, #4]
   b5022:	bd08      	pop	{r3, pc}
   b5024:	00030278 	.word	0x00030278

000b5028 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b5028:	b508      	push	{r3, lr}
   b502a:	4b03      	ldr	r3, [pc, #12]	; (b5038 <hal_ble_gap_stop_scan+0x10>)
   b502c:	681b      	ldr	r3, [r3, #0]
   b502e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b5032:	9301      	str	r3, [sp, #4]
   b5034:	bd08      	pop	{r3, pc}
   b5036:	0000      	.short	0x0000
   b5038:	00030278 	.word	0x00030278

000b503c <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b503c:	b508      	push	{r3, lr}
   b503e:	4b03      	ldr	r3, [pc, #12]	; (b504c <hal_ble_gap_disconnect+0x10>)
   b5040:	681b      	ldr	r3, [r3, #0]
   b5042:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b5046:	9301      	str	r3, [sp, #4]
   b5048:	bd08      	pop	{r3, pc}
   b504a:	0000      	.short	0x0000
   b504c:	00030278 	.word	0x00030278

000b5050 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b5050:	b508      	push	{r3, lr}
   b5052:	4b03      	ldr	r3, [pc, #12]	; (b5060 <hal_ble_gatt_client_discover_all_services+0x10>)
   b5054:	681b      	ldr	r3, [r3, #0]
   b5056:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b505a:	9301      	str	r3, [sp, #4]
   b505c:	bd08      	pop	{r3, pc}
   b505e:	0000      	.short	0x0000
   b5060:	00030278 	.word	0x00030278

000b5064 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b5064:	b508      	push	{r3, lr}
   b5066:	4b03      	ldr	r3, [pc, #12]	; (b5074 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b5068:	681b      	ldr	r3, [r3, #0]
   b506a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b506e:	9301      	str	r3, [sp, #4]
   b5070:	bd08      	pop	{r3, pc}
   b5072:	0000      	.short	0x0000
   b5074:	00030278 	.word	0x00030278

000b5078 <hal_ble_gatt_client_read>:
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b5078:	b508      	push	{r3, lr}
   b507a:	4b03      	ldr	r3, [pc, #12]	; (b5088 <hal_ble_gatt_client_read+0x10>)
   b507c:	681b      	ldr	r3, [r3, #0]
   b507e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b5082:	9301      	str	r3, [sp, #4]
   b5084:	bd08      	pop	{r3, pc}
   b5086:	0000      	.short	0x0000
   b5088:	00030278 	.word	0x00030278

000b508c <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b508c:	b508      	push	{r3, lr}
   b508e:	4b03      	ldr	r3, [pc, #12]	; (b509c <hal_ble_gap_connect+0x10>)
   b5090:	681b      	ldr	r3, [r3, #0]
   b5092:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b5096:	9301      	str	r3, [sp, #4]
   b5098:	bd08      	pop	{r3, pc}
   b509a:	0000      	.short	0x0000
   b509c:	00030278 	.word	0x00030278

000b50a0 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b50a0:	b508      	push	{r3, lr}
   b50a2:	4b03      	ldr	r3, [pc, #12]	; (b50b0 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b50a4:	681b      	ldr	r3, [r3, #0]
   b50a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b50aa:	9301      	str	r3, [sp, #4]
   b50ac:	bd08      	pop	{r3, pc}
   b50ae:	0000      	.short	0x0000
   b50b0:	00030278 	.word	0x00030278

000b50b4 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b50b4:	b508      	push	{r3, lr}
   b50b6:	4b03      	ldr	r3, [pc, #12]	; (b50c4 <hal_ble_gatt_client_configure_cccd+0x10>)
   b50b8:	681b      	ldr	r3, [r3, #0]
   b50ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b50be:	9301      	str	r3, [sp, #4]
   b50c0:	bd08      	pop	{r3, pc}
   b50c2:	0000      	.short	0x0000
   b50c4:	00030278 	.word	0x00030278

000b50c8 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b50c8:	b508      	push	{r3, lr}
   b50ca:	4b02      	ldr	r3, [pc, #8]	; (b50d4 <cellular_signal+0xc>)
   b50cc:	681b      	ldr	r3, [r3, #0]
   b50ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b50d0:	9301      	str	r3, [sp, #4]
   b50d2:	bd08      	pop	{r3, pc}
   b50d4:	00030274 	.word	0x00030274

000b50d8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b50d8:	b508      	push	{r3, lr}
   b50da:	4b02      	ldr	r3, [pc, #8]	; (b50e4 <os_mutex_recursive_create+0xc>)
   b50dc:	681b      	ldr	r3, [r3, #0]
   b50de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b50e0:	9301      	str	r3, [sp, #4]
   b50e2:	bd08      	pop	{r3, pc}
   b50e4:	00030248 	.word	0x00030248

000b50e8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b50e8:	b508      	push	{r3, lr}
   b50ea:	4b02      	ldr	r3, [pc, #8]	; (b50f4 <os_mutex_recursive_destroy+0xc>)
   b50ec:	681b      	ldr	r3, [r3, #0]
   b50ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b50f0:	9301      	str	r3, [sp, #4]
   b50f2:	bd08      	pop	{r3, pc}
   b50f4:	00030248 	.word	0x00030248

000b50f8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b50f8:	b508      	push	{r3, lr}
   b50fa:	4b02      	ldr	r3, [pc, #8]	; (b5104 <os_mutex_recursive_lock+0xc>)
   b50fc:	681b      	ldr	r3, [r3, #0]
   b50fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5100:	9301      	str	r3, [sp, #4]
   b5102:	bd08      	pop	{r3, pc}
   b5104:	00030248 	.word	0x00030248

000b5108 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5108:	b508      	push	{r3, lr}
   b510a:	4b02      	ldr	r3, [pc, #8]	; (b5114 <os_mutex_recursive_unlock+0xc>)
   b510c:	681b      	ldr	r3, [r3, #0]
   b510e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5110:	9301      	str	r3, [sp, #4]
   b5112:	bd08      	pop	{r3, pc}
   b5114:	00030248 	.word	0x00030248

000b5118 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5118:	b508      	push	{r3, lr}
   b511a:	4b02      	ldr	r3, [pc, #8]	; (b5124 <HAL_RNG_GetRandomNumber+0xc>)
   b511c:	681b      	ldr	r3, [r3, #0]
   b511e:	685b      	ldr	r3, [r3, #4]
   b5120:	9301      	str	r3, [sp, #4]
   b5122:	bd08      	pop	{r3, pc}
   b5124:	00030218 	.word	0x00030218

000b5128 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5128:	b508      	push	{r3, lr}
   b512a:	4b02      	ldr	r3, [pc, #8]	; (b5134 <HAL_Delay_Microseconds+0xc>)
   b512c:	681b      	ldr	r3, [r3, #0]
   b512e:	68db      	ldr	r3, [r3, #12]
   b5130:	9301      	str	r3, [sp, #4]
   b5132:	bd08      	pop	{r3, pc}
   b5134:	00030218 	.word	0x00030218

000b5138 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5138:	b508      	push	{r3, lr}
   b513a:	4b02      	ldr	r3, [pc, #8]	; (b5144 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b513c:	681b      	ldr	r3, [r3, #0]
   b513e:	695b      	ldr	r3, [r3, #20]
   b5140:	9301      	str	r3, [sp, #4]
   b5142:	bd08      	pop	{r3, pc}
   b5144:	00030218 	.word	0x00030218

000b5148 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5148:	b508      	push	{r3, lr}
   b514a:	4b02      	ldr	r3, [pc, #8]	; (b5154 <hal_i2c_write+0xc>)
   b514c:	681b      	ldr	r3, [r3, #0]
   b514e:	6a1b      	ldr	r3, [r3, #32]
   b5150:	9301      	str	r3, [sp, #4]
   b5152:	bd08      	pop	{r3, pc}
   b5154:	00030228 	.word	0x00030228

000b5158 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5158:	b508      	push	{r3, lr}
   b515a:	4b02      	ldr	r3, [pc, #8]	; (b5164 <hal_i2c_available+0xc>)
   b515c:	681b      	ldr	r3, [r3, #0]
   b515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5160:	9301      	str	r3, [sp, #4]
   b5162:	bd08      	pop	{r3, pc}
   b5164:	00030228 	.word	0x00030228

000b5168 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5168:	b508      	push	{r3, lr}
   b516a:	4b02      	ldr	r3, [pc, #8]	; (b5174 <hal_i2c_read+0xc>)
   b516c:	681b      	ldr	r3, [r3, #0]
   b516e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5170:	9301      	str	r3, [sp, #4]
   b5172:	bd08      	pop	{r3, pc}
   b5174:	00030228 	.word	0x00030228

000b5178 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5178:	b508      	push	{r3, lr}
   b517a:	4b02      	ldr	r3, [pc, #8]	; (b5184 <hal_i2c_peek+0xc>)
   b517c:	681b      	ldr	r3, [r3, #0]
   b517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5180:	9301      	str	r3, [sp, #4]
   b5182:	bd08      	pop	{r3, pc}
   b5184:	00030228 	.word	0x00030228

000b5188 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5188:	b508      	push	{r3, lr}
   b518a:	4b02      	ldr	r3, [pc, #8]	; (b5194 <hal_i2c_flush+0xc>)
   b518c:	681b      	ldr	r3, [r3, #0]
   b518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5190:	9301      	str	r3, [sp, #4]
   b5192:	bd08      	pop	{r3, pc}
   b5194:	00030228 	.word	0x00030228

000b5198 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5198:	b508      	push	{r3, lr}
   b519a:	4b02      	ldr	r3, [pc, #8]	; (b51a4 <hal_i2c_init+0xc>)
   b519c:	681b      	ldr	r3, [r3, #0]
   b519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b51a0:	9301      	str	r3, [sp, #4]
   b51a2:	bd08      	pop	{r3, pc}
   b51a4:	00030228 	.word	0x00030228

000b51a8 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b51a8:	b508      	push	{r3, lr}
   b51aa:	4b02      	ldr	r3, [pc, #8]	; (b51b4 <hal_i2c_lock+0xc>)
   b51ac:	681b      	ldr	r3, [r3, #0]
   b51ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b51b0:	9301      	str	r3, [sp, #4]
   b51b2:	bd08      	pop	{r3, pc}
   b51b4:	00030228 	.word	0x00030228

000b51b8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b51b8:	b508      	push	{r3, lr}
   b51ba:	4b02      	ldr	r3, [pc, #8]	; (b51c4 <inet_inet_ntop+0xc>)
   b51bc:	681b      	ldr	r3, [r3, #0]
   b51be:	695b      	ldr	r3, [r3, #20]
   b51c0:	9301      	str	r3, [sp, #4]
   b51c2:	bd08      	pop	{r3, pc}
   b51c4:	00030264 	.word	0x00030264

000b51c8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b51c8:	b508      	push	{r3, lr}
   b51ca:	4b02      	ldr	r3, [pc, #8]	; (b51d4 <netdb_freeaddrinfo+0xc>)
   b51cc:	681b      	ldr	r3, [r3, #0]
   b51ce:	689b      	ldr	r3, [r3, #8]
   b51d0:	9301      	str	r3, [sp, #4]
   b51d2:	bd08      	pop	{r3, pc}
   b51d4:	00030268 	.word	0x00030268

000b51d8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b51d8:	b508      	push	{r3, lr}
   b51da:	4b02      	ldr	r3, [pc, #8]	; (b51e4 <netdb_getaddrinfo+0xc>)
   b51dc:	681b      	ldr	r3, [r3, #0]
   b51de:	68db      	ldr	r3, [r3, #12]
   b51e0:	9301      	str	r3, [sp, #4]
   b51e2:	bd08      	pop	{r3, pc}
   b51e4:	00030268 	.word	0x00030268

000b51e8 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b51e8:	b508      	push	{r3, lr}
   b51ea:	4b02      	ldr	r3, [pc, #8]	; (b51f4 <hal_usart_end+0xc>)
   b51ec:	681b      	ldr	r3, [r3, #0]
   b51ee:	689b      	ldr	r3, [r3, #8]
   b51f0:	9301      	str	r3, [sp, #4]
   b51f2:	bd08      	pop	{r3, pc}
   b51f4:	0003023c 	.word	0x0003023c

000b51f8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b51f8:	b508      	push	{r3, lr}
   b51fa:	4b02      	ldr	r3, [pc, #8]	; (b5204 <hal_usart_write+0xc>)
   b51fc:	681b      	ldr	r3, [r3, #0]
   b51fe:	68db      	ldr	r3, [r3, #12]
   b5200:	9301      	str	r3, [sp, #4]
   b5202:	bd08      	pop	{r3, pc}
   b5204:	0003023c 	.word	0x0003023c

000b5208 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5208:	b508      	push	{r3, lr}
   b520a:	4b02      	ldr	r3, [pc, #8]	; (b5214 <hal_usart_available+0xc>)
   b520c:	681b      	ldr	r3, [r3, #0]
   b520e:	691b      	ldr	r3, [r3, #16]
   b5210:	9301      	str	r3, [sp, #4]
   b5212:	bd08      	pop	{r3, pc}
   b5214:	0003023c 	.word	0x0003023c

000b5218 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5218:	b508      	push	{r3, lr}
   b521a:	4b02      	ldr	r3, [pc, #8]	; (b5224 <hal_usart_read+0xc>)
   b521c:	681b      	ldr	r3, [r3, #0]
   b521e:	695b      	ldr	r3, [r3, #20]
   b5220:	9301      	str	r3, [sp, #4]
   b5222:	bd08      	pop	{r3, pc}
   b5224:	0003023c 	.word	0x0003023c

000b5228 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5228:	b508      	push	{r3, lr}
   b522a:	4b02      	ldr	r3, [pc, #8]	; (b5234 <hal_usart_peek+0xc>)
   b522c:	681b      	ldr	r3, [r3, #0]
   b522e:	699b      	ldr	r3, [r3, #24]
   b5230:	9301      	str	r3, [sp, #4]
   b5232:	bd08      	pop	{r3, pc}
   b5234:	0003023c 	.word	0x0003023c

000b5238 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5238:	b508      	push	{r3, lr}
   b523a:	4b02      	ldr	r3, [pc, #8]	; (b5244 <hal_usart_flush+0xc>)
   b523c:	681b      	ldr	r3, [r3, #0]
   b523e:	69db      	ldr	r3, [r3, #28]
   b5240:	9301      	str	r3, [sp, #4]
   b5242:	bd08      	pop	{r3, pc}
   b5244:	0003023c 	.word	0x0003023c

000b5248 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5248:	b508      	push	{r3, lr}
   b524a:	4b02      	ldr	r3, [pc, #8]	; (b5254 <hal_usart_available_data_for_write+0xc>)
   b524c:	681b      	ldr	r3, [r3, #0]
   b524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5250:	9301      	str	r3, [sp, #4]
   b5252:	bd08      	pop	{r3, pc}
   b5254:	0003023c 	.word	0x0003023c

000b5258 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b5258:	b508      	push	{r3, lr}
   b525a:	4b02      	ldr	r3, [pc, #8]	; (b5264 <hal_usart_begin_config+0xc>)
   b525c:	681b      	ldr	r3, [r3, #0]
   b525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5260:	9301      	str	r3, [sp, #4]
   b5262:	bd08      	pop	{r3, pc}
   b5264:	0003023c 	.word	0x0003023c

000b5268 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5268:	b508      	push	{r3, lr}
   b526a:	4b02      	ldr	r3, [pc, #8]	; (b5274 <hal_usart_init_ex+0xc>)
   b526c:	681b      	ldr	r3, [r3, #0]
   b526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5270:	9301      	str	r3, [sp, #4]
   b5272:	bd08      	pop	{r3, pc}
   b5274:	0003023c 	.word	0x0003023c

000b5278 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5278:	b508      	push	{r3, lr}
   b527a:	4b02      	ldr	r3, [pc, #8]	; (b5284 <HAL_USB_USART_Init+0xc>)
   b527c:	681b      	ldr	r3, [r3, #0]
   b527e:	681b      	ldr	r3, [r3, #0]
   b5280:	9301      	str	r3, [sp, #4]
   b5282:	bd08      	pop	{r3, pc}
   b5284:	0003024c 	.word	0x0003024c

000b5288 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5288:	b508      	push	{r3, lr}
   b528a:	4b02      	ldr	r3, [pc, #8]	; (b5294 <HAL_USB_USART_Begin+0xc>)
   b528c:	681b      	ldr	r3, [r3, #0]
   b528e:	685b      	ldr	r3, [r3, #4]
   b5290:	9301      	str	r3, [sp, #4]
   b5292:	bd08      	pop	{r3, pc}
   b5294:	0003024c 	.word	0x0003024c

000b5298 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b5298:	b508      	push	{r3, lr}
   b529a:	4b02      	ldr	r3, [pc, #8]	; (b52a4 <HAL_USB_USART_End+0xc>)
   b529c:	681b      	ldr	r3, [r3, #0]
   b529e:	689b      	ldr	r3, [r3, #8]
   b52a0:	9301      	str	r3, [sp, #4]
   b52a2:	bd08      	pop	{r3, pc}
   b52a4:	0003024c 	.word	0x0003024c

000b52a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b52a8:	b508      	push	{r3, lr}
   b52aa:	4b02      	ldr	r3, [pc, #8]	; (b52b4 <HAL_USB_USART_Available_Data+0xc>)
   b52ac:	681b      	ldr	r3, [r3, #0]
   b52ae:	691b      	ldr	r3, [r3, #16]
   b52b0:	9301      	str	r3, [sp, #4]
   b52b2:	bd08      	pop	{r3, pc}
   b52b4:	0003024c 	.word	0x0003024c

000b52b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b52b8:	b508      	push	{r3, lr}
   b52ba:	4b02      	ldr	r3, [pc, #8]	; (b52c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b52bc:	681b      	ldr	r3, [r3, #0]
   b52be:	695b      	ldr	r3, [r3, #20]
   b52c0:	9301      	str	r3, [sp, #4]
   b52c2:	bd08      	pop	{r3, pc}
   b52c4:	0003024c 	.word	0x0003024c

000b52c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b52c8:	b508      	push	{r3, lr}
   b52ca:	4b02      	ldr	r3, [pc, #8]	; (b52d4 <HAL_USB_USART_Receive_Data+0xc>)
   b52cc:	681b      	ldr	r3, [r3, #0]
   b52ce:	699b      	ldr	r3, [r3, #24]
   b52d0:	9301      	str	r3, [sp, #4]
   b52d2:	bd08      	pop	{r3, pc}
   b52d4:	0003024c 	.word	0x0003024c

000b52d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b52d8:	b508      	push	{r3, lr}
   b52da:	4b02      	ldr	r3, [pc, #8]	; (b52e4 <HAL_USB_USART_Send_Data+0xc>)
   b52dc:	681b      	ldr	r3, [r3, #0]
   b52de:	69db      	ldr	r3, [r3, #28]
   b52e0:	9301      	str	r3, [sp, #4]
   b52e2:	bd08      	pop	{r3, pc}
   b52e4:	0003024c 	.word	0x0003024c

000b52e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b52e8:	b508      	push	{r3, lr}
   b52ea:	4b02      	ldr	r3, [pc, #8]	; (b52f4 <HAL_USB_USART_Flush_Data+0xc>)
   b52ec:	681b      	ldr	r3, [r3, #0]
   b52ee:	6a1b      	ldr	r3, [r3, #32]
   b52f0:	9301      	str	r3, [sp, #4]
   b52f2:	bd08      	pop	{r3, pc}
   b52f4:	0003024c 	.word	0x0003024c

000b52f8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b52f8:	b508      	push	{r3, lr}
   b52fa:	4b02      	ldr	r3, [pc, #8]	; (b5304 <panic_+0xc>)
   b52fc:	681b      	ldr	r3, [r3, #0]
   b52fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5300:	9301      	str	r3, [sp, #4]
   b5302:	bd08      	pop	{r3, pc}
   b5304:	00030260 	.word	0x00030260

000b5308 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5308:	b508      	push	{r3, lr}
   b530a:	4b02      	ldr	r3, [pc, #8]	; (b5314 <log_message+0xc>)
   b530c:	681b      	ldr	r3, [r3, #0]
   b530e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5310:	9301      	str	r3, [sp, #4]
   b5312:	bd08      	pop	{r3, pc}
   b5314:	00030260 	.word	0x00030260

000b5318 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b5318:	b508      	push	{r3, lr}
   b531a:	4b02      	ldr	r3, [pc, #8]	; (b5324 <log_message_v+0xc>)
   b531c:	681b      	ldr	r3, [r3, #0]
   b531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5320:	9301      	str	r3, [sp, #4]
   b5322:	bd08      	pop	{r3, pc}
   b5324:	00030260 	.word	0x00030260

000b5328 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b5328:	b508      	push	{r3, lr}
   b532a:	4b02      	ldr	r3, [pc, #8]	; (b5334 <log_level_name+0xc>)
   b532c:	681b      	ldr	r3, [r3, #0]
   b532e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b5330:	9301      	str	r3, [sp, #4]
   b5332:	bd08      	pop	{r3, pc}
   b5334:	00030260 	.word	0x00030260

000b5338 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b5338:	b508      	push	{r3, lr}
   b533a:	4b02      	ldr	r3, [pc, #8]	; (b5344 <log_set_callbacks+0xc>)
   b533c:	681b      	ldr	r3, [r3, #0]
   b533e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b5340:	9301      	str	r3, [sp, #4]
   b5342:	bd08      	pop	{r3, pc}
   b5344:	00030260 	.word	0x00030260

000b5348 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5348:	b508      	push	{r3, lr}
   b534a:	4b02      	ldr	r3, [pc, #8]	; (b5354 <set_system_mode+0xc>)
   b534c:	681b      	ldr	r3, [r3, #0]
   b534e:	685b      	ldr	r3, [r3, #4]
   b5350:	9301      	str	r3, [sp, #4]
   b5352:	bd08      	pop	{r3, pc}
   b5354:	00030220 	.word	0x00030220

000b5358 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5358:	b508      	push	{r3, lr}
   b535a:	4b02      	ldr	r3, [pc, #8]	; (b5364 <system_thread_set_state+0xc>)
   b535c:	681b      	ldr	r3, [r3, #0]
   b535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5360:	9301      	str	r3, [sp, #4]
   b5362:	bd08      	pop	{r3, pc}
   b5364:	00030220 	.word	0x00030220

000b5368 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5368:	b508      	push	{r3, lr}
   b536a:	4b03      	ldr	r3, [pc, #12]	; (b5378 <system_ctrl_set_app_request_handler+0x10>)
   b536c:	681b      	ldr	r3, [r3, #0]
   b536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5372:	9301      	str	r3, [sp, #4]
   b5374:	bd08      	pop	{r3, pc}
   b5376:	0000      	.short	0x0000
   b5378:	00030220 	.word	0x00030220

000b537c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b537c:	b508      	push	{r3, lr}
   b537e:	4b03      	ldr	r3, [pc, #12]	; (b538c <system_ctrl_set_result+0x10>)
   b5380:	681b      	ldr	r3, [r3, #0]
   b5382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5386:	9301      	str	r3, [sp, #4]
   b5388:	bd08      	pop	{r3, pc}
   b538a:	0000      	.short	0x0000
   b538c:	00030220 	.word	0x00030220

000b5390 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b5390:	b508      	push	{r3, lr}
   b5392:	4b02      	ldr	r3, [pc, #8]	; (b539c <spark_variable+0xc>)
   b5394:	681b      	ldr	r3, [r3, #0]
   b5396:	681b      	ldr	r3, [r3, #0]
   b5398:	9301      	str	r3, [sp, #4]
   b539a:	bd08      	pop	{r3, pc}
   b539c:	00030244 	.word	0x00030244

000b53a0 <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b53a0:	b508      	push	{r3, lr}
   b53a2:	4b02      	ldr	r3, [pc, #8]	; (b53ac <spark_cloud_flag_connected+0xc>)
   b53a4:	681b      	ldr	r3, [r3, #0]
   b53a6:	695b      	ldr	r3, [r3, #20]
   b53a8:	9301      	str	r3, [sp, #4]
   b53aa:	bd08      	pop	{r3, pc}
   b53ac:	00030244 	.word	0x00030244

000b53b0 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b53b0:	b508      	push	{r3, lr}
   b53b2:	4b02      	ldr	r3, [pc, #8]	; (b53bc <spark_sync_time+0xc>)
   b53b4:	681b      	ldr	r3, [r3, #0]
   b53b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b53b8:	9301      	str	r3, [sp, #4]
   b53ba:	bd08      	pop	{r3, pc}
   b53bc:	00030244 	.word	0x00030244

000b53c0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b53c0:	b508      	push	{r3, lr}
   b53c2:	4b02      	ldr	r3, [pc, #8]	; (b53cc <spark_set_random_seed_from_cloud_handler+0xc>)
   b53c4:	681b      	ldr	r3, [r3, #0]
   b53c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b53c8:	9301      	str	r3, [sp, #4]
   b53ca:	bd08      	pop	{r3, pc}
   b53cc:	00030244 	.word	0x00030244

000b53d0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b53d0:	b508      	push	{r3, lr}
   b53d2:	4b02      	ldr	r3, [pc, #8]	; (b53dc <network_connect+0xc>)
   b53d4:	681b      	ldr	r3, [r3, #0]
   b53d6:	685b      	ldr	r3, [r3, #4]
   b53d8:	9301      	str	r3, [sp, #4]
   b53da:	bd08      	pop	{r3, pc}
   b53dc:	00030240 	.word	0x00030240

000b53e0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b53e0:	b508      	push	{r3, lr}
   b53e2:	4b02      	ldr	r3, [pc, #8]	; (b53ec <network_connecting+0xc>)
   b53e4:	681b      	ldr	r3, [r3, #0]
   b53e6:	689b      	ldr	r3, [r3, #8]
   b53e8:	9301      	str	r3, [sp, #4]
   b53ea:	bd08      	pop	{r3, pc}
   b53ec:	00030240 	.word	0x00030240

000b53f0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b53f0:	b508      	push	{r3, lr}
   b53f2:	4b02      	ldr	r3, [pc, #8]	; (b53fc <network_disconnect+0xc>)
   b53f4:	681b      	ldr	r3, [r3, #0]
   b53f6:	68db      	ldr	r3, [r3, #12]
   b53f8:	9301      	str	r3, [sp, #4]
   b53fa:	bd08      	pop	{r3, pc}
   b53fc:	00030240 	.word	0x00030240

000b5400 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5400:	b508      	push	{r3, lr}
   b5402:	4b02      	ldr	r3, [pc, #8]	; (b540c <network_ready+0xc>)
   b5404:	681b      	ldr	r3, [r3, #0]
   b5406:	691b      	ldr	r3, [r3, #16]
   b5408:	9301      	str	r3, [sp, #4]
   b540a:	bd08      	pop	{r3, pc}
   b540c:	00030240 	.word	0x00030240

000b5410 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5410:	b508      	push	{r3, lr}
   b5412:	4b02      	ldr	r3, [pc, #8]	; (b541c <network_on+0xc>)
   b5414:	681b      	ldr	r3, [r3, #0]
   b5416:	695b      	ldr	r3, [r3, #20]
   b5418:	9301      	str	r3, [sp, #4]
   b541a:	bd08      	pop	{r3, pc}
   b541c:	00030240 	.word	0x00030240

000b5420 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5420:	b508      	push	{r3, lr}
   b5422:	4b02      	ldr	r3, [pc, #8]	; (b542c <network_off+0xc>)
   b5424:	681b      	ldr	r3, [r3, #0]
   b5426:	699b      	ldr	r3, [r3, #24]
   b5428:	9301      	str	r3, [sp, #4]
   b542a:	bd08      	pop	{r3, pc}
   b542c:	00030240 	.word	0x00030240

000b5430 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5430:	b508      	push	{r3, lr}
   b5432:	4b02      	ldr	r3, [pc, #8]	; (b543c <network_listen+0xc>)
   b5434:	681b      	ldr	r3, [r3, #0]
   b5436:	69db      	ldr	r3, [r3, #28]
   b5438:	9301      	str	r3, [sp, #4]
   b543a:	bd08      	pop	{r3, pc}
   b543c:	00030240 	.word	0x00030240

000b5440 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5440:	b508      	push	{r3, lr}
   b5442:	4b02      	ldr	r3, [pc, #8]	; (b544c <network_listening+0xc>)
   b5444:	681b      	ldr	r3, [r3, #0]
   b5446:	6a1b      	ldr	r3, [r3, #32]
   b5448:	9301      	str	r3, [sp, #4]
   b544a:	bd08      	pop	{r3, pc}
   b544c:	00030240 	.word	0x00030240

000b5450 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5450:	b508      	push	{r3, lr}
   b5452:	4b02      	ldr	r3, [pc, #8]	; (b545c <network_set_listen_timeout+0xc>)
   b5454:	681b      	ldr	r3, [r3, #0]
   b5456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5458:	9301      	str	r3, [sp, #4]
   b545a:	bd08      	pop	{r3, pc}
   b545c:	00030240 	.word	0x00030240

000b5460 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5460:	b508      	push	{r3, lr}
   b5462:	4b02      	ldr	r3, [pc, #8]	; (b546c <network_get_listen_timeout+0xc>)
   b5464:	681b      	ldr	r3, [r3, #0]
   b5466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5468:	9301      	str	r3, [sp, #4]
   b546a:	bd08      	pop	{r3, pc}
   b546c:	00030240 	.word	0x00030240

000b5470 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5470:	b508      	push	{r3, lr}
   b5472:	4b02      	ldr	r3, [pc, #8]	; (b547c <network_is_on+0xc>)
   b5474:	681b      	ldr	r3, [r3, #0]
   b5476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5478:	9301      	str	r3, [sp, #4]
   b547a:	bd08      	pop	{r3, pc}
   b547c:	00030240 	.word	0x00030240

000b5480 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5480:	b508      	push	{r3, lr}
   b5482:	4b02      	ldr	r3, [pc, #8]	; (b548c <network_is_off+0xc>)
   b5484:	681b      	ldr	r3, [r3, #0]
   b5486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5488:	9301      	str	r3, [sp, #4]
   b548a:	bd08      	pop	{r3, pc}
   b548c:	00030240 	.word	0x00030240

000b5490 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5490:	b508      	push	{r3, lr}
   b5492:	4b02      	ldr	r3, [pc, #8]	; (b549c <malloc+0xc>)
   b5494:	681b      	ldr	r3, [r3, #0]
   b5496:	681b      	ldr	r3, [r3, #0]
   b5498:	9301      	str	r3, [sp, #4]
   b549a:	bd08      	pop	{r3, pc}
   b549c:	0003021c 	.word	0x0003021c

000b54a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b54a0:	b508      	push	{r3, lr}
   b54a2:	4b02      	ldr	r3, [pc, #8]	; (b54ac <free+0xc>)
   b54a4:	681b      	ldr	r3, [r3, #0]
   b54a6:	685b      	ldr	r3, [r3, #4]
   b54a8:	9301      	str	r3, [sp, #4]
   b54aa:	bd08      	pop	{r3, pc}
   b54ac:	0003021c 	.word	0x0003021c

000b54b0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b54b0:	b508      	push	{r3, lr}
   b54b2:	4b02      	ldr	r3, [pc, #8]	; (b54bc <realloc+0xc>)
   b54b4:	681b      	ldr	r3, [r3, #0]
   b54b6:	689b      	ldr	r3, [r3, #8]
   b54b8:	9301      	str	r3, [sp, #4]
   b54ba:	bd08      	pop	{r3, pc}
   b54bc:	0003021c 	.word	0x0003021c

000b54c0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b54c0:	b508      	push	{r3, lr}
   b54c2:	4b02      	ldr	r3, [pc, #8]	; (b54cc <vsnprintf+0xc>)
   b54c4:	681b      	ldr	r3, [r3, #0]
   b54c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b54c8:	9301      	str	r3, [sp, #4]
   b54ca:	bd08      	pop	{r3, pc}
   b54cc:	0003021c 	.word	0x0003021c

000b54d0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b54d0:	b508      	push	{r3, lr}
   b54d2:	4b02      	ldr	r3, [pc, #8]	; (b54dc <abort+0xc>)
   b54d4:	681b      	ldr	r3, [r3, #0]
   b54d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b54d8:	9301      	str	r3, [sp, #4]
   b54da:	bd08      	pop	{r3, pc}
   b54dc:	0003021c 	.word	0x0003021c

000b54e0 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b54e0:	b508      	push	{r3, lr}
   b54e2:	4b02      	ldr	r3, [pc, #8]	; (b54ec <__errno+0xc>)
   b54e4:	681b      	ldr	r3, [r3, #0]
   b54e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b54e8:	9301      	str	r3, [sp, #4]
   b54ea:	bd08      	pop	{r3, pc}
   b54ec:	0003021c 	.word	0x0003021c

000b54f0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b54f0:	b508      	push	{r3, lr}
   b54f2:	4b02      	ldr	r3, [pc, #8]	; (b54fc <__assert_func+0xc>)
   b54f4:	681b      	ldr	r3, [r3, #0]
   b54f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b54f8:	9301      	str	r3, [sp, #4]
   b54fa:	bd08      	pop	{r3, pc}
   b54fc:	0003021c 	.word	0x0003021c

000b5500 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5500:	b508      	push	{r3, lr}
   b5502:	4b02      	ldr	r3, [pc, #8]	; (b550c <newlib_impure_ptr_callback+0xc>)
   b5504:	681b      	ldr	r3, [r3, #0]
   b5506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5508:	9301      	str	r3, [sp, #4]
   b550a:	bd08      	pop	{r3, pc}
   b550c:	0003021c 	.word	0x0003021c

000b5510 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5510:	4770      	bx	lr

000b5512 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b5512:	4770      	bx	lr

000b5514 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b5514:	4770      	bx	lr

000b5516 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5516:	4770      	bx	lr

000b5518 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5518:	4b06      	ldr	r3, [pc, #24]	; (b5534 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b551a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b551c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b551e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5522:	d005      	beq.n	b5530 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5524:	4608      	mov	r0, r1
   b5526:	f004 fba3 	bl	b9c70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b552a:	2800      	cmp	r0, #0
   b552c:	bf08      	it	eq
   b552e:	2400      	moveq	r4, #0
      }
   b5530:	4620      	mov	r0, r4
   b5532:	bd10      	pop	{r4, pc}
   b5534:	000ba2ec 	.word	0x000ba2ec

000b5538 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5538:	4b06      	ldr	r3, [pc, #24]	; (b5554 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b553a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b553c:	b510      	push	{r4, lr}
   b553e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5542:	d005      	beq.n	b5550 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5544:	4608      	mov	r0, r1
   b5546:	f004 fb93 	bl	b9c70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b554a:	2800      	cmp	r0, #0
   b554c:	bf08      	it	eq
   b554e:	2400      	moveq	r4, #0
      }
   b5550:	4620      	mov	r0, r4
   b5552:	bd10      	pop	{r4, pc}
   b5554:	000ba2ec 	.word	0x000ba2ec

000b5558 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5558:	4b06      	ldr	r3, [pc, #24]	; (b5574 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b555a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b555c:	b510      	push	{r4, lr}
   b555e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5562:	d005      	beq.n	b5570 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5564:	4608      	mov	r0, r1
   b5566:	f004 fb83 	bl	b9c70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b556a:	2800      	cmp	r0, #0
   b556c:	bf08      	it	eq
   b556e:	2400      	moveq	r4, #0
      }
   b5570:	4620      	mov	r0, r4
   b5572:	bd10      	pop	{r4, pc}
   b5574:	000ba2ec 	.word	0x000ba2ec

000b5578 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5578:	b510      	push	{r4, lr}
   b557a:	2168      	movs	r1, #104	; 0x68
   b557c:	4604      	mov	r4, r0
   b557e:	f7ff faa2 	bl	b4ac6 <_ZdlPvj>
   b5582:	4620      	mov	r0, r4
   b5584:	bd10      	pop	{r4, pc}

000b5586 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5586:	b510      	push	{r4, lr}
   b5588:	2128      	movs	r1, #40	; 0x28
   b558a:	4604      	mov	r4, r0
   b558c:	f7ff fa9b 	bl	b4ac6 <_ZdlPvj>
   b5590:	4620      	mov	r0, r4
   b5592:	bd10      	pop	{r4, pc}

000b5594 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5594:	b510      	push	{r4, lr}
   b5596:	2130      	movs	r1, #48	; 0x30
   b5598:	4604      	mov	r4, r0
   b559a:	f7ff fa94 	bl	b4ac6 <_ZdlPvj>
   b559e:	4620      	mov	r0, r4
   b55a0:	bd10      	pop	{r4, pc}

000b55a2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b55a2:	2168      	movs	r1, #104	; 0x68
   b55a4:	f7ff ba8f 	b.w	b4ac6 <_ZdlPvj>

000b55a8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b55a8:	2128      	movs	r1, #40	; 0x28
   b55aa:	f7ff ba8c 	b.w	b4ac6 <_ZdlPvj>

000b55ae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b55ae:	2130      	movs	r1, #48	; 0x30
   b55b0:	f7ff ba89 	b.w	b4ac6 <_ZdlPvj>

000b55b4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b55b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b55b6:	2500      	movs	r5, #0
   b55b8:	1cec      	adds	r4, r5, #3
   b55ba:	428c      	cmp	r4, r1
   b55bc:	d80d      	bhi.n	b55da <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b55be:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b55c0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b55c2:	5d87      	ldrb	r7, [r0, r6]
   b55c4:	4297      	cmp	r7, r2
   b55c6:	d105      	bne.n	b55d4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b55c8:	4426      	add	r6, r4
   b55ca:	42b1      	cmp	r1, r6
   b55cc:	d305      	bcc.n	b55da <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b55ce:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b55d0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b55d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b55d4:	3401      	adds	r4, #1
   b55d6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b55d8:	e7ee      	b.n	b55b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b55da:	2000      	movs	r0, #0
   b55dc:	e7f9      	b.n	b55d2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b55e0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b55e0:	4a02      	ldr	r2, [pc, #8]	; (b55ec <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b55e2:	4903      	ldr	r1, [pc, #12]	; (b55f0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b55e4:	200a      	movs	r0, #10
   b55e6:	f7ff be87 	b.w	b52f8 <panic_>
   b55ea:	bf00      	nop
   b55ec:	000b5129 	.word	0x000b5129
   b55f0:	000ba2f4 	.word	0x000ba2f4

000b55f4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b55f4:	b430      	push	{r4, r5}
   b55f6:	460d      	mov	r5, r1
   b55f8:	4611      	mov	r1, r2
   b55fa:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b55fc:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b55fe:	6809      	ldr	r1, [r1, #0]
   b5600:	6828      	ldr	r0, [r5, #0]
   b5602:	e9d3 4300 	ldrd	r4, r3, [r3]
   b5606:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b5608:	bc30      	pop	{r4, r5}
   b560a:	4760      	bx	ip

000b560c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b560c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b560e:	b538      	push	{r3, r4, r5, lr}
   b5610:	4604      	mov	r4, r0
	switch (__op)
   b5612:	d102      	bne.n	b561a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5614:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5616:	6023      	str	r3, [r4, #0]
	}
   b5618:	e003      	b.n	b5622 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b561a:	2a02      	cmp	r2, #2
   b561c:	d003      	beq.n	b5626 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b561e:	2a03      	cmp	r2, #3
   b5620:	d00d      	beq.n	b563e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b5622:	2000      	movs	r0, #0
   b5624:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5626:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b5628:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b562a:	f7ff fa48 	bl	b4abe <_Znwj>
   b562e:	4603      	mov	r3, r0
   b5630:	2800      	cmp	r0, #0
   b5632:	d0f0      	beq.n	b5616 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b5634:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5638:	e883 0003 	stmia.w	r3, {r0, r1}
   b563c:	e7eb      	b.n	b5616 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b563e:	6800      	ldr	r0, [r0, #0]
   b5640:	2800      	cmp	r0, #0
   b5642:	d0ee      	beq.n	b5622 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b5644:	2108      	movs	r1, #8
   b5646:	f7ff fa3e 	bl	b4ac6 <_ZdlPvj>
   b564a:	e7ea      	b.n	b5622 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b564c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b564c:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b564e:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b5650:	4604      	mov	r4, r0
	if (_M_manager)
   b5652:	b12b      	cbz	r3, b5660 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b5654:	2203      	movs	r2, #3
   b5656:	4601      	mov	r1, r0
   b5658:	4798      	blx	r3
	    _M_manager = nullptr;
   b565a:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b565c:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b5660:	bd10      	pop	{r4, pc}

000b5662 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b5662:	b510      	push	{r4, lr}
	if (_M_manager)
   b5664:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b5666:	4604      	mov	r4, r0
	if (_M_manager)
   b5668:	b12b      	cbz	r3, b5676 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b566a:	2203      	movs	r2, #3
   b566c:	4601      	mov	r1, r0
   b566e:	4798      	blx	r3
	    _M_manager = nullptr;
   b5670:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b5672:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b5676:	bd10      	pop	{r4, pc}

000b5678 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b5678:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b567a:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b567c:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b567e:	2220      	movs	r2, #32
   b5680:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b5684:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b5686:	4a08      	ldr	r2, [pc, #32]	; (b56a8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b5688:	9200      	str	r2, [sp, #0]
   b568a:	4908      	ldr	r1, [pc, #32]	; (b56ac <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b568c:	aa02      	add	r2, sp, #8
   b568e:	2001      	movs	r0, #1
   b5690:	f7ff fe3a 	bl	b5308 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b5694:	6820      	ldr	r0, [r4, #0]
   b5696:	4906      	ldr	r1, [pc, #24]	; (b56b0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b5698:	8800      	ldrh	r0, [r0, #0]
   b569a:	2300      	movs	r3, #0
   b569c:	4622      	mov	r2, r4
    }
   b569e:	b00a      	add	sp, #40	; 0x28
   b56a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b56a4:	f7ff bcd4 	b.w	b5050 <hal_ble_gatt_client_discover_all_services>
   b56a8:	000ba316 	.word	0x000ba316
   b56ac:	000ba30b 	.word	0x000ba30b
   b56b0:	000b7051 	.word	0x000b7051

000b56b4 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b56b4:	b510      	push	{r4, lr}
   b56b6:	3801      	subs	r0, #1
   b56b8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b56bc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b56c0:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b56c2:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b56c6:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b56c8:	bf88      	it	hi
   b56ca:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b56ce:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b56d2:	7803      	ldrb	r3, [r0, #0]
   b56d4:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b56d8:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b56dc:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b56de:	bf88      	it	hi
   b56e0:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b56e4:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b56e6:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b56ea:	d1e7      	bne.n	b56bc <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b56ec:	bd10      	pop	{r4, pc}

000b56ee <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b56ee:	b510      	push	{r4, lr}
      if (_M_manager)
   b56f0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b56f2:	4604      	mov	r4, r0
      if (_M_manager)
   b56f4:	b113      	cbz	r3, b56fc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b56f6:	2203      	movs	r2, #3
   b56f8:	4601      	mov	r1, r0
   b56fa:	4798      	blx	r3
    }
   b56fc:	4620      	mov	r0, r4
   b56fe:	bd10      	pop	{r4, pc}

000b5700 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5700:	b510      	push	{r4, lr}
   b5702:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b5704:	3058      	adds	r0, #88	; 0x58
   b5706:	f7ff fff2 	bl	b56ee <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b570a:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b570e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5712:	f003 bf8f 	b.w	b9634 <_ZN6StringD1Ev>

000b5716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b5716:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b5718:	6803      	ldr	r3, [r0, #0]
   b571a:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b571c:	4605      	mov	r5, r0
   b571e:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b5720:	d008      	beq.n	b5734 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b5722:	b111      	cbz	r1, b572a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b5724:	684b      	ldr	r3, [r1, #4]
   b5726:	3301      	adds	r3, #1
   b5728:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b572a:	6828      	ldr	r0, [r5, #0]
   b572c:	b108      	cbz	r0, b5732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b572e:	f7ff fa31 	bl	b4b94 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5732:	602c      	str	r4, [r5, #0]
      }
   b5734:	bd38      	pop	{r3, r4, r5, pc}

000b5736 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b5736:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b573a:	b2da      	uxtb	r2, r3
   b573c:	2a09      	cmp	r2, #9
   b573e:	d801      	bhi.n	b5744 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b5740:	4618      	mov	r0, r3
   b5742:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b5744:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b5748:	2b05      	cmp	r3, #5
   b574a:	d801      	bhi.n	b5750 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b574c:	3857      	subs	r0, #87	; 0x57
   b574e:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b5750:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b5754:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b5756:	bf94      	ite	ls
   b5758:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b575a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b575e:	4770      	bx	lr

000b5760 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b5760:	b510      	push	{r4, lr}
            locked_(false) {
   b5762:	2300      	movs	r3, #0
   b5764:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5766:	4b04      	ldr	r3, [pc, #16]	; (b5778 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b5768:	4604      	mov	r4, r0
   b576a:	6818      	ldr	r0, [r3, #0]
   b576c:	f7ff fcc4 	bl	b50f8 <os_mutex_recursive_lock>
        locked_ = true;
   b5770:	2301      	movs	r3, #1
   b5772:	7023      	strb	r3, [r4, #0]
    }
   b5774:	4620      	mov	r0, r4
   b5776:	bd10      	pop	{r4, pc}
   b5778:	2003e668 	.word	0x2003e668

000b577c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b577c:	b510      	push	{r4, lr}
        if (locked_) {
   b577e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b5780:	4604      	mov	r4, r0
        if (locked_) {
   b5782:	b11b      	cbz	r3, b578c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5784:	4b02      	ldr	r3, [pc, #8]	; (b5790 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b5786:	6818      	ldr	r0, [r3, #0]
   b5788:	f7ff fcbe 	bl	b5108 <os_mutex_recursive_unlock>
    }
   b578c:	4620      	mov	r0, r4
   b578e:	bd10      	pop	{r4, pc}
   b5790:	2003e668 	.word	0x2003e668

000b5794 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE>:
int BleAddress::set(const char* address, BleAddressType type) {
   b5794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5798:	4606      	mov	r6, r0
   b579a:	4617      	mov	r7, r2
    CHECK_TRUE(address, SYSTEM_ERROR_INVALID_ARGUMENT);
   b579c:	460d      	mov	r5, r1
   b579e:	b3b1      	cbz	r1, b580e <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x7a>
    for (size_t i = 0; i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5) && len > 0; i++) {
   b57a0:	f04f 0900 	mov.w	r9, #0
    size_t len = BLE_SIG_ADDR_LEN;
   b57a4:	f04f 0806 	mov.w	r8, #6
    for (size_t i = 0; i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5) && len > 0; i++) {
   b57a8:	2111      	movs	r1, #17
   b57aa:	4628      	mov	r0, r5
   b57ac:	f004 fc21 	bl	b9ff2 <strnlen>
   b57b0:	4548      	cmp	r0, r9
   b57b2:	d808      	bhi.n	b57c6 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x32>
        address_.addr[len - 1] = 0x00;
   b57b4:	4642      	mov	r2, r8
   b57b6:	2100      	movs	r1, #0
   b57b8:	4630      	mov	r0, r6
   b57ba:	f004 fbb1 	bl	b9f20 <memset>
    address_.addr_type = static_cast<ble_sig_addr_type_t>(type);
   b57be:	71b7      	strb	r7, [r6, #6]
   b57c0:	2000      	movs	r0, #0
}
   b57c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for (size_t i = 0; i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5) && len > 0; i++) {
   b57c6:	f1b8 0f00 	cmp.w	r8, #0
   b57ca:	d0f8      	beq.n	b57be <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x2a>
        int8_t hi = hexToNibble(address[i]);
   b57cc:	f815 0009 	ldrb.w	r0, [r5, r9]
   b57d0:	f7ff ffb1 	bl	b5736 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b57d4:	0603      	lsls	r3, r0, #24
   b57d6:	d417      	bmi.n	b5808 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x74>
            address_.addr[len - 1] = hi << 4;
   b57d8:	0100      	lsls	r0, r0, #4
   b57da:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b57de:	b2c4      	uxtb	r4, r0
   b57e0:	f806 4008 	strb.w	r4, [r6, r8]
            if (++i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5)) {
   b57e4:	2111      	movs	r1, #17
   b57e6:	4628      	mov	r0, r5
   b57e8:	f004 fc03 	bl	b9ff2 <strnlen>
   b57ec:	f109 0901 	add.w	r9, r9, #1
   b57f0:	4581      	cmp	r9, r0
   b57f2:	d209      	bcs.n	b5808 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x74>
                int8_t lo = hexToNibble(address[i]);
   b57f4:	f815 0009 	ldrb.w	r0, [r5, r9]
   b57f8:	f7ff ff9d 	bl	b5736 <_ZN8particle11hexToNibbleEc>
   b57fc:	b243      	sxtb	r3, r0
                if (lo >= 0) {
   b57fe:	2b00      	cmp	r3, #0
                    address_.addr[len - 1] |= lo;
   b5800:	bfa4      	itt	ge
   b5802:	4323      	orrge	r3, r4
   b5804:	f806 3008 	strbge.w	r3, [r6, r8]
    for (size_t i = 0; i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5) && len > 0; i++) {
   b5808:	f109 0901 	add.w	r9, r9, #1
   b580c:	e7cc      	b.n	b57a8 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x14>
    CHECK_TRUE(address, SYSTEM_ERROR_INVALID_ARGUMENT);
   b580e:	4801      	ldr	r0, [pc, #4]	; (b5814 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x80>)
   b5810:	e7d7      	b.n	b57c2 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x2e>
   b5812:	bf00      	nop
   b5814:	fffffef2 	.word	0xfffffef2

000b5818 <_ZN8particle10BleAddressC1EPKcNS_14BleAddressTypeE>:
BleAddress::BleAddress(const char* address, BleAddressType type) {
   b5818:	b510      	push	{r4, lr}
   b581a:	4604      	mov	r4, r0
    set(address, type);
   b581c:	f7ff ffba 	bl	b5794 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE>
}
   b5820:	4620      	mov	r0, r4
   b5822:	bd10      	pop	{r4, pc}

000b5824 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b5824:	b082      	sub	sp, #8
   b5826:	4603      	mov	r3, r0
    address_ = addr;
   b5828:	6808      	ldr	r0, [r1, #0]
   b582a:	6849      	ldr	r1, [r1, #4]
   b582c:	466a      	mov	r2, sp
   b582e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b5830:	466a      	mov	r2, sp
   b5832:	ca03      	ldmia	r2!, {r0, r1}
   b5834:	6018      	str	r0, [r3, #0]
}
   b5836:	4618      	mov	r0, r3
    address_ = addr.address_;
   b5838:	6059      	str	r1, [r3, #4]
}
   b583a:	b002      	add	sp, #8
   b583c:	4770      	bx	lr

000b583e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b583e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b5840:	7982      	ldrb	r2, [r0, #6]
   b5842:	798b      	ldrb	r3, [r1, #6]
   b5844:	429a      	cmp	r2, r3
   b5846:	d106      	bne.n	b5856 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b5848:	2206      	movs	r2, #6
   b584a:	f004 fb31 	bl	b9eb0 <memcmp>
   b584e:	fab0 f080 	clz	r0, r0
   b5852:	0940      	lsrs	r0, r0, #5
}
   b5854:	bd08      	pop	{r3, pc}
    return false;
   b5856:	2000      	movs	r0, #0
   b5858:	e7fc      	b.n	b5854 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b585a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b585a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b585e:	6003      	str	r3, [r0, #0]
   b5860:	8083      	strh	r3, [r0, #4]
}
   b5862:	2000      	movs	r0, #0
   b5864:	4770      	bx	lr

000b5866 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b5866:	b508      	push	{r3, lr}
   b5868:	4602      	mov	r2, r0
        : address_{} {
   b586a:	2100      	movs	r1, #0
   b586c:	6001      	str	r1, [r0, #0]
   b586e:	6041      	str	r1, [r0, #4]
    clear();
   b5870:	f7ff fff3 	bl	b585a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b5874:	7191      	strb	r1, [r2, #6]
}
   b5876:	4610      	mov	r0, r2
   b5878:	bd08      	pop	{r3, pc}

000b587a <_ZNK8particle10BleAddress11toBigEndianEPh>:
void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   b587a:	b510      	push	{r4, lr}
   b587c:	1d43      	adds	r3, r0, #5
   b587e:	3901      	subs	r1, #1
        buf[i] = address_.addr[j];
   b5880:	781c      	ldrb	r4, [r3, #0]
   b5882:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   b5886:	4283      	cmp	r3, r0
   b5888:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   b588c:	d1f8      	bne.n	b5880 <_ZNK8particle10BleAddress11toBigEndianEPh+0x6>
}
   b588e:	bd10      	pop	{r4, pc}

000b5890 <_ZNK8particle10BleAddress8toStringEPcjb>:
size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   b5890:	b570      	push	{r4, r5, r6, lr}
   b5892:	4614      	mov	r4, r2
   b5894:	b088      	sub	sp, #32
   b5896:	461a      	mov	r2, r3
    if (!buf || len == 0) {
   b5898:	460d      	mov	r5, r1
   b589a:	2900      	cmp	r1, #0
   b589c:	d048      	beq.n	b5930 <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
   b589e:	b1a4      	cbz	r4, b58ca <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>
    toBigEndian(temp);
   b58a0:	a901      	add	r1, sp, #4
   b58a2:	f7ff ffea 	bl	b587a <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
   b58a6:	b19a      	cbz	r2, b58d0 <_ZNK8particle10BleAddress8toStringEPcjb+0x40>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   b58a8:	aa03      	add	r2, sp, #12
   b58aa:	2106      	movs	r1, #6
   b58ac:	a801      	add	r0, sp, #4
    len = std::min(len - 1, sizeof(cStr));
   b58ae:	1e66      	subs	r6, r4, #1
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b58b0:	f7ff ff00 	bl	b56b4 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b58b4:	2e11      	cmp	r6, #17
   b58b6:	bf28      	it	cs
   b58b8:	2611      	movcs	r6, #17
    memcpy(buf, cStr, len);
   b58ba:	4632      	mov	r2, r6
   b58bc:	a903      	add	r1, sp, #12
   b58be:	4628      	mov	r0, r5
   b58c0:	f004 fb06 	bl	b9ed0 <memcpy>
    buf[len++] = '\0';
   b58c4:	2300      	movs	r3, #0
   b58c6:	55ab      	strb	r3, [r5, r6]
   b58c8:	1c74      	adds	r4, r6, #1
}
   b58ca:	4620      	mov	r0, r4
   b58cc:	b008      	add	sp, #32
   b58ce:	bd70      	pop	{r4, r5, r6, pc}
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   b58d0:	aa03      	add	r2, sp, #12
   b58d2:	2101      	movs	r1, #1
   b58d4:	a801      	add	r0, sp, #4
   b58d6:	f7ff feed 	bl	b56b4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = ':';
   b58da:	263a      	movs	r6, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b58dc:	f10d 020f 	add.w	r2, sp, #15
   b58e0:	2101      	movs	r1, #1
   b58e2:	f10d 0005 	add.w	r0, sp, #5
        cStr[idx * 2] = ':';
   b58e6:	f88d 600e 	strb.w	r6, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b58ea:	f7ff fee3 	bl	b56b4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b58ee:	f10d 0212 	add.w	r2, sp, #18
   b58f2:	2101      	movs	r1, #1
   b58f4:	f10d 0006 	add.w	r0, sp, #6
        cStr[idx * 2 + 1] = ':';
   b58f8:	f88d 6011 	strb.w	r6, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b58fc:	f7ff feda 	bl	b56b4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b5900:	f10d 0215 	add.w	r2, sp, #21
   b5904:	2101      	movs	r1, #1
   b5906:	f10d 0007 	add.w	r0, sp, #7
        cStr[idx * 2 + 2] = ':';
   b590a:	f88d 6014 	strb.w	r6, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b590e:	f7ff fed1 	bl	b56b4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b5912:	aa06      	add	r2, sp, #24
   b5914:	2101      	movs	r1, #1
   b5916:	a802      	add	r0, sp, #8
        cStr[idx * 2 + 3] = ':';
   b5918:	f88d 6017 	strb.w	r6, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b591c:	f7ff feca 	bl	b56b4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 4] = ':';
   b5920:	f88d 601a 	strb.w	r6, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b5924:	f10d 021b 	add.w	r2, sp, #27
   b5928:	2101      	movs	r1, #1
   b592a:	f10d 0009 	add.w	r0, sp, #9
   b592e:	e7be      	b.n	b58ae <_ZNK8particle10BleAddress8toStringEPcjb+0x1e>
        return 0;
   b5930:	460c      	mov	r4, r1
   b5932:	e7ca      	b.n	b58ca <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>

000b5934 <_ZNK8particle10BleAddress8toStringEb>:
String BleAddress::toString(bool stripped) const {
   b5934:	b510      	push	{r4, lr}
   b5936:	b086      	sub	sp, #24
   b5938:	4604      	mov	r4, r0
   b593a:	4613      	mov	r3, r2
   b593c:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr), stripped);
   b593e:	2212      	movs	r2, #18
   b5940:	a901      	add	r1, sp, #4
   b5942:	f7ff ffa5 	bl	b5890 <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   b5946:	a901      	add	r1, sp, #4
   b5948:	4620      	mov	r0, r4
   b594a:	f003 febe 	bl	b96ca <_ZN6StringC1EPK19__FlashStringHelper>
}
   b594e:	4620      	mov	r0, r4
   b5950:	b006      	add	sp, #24
   b5952:	bd10      	pop	{r4, pc}

000b5954 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b5954:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b5956:	2301      	movs	r3, #1
   b5958:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b595a:	4b05      	ldr	r3, [pc, #20]	; (b5970 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b595c:	4602      	mov	r2, r0
   b595e:	f103 0110 	add.w	r1, r3, #16
   b5962:	f853 4b04 	ldr.w	r4, [r3], #4
   b5966:	f842 4b04 	str.w	r4, [r2], #4
   b596a:	428b      	cmp	r3, r1
   b596c:	d1f9      	bne.n	b5962 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b596e:	bd10      	pop	{r4, pc}
   b5970:	000ba21e 	.word	0x000ba21e

000b5974 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b5974:	7c0b      	ldrb	r3, [r1, #16]
   b5976:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b597a:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b597c:	d10d      	bne.n	b599a <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b597e:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5980:	4b0c      	ldr	r3, [pc, #48]	; (b59b4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b5982:	4602      	mov	r2, r0
   b5984:	f103 0410 	add.w	r4, r3, #16
   b5988:	f853 5b04 	ldr.w	r5, [r3], #4
   b598c:	f842 5b04 	str.w	r5, [r2], #4
   b5990:	42a3      	cmp	r3, r4
   b5992:	d1f9      	bne.n	b5988 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b5994:	880b      	ldrh	r3, [r1, #0]
   b5996:	8183      	strh	r3, [r0, #12]
}
   b5998:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b599a:	2301      	movs	r3, #1
   b599c:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b599e:	f101 0210 	add.w	r2, r1, #16
   b59a2:	4603      	mov	r3, r0
   b59a4:	f851 4b04 	ldr.w	r4, [r1], #4
   b59a8:	f843 4b04 	str.w	r4, [r3], #4
   b59ac:	4291      	cmp	r1, r2
   b59ae:	d1f9      	bne.n	b59a4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b59b0:	e7f2      	b.n	b5998 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b59b2:	bf00      	nop
   b59b4:	000ba21e 	.word	0x000ba21e

000b59b8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b59b8:	b510      	push	{r4, lr}
    if (uuid128) {
   b59ba:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b59bc:	4604      	mov	r4, r0
    if (uuid128) {
   b59be:	b1b1      	cbz	r1, b59ee <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b59c0:	2a01      	cmp	r2, #1
   b59c2:	f101 0210 	add.w	r2, r1, #16
   b59c6:	d10a      	bne.n	b59de <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b59c8:	4601      	mov	r1, r0
   b59ca:	f853 0b04 	ldr.w	r0, [r3], #4
   b59ce:	f841 0b04 	str.w	r0, [r1], #4
   b59d2:	4293      	cmp	r3, r2
   b59d4:	d1f9      	bne.n	b59ca <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b59d6:	2301      	movs	r3, #1
   b59d8:	6123      	str	r3, [r4, #16]
}
   b59da:	4620      	mov	r0, r4
   b59dc:	bd10      	pop	{r4, pc}
   b59de:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b59e0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b59e4:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b59e8:	429a      	cmp	r2, r3
   b59ea:	d1f9      	bne.n	b59e0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b59ec:	e7f3      	b.n	b59d6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b59ee:	2210      	movs	r2, #16
   b59f0:	f004 fa96 	bl	b9f20 <memset>
   b59f4:	e7f1      	b.n	b59da <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b59f6 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b59f6:	b538      	push	{r3, r4, r5, lr}
   b59f8:	4604      	mov	r4, r0
   b59fa:	460d      	mov	r5, r1
        : BleUuid() {
   b59fc:	f7ff ffaa 	bl	b5954 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b5a00:	2300      	movs	r3, #0
   b5a02:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b5a04:	81a5      	strh	r5, [r4, #12]
}
   b5a06:	4620      	mov	r0, r4
   b5a08:	bd38      	pop	{r3, r4, r5, pc}

000b5a0a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b5a0a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5a0c:	6902      	ldr	r2, [r0, #16]
   b5a0e:	690b      	ldr	r3, [r1, #16]
   b5a10:	429a      	cmp	r2, r3
   b5a12:	d106      	bne.n	b5a22 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b5a14:	2210      	movs	r2, #16
   b5a16:	f004 fa4b 	bl	b9eb0 <memcmp>
   b5a1a:	fab0 f080 	clz	r0, r0
   b5a1e:	0940      	lsrs	r0, r0, #5
}
   b5a20:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5a22:	2000      	movs	r0, #0
   b5a24:	e7fc      	b.n	b5a20 <_ZNK8particle7BleUuideqERKS0_+0x16>

000b5a26 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b5a26:	b510      	push	{r4, lr}
   b5a28:	f100 030f 	add.w	r3, r0, #15
   b5a2c:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b5a2e:	781c      	ldrb	r4, [r3, #0]
   b5a30:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b5a34:	4283      	cmp	r3, r0
   b5a36:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   b5a3a:	d1f8      	bne.n	b5a2e <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b5a3c:	bd10      	pop	{r4, pc}

000b5a3e <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b5a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5a42:	461f      	mov	r7, r3
   b5a44:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b5a46:	460d      	mov	r5, r1
   b5a48:	2900      	cmp	r1, #0
   b5a4a:	d05b      	beq.n	b5b04 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b5a4c:	b1da      	cbz	r2, b5a86 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b5a4e:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b5a52:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b5a54:	f1b8 0f00 	cmp.w	r8, #0
   b5a58:	d119      	bne.n	b5a8e <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b5a5a:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b5a5c:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b5a60:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b5a62:	aa05      	add	r2, sp, #20
   b5a64:	2102      	movs	r1, #2
   b5a66:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b5a68:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b5a6c:	f7ff fe22 	bl	b56b4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b5a70:	2c04      	cmp	r4, #4
   b5a72:	bf28      	it	cs
   b5a74:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b5a76:	4622      	mov	r2, r4
   b5a78:	a905      	add	r1, sp, #20
   b5a7a:	4628      	mov	r0, r5
   b5a7c:	f004 fa28 	bl	b9ed0 <memcpy>
        buf[len++] = '\0';
   b5a80:	f805 8004 	strb.w	r8, [r5, r4]
   b5a84:	1c62      	adds	r2, r4, #1
}
   b5a86:	4610      	mov	r0, r2
   b5a88:	b00e      	add	sp, #56	; 0x38
   b5a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b5a8e:	a901      	add	r1, sp, #4
   b5a90:	f7ff ffc9 	bl	b5a26 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b5a94:	aa05      	add	r2, sp, #20
    if (stripped) {
   b5a96:	b17f      	cbz	r7, b5ab8 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b5a98:	2110      	movs	r1, #16
   b5a9a:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b5a9c:	f7ff fe0a 	bl	b56b4 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b5aa0:	2c24      	cmp	r4, #36	; 0x24
   b5aa2:	bf28      	it	cs
   b5aa4:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b5aa6:	4622      	mov	r2, r4
   b5aa8:	a905      	add	r1, sp, #20
   b5aaa:	4628      	mov	r0, r5
   b5aac:	f004 fa10 	bl	b9ed0 <memcpy>
    buf[len++] = '\0';
   b5ab0:	2300      	movs	r3, #0
   b5ab2:	552b      	strb	r3, [r5, r4]
   b5ab4:	1c62      	adds	r2, r4, #1
    return len;
   b5ab6:	e7e6      	b.n	b5a86 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b5ab8:	2104      	movs	r1, #4
   b5aba:	eb0d 0001 	add.w	r0, sp, r1
   b5abe:	f7ff fdf9 	bl	b56b4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b5ac2:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b5ac4:	f10d 021d 	add.w	r2, sp, #29
   b5ac8:	2102      	movs	r1, #2
   b5aca:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b5acc:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b5ad0:	f7ff fdf0 	bl	b56b4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b5ad4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b5ad8:	2102      	movs	r1, #2
   b5ada:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b5ade:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b5ae2:	f7ff fde7 	bl	b56b4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b5ae6:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b5aea:	2102      	movs	r1, #2
   b5aec:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b5aee:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b5af2:	f7ff fddf 	bl	b56b4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b5af6:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b5afa:	aa0b      	add	r2, sp, #44	; 0x2c
   b5afc:	2106      	movs	r1, #6
   b5afe:	f10d 000e 	add.w	r0, sp, #14
   b5b02:	e7cb      	b.n	b5a9c <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b5b04:	460a      	mov	r2, r1
   b5b06:	e7be      	b.n	b5a86 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b5b08 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b5b08:	b510      	push	{r4, lr}
   b5b0a:	b08a      	sub	sp, #40	; 0x28
   b5b0c:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b5b0e:	2300      	movs	r3, #0
   b5b10:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b5b12:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b5b14:	4669      	mov	r1, sp
   b5b16:	f7ff ff92 	bl	b5a3e <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b5b1a:	4669      	mov	r1, sp
   b5b1c:	4620      	mov	r0, r4
   b5b1e:	f003 fdd4 	bl	b96ca <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5b22:	4620      	mov	r0, r4
   b5b24:	b00a      	add	sp, #40	; 0x28
   b5b26:	bd10      	pop	{r4, pc}

000b5b28 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b5b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5b2a:	4605      	mov	r5, r0
   b5b2c:	4616      	mov	r6, r2
   b5b2e:	461f      	mov	r7, r3
   b5b30:	460a      	mov	r2, r1
   b5b32:	ab01      	add	r3, sp, #4
   b5b34:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5b38:	f7ff fd3c 	bl	b55b4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b5b3c:	f030 0402 	bics.w	r4, r0, #2
   b5b40:	d00c      	beq.n	b5b5c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b5b42:	1e84      	subs	r4, r0, #2
   b5b44:	42bc      	cmp	r4, r7
   b5b46:	bf28      	it	cs
   b5b48:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b5b4a:	b13e      	cbz	r6, b5b5c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b5b4c:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b5b4e:	682b      	ldr	r3, [r5, #0]
   b5b50:	3102      	adds	r1, #2
   b5b52:	4622      	mov	r2, r4
   b5b54:	4419      	add	r1, r3
   b5b56:	4630      	mov	r0, r6
   b5b58:	f004 f9ba 	bl	b9ed0 <memcpy>
}
   b5b5c:	4620      	mov	r0, r4
   b5b5e:	b003      	add	sp, #12
   b5b60:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5b62 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b5b62:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5b64:	4613      	mov	r3, r2
   b5b66:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b5b68:	9201      	str	r2, [sp, #4]
   b5b6a:	460a      	mov	r2, r1
   b5b6c:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b5b6e:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b5b70:	f7ff ffda 	bl	b5b28 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b5b74:	b940      	cbnz	r0, b5b88 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b5b76:	9b01      	ldr	r3, [sp, #4]
   b5b78:	4622      	mov	r2, r4
   b5b7a:	2109      	movs	r1, #9
   b5b7c:	4628      	mov	r0, r5
}
   b5b7e:	b003      	add	sp, #12
   b5b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b5b84:	f7ff bfd0 	b.w	b5b28 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b5b88:	b003      	add	sp, #12
   b5b8a:	bd30      	pop	{r4, r5, pc}

000b5b8c <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b5b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5b8e:	460c      	mov	r4, r1
   b5b90:	b089      	sub	sp, #36	; 0x24
    String name;
   b5b92:	490c      	ldr	r1, [pc, #48]	; (b5bc4 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b5b94:	4605      	mov	r5, r0
    String name;
   b5b96:	f003 fd98 	bl	b96ca <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b5b9a:	221f      	movs	r2, #31
   b5b9c:	4669      	mov	r1, sp
   b5b9e:	4620      	mov	r0, r4
   b5ba0:	f7ff ffdf 	bl	b5b62 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b5ba4:	4606      	mov	r6, r0
   b5ba6:	b150      	cbz	r0, b5bbe <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b5ba8:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b5baa:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b5bac:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5bb0:	4628      	mov	r0, r5
   b5bb2:	f003 fe0a 	bl	b97ca <_ZN6String6concatEc>
   b5bb6:	b110      	cbz	r0, b5bbe <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b5bb8:	3701      	adds	r7, #1
   b5bba:	42be      	cmp	r6, r7
   b5bbc:	d1f6      	bne.n	b5bac <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b5bbe:	4628      	mov	r0, r5
   b5bc0:	b009      	add	sp, #36	; 0x24
   b5bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5bc4:	000ba696 	.word	0x000ba696

000b5bc8 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b5bc8:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b5bca:	2302      	movs	r3, #2
   b5bcc:	aa01      	add	r2, sp, #4
   b5bce:	2119      	movs	r1, #25
   b5bd0:	f7ff ffaa 	bl	b5b28 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b5bd4:	b108      	cbz	r0, b5bda <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b5bd6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b5bda:	b003      	add	sp, #12
   b5bdc:	f85d fb04 	ldr.w	pc, [sp], #4

000b5be0 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b5be0:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b5be2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5be6:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b5be8:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b5bea:	8043      	strh	r3, [r0, #2]
   b5bec:	220e      	movs	r2, #14
   b5bee:	4629      	mov	r1, r5
   b5bf0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b5bf2:	7105      	strb	r5, [r0, #4]
   b5bf4:	3006      	adds	r0, #6
   b5bf6:	f004 f993 	bl	b9f20 <memset>
   b5bfa:	f104 0014 	add.w	r0, r4, #20
   b5bfe:	f7ff fea9 	bl	b5954 <_ZN8particle7BleUuidC1Ev>
   b5c02:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b5c06:	f7ff fea5 	bl	b5954 <_ZN8particle7BleUuidC1Ev>
   b5c0a:	4904      	ldr	r1, [pc, #16]	; (b5c1c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b5c0c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b5c10:	f003 fd5b 	bl	b96ca <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b5c14:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b5c16:	4620      	mov	r0, r4
   b5c18:	bd38      	pop	{r3, r4, r5, pc}
   b5c1a:	bf00      	nop
   b5c1c:	000ba696 	.word	0x000ba696

000b5c20 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b5c20:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5c22:	680d      	ldr	r5, [r1, #0]
   b5c24:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b5c26:	4601      	mov	r1, r0
   b5c28:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b5c2c:	f7ff feed 	bl	b5a0a <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b5c30:	b140      	cbz	r0, b5c44 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b5c32:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b5c34:	8aa2      	ldrh	r2, [r4, #20]
   b5c36:	429a      	cmp	r2, r3
   b5c38:	d805      	bhi.n	b5c46 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b5c3a:	8ae0      	ldrh	r0, [r4, #22]
   b5c3c:	4298      	cmp	r0, r3
   b5c3e:	bf34      	ite	cc
   b5c40:	2000      	movcc	r0, #0
   b5c42:	2001      	movcs	r0, #1
    }
   b5c44:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b5c46:	2000      	movs	r0, #0
   b5c48:	e7fc      	b.n	b5c44 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b5c4a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b5c4a:	b510      	push	{r4, lr}
    return data_ + size_;
   b5c4c:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b5c50:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b5c54:	4293      	cmp	r3, r2
   b5c56:	4618      	mov	r0, r3
   b5c58:	d006      	beq.n	b5c68 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b5c5a:	6804      	ldr	r4, [r0, #0]
   b5c5c:	8824      	ldrh	r4, [r4, #0]
   b5c5e:	428c      	cmp	r4, r1
   b5c60:	f103 0308 	add.w	r3, r3, #8
   b5c64:	d1f6      	bne.n	b5c54 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b5c66:	bd10      	pop	{r4, pc}
        return nullptr;
   b5c68:	2000      	movs	r0, #0
   b5c6a:	e7fc      	b.n	b5c66 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b5c6c <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5c6c:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b5c6e:	b570      	push	{r4, r5, r6, lr}
   b5c70:	6003      	str	r3, [r0, #0]
   b5c72:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5c74:	2068      	movs	r0, #104	; 0x68
   b5c76:	f7fe ff22 	bl	b4abe <_Znwj>
	  auto __pi = ::new (__mem)
   b5c7a:	1e04      	subs	r4, r0, #0
   b5c7c:	f104 060c 	add.w	r6, r4, #12
   b5c80:	d007      	beq.n	b5c92 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b5c82:	2301      	movs	r3, #1
   b5c84:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b5c88:	4b04      	ldr	r3, [pc, #16]	; (b5c9c <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b5c8a:	6023      	str	r3, [r4, #0]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5c8c:	4630      	mov	r0, r6
   b5c8e:	f7ff ffa7 	bl	b5be0 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b5c92:	e9c5 6400 	strd	r6, r4, [r5]
}
   b5c96:	4628      	mov	r0, r5
   b5c98:	bd70      	pop	{r4, r5, r6, pc}
   b5c9a:	bf00      	nop
   b5c9c:	000ba4f4 	.word	0x000ba4f4

000b5ca0 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b5ca0:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b5ca2:	680c      	ldr	r4, [r1, #0]
   b5ca4:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b5ca6:	4606      	mov	r6, r0
    return impl()->charUUID();
   b5ca8:	4605      	mov	r5, r0
   b5caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5cae:	6823      	ldr	r3, [r4, #0]
   b5cb0:	602b      	str	r3, [r5, #0]
}
   b5cb2:	4630      	mov	r0, r6
   b5cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5cb8 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b5cb8:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b5cba:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b5cbc:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b5cbe:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b5cc0:	bb52      	cbnz	r2, b5d18 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b5cc2:	885c      	ldrh	r4, [r3, #2]
   b5cc4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5cc8:	4284      	cmp	r4, r0
   b5cca:	d025      	beq.n	b5d18 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b5ccc:	8a18      	ldrh	r0, [r3, #16]
   b5cce:	b330      	cbz	r0, b5d1e <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b5cd0:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b5cd4:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b5cd6:	4a13      	ldr	r2, [pc, #76]	; (b5d24 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b5cd8:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b5cda:	4a13      	ldr	r2, [pc, #76]	; (b5d28 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b5cdc:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b5ce0:	885a      	ldrh	r2, [r3, #2]
   b5ce2:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b5ce6:	8a1a      	ldrh	r2, [r3, #16]
   b5ce8:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b5cec:	899a      	ldrh	r2, [r3, #12]
   b5cee:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b5cf2:	b159      	cbz	r1, b5d0c <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b5cf4:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b5cf6:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b5cf8:	bf44      	itt	mi
   b5cfa:	2202      	movmi	r2, #2
   b5cfc:	9205      	strmi	r2, [sp, #20]
   b5cfe:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b5d00:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b5d02:	bf42      	ittt	mi
   b5d04:	9b05      	ldrmi	r3, [sp, #20]
   b5d06:	f043 0301 	orrmi.w	r3, r3, #1
   b5d0a:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b5d0c:	2100      	movs	r1, #0
   b5d0e:	4668      	mov	r0, sp
   b5d10:	f7ff f9d0 	bl	b50b4 <hal_ble_gatt_client_configure_cccd>
}
   b5d14:	b006      	add	sp, #24
   b5d16:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b5d18:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b5d1c:	e7fa      	b.n	b5d14 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b5d1e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b5d22:	e7f7      	b.n	b5d14 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b5d24:	00180003 	.word	0x00180003
   b5d28:	000b5efd 	.word	0x000b5efd

000b5d2c <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b5d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5d2e:	2600      	movs	r6, #0
   b5d30:	6006      	str	r6, [r0, #0]
   b5d32:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5d34:	2028      	movs	r0, #40	; 0x28
   b5d36:	f7fe fec2 	bl	b4abe <_Znwj>
	  auto __pi = ::new (__mem)
   b5d3a:	1e04      	subs	r4, r0, #0
   b5d3c:	f104 070c 	add.w	r7, r4, #12
   b5d40:	d00a      	beq.n	b5d58 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b5d42:	2301      	movs	r3, #1
   b5d44:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b5d48:	4b05      	ldr	r3, [pc, #20]	; (b5d60 <_ZN8particle10BleServiceC1Ev+0x34>)
   b5d4a:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b5d4c:	4638      	mov	r0, r7
   b5d4e:	f7ff fe01 	bl	b5954 <_ZN8particle7BleUuidC1Ev>
   b5d52:	6226      	str	r6, [r4, #32]
   b5d54:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b5d58:	e9c5 7400 	strd	r7, r4, [r5]
}
   b5d5c:	4628      	mov	r0, r5
   b5d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5d60:	000ba510 	.word	0x000ba510

000b5d64 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b5d64:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5d66:	2500      	movs	r5, #0
   b5d68:	6005      	str	r5, [r0, #0]
   b5d6a:	4606      	mov	r6, r0
   b5d6c:	2030      	movs	r0, #48	; 0x30
   b5d6e:	f7fe fea6 	bl	b4abe <_Znwj>
	  auto __pi = ::new (__mem)
   b5d72:	4604      	mov	r4, r0
   b5d74:	b188      	cbz	r0, b5d9a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b5d76:	2301      	movs	r3, #1
   b5d78:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b5d7c:	4b09      	ldr	r3, [pc, #36]	; (b5da4 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b5d7e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b5d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5d84:	8183      	strh	r3, [r0, #12]
   b5d86:	300e      	adds	r0, #14
   b5d88:	f7ff fd6d 	bl	b5866 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b5d8c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b5d90:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b5d94:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b5d98:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b5d9a:	6074      	str	r4, [r6, #4]
   b5d9c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b5d9e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5da0:	4630      	mov	r0, r6
   b5da2:	bd70      	pop	{r4, r5, r6, pc}
   b5da4:	000ba52c 	.word	0x000ba52c

000b5da8 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b5da8:	b513      	push	{r0, r1, r4, lr}
   b5daa:	4604      	mov	r4, r0
    WiringBleLock lk;
   b5dac:	a801      	add	r0, sp, #4
   b5dae:	f7ff fcd7 	bl	b5760 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b5db2:	6823      	ldr	r3, [r4, #0]
   b5db4:	881c      	ldrh	r4, [r3, #0]
   b5db6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5dba:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b5dbc:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b5dbe:	bf18      	it	ne
   b5dc0:	2401      	movne	r4, #1
    WiringBleLock lk;
   b5dc2:	f7ff fcdb 	bl	b577c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b5dc6:	4620      	mov	r0, r4
   b5dc8:	b002      	add	sp, #8
   b5dca:	bd10      	pop	{r4, pc}

000b5dcc <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b5dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5dce:	4605      	mov	r5, r0
   b5dd0:	460c      	mov	r4, r1
    WiringBleLock lk;
   b5dd2:	a801      	add	r0, sp, #4
   b5dd4:	f7ff fcc4 	bl	b5760 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b5dd8:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b5dda:	6823      	ldr	r3, [r4, #0]
   b5ddc:	f8c2 3002 	str.w	r3, [r2, #2]
   b5de0:	6863      	ldr	r3, [r4, #4]
   b5de2:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b5de6:	a801      	add	r0, sp, #4
   b5de8:	f7ff fcc8 	bl	b577c <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b5dec:	b003      	add	sp, #12
   b5dee:	bd30      	pop	{r4, r5, pc}

000b5df0 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b5df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5df2:	460d      	mov	r5, r1
   b5df4:	4604      	mov	r4, r0
    WiringBleLock lk;
   b5df6:	a801      	add	r0, sp, #4
   b5df8:	f7ff fcb2 	bl	b5760 <_ZN8particle3ble13WiringBleLockC1Ev>
   b5dfc:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b5dfe:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b5e02:	6023      	str	r3, [r4, #0]
   b5e04:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b5e08:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b5e0a:	a801      	add	r0, sp, #4
   b5e0c:	f7ff fcb6 	bl	b577c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b5e10:	4620      	mov	r0, r4
   b5e12:	b003      	add	sp, #12
   b5e14:	bd30      	pop	{r4, r5, pc}

000b5e16 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b5e16:	b530      	push	{r4, r5, lr}
   b5e18:	4605      	mov	r5, r0
   b5e1a:	b087      	sub	sp, #28
   b5e1c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b5e1e:	a801      	add	r0, sp, #4
   b5e20:	f7ff fc9e 	bl	b5760 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b5e24:	682a      	ldr	r2, [r5, #0]
   b5e26:	6823      	ldr	r3, [r4, #0]
   b5e28:	8812      	ldrh	r2, [r2, #0]
   b5e2a:	881b      	ldrh	r3, [r3, #0]
   b5e2c:	429a      	cmp	r2, r3
   b5e2e:	d10d      	bne.n	b5e4c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b5e30:	4629      	mov	r1, r5
   b5e32:	a802      	add	r0, sp, #8
   b5e34:	f7ff ffdc 	bl	b5df0 <_ZNK8particle13BlePeerDevice7addressEv>
   b5e38:	4621      	mov	r1, r4
   b5e3a:	a804      	add	r0, sp, #16
   b5e3c:	f7ff ffd8 	bl	b5df0 <_ZNK8particle13BlePeerDevice7addressEv>
   b5e40:	a904      	add	r1, sp, #16
   b5e42:	a802      	add	r0, sp, #8
   b5e44:	f7ff fcfb 	bl	b583e <_ZNK8particle10BleAddresseqERKS0_>
   b5e48:	4604      	mov	r4, r0
   b5e4a:	b900      	cbnz	r0, b5e4e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b5e4c:	2400      	movs	r4, #0
    WiringBleLock lk;
   b5e4e:	a801      	add	r0, sp, #4
   b5e50:	f7ff fc94 	bl	b577c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b5e54:	4620      	mov	r0, r4
   b5e56:	b007      	add	sp, #28
   b5e58:	bd30      	pop	{r4, r5, pc}
	...

000b5e5c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b5e5c:	b510      	push	{r4, lr}
   b5e5e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b5e60:	2064      	movs	r0, #100	; 0x64
   b5e62:	f7fe fe2c 	bl	b4abe <_Znwj>
   b5e66:	b168      	cbz	r0, b5e84 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b5e68:	2300      	movs	r3, #0
   b5e6a:	e9c0 3300 	strd	r3, r3, [r0]
   b5e6e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5e76:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b5e7a:	6203      	str	r3, [r0, #32]
   b5e7c:	62c3      	str	r3, [r0, #44]	; 0x2c
   b5e7e:	63c3      	str	r3, [r0, #60]	; 0x3c
   b5e80:	64c3      	str	r3, [r0, #76]	; 0x4c
   b5e82:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b5e84:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b5e86:	b920      	cbnz	r0, b5e92 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b5e88:	4a0a      	ldr	r2, [pc, #40]	; (b5eb4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5e8a:	490b      	ldr	r1, [pc, #44]	; (b5eb8 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b5e8c:	200a      	movs	r0, #10
   b5e8e:	f7ff fa33 	bl	b52f8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b5e92:	2000      	movs	r0, #0
   b5e94:	f7ff f8b0 	bl	b4ff8 <hal_ble_stack_init>
   b5e98:	b120      	cbz	r0, b5ea4 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b5e9a:	4a06      	ldr	r2, [pc, #24]	; (b5eb4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5e9c:	4907      	ldr	r1, [pc, #28]	; (b5ebc <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b5e9e:	200a      	movs	r0, #10
   b5ea0:	f7ff fa2a 	bl	b52f8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b5ea4:	6821      	ldr	r1, [r4, #0]
   b5ea6:	4806      	ldr	r0, [pc, #24]	; (b5ec0 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b5ea8:	2200      	movs	r2, #0
   b5eaa:	f7ff f8f9 	bl	b50a0 <hal_ble_set_callback_on_periph_link_events>
}
   b5eae:	4620      	mov	r0, r4
   b5eb0:	bd10      	pop	{r4, pc}
   b5eb2:	bf00      	nop
   b5eb4:	000b5129 	.word	0x000b5129
   b5eb8:	000ba2f4 	.word	0x000ba2f4
   b5ebc:	000ba332 	.word	0x000ba332
   b5ec0:	000b6865 	.word	0x000b6865

000b5ec4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b5ec4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b5ec6:	4c0a      	ldr	r4, [pc, #40]	; (b5ef0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b5ec8:	7823      	ldrb	r3, [r4, #0]
   b5eca:	f3bf 8f5b 	dmb	ish
   b5ece:	07db      	lsls	r3, r3, #31
   b5ed0:	d40c      	bmi.n	b5eec <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5ed2:	4620      	mov	r0, r4
   b5ed4:	f7fe fe06 	bl	b4ae4 <__cxa_guard_acquire>
   b5ed8:	b140      	cbz	r0, b5eec <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5eda:	4806      	ldr	r0, [pc, #24]	; (b5ef4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5edc:	f7ff ffbe 	bl	b5e5c <_ZN8particle14BleLocalDeviceC1Ev>
   b5ee0:	4620      	mov	r0, r4
   b5ee2:	f7fe fe04 	bl	b4aee <__cxa_guard_release>
   b5ee6:	4804      	ldr	r0, [pc, #16]	; (b5ef8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5ee8:	f003 ffd4 	bl	b9e94 <atexit>
    return instance;
}
   b5eec:	4801      	ldr	r0, [pc, #4]	; (b5ef4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5eee:	bd10      	pop	{r4, pc}
   b5ef0:	2003e664 	.word	0x2003e664
   b5ef4:	2003e66c 	.word	0x2003e66c
   b5ef8:	000b6169 	.word	0x000b6169

000b5efc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5efc:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b5efe:	6803      	ldr	r3, [r0, #0]
   b5f00:	3b09      	subs	r3, #9
   b5f02:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5f04:	b08d      	sub	sp, #52	; 0x34
   b5f06:	4604      	mov	r4, r0
   b5f08:	460d      	mov	r5, r1
    switch (event->type) {
   b5f0a:	d811      	bhi.n	b5f30 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b5f0c:	f7ff ffda 	bl	b5ec4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5f10:	88a1      	ldrh	r1, [r4, #4]
   b5f12:	6800      	ldr	r0, [r0, #0]
   b5f14:	f7ff fe99 	bl	b5c4a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b5f18:	4603      	mov	r3, r0
   b5f1a:	b958      	cbnz	r0, b5f34 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b5f1c:	2220      	movs	r2, #32
   b5f1e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b5f22:	4a0b      	ldr	r2, [pc, #44]	; (b5f50 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b5f24:	9200      	str	r2, [sp, #0]
   b5f26:	490b      	ldr	r1, [pc, #44]	; (b5f54 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b5f28:	aa04      	add	r2, sp, #16
   b5f2a:	2032      	movs	r0, #50	; 0x32
   b5f2c:	f7ff f9ec 	bl	b5308 <log_message>
}
   b5f30:	b00d      	add	sp, #52	; 0x34
   b5f32:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b5f34:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b5f36:	2a00      	cmp	r2, #0
   b5f38:	d0fa      	beq.n	b5f30 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b5f3a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5f3e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b5f42:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b5f46:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b5f48:	aa04      	add	r2, sp, #16
   b5f4a:	a903      	add	r1, sp, #12
   b5f4c:	47a0      	blx	r4
}
   b5f4e:	e7ef      	b.n	b5f30 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b5f50:	000ba374 	.word	0x000ba374
   b5f54:	000ba30b 	.word	0x000ba30b

000b5f58 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b5f58:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b5f5a:	2000      	movs	r0, #0
   b5f5c:	f7ff f84c 	bl	b4ff8 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b5f60:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b5f64:	bd08      	pop	{r3, pc}

000b5f66 <_ZNK8particle14BleLocalDevice13setDeviceNameEPKc>:

int BleLocalDevice::setDeviceName(const char* name, size_t len) const {
    return hal_ble_gap_set_device_name(name, len, nullptr);
}

int BleLocalDevice::setDeviceName(const char* name) const {
   b5f66:	b510      	push	{r4, lr}
    return setDeviceName(name, name ? strnlen(name, BLE_MAX_DEV_NAME_LEN) : 0);
   b5f68:	460c      	mov	r4, r1
   b5f6a:	b121      	cbz	r1, b5f76 <_ZNK8particle14BleLocalDevice13setDeviceNameEPKc+0x10>
   b5f6c:	2114      	movs	r1, #20
   b5f6e:	4620      	mov	r0, r4
   b5f70:	f004 f83f 	bl	b9ff2 <strnlen>
   b5f74:	4601      	mov	r1, r0
    return hal_ble_gap_set_device_name(name, len, nullptr);
   b5f76:	4620      	mov	r0, r4
   b5f78:	2200      	movs	r2, #0
}
   b5f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_ble_gap_set_device_name(name, len, nullptr);
   b5f7e:	f7ff b843 	b.w	b5008 <hal_ble_gap_set_device_name>

000b5f82 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b5f82:	b510      	push	{r4, lr}
   b5f84:	4604      	mov	r4, r0
    ::free(ptr);
   b5f86:	6940      	ldr	r0, [r0, #20]
   b5f88:	f7ff fa8a 	bl	b54a0 <free>
   b5f8c:	68a0      	ldr	r0, [r4, #8]
   b5f8e:	f7ff fa87 	bl	b54a0 <free>
   b5f92:	4620      	mov	r0, r4
   b5f94:	bd10      	pop	{r4, pc}

000b5f96 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b5f96:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b5f98:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b5f9c:	e9c0 2200 	strd	r2, r2, [r0]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              scanResultCallback_(nullptr),
              scanResultCallbackRef_(nullptr) {
   b5fa0:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5fa4:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b5fa8:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b5fac:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b5fb0:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b5fb4:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b5fb8:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b5fbc:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b5fc0:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b5fc4:	6202      	str	r2, [r0, #32]
   b5fc6:	6302      	str	r2, [r0, #48]	; 0x30
   b5fc8:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
        resultsVector_.clear();
    }
   b5fcc:	4770      	bx	lr

000b5fce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5fce:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5fd0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5fd4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5fd6:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b5fda:	42ae      	cmp	r6, r5
   b5fdc:	d004      	beq.n	b5fe8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b5fde:	4628      	mov	r0, r5
   b5fe0:	f003 fb28 	bl	b9634 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5fe4:	3510      	adds	r5, #16
   b5fe6:	e7f8      	b.n	b5fda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5fe8:	6820      	ldr	r0, [r4, #0]
   b5fea:	f7ff fa59 	bl	b54a0 <free>
}
   b5fee:	4620      	mov	r0, r4
   b5ff0:	bd70      	pop	{r4, r5, r6, pc}

000b5ff2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5ff2:	b510      	push	{r4, lr}
   b5ff4:	4604      	mov	r4, r0
    ::free(ptr);
   b5ff6:	6800      	ldr	r0, [r0, #0]
   b5ff8:	f7ff fa52 	bl	b54a0 <free>
}
   b5ffc:	4620      	mov	r0, r4
   b5ffe:	bd10      	pop	{r4, pc}

000b6000 <_ZN8particle16BleScanDelegatorD1Ev>:

    ~BleScanDelegator() = default;
   b6000:	b570      	push	{r4, r5, r6, lr}
   b6002:	4604      	mov	r4, r0
    ::free(ptr);
   b6004:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b6006:	f7ff fa4b 	bl	b54a0 <free>
   b600a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b600c:	f7ff fa48 	bl	b54a0 <free>
    }
    ~BleScanFilter() = default;
   b6010:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b6014:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6018:	f7ff ffeb 	bl	b5ff2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b601c:	4628      	mov	r0, r5
   b601e:	f7ff ffd6 	bl	b5fce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b6022:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6026:	f7ff fb62 	bl	b56ee <_ZNSt14_Function_baseD1Ev>
   b602a:	f104 0018 	add.w	r0, r4, #24
   b602e:	f7ff fb5e 	bl	b56ee <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6032:	e9d4 5300 	ldrd	r5, r3, [r4]
   b6036:	2624      	movs	r6, #36	; 0x24
   b6038:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b603c:	42ae      	cmp	r6, r5
   b603e:	d004      	beq.n	b604a <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b6040:	4628      	mov	r0, r5
   b6042:	f7ff ff9e 	bl	b5f82 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b6046:	3524      	adds	r5, #36	; 0x24
   b6048:	e7f8      	b.n	b603c <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b604a:	6820      	ldr	r0, [r4, #0]
   b604c:	f7ff fa28 	bl	b54a0 <free>
   b6050:	4620      	mov	r0, r4
   b6052:	bd70      	pop	{r4, r5, r6, pc}

000b6054 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6054:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b6056:	1e14      	subs	r4, r2, #0
   b6058:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b605a:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b605c:	db02      	blt.n	b6064 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b605e:	1862      	adds	r2, r4, r1
   b6060:	429a      	cmp	r2, r3
   b6062:	dd00      	ble.n	b6066 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b6064:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b6066:	682a      	ldr	r2, [r5, #0]
   b6068:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b606a:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b606c:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b606e:	1a52      	subs	r2, r2, r1
   b6070:	f003 ff3c 	bl	b9eec <memmove>
    size_ -= n;
   b6074:	686a      	ldr	r2, [r5, #4]
   b6076:	1b12      	subs	r2, r2, r4
   b6078:	606a      	str	r2, [r5, #4]
}
   b607a:	bd38      	pop	{r3, r4, r5, pc}

000b607c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b607c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b607e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6080:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6082:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6084:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6086:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6088:	f7fe fd19 	bl	b4abe <_Znwj>
   b608c:	b118      	cbz	r0, b6096 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b608e:	682b      	ldr	r3, [r5, #0]
   b6090:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6092:	686b      	ldr	r3, [r5, #4]
   b6094:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6096:	4b03      	ldr	r3, [pc, #12]	; (b60a4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b6098:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b609a:	4b03      	ldr	r3, [pc, #12]	; (b60a8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b609c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b609e:	60a3      	str	r3, [r4, #8]
      }
   b60a0:	4620      	mov	r0, r4
   b60a2:	bd38      	pop	{r3, r4, r5, pc}
   b60a4:	000b55f5 	.word	0x000b55f5
   b60a8:	000b560d 	.word	0x000b560d

000b60ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b60ac:	680b      	ldr	r3, [r1, #0]
   b60ae:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b60b0:	b113      	cbz	r3, b60b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b60b2:	685a      	ldr	r2, [r3, #4]
   b60b4:	3201      	adds	r2, #1
   b60b6:	605a      	str	r2, [r3, #4]
      }
   b60b8:	4770      	bx	lr

000b60ba <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b60ba:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b60bc:	f851 3b04 	ldr.w	r3, [r1], #4
   b60c0:	4604      	mov	r4, r0
   b60c2:	f840 3b04 	str.w	r3, [r0], #4
   b60c6:	f7ff fff1 	bl	b60ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b60ca:	6823      	ldr	r3, [r4, #0]
   b60cc:	b90b      	cbnz	r3, b60d2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b60ce:	f7ff fa87 	bl	b55e0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b60d2:	4620      	mov	r0, r4
   b60d4:	bd10      	pop	{r4, pc}

000b60d6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b60d6:	b510      	push	{r4, lr}
   b60d8:	f851 3b04 	ldr.w	r3, [r1], #4
   b60dc:	4604      	mov	r4, r0
   b60de:	f840 3b04 	str.w	r3, [r0], #4
   b60e2:	f7ff ffe3 	bl	b60ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b60e6:	4620      	mov	r0, r4
   b60e8:	bd10      	pop	{r4, pc}

000b60ea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b60ea:	b510      	push	{r4, lr}
   b60ec:	f851 3b04 	ldr.w	r3, [r1], #4
   b60f0:	4604      	mov	r4, r0
   b60f2:	f840 3b04 	str.w	r3, [r0], #4
   b60f6:	f7ff ffd9 	bl	b60ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b60fa:	4620      	mov	r0, r4
   b60fc:	bd10      	pop	{r4, pc}

000b60fe <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b60fe:	b510      	push	{r4, lr}
   b6100:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6102:	3004      	adds	r0, #4
   b6104:	f7fe fe5c 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6108:	4620      	mov	r0, r4
   b610a:	bd10      	pop	{r4, pc}

000b610c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b610c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b610e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6112:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6114:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6118:	42ae      	cmp	r6, r5
   b611a:	d004      	beq.n	b6126 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b611c:	1d28      	adds	r0, r5, #4
   b611e:	f7fe fe4f 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6122:	3508      	adds	r5, #8
   b6124:	e7f8      	b.n	b6118 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6126:	6820      	ldr	r0, [r4, #0]
   b6128:	f7ff f9ba 	bl	b54a0 <free>
}
   b612c:	4620      	mov	r0, r4
   b612e:	bd70      	pop	{r4, r5, r6, pc}

000b6130 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6130:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6132:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6136:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6138:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b613c:	42ae      	cmp	r6, r5
   b613e:	d004      	beq.n	b614a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b6140:	1d28      	adds	r0, r5, #4
   b6142:	f7fe fe3d 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6146:	3508      	adds	r5, #8
   b6148:	e7f8      	b.n	b613c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b614a:	6820      	ldr	r0, [r4, #0]
   b614c:	f7ff f9a8 	bl	b54a0 <free>
}
   b6150:	4620      	mov	r0, r4
   b6152:	bd70      	pop	{r4, r5, r6, pc}

000b6154 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6154:	b510      	push	{r4, lr}
   b6156:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b6158:	3024      	adds	r0, #36	; 0x24
   b615a:	f7ff ffe9 	bl	b6130 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b615e:	f104 0018 	add.w	r0, r4, #24
   b6162:	f7ff ffd3 	bl	b610c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b6166:	bd10      	pop	{r4, pc}

000b6168 <__tcf_0>:
    static BleLocalDevice instance;
   b6168:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b616a:	4b17      	ldr	r3, [pc, #92]	; (b61c8 <__tcf_0+0x60>)
   b616c:	681c      	ldr	r4, [r3, #0]
   b616e:	b354      	cbz	r4, b61c6 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b6170:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6174:	f7ff fabb 	bl	b56ee <_ZNSt14_Function_baseD1Ev>
   b6178:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b617c:	f7ff fab7 	bl	b56ee <_ZNSt14_Function_baseD1Ev>
   b6180:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6184:	f7ff fab3 	bl	b56ee <_ZNSt14_Function_baseD1Ev>
   b6188:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b618c:	f7ff faaf 	bl	b56ee <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6190:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b6194:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6198:	42ae      	cmp	r6, r5
   b619a:	d004      	beq.n	b61a6 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b619c:	1d28      	adds	r0, r5, #4
   b619e:	f7fe fe0f 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b61a2:	3508      	adds	r5, #8
   b61a4:	e7f8      	b.n	b6198 <__tcf_0+0x30>
    ::free(ptr);
   b61a6:	69a0      	ldr	r0, [r4, #24]
   b61a8:	f7ff f97a 	bl	b54a0 <free>
    ~BleLocalDeviceImpl() = default;
   b61ac:	f104 000c 	add.w	r0, r4, #12
   b61b0:	f7ff ffbe 	bl	b6130 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b61b4:	4620      	mov	r0, r4
   b61b6:	f7ff ffa9 	bl	b610c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b61ba:	4620      	mov	r0, r4
   b61bc:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b61be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b61c2:	f7fe bc80 	b.w	b4ac6 <_ZdlPvj>
   b61c6:	bd70      	pop	{r4, r5, r6, pc}
   b61c8:	2003e66c 	.word	0x2003e66c

000b61cc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b61cc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b61ce:	b510      	push	{r4, lr}
      if (_M_empty())
   b61d0:	b90a      	cbnz	r2, b61d6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b61d2:	f003 fd49 	bl	b9c68 <_ZSt25__throw_bad_function_callv>
    }
   b61d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b61da:	68c3      	ldr	r3, [r0, #12]
   b61dc:	4718      	bx	r3

000b61de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b61de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b61e2:	2300      	movs	r3, #0
   b61e4:	e9c0 3300 	strd	r3, r3, [r0]
   b61e8:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b61ea:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b61ee:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b61f0:	4605      	mov	r5, r0
   b61f2:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b61f4:	dd4a      	ble.n	b628c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b61f6:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b61fa:	f7ff f949 	bl	b5490 <malloc>
            if (!d) {
   b61fe:	4606      	mov	r6, r0
   b6200:	2800      	cmp	r0, #0
   b6202:	d043      	beq.n	b628c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b6204:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b6208:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b620a:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b620e:	d916      	bls.n	b623e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b6210:	4550      	cmp	r0, sl
   b6212:	d215      	bcs.n	b6240 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b6214:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b6218:	f1a4 0910 	sub.w	r9, r4, #16
   b621c:	ebaa 0404 	sub.w	r4, sl, r4
   b6220:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b6222:	45d1      	cmp	r9, sl
   b6224:	d01d      	beq.n	b6262 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b6226:	b11c      	cbz	r4, b6230 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b6228:	4651      	mov	r1, sl
   b622a:	4620      	mov	r0, r4
   b622c:	f003 fa7f 	bl	b972e <_ZN6StringC1EOS_>
                end->~T();
   b6230:	4650      	mov	r0, sl
   b6232:	f003 f9ff 	bl	b9634 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6236:	f1aa 0a10 	sub.w	sl, sl, #16
   b623a:	3c10      	subs	r4, #16
   b623c:	e7f1      	b.n	b6222 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b623e:	d010      	beq.n	b6262 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b6240:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b6242:	45a2      	cmp	sl, r4
   b6244:	d00d      	beq.n	b6262 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b6246:	f1b9 0f00 	cmp.w	r9, #0
   b624a:	d003      	beq.n	b6254 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b624c:	4621      	mov	r1, r4
   b624e:	4648      	mov	r0, r9
   b6250:	f003 fa6d 	bl	b972e <_ZN6StringC1EOS_>
                p->~T();
   b6254:	4620      	mov	r0, r4
   b6256:	f003 f9ed 	bl	b9634 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b625a:	3410      	adds	r4, #16
   b625c:	f109 0910 	add.w	r9, r9, #16
   b6260:	e7ef      	b.n	b6242 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b6262:	6828      	ldr	r0, [r5, #0]
   b6264:	f7ff f91c 	bl	b54a0 <free>
        capacity_ = n;
   b6268:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b626c:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b626e:	e9d7 4300 	ldrd	r4, r3, [r7]
   b6272:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b6276:	45a0      	cmp	r8, r4
   b6278:	d006      	beq.n	b6288 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b627a:	4621      	mov	r1, r4
   b627c:	4630      	mov	r0, r6
   b627e:	f003 fa70 	bl	b9762 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b6282:	3410      	adds	r4, #16
   b6284:	3610      	adds	r6, #16
   b6286:	e7f6      	b.n	b6276 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b6288:	687b      	ldr	r3, [r7, #4]
   b628a:	606b      	str	r3, [r5, #4]
}
   b628c:	4628      	mov	r0, r5
   b628e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b6292 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
            return false;
        }
        return true;
    }

    bool filterByDeviceName(const BleScanResult& result) {
   b6292:	b530      	push	{r4, r5, lr}
   b6294:	b08d      	sub	sp, #52	; 0x34
   b6296:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b6298:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b629c:	a801      	add	r0, sp, #4
   b629e:	f7ff ff9e 	bl	b61de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b62a2:	9b02      	ldr	r3, [sp, #8]
   b62a4:	2b00      	cmp	r3, #0
   b62a6:	dd2f      	ble.n	b6308 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b62a8:	f104 0114 	add.w	r1, r4, #20
   b62ac:	a804      	add	r0, sp, #16
   b62ae:	f7ff fc6d 	bl	b5b8c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b62b2:	f104 0108 	add.w	r1, r4, #8
   b62b6:	a808      	add	r0, sp, #32
   b62b8:	f7ff fc68 	bl	b5b8c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b62bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b62be:	9b06      	ldr	r3, [sp, #24]
   b62c0:	4313      	orrs	r3, r2
   b62c2:	d01f      	beq.n	b6304 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b62c4:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b62c8:	eb04 1505 	add.w	r5, r4, r5, lsl #4
                LOG_DEBUG(TRACE, "Device name mismatched.");
                return false;
            }
            for (const auto& name : filterDeviceNames) {
   b62cc:	42ac      	cmp	r4, r5
   b62ce:	d019      	beq.n	b6304 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b62d0:	a904      	add	r1, sp, #16
   b62d2:	4620      	mov	r0, r4
   b62d4:	f003 fa9b 	bl	b980e <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b62d8:	b160      	cbz	r0, b62f4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b62da:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b62dc:	a808      	add	r0, sp, #32
   b62de:	f003 f9a9 	bl	b9634 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b62e2:	a804      	add	r0, sp, #16
   b62e4:	f003 f9a6 	bl	b9634 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b62e8:	a801      	add	r0, sp, #4
   b62ea:	f7ff fe70 	bl	b5fce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
            }
            LOG_DEBUG(TRACE, "Device name mismatched.");
            return false;
        }
        return true;
    }
   b62ee:	4620      	mov	r0, r4
   b62f0:	b00d      	add	sp, #52	; 0x34
   b62f2:	bd30      	pop	{r4, r5, pc}
   b62f4:	4620      	mov	r0, r4
   b62f6:	a908      	add	r1, sp, #32
   b62f8:	f003 fa89 	bl	b980e <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b62fc:	3410      	adds	r4, #16
   b62fe:	2800      	cmp	r0, #0
   b6300:	d0e4      	beq.n	b62cc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b6302:	e7ea      	b.n	b62da <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b6304:	2400      	movs	r4, #0
   b6306:	e7e9      	b.n	b62dc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b6308:	2401      	movs	r4, #1
   b630a:	e7ed      	b.n	b62e8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b630c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b630e:	2300      	movs	r3, #0
   b6310:	e9c0 3300 	strd	r3, r3, [r0]
   b6314:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6316:	684f      	ldr	r7, [r1, #4]
   b6318:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b631a:	4605      	mov	r5, r0
   b631c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b631e:	dd3e      	ble.n	b639e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b6320:	00f8      	lsls	r0, r7, #3
   b6322:	f7ff f8b5 	bl	b5490 <malloc>
            if (!d) {
   b6326:	4604      	mov	r4, r0
   b6328:	b3c8      	cbz	r0, b639e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b632a:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b632e:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b6330:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b6334:	d910      	bls.n	b6358 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b6336:	429c      	cmp	r4, r3
   b6338:	d20f      	bcs.n	b635a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b633a:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b633c:	1a1a      	subs	r2, r3, r0
   b633e:	f1a0 0c08 	sub.w	ip, r0, #8
   b6342:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b6344:	459c      	cmp	ip, r3
   b6346:	d018      	beq.n	b637a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b6348:	b11a      	cbz	r2, b6352 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b634a:	6819      	ldr	r1, [r3, #0]
   b634c:	6011      	str	r1, [r2, #0]
   b634e:	6859      	ldr	r1, [r3, #4]
   b6350:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b6352:	3b08      	subs	r3, #8
   b6354:	3a08      	subs	r2, #8
   b6356:	e7f5      	b.n	b6344 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b6358:	d00f      	beq.n	b637a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b635a:	4601      	mov	r1, r0
   b635c:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b635e:	428b      	cmp	r3, r1
   b6360:	d00b      	beq.n	b637a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b6362:	b13a      	cbz	r2, b6374 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b6364:	f8d1 c000 	ldr.w	ip, [r1]
   b6368:	f8c2 c000 	str.w	ip, [r2]
   b636c:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b6370:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b6374:	3108      	adds	r1, #8
   b6376:	3208      	adds	r2, #8
   b6378:	e7f1      	b.n	b635e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b637a:	f7ff f891 	bl	b54a0 <free>
        data_ = d;
   b637e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6380:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6382:	e9d6 3100 	ldrd	r3, r1, [r6]
   b6386:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b638a:	4298      	cmp	r0, r3
   b638c:	d006      	beq.n	b639c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b638e:	681a      	ldr	r2, [r3, #0]
   b6390:	6022      	str	r2, [r4, #0]
   b6392:	685a      	ldr	r2, [r3, #4]
   b6394:	6062      	str	r2, [r4, #4]
   b6396:	3308      	adds	r3, #8
   b6398:	3408      	adds	r4, #8
   b639a:	e7f6      	b.n	b638a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b639c:	6069      	str	r1, [r5, #4]
}
   b639e:	4628      	mov	r0, r5
   b63a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b63a2 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b63a2:	b570      	push	{r4, r5, r6, lr}
   b63a4:	4604      	mov	r4, r0
        capacity_(0) {
   b63a6:	2000      	movs	r0, #0
   b63a8:	e9c4 0000 	strd	r0, r0, [r4]
   b63ac:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b63ae:	684e      	ldr	r6, [r1, #4]
   b63b0:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b63b2:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b63b4:	dd12      	ble.n	b63dc <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b63b6:	0071      	lsls	r1, r6, #1
   b63b8:	f7ff f87a 	bl	b54b0 <realloc>
            if (!d) {
   b63bc:	b170      	cbz	r0, b63dc <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b63be:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b63c0:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b63c2:	e9d5 3200 	ldrd	r3, r2, [r5]
   b63c6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b63ca:	429a      	cmp	r2, r3
   b63cc:	d004      	beq.n	b63d8 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b63ce:	f833 1b02 	ldrh.w	r1, [r3], #2
   b63d2:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b63d6:	e7f8      	b.n	b63ca <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b63d8:	686b      	ldr	r3, [r5, #4]
   b63da:	6063      	str	r3, [r4, #4]
}
   b63dc:	4620      	mov	r0, r4
   b63de:	bd70      	pop	{r4, r5, r6, pc}

000b63e0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b63e0:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b63e2:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b63e4:	4604      	mov	r4, r0
        if (!dismissed_) {
   b63e6:	b923      	cbnz	r3, b63f2 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                LOG_DEBUG(TRACE, "Custom data mismatched.");
                return false;
            }
            if (srLen == filterCustomDatalen) {
                uint8_t* buf = (uint8_t*)malloc(srLen);
                SCOPE_GUARD({
   b63e8:	6803      	ldr	r3, [r0, #0]
   b63ea:	6818      	ldr	r0, [r3, #0]
   b63ec:	b108      	cbz	r0, b63f2 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b63ee:	f7ff f857 	bl	b54a0 <free>
            func_();
        }
    }
   b63f2:	4620      	mov	r0, r4
   b63f4:	bd10      	pop	{r4, pc}

000b63f6 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b63f6:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b63f8:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b63fa:	4604      	mov	r4, r0
        if (!dismissed_) {
   b63fc:	b923      	cbnz	r3, b6408 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                    return true;
                }
            }
            if (advLen == filterCustomDatalen) {
                uint8_t* buf = (uint8_t*)malloc(advLen);
                SCOPE_GUARD({
   b63fe:	6803      	ldr	r3, [r0, #0]
   b6400:	6818      	ldr	r0, [r3, #0]
   b6402:	b108      	cbz	r0, b6408 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b6404:	f7ff f84c 	bl	b54a0 <free>
    }
   b6408:	4620      	mov	r0, r4
   b640a:	bd10      	pop	{r4, pc}

000b640c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b640c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b6410:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b6414:	b08f      	sub	sp, #60	; 0x3c
   b6416:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b6418:	f1b8 0f00 	cmp.w	r8, #0
   b641c:	d072      	beq.n	b6504 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b641e:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b6420:	2d00      	cmp	r5, #0
   b6422:	d06f      	beq.n	b6504 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b6424:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b6428:	231f      	movs	r3, #31
   b642a:	2200      	movs	r2, #0
   b642c:	21ff      	movs	r1, #255	; 0xff
   b642e:	4648      	mov	r0, r9
   b6430:	f7ff fb7a 	bl	b5b28 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b6434:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b6436:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b6438:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b643a:	2200      	movs	r2, #0
   b643c:	4619      	mov	r1, r3
   b643e:	4638      	mov	r0, r7
   b6440:	f7ff fb72 	bl	b5b28 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b6444:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b6446:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b6448:	d006      	beq.n	b6458 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b644a:	42ae      	cmp	r6, r5
   b644c:	d030      	beq.n	b64b0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b644e:	2400      	movs	r4, #0
            }
            LOG_DEBUG(TRACE, "Custom data mismatched.");
            return false;
        }
        return true;
    }
   b6450:	4620      	mov	r0, r4
   b6452:	b00f      	add	sp, #60	; 0x3c
   b6454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b6458:	4620      	mov	r0, r4
   b645a:	f7ff f819 	bl	b5490 <malloc>
            dismissed_(false) {
   b645e:	ab03      	add	r3, sp, #12
   b6460:	9304      	str	r3, [sp, #16]
   b6462:	2300      	movs	r3, #0
   b6464:	4604      	mov	r4, r0
   b6466:	9003      	str	r0, [sp, #12]
   b6468:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b646c:	b970      	cbnz	r0, b648c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b646e:	2320      	movs	r3, #32
   b6470:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b6474:	4b24      	ldr	r3, [pc, #144]	; (b6508 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b6476:	9300      	str	r3, [sp, #0]
   b6478:	4924      	ldr	r1, [pc, #144]	; (b650c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b647a:	4603      	mov	r3, r0
   b647c:	aa06      	add	r2, sp, #24
   b647e:	2032      	movs	r0, #50	; 0x32
   b6480:	f7fe ff42 	bl	b5308 <log_message>
                    return false;
   b6484:	a804      	add	r0, sp, #16
   b6486:	f7ff ffab 	bl	b63e0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b648a:	e7e1      	b.n	b6450 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b648c:	4602      	mov	r2, r0
   b648e:	21ff      	movs	r1, #255	; 0xff
   b6490:	462b      	mov	r3, r5
   b6492:	4648      	mov	r0, r9
   b6494:	f7ff fb48 	bl	b5b28 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b6498:	9803      	ldr	r0, [sp, #12]
   b649a:	462a      	mov	r2, r5
   b649c:	4641      	mov	r1, r8
   b649e:	f003 fd07 	bl	b9eb0 <memcmp>
   b64a2:	b118      	cbz	r0, b64ac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b64a4:	a804      	add	r0, sp, #16
   b64a6:	f7ff ff9b 	bl	b63e0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b64aa:	e7ce      	b.n	b644a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b64ac:	2401      	movs	r4, #1
   b64ae:	e7e9      	b.n	b6484 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b64b0:	4628      	mov	r0, r5
   b64b2:	f7fe ffed 	bl	b5490 <malloc>
   b64b6:	2400      	movs	r4, #0
   b64b8:	ab03      	add	r3, sp, #12
   b64ba:	4606      	mov	r6, r0
   b64bc:	9003      	str	r0, [sp, #12]
   b64be:	9304      	str	r3, [sp, #16]
   b64c0:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b64c4:	b978      	cbnz	r0, b64e6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b64c6:	2320      	movs	r3, #32
   b64c8:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b64cc:	4b0e      	ldr	r3, [pc, #56]	; (b6508 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b64ce:	9300      	str	r3, [sp, #0]
   b64d0:	490e      	ldr	r1, [pc, #56]	; (b650c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b64d2:	4603      	mov	r3, r0
   b64d4:	aa06      	add	r2, sp, #24
   b64d6:	2032      	movs	r0, #50	; 0x32
   b64d8:	f7fe ff16 	bl	b5308 <log_message>
                    return false;
   b64dc:	4634      	mov	r4, r6
   b64de:	a804      	add	r0, sp, #16
   b64e0:	f7ff ff89 	bl	b63f6 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b64e4:	e7b4      	b.n	b6450 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b64e6:	4602      	mov	r2, r0
   b64e8:	21ff      	movs	r1, #255	; 0xff
   b64ea:	462b      	mov	r3, r5
   b64ec:	4638      	mov	r0, r7
   b64ee:	f7ff fb1b 	bl	b5b28 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b64f2:	9803      	ldr	r0, [sp, #12]
   b64f4:	462a      	mov	r2, r5
   b64f6:	4641      	mov	r1, r8
   b64f8:	f003 fcda 	bl	b9eb0 <memcmp>
   b64fc:	2800      	cmp	r0, #0
   b64fe:	d1ee      	bne.n	b64de <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b6500:	2401      	movs	r4, #1
   b6502:	e7ec      	b.n	b64de <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b6504:	2401      	movs	r4, #1
   b6506:	e7a3      	b.n	b6450 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b6508:	000ba38c 	.word	0x000ba38c
   b650c:	000ba30b 	.word	0x000ba30b

000b6510 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b6510:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b6512:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b6514:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6516:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6518:	dd03      	ble.n	b6522 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b651a:	f7fe ffc9 	bl	b54b0 <realloc>
            if (!d) {
   b651e:	b918      	cbnz	r0, b6528 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b6520:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b6522:	f7fe ffbd 	bl	b54a0 <free>
        T* d = nullptr;
   b6526:	2000      	movs	r0, #0
        data_ = d;
   b6528:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b652a:	60a5      	str	r5, [r4, #8]
        return true;
   b652c:	2001      	movs	r0, #1
   b652e:	e7f7      	b.n	b6520 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b6530 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b6530:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b6532:	6883      	ldr	r3, [r0, #8]
   b6534:	428b      	cmp	r3, r1
   b6536:	da02      	bge.n	b653e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b6538:	f7ff ffea 	bl	b6510 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b653c:	bd08      	pop	{r3, pc}
    return true;
   b653e:	2001      	movs	r0, #1
   b6540:	e7fc      	b.n	b653c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b6542 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6542:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b6544:	2300      	movs	r3, #0
   b6546:	e9c0 3300 	strd	r3, r3, [r0]
   b654a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b654c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b654e:	6849      	ldr	r1, [r1, #4]
   b6550:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6552:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6554:	dd10      	ble.n	b6578 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b6556:	f7ff ffdb 	bl	b6510 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b655a:	b168      	cbz	r0, b6578 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b655c:	e9d5 3100 	ldrd	r3, r1, [r5]
   b6560:	6822      	ldr	r2, [r4, #0]
   b6562:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b6564:	4299      	cmp	r1, r3
   b6566:	d005      	beq.n	b6574 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b6568:	b10a      	cbz	r2, b656e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b656a:	7818      	ldrb	r0, [r3, #0]
   b656c:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b656e:	3301      	adds	r3, #1
   b6570:	3201      	adds	r2, #1
   b6572:	e7f7      	b.n	b6564 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b6574:	686b      	ldr	r3, [r5, #4]
   b6576:	6063      	str	r3, [r4, #4]
}
   b6578:	4620      	mov	r0, r4
   b657a:	bd38      	pop	{r3, r4, r5, pc}

000b657c <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b657c:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b657e:	680b      	ldr	r3, [r1, #0]
   b6580:	6003      	str	r3, [r0, #0]
   b6582:	684b      	ldr	r3, [r1, #4]
   b6584:	6043      	str	r3, [r0, #4]
   b6586:	4604      	mov	r4, r0
   b6588:	460d      	mov	r5, r1
class BleAdvertisingData {
   b658a:	3008      	adds	r0, #8
   b658c:	3108      	adds	r1, #8
   b658e:	f7ff ffd8 	bl	b6542 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b6592:	f105 0114 	add.w	r1, r5, #20
   b6596:	f104 0014 	add.w	r0, r4, #20
   b659a:	f7ff ffd2 	bl	b6542 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b659e:	f895 3020 	ldrb.w	r3, [r5, #32]
   b65a2:	f884 3020 	strb.w	r3, [r4, #32]
   b65a6:	4620      	mov	r0, r4
   b65a8:	bd38      	pop	{r3, r4, r5, pc}

000b65aa <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b65aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b65ac:	4604      	mov	r4, r0
   b65ae:	a801      	add	r0, sp, #4
   b65b0:	f7ff ffc7 	bl	b6542 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b65b4:	9b01      	ldr	r3, [sp, #4]
   b65b6:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b65b8:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b65ba:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b65bc:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b65be:	6062      	str	r2, [r4, #4]
   b65c0:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b65c2:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b65c4:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b65c6:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b65c8:	9001      	str	r0, [sp, #4]
   b65ca:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b65cc:	f7fe ff68 	bl	b54a0 <free>
   b65d0:	b004      	add	sp, #16
   b65d2:	bd10      	pop	{r4, pc}

000b65d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b65d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b65d8:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b65da:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b65dc:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b65de:	4419      	add	r1, r3
   b65e0:	6883      	ldr	r3, [r0, #8]
   b65e2:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b65e4:	4604      	mov	r4, r0
   b65e6:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b65e8:	dc12      	bgt.n	b6610 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b65ea:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b65ec:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b65ee:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b65f0:	1bd2      	subs	r2, r2, r7
   b65f2:	4631      	mov	r1, r6
   b65f4:	1970      	adds	r0, r6, r5
   b65f6:	f003 fc79 	bl	b9eec <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b65fa:	462a      	mov	r2, r5
   b65fc:	4641      	mov	r1, r8
   b65fe:	4630      	mov	r0, r6
   b6600:	f003 fc66 	bl	b9ed0 <memcpy>
    size_ += n;
   b6604:	6863      	ldr	r3, [r4, #4]
   b6606:	442b      	add	r3, r5
   b6608:	6063      	str	r3, [r4, #4]
    return true;
   b660a:	2001      	movs	r0, #1
}
   b660c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6610:	f7ff ff7e 	bl	b6510 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6614:	2800      	cmp	r0, #0
   b6616:	d1e8      	bne.n	b65ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b6618:	e7f8      	b.n	b660c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b661a <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b661a:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b661c:	460a      	mov	r2, r1
   b661e:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b6620:	b510      	push	{r4, lr}
   b6622:	4604      	mov	r4, r0
    size_ = 0;
   b6624:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b6626:	b102      	cbz	r2, b662a <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b6628:	b90b      	cbnz	r3, b662e <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b662a:	2000      	movs	r0, #0
}
   b662c:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b662e:	2bff      	cmp	r3, #255	; 0xff
   b6630:	bf28      	it	cs
   b6632:	23ff      	movcs	r3, #255	; 0xff
   b6634:	f7ff ffce 	bl	b65d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b6638:	2800      	cmp	r0, #0
   b663a:	d0f7      	beq.n	b662c <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b663c:	6860      	ldr	r0, [r4, #4]
   b663e:	e7f5      	b.n	b662c <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b6640 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6642:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6644:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b6648:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b664a:	4604      	mov	r4, r0
   b664c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b664e:	da0b      	bge.n	b6668 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b6650:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6652:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6654:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6656:	1b52      	subs	r2, r2, r5
   b6658:	1c48      	adds	r0, r1, #1
   b665a:	f003 fc47 	bl	b9eec <memmove>
    new(p) T(std::move(value));
   b665e:	557e      	strb	r6, [r7, r5]
    ++size_;
   b6660:	6863      	ldr	r3, [r4, #4]
   b6662:	3301      	adds	r3, #1
   b6664:	6063      	str	r3, [r4, #4]
}
   b6666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6668:	3101      	adds	r1, #1
   b666a:	f7ff ff51 	bl	b6510 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b666e:	2800      	cmp	r0, #0
   b6670:	d1ee      	bne.n	b6650 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b6672:	e7f8      	b.n	b6666 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b6674 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6674:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b6676:	6841      	ldr	r1, [r0, #4]
   b6678:	f7ff bfe2 	b.w	b6640 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b667c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b667c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6680:	4604      	mov	r4, r0
   b6682:	461d      	mov	r5, r3
   b6684:	460f      	mov	r7, r1
   b6686:	ab01      	add	r3, sp, #4
   b6688:	4690      	mov	r8, r2
   b668a:	460a      	mov	r2, r1
   b668c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6690:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b6694:	f7fe ff8e 	bl	b55b4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b6698:	1cae      	adds	r6, r5, #2
   b669a:	6863      	ldr	r3, [r4, #4]
   b669c:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b669e:	f1b9 0f00 	cmp.w	r9, #0
   b66a2:	d126      	bne.n	b66f2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b66a4:	b328      	cbz	r0, b66f2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b66a6:	4433      	add	r3, r6
   b66a8:	1a1b      	subs	r3, r3, r0
   b66aa:	2bff      	cmp	r3, #255	; 0xff
   b66ac:	d809      	bhi.n	b66c2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b66ae:	9901      	ldr	r1, [sp, #4]
   b66b0:	4620      	mov	r0, r4
   b66b2:	f7ff fccf 	bl	b6054 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b66b6:	6861      	ldr	r1, [r4, #4]
   b66b8:	4620      	mov	r0, r4
   b66ba:	4431      	add	r1, r6
   b66bc:	f7ff ff38 	bl	b6530 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b66c0:	b918      	cbnz	r0, b66ca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b66c2:	6860      	ldr	r0, [r4, #4]
}
   b66c4:	b003      	add	sp, #12
   b66c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b66ca:	1c6a      	adds	r2, r5, #1
   b66cc:	9901      	ldr	r1, [sp, #4]
   b66ce:	b2d2      	uxtb	r2, r2
   b66d0:	4620      	mov	r0, r4
   b66d2:	f7ff ffb5 	bl	b6640 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b66d6:	9901      	ldr	r1, [sp, #4]
   b66d8:	463a      	mov	r2, r7
   b66da:	3101      	adds	r1, #1
   b66dc:	4620      	mov	r0, r4
   b66de:	f7ff ffaf 	bl	b6640 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b66e2:	9901      	ldr	r1, [sp, #4]
   b66e4:	462b      	mov	r3, r5
   b66e6:	4642      	mov	r2, r8
   b66e8:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b66ea:	4620      	mov	r0, r4
   b66ec:	f7ff ff72 	bl	b65d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b66f0:	e7e7      	b.n	b66c2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b66f2:	18f1      	adds	r1, r6, r3
   b66f4:	29ff      	cmp	r1, #255	; 0xff
   b66f6:	d8e4      	bhi.n	b66c2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b66f8:	4620      	mov	r0, r4
   b66fa:	f7ff ff19 	bl	b6530 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b66fe:	2800      	cmp	r0, #0
   b6700:	d0df      	beq.n	b66c2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b6702:	1c69      	adds	r1, r5, #1
   b6704:	b2c9      	uxtb	r1, r1
   b6706:	4620      	mov	r0, r4
   b6708:	f7ff ffb4 	bl	b6674 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b670c:	4639      	mov	r1, r7
   b670e:	4620      	mov	r0, r4
   b6710:	f7ff ffb0 	bl	b6674 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b6714:	6861      	ldr	r1, [r4, #4]
   b6716:	462b      	mov	r3, r5
   b6718:	4642      	mov	r2, r8
   b671a:	e7e6      	b.n	b66ea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b671c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b671c:	b430      	push	{r4, r5}
   b671e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b6722:	b11a      	cbz	r2, b672c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b6724:	9502      	str	r5, [sp, #8]
}
   b6726:	bc30      	pop	{r4, r5}
   b6728:	f7ff bfa8 	b.w	b667c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b672c:	6840      	ldr	r0, [r0, #4]
}
   b672e:	bc30      	pop	{r4, r5}
   b6730:	4770      	bx	lr

000b6732 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b6732:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b6734:	2300      	movs	r3, #0
   b6736:	e9c0 3300 	strd	r3, r3, [r0]
   b673a:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b673c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b673e:	9300      	str	r3, [sp, #0]
   b6740:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6742:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6746:	4619      	mov	r1, r3
   b6748:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b674c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b674e:	f7ff ffe5 	bl	b671c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b6752:	4620      	mov	r0, r4
   b6754:	b004      	add	sp, #16
   b6756:	bd10      	pop	{r4, pc}

000b6758 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6758:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b675a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b675c:	4604      	mov	r4, r0
   b675e:	460d      	mov	r5, r1
   b6760:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6762:	d914      	bls.n	b678e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6764:	4290      	cmp	r0, r2
   b6766:	d213      	bcs.n	b6790 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6768:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b676c:	1a75      	subs	r5, r6, r1
   b676e:	f1a1 0708 	sub.w	r7, r1, #8
   b6772:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6774:	42b7      	cmp	r7, r6
   b6776:	d018      	beq.n	b67aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6778:	b11c      	cbz	r4, b6782 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b677a:	4631      	mov	r1, r6
   b677c:	4620      	mov	r0, r4
   b677e:	f7ff fcb4 	bl	b60ea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6782:	1d30      	adds	r0, r6, #4
   b6784:	f7fe fb1c 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6788:	3e08      	subs	r6, #8
   b678a:	3c08      	subs	r4, #8
   b678c:	e7f2      	b.n	b6774 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b678e:	d00c      	beq.n	b67aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6790:	42b5      	cmp	r5, r6
   b6792:	d00a      	beq.n	b67aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6794:	b11c      	cbz	r4, b679e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6796:	4629      	mov	r1, r5
   b6798:	4620      	mov	r0, r4
   b679a:	f7ff fca6 	bl	b60ea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b679e:	1d28      	adds	r0, r5, #4
   b67a0:	f7fe fb0e 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b67a4:	3508      	adds	r5, #8
   b67a6:	3408      	adds	r4, #8
   b67a8:	e7f2      	b.n	b6790 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b67aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b67ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b67ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b67ae:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b67b0:	6846      	ldr	r6, [r0, #4]
   b67b2:	4668      	mov	r0, sp
   b67b4:	f7ff fc99 	bl	b60ea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b67b8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b67bc:	429f      	cmp	r7, r3
   b67be:	db12      	blt.n	b67e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b67c0:	3701      	adds	r7, #1
        if (n > 0) {
   b67c2:	2f00      	cmp	r7, #0
   b67c4:	dd29      	ble.n	b681a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b67c6:	00f8      	lsls	r0, r7, #3
   b67c8:	f7fe fe62 	bl	b5490 <malloc>
            if (!d) {
   b67cc:	4605      	mov	r5, r0
   b67ce:	b1f0      	cbz	r0, b680e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b67d0:	e9d4 1200 	ldrd	r1, r2, [r4]
   b67d4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b67d8:	f7ff ffbe 	bl	b6758 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b67dc:	6820      	ldr	r0, [r4, #0]
   b67de:	f7fe fe5f 	bl	b54a0 <free>
        data_ = d;
   b67e2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b67e4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b67e6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b67e8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b67ea:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b67ee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b67f2:	4631      	mov	r1, r6
   b67f4:	f106 0008 	add.w	r0, r6, #8
   b67f8:	f7ff ffae 	bl	b6758 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b67fc:	b11e      	cbz	r6, b6806 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b67fe:	4669      	mov	r1, sp
   b6800:	4630      	mov	r0, r6
   b6802:	f7ff fc72 	bl	b60ea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b6806:	6863      	ldr	r3, [r4, #4]
   b6808:	3301      	adds	r3, #1
   b680a:	6063      	str	r3, [r4, #4]
    return true;
   b680c:	2501      	movs	r5, #1
   b680e:	a801      	add	r0, sp, #4
   b6810:	f7fe fad6 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6814:	4628      	mov	r0, r5
   b6816:	b003      	add	sp, #12
   b6818:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b681a:	2500      	movs	r5, #0
   b681c:	e7de      	b.n	b67dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b681e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b681e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b6820:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6824:	4605      	mov	r5, r0
   b6826:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b6828:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b682c:	42a6      	cmp	r6, r4
   b682e:	d005      	beq.n	b683c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b6830:	4639      	mov	r1, r7
   b6832:	4620      	mov	r0, r4
   b6834:	f7ff faef 	bl	b5e16 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b6838:	b108      	cbz	r0, b683e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b683a:	b914      	cbnz	r4, b6842 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b683c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b683e:	3408      	adds	r4, #8
   b6840:	e7f4      	b.n	b682c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b6842:	1d20      	adds	r0, r4, #4
   b6844:	f7fe fabc 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b6848:	e9d5 3200 	ldrd	r3, r2, [r5]
   b684c:	f104 0108 	add.w	r1, r4, #8
   b6850:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6854:	4620      	mov	r0, r4
   b6856:	f7ff ff7f 	bl	b6758 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b685a:	686b      	ldr	r3, [r5, #4]
   b685c:	3b01      	subs	r3, #1
   b685e:	606b      	str	r3, [r5, #4]
    return true;
   b6860:	e7ec      	b.n	b683c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b6864 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6868:	4605      	mov	r5, r0
   b686a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b686c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b686e:	460c      	mov	r4, r1
        WiringBleLock lk;
   b6870:	f7fe ff76 	bl	b5760 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b6874:	682e      	ldr	r6, [r5, #0]
   b6876:	1ef3      	subs	r3, r6, #3
   b6878:	2b0d      	cmp	r3, #13
   b687a:	d83c      	bhi.n	b68f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b687c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b6880:	0057000e 	.word	0x0057000e
   b6884:	00cf003b 	.word	0x00cf003b
   b6888:	003b003b 	.word	0x003b003b
   b688c:	003b003b 	.word	0x003b003b
   b6890:	0099003b 	.word	0x0099003b
   b6894:	00990099 	.word	0x00990099
   b6898:	00990099 	.word	0x00990099
                    BlePeerDevice peer;
   b689c:	a804      	add	r0, sp, #16
   b689e:	f7ff fa61 	bl	b5d64 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b68a2:	9b04      	ldr	r3, [sp, #16]
   b68a4:	89aa      	ldrh	r2, [r5, #12]
   b68a6:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b68a8:	6869      	ldr	r1, [r5, #4]
   b68aa:	9804      	ldr	r0, [sp, #16]
   b68ac:	3108      	adds	r1, #8
   b68ae:	3002      	adds	r0, #2
   b68b0:	f7fe ffb8 	bl	b5824 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b68b4:	a904      	add	r1, sp, #16
   b68b6:	a806      	add	r0, sp, #24
   b68b8:	f7ff fc17 	bl	b60ea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b68bc:	a906      	add	r1, sp, #24
   b68be:	f104 0018 	add.w	r0, r4, #24
   b68c2:	f7ff ff73 	bl	b67ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b68c6:	4605      	mov	r5, r0
   b68c8:	a807      	add	r0, sp, #28
   b68ca:	f7fe fa79 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b68ce:	b9c5      	cbnz	r5, b6902 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b68d0:	2320      	movs	r3, #32
   b68d2:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b68d6:	4b5c      	ldr	r3, [pc, #368]	; (b6a48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e4>)
   b68d8:	495c      	ldr	r1, [pc, #368]	; (b6a4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b68da:	9300      	str	r3, [sp, #0]
   b68dc:	aa06      	add	r2, sp, #24
   b68de:	462b      	mov	r3, r5
   b68e0:	2001      	movs	r0, #1
   b68e2:	f7fe fd11 	bl	b5308 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b68e6:	9b04      	ldr	r3, [sp, #16]
   b68e8:	4629      	mov	r1, r5
   b68ea:	8818      	ldrh	r0, [r3, #0]
   b68ec:	f7fe fba6 	bl	b503c <hal_ble_gap_disconnect>
   b68f0:	a805      	add	r0, sp, #20
   b68f2:	f7fe fa65 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b68f6:	a803      	add	r0, sp, #12
   b68f8:	f7fe ff40 	bl	b577c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b68fc:	b00e      	add	sp, #56	; 0x38
   b68fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b6902:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6904:	b123      	cbz	r3, b6910 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b6906:	a904      	add	r1, sp, #16
   b6908:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b690c:	f7ff fc5e 	bl	b61cc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b6910:	a805      	add	r0, sp, #20
   b6912:	f7fe fa55 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b6916:	2120      	movs	r1, #32
   b6918:	2300      	movs	r3, #0
   b691a:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b691e:	4a4c      	ldr	r2, [pc, #304]	; (b6a50 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
                    LOG(TRACE, "Disconnected");
   b6920:	9200      	str	r2, [sp, #0]
   b6922:	494a      	ldr	r1, [pc, #296]	; (b6a4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b6924:	aa06      	add	r2, sp, #24
   b6926:	2001      	movs	r0, #1
   b6928:	f7fe fcee 	bl	b5308 <log_message>
   b692c:	e7e3      	b.n	b68f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b692e:	89a9      	ldrh	r1, [r5, #12]
   b6930:	4620      	mov	r0, r4
   b6932:	f7ff f98a 	bl	b5c4a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b6936:	4606      	mov	r6, r0
   b6938:	2800      	cmp	r0, #0
   b693a:	d0dc      	beq.n	b68f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b693c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b693e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b6942:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6946:	8029      	strh	r1, [r5, #0]
   b6948:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b694c:	429a      	cmp	r2, r3
   b694e:	d003      	beq.n	b6958 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b6950:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6954:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b6956:	e7f9      	b.n	b694c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b6958:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b695c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b6960:	45b8      	cmp	r8, r7
   b6962:	d004      	beq.n	b696e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b6964:	1d38      	adds	r0, r7, #4
   b6966:	f7fe fa2b 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b696a:	3708      	adds	r7, #8
   b696c:	e7f8      	b.n	b6960 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b696e:	2300      	movs	r3, #0
   b6970:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b6972:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b6976:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b697a:	45b8      	cmp	r8, r7
   b697c:	d004      	beq.n	b6988 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b697e:	1d38      	adds	r0, r7, #4
   b6980:	f7fe fa1e 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6984:	3708      	adds	r7, #8
   b6986:	e7f8      	b.n	b697a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b6988:	2300      	movs	r3, #0
   b698a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b698c:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b698e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6990:	b123      	cbz	r3, b699c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b6992:	4631      	mov	r1, r6
   b6994:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6998:	f7ff fc18 	bl	b61cc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                        impl->peers_.removeOne(*peer);
   b699c:	4631      	mov	r1, r6
   b699e:	f104 0018 	add.w	r0, r4, #24
   b69a2:	f7ff ff3c 	bl	b681e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b69a6:	2220      	movs	r2, #32
   b69a8:	2300      	movs	r3, #0
   b69aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b69ae:	4a29      	ldr	r2, [pc, #164]	; (b6a54 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b69b0:	e7b6      	b.n	b6920 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b69b2:	89a9      	ldrh	r1, [r5, #12]
   b69b4:	4620      	mov	r0, r4
   b69b6:	f7ff f948 	bl	b5c4a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b69ba:	2800      	cmp	r0, #0
   b69bc:	d09b      	beq.n	b68f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b69be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b69c0:	2b00      	cmp	r3, #0
   b69c2:	d098      	beq.n	b68f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b69c4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b69c6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b69c8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b69cc:	d001      	beq.n	b69d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x16e>
   b69ce:	2e10      	cmp	r6, #16
   b69d0:	d117      	bne.n	b6a02 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x19e>
                        BlePairingEventPayload payload = {};
   b69d2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b69d4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b69d6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b69d8:	2506      	movs	r5, #6
                        };
   b69da:	f88d 3015 	strb.w	r3, [sp, #21]
   b69de:	9104      	str	r1, [sp, #16]
   b69e0:	f88d 2014 	strb.w	r2, [sp, #20]
   b69e4:	9006      	str	r0, [sp, #24]
   b69e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b69ea:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b69ec:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b69f0:	9508      	str	r5, [sp, #32]
   b69f2:	e883 0003 	stmia.w	r3, {r0, r1}
   b69f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b69f8:	a906      	add	r1, sp, #24
   b69fa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b69fe:	4798      	blx	r3
   b6a00:	e779      	b.n	b68f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b6a02:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b6a04:	bf01      	itttt	eq
   b6a06:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b6a08:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b6a0a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b6a0e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b6a10:	bf0f      	iteee	eq
   b6a12:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b6a16:	461a      	movne	r2, r3
   b6a18:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b6a1a:	461d      	movne	r5, r3
   b6a1c:	e7dd      	b.n	b69da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6a1e:	89a9      	ldrh	r1, [r5, #12]
   b6a20:	4620      	mov	r0, r4
   b6a22:	f7ff f912 	bl	b5c4a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b6a26:	4601      	mov	r1, r0
   b6a28:	2800      	cmp	r0, #0
   b6a2a:	f43f af64 	beq.w	b68f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6a2e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b6a30:	2b00      	cmp	r3, #0
   b6a32:	f43f af60 	beq.w	b68f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b6a36:	686b      	ldr	r3, [r5, #4]
   b6a38:	9306      	str	r3, [sp, #24]
   b6a3a:	aa06      	add	r2, sp, #24
   b6a3c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b6a3e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6a42:	4798      	blx	r3
   b6a44:	e757      	b.n	b68f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6a46:	bf00      	nop
   b6a48:	000ba3a7 	.word	0x000ba3a7
   b6a4c:	000ba30b 	.word	0x000ba30b
   b6a50:	000ba3cd 	.word	0x000ba3cd
   b6a54:	000ba3d7 	.word	0x000ba3d7

000b6a58 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6a58:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b6a5a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b6a5c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6a5e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6a60:	dd05      	ble.n	b6a6e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b6a62:	2114      	movs	r1, #20
   b6a64:	4369      	muls	r1, r5
   b6a66:	f7fe fd23 	bl	b54b0 <realloc>
            if (!d) {
   b6a6a:	b918      	cbnz	r0, b6a74 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b6a6c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b6a6e:	f7fe fd17 	bl	b54a0 <free>
        T* d = nullptr;
   b6a72:	2000      	movs	r0, #0
        data_ = d;
   b6a74:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6a76:	60a5      	str	r5, [r4, #8]
        return true;
   b6a78:	2001      	movs	r0, #1
   b6a7a:	e7f7      	b.n	b6a6c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b6a7c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b6a80:	2400      	movs	r4, #0
   b6a82:	e9c0 4400 	strd	r4, r4, [r0]
   b6a86:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6a88:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6a8a:	6849      	ldr	r1, [r1, #4]
   b6a8c:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6a8e:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6a90:	dd1a      	ble.n	b6ac8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b6a92:	f7ff ffe1 	bl	b6a58 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6a96:	b1b8      	cbz	r0, b6ac8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6a98:	e9d8 9300 	ldrd	r9, r3, [r8]
   b6a9c:	f04f 0c14 	mov.w	ip, #20
   b6aa0:	f8d7 e000 	ldr.w	lr, [r7]
   b6aa4:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b6aa8:	eb09 0504 	add.w	r5, r9, r4
   b6aac:	45ac      	cmp	ip, r5
   b6aae:	d008      	beq.n	b6ac2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b6ab0:	eb1e 0604 	adds.w	r6, lr, r4
   b6ab4:	bf1f      	itttt	ne
   b6ab6:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b6ab8:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b6aba:	682b      	ldrne	r3, [r5, #0]
   b6abc:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b6abe:	3414      	adds	r4, #20
   b6ac0:	e7f2      	b.n	b6aa8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b6ac2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b6ac6:	607b      	str	r3, [r7, #4]
}
   b6ac8:	4638      	mov	r0, r7
   b6aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6ace <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b6ace:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b6ad2:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b6ad6:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6ad8:	6883      	ldr	r3, [r0, #8]
   b6ada:	19e9      	adds	r1, r5, r7
   b6adc:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b6ade:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6ae0:	dc17      	bgt.n	b6b12 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b6ae2:	2314      	movs	r3, #20
   b6ae4:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b6ae6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6ae8:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b6aea:	fb03 f907 	mul.w	r9, r3, r7
   b6aee:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b6af0:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6af2:	1b52      	subs	r2, r2, r5
   b6af4:	4631      	mov	r1, r6
   b6af6:	eb06 0009 	add.w	r0, r6, r9
   b6afa:	f003 f9f7 	bl	b9eec <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b6afe:	464a      	mov	r2, r9
   b6b00:	4641      	mov	r1, r8
   b6b02:	4630      	mov	r0, r6
   b6b04:	f003 f9e4 	bl	b9ed0 <memcpy>
    size_ += n;
   b6b08:	6863      	ldr	r3, [r4, #4]
   b6b0a:	443b      	add	r3, r7
   b6b0c:	6063      	str	r3, [r4, #4]
}
   b6b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6b12:	f7ff ffa1 	bl	b6a58 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6b16:	2800      	cmp	r0, #0
   b6b18:	d1e3      	bne.n	b6ae2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b6b1a:	e7f8      	b.n	b6b0e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b6b1c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6b1c:	b082      	sub	sp, #8
   b6b1e:	b570      	push	{r4, r5, r6, lr}
   b6b20:	460c      	mov	r4, r1
   b6b22:	a904      	add	r1, sp, #16
   b6b24:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6b28:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b6b2c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6b2e:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6b30:	da17      	bge.n	b6b62 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b6b32:	2314      	movs	r3, #20
   b6b34:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b6b38:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b6b3a:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b6b3c:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b6b3e:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6b40:	1a52      	subs	r2, r2, r1
   b6b42:	18e0      	adds	r0, r4, r3
   b6b44:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b6b46:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6b48:	f003 f9d0 	bl	b9eec <memmove>
    new(p) T(std::move(value));
   b6b4c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b50:	6833      	ldr	r3, [r6, #0]
   b6b52:	6023      	str	r3, [r4, #0]
    ++size_;
   b6b54:	686b      	ldr	r3, [r5, #4]
   b6b56:	3301      	adds	r3, #1
   b6b58:	606b      	str	r3, [r5, #4]
}
   b6b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6b5e:	b002      	add	sp, #8
   b6b60:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6b62:	3101      	adds	r1, #1
   b6b64:	f7ff ff78 	bl	b6a58 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6b68:	2800      	cmp	r0, #0
   b6b6a:	d1e2      	bne.n	b6b32 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b6b6c:	e7f5      	b.n	b6b5a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b6b6e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b6b6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b6b72:	2400      	movs	r4, #0
   b6b74:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b6b76:	1e93      	subs	r3, r2, #2
   b6b78:	e9c0 4400 	strd	r4, r4, [r0]
   b6b7c:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b6b7e:	4605      	mov	r5, r0
   b6b80:	460f      	mov	r7, r1
   b6b82:	4690      	mov	r8, r2
   b6b84:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b6b86:	9305      	str	r3, [sp, #20]
    return size_;
   b6b88:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b6b8a:	428c      	cmp	r4, r1
   b6b8c:	da72      	bge.n	b6c74 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b6b8e:	6838      	ldr	r0, [r7, #0]
   b6b90:	ab07      	add	r3, sp, #28
   b6b92:	4642      	mov	r2, r8
   b6b94:	1b09      	subs	r1, r1, r4
   b6b96:	4420      	add	r0, r4
   b6b98:	f7fe fd0c 	bl	b55b4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b6b9c:	4606      	mov	r6, r0
   b6b9e:	2800      	cmp	r0, #0
   b6ba0:	d068      	beq.n	b6c74 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b6ba2:	9b05      	ldr	r3, [sp, #20]
   b6ba4:	2b01      	cmp	r3, #1
   b6ba6:	d82f      	bhi.n	b6c08 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b6ba8:	f1a0 0b02 	sub.w	fp, r0, #2
   b6bac:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b6bb0:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b6bb4:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b6bb8:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b6bba:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b6bbc:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b6bbe:	d055      	beq.n	b6c6c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b6bc0:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b6bc2:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b6bc6:	4413      	add	r3, r2
   b6bc8:	a808      	add	r0, sp, #32
   b6bca:	78d9      	ldrb	r1, [r3, #3]
   b6bcc:	789b      	ldrb	r3, [r3, #2]
   b6bce:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b6bd2:	f7fe ff10 	bl	b59f6 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b6bd6:	f10d 0e20 	add.w	lr, sp, #32
   b6bda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b6bde:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6be2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6be6:	f8de 3000 	ldr.w	r3, [lr]
   b6bea:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b6bee:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b6bf2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b6bf6:	ab0d      	add	r3, sp, #52	; 0x34
   b6bf8:	cb0c      	ldmia	r3, {r2, r3}
   b6bfa:	6869      	ldr	r1, [r5, #4]
   b6bfc:	4628      	mov	r0, r5
   b6bfe:	f7ff ff8d 	bl	b6b1c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b6c02:	f109 0901 	add.w	r9, r9, #1
   b6c06:	e7d7      	b.n	b6bb8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b6c08:	f1a8 0306 	sub.w	r3, r8, #6
   b6c0c:	2b01      	cmp	r3, #1
   b6c0e:	d82d      	bhi.n	b6c6c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b6c10:	f1a0 0b02 	sub.w	fp, r0, #2
   b6c14:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b6c18:	f04f 0900 	mov.w	r9, #0
   b6c1c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b6c20:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b6c22:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b6c24:	d022      	beq.n	b6c6c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b6c26:	3302      	adds	r3, #2
    return data_[i];
   b6c28:	6839      	ldr	r1, [r7, #0]
   b6c2a:	4423      	add	r3, r4
   b6c2c:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b6c30:	2201      	movs	r2, #1
   b6c32:	4419      	add	r1, r3
   b6c34:	a808      	add	r0, sp, #32
   b6c36:	f7fe febf 	bl	b59b8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b6c3a:	f10d 0e20 	add.w	lr, sp, #32
   b6c3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b6c42:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6c46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6c4a:	f8de 3000 	ldr.w	r3, [lr]
   b6c4e:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b6c52:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b6c56:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b6c5a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b6c5e:	6869      	ldr	r1, [r5, #4]
   b6c60:	4628      	mov	r0, r5
   b6c62:	f7ff ff5b 	bl	b6b1c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b6c66:	f109 0901 	add.w	r9, r9, #1
   b6c6a:	e7d9      	b.n	b6c20 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b6c6c:	9b07      	ldr	r3, [sp, #28]
   b6c6e:	441c      	add	r4, r3
   b6c70:	4434      	add	r4, r6
   b6c72:	e789      	b.n	b6b88 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b6c74:	4628      	mov	r0, r5
   b6c76:	b013      	add	sp, #76	; 0x4c
   b6c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6c7c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b6c7c:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b6c7e:	2300      	movs	r3, #0
   b6c80:	b085      	sub	sp, #20
   b6c82:	e9c0 3300 	strd	r3, r3, [r0]
   b6c86:	6083      	str	r3, [r0, #8]
   b6c88:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b6c8a:	2202      	movs	r2, #2
   b6c8c:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b6c8e:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b6c90:	f7ff ff6d 	bl	b6b6e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6c94:	a901      	add	r1, sp, #4
   b6c96:	4620      	mov	r0, r4
   b6c98:	f7ff ff19 	bl	b6ace <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6c9c:	a801      	add	r0, sp, #4
   b6c9e:	f7ff f9a8 	bl	b5ff2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b6ca2:	2202      	movs	r2, #2
   b6ca4:	4629      	mov	r1, r5
   b6ca6:	a801      	add	r0, sp, #4
   b6ca8:	f7ff ff61 	bl	b6b6e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6cac:	a901      	add	r1, sp, #4
   b6cae:	4620      	mov	r0, r4
   b6cb0:	f7ff ff0d 	bl	b6ace <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6cb4:	a801      	add	r0, sp, #4
   b6cb6:	f7ff f99c 	bl	b5ff2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b6cba:	2203      	movs	r2, #3
   b6cbc:	4629      	mov	r1, r5
   b6cbe:	a801      	add	r0, sp, #4
   b6cc0:	f7ff ff55 	bl	b6b6e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6cc4:	a901      	add	r1, sp, #4
   b6cc6:	4620      	mov	r0, r4
   b6cc8:	f7ff ff01 	bl	b6ace <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6ccc:	a801      	add	r0, sp, #4
   b6cce:	f7ff f990 	bl	b5ff2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b6cd2:	2206      	movs	r2, #6
   b6cd4:	4629      	mov	r1, r5
   b6cd6:	a801      	add	r0, sp, #4
   b6cd8:	f7ff ff49 	bl	b6b6e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6cdc:	a901      	add	r1, sp, #4
   b6cde:	4620      	mov	r0, r4
   b6ce0:	f7ff fef5 	bl	b6ace <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6ce4:	a801      	add	r0, sp, #4
   b6ce6:	f7ff f984 	bl	b5ff2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b6cea:	2207      	movs	r2, #7
   b6cec:	4629      	mov	r1, r5
   b6cee:	a801      	add	r0, sp, #4
   b6cf0:	f7ff ff3d 	bl	b6b6e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6cf4:	a901      	add	r1, sp, #4
   b6cf6:	4620      	mov	r0, r4
   b6cf8:	f7ff fee9 	bl	b6ace <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6cfc:	a801      	add	r0, sp, #4
   b6cfe:	f7ff f978 	bl	b5ff2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b6d02:	4620      	mov	r0, r4
   b6d04:	b005      	add	sp, #20
   b6d06:	bd30      	pop	{r4, r5, pc}

000b6d08 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b6d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d0c:	b08b      	sub	sp, #44	; 0x2c
   b6d0e:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b6d10:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b6d14:	a801      	add	r0, sp, #4
   b6d16:	f7ff feb1 	bl	b6a7c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b6d1a:	9b02      	ldr	r3, [sp, #8]
   b6d1c:	2b00      	cmp	r3, #0
   b6d1e:	dd4a      	ble.n	b6db6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b6d20:	f104 0114 	add.w	r1, r4, #20
   b6d24:	a804      	add	r0, sp, #16
   b6d26:	f7ff ffa9 	bl	b6c7c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b6d2a:	f104 0108 	add.w	r1, r4, #8
   b6d2e:	a807      	add	r0, sp, #28
   b6d30:	f7ff ffa4 	bl	b6c7c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b6d34:	9d05      	ldr	r5, [sp, #20]
   b6d36:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b6d38:	2d00      	cmp	r5, #0
   b6d3a:	dc01      	bgt.n	b6d40 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b6d3c:	2e00      	cmp	r6, #0
   b6d3e:	dd38      	ble.n	b6db2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b6d40:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b6d42:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b6d44:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b6d48:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b6d4c:	2314      	movs	r3, #20
   b6d4e:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b6d52:	fb03 8505 	mla	r5, r3, r5, r8
   b6d56:	fb03 9606 	mla	r6, r3, r6, r9
   b6d5a:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b6d5c:	45ba      	cmp	sl, r7
   b6d5e:	d028      	beq.n	b6db2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b6d60:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b6d62:	45ab      	cmp	fp, r5
   b6d64:	d015      	beq.n	b6d92 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b6d66:	4659      	mov	r1, fp
   b6d68:	4650      	mov	r0, sl
   b6d6a:	f7fe fe4e 	bl	b5a0a <_ZNK8particle7BleUuideqERKS0_>
   b6d6e:	f10b 0b14 	add.w	fp, fp, #20
   b6d72:	4604      	mov	r4, r0
   b6d74:	2800      	cmp	r0, #0
   b6d76:	d0f4      	beq.n	b6d62 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b6d78:	a807      	add	r0, sp, #28
   b6d7a:	f7ff f93a 	bl	b5ff2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b6d7e:	a804      	add	r0, sp, #16
   b6d80:	f7ff f937 	bl	b5ff2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b6d84:	a801      	add	r0, sp, #4
   b6d86:	f7ff f934 	bl	b5ff2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b6d8a:	4620      	mov	r0, r4
   b6d8c:	b00b      	add	sp, #44	; 0x2c
   b6d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6d92:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b6d94:	45b3      	cmp	fp, r6
   b6d96:	d009      	beq.n	b6dac <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b6d98:	4659      	mov	r1, fp
   b6d9a:	4650      	mov	r0, sl
   b6d9c:	f7fe fe35 	bl	b5a0a <_ZNK8particle7BleUuideqERKS0_>
   b6da0:	f10b 0b14 	add.w	fp, fp, #20
   b6da4:	4604      	mov	r4, r0
   b6da6:	2800      	cmp	r0, #0
   b6da8:	d0f4      	beq.n	b6d94 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b6daa:	e7e5      	b.n	b6d78 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b6dac:	f10a 0a14 	add.w	sl, sl, #20
   b6db0:	e7d4      	b.n	b6d5c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b6db2:	2400      	movs	r4, #0
   b6db4:	e7e0      	b.n	b6d78 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b6db6:	2401      	movs	r4, #1
   b6db8:	e7e4      	b.n	b6d84 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b6dba <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b6dba:	b513      	push	{r0, r1, r4, lr}
   b6dbc:	460b      	mov	r3, r1
   b6dbe:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6dc0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6dc4:	466c      	mov	r4, sp
   b6dc6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6dca:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6dce:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6dd2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6dd6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6dda:	b002      	add	sp, #8
   b6ddc:	bd10      	pop	{r4, pc}

000b6dde <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b6dde:	b538      	push	{r3, r4, r5, lr}
   b6de0:	4605      	mov	r5, r0
   b6de2:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b6de4:	f7ff ffe9 	bl	b6dba <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6de8:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6dea:	68a2      	ldr	r2, [r4, #8]
   b6dec:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6dee:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6df0:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6df2:	68e2      	ldr	r2, [r4, #12]
   b6df4:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6df6:	60e3      	str	r3, [r4, #12]
      }
   b6df8:	bd38      	pop	{r3, r4, r5, pc}

000b6dfa <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   b6dfa:	b530      	push	{r4, r5, lr}
   b6dfc:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   b6dfe:	2300      	movs	r3, #0
   b6e00:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b6e02:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   b6e04:	4605      	mov	r5, r0
   b6e06:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   b6e08:	b133      	cbz	r3, b6e18 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6e0a:	2202      	movs	r2, #2
   b6e0c:	4668      	mov	r0, sp
   b6e0e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6e10:	68e3      	ldr	r3, [r4, #12]
   b6e12:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b6e14:	68a3      	ldr	r3, [r4, #8]
   b6e16:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   b6e18:	4629      	mov	r1, r5
   b6e1a:	4668      	mov	r0, sp
   b6e1c:	f7ff ffdf 	bl	b6dde <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b6e20:	4668      	mov	r0, sp
   b6e22:	f7fe fc64 	bl	b56ee <_ZNSt14_Function_baseD1Ev>
      }
   b6e26:	b005      	add	sp, #20
   b6e28:	bd30      	pop	{r4, r5, pc}

000b6e2a <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b6e2a:	b538      	push	{r3, r4, r5, lr}
   b6e2c:	460d      	mov	r5, r1
      { return _M_ptr; }
   b6e2e:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   b6e30:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b6e32:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   b6e34:	b123      	cbz	r3, b6e40 <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   b6e36:	6828      	ldr	r0, [r5, #0]
   b6e38:	314c      	adds	r1, #76	; 0x4c
   b6e3a:	304c      	adds	r0, #76	; 0x4c
   b6e3c:	f7ff ffdd 	bl	b6dfa <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6e40:	4620      	mov	r0, r4
   b6e42:	682b      	ldr	r3, [r5, #0]
   b6e44:	f840 3b04 	str.w	r3, [r0], #4
   b6e48:	6869      	ldr	r1, [r5, #4]
   b6e4a:	f7fe fc64 	bl	b5716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   b6e4e:	4620      	mov	r0, r4
   b6e50:	bd38      	pop	{r3, r4, r5, pc}

000b6e52 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b6e52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6e56:	4604      	mov	r4, r0
   b6e58:	b087      	sub	sp, #28
    WiringBleLock lk;
   b6e5a:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b6e5c:	460e      	mov	r6, r1
   b6e5e:	4617      	mov	r7, r2
    WiringBleLock lk;
   b6e60:	f7fe fc7e 	bl	b5760 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6e64:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b6e66:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b6e6a:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   b6e6e:	4544      	cmp	r4, r8
   b6e70:	46a1      	mov	r9, r4
   b6e72:	d016      	beq.n	b6ea2 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   b6e74:	4621      	mov	r1, r4
   b6e76:	a801      	add	r0, sp, #4
   b6e78:	f7fe ff12 	bl	b5ca0 <_ZNK8particle17BleCharacteristic4UUIDEv>
   b6e7c:	4639      	mov	r1, r7
   b6e7e:	a801      	add	r0, sp, #4
   b6e80:	f7fe fdc3 	bl	b5a0a <_ZNK8particle7BleUuideqERKS0_>
   b6e84:	3408      	adds	r4, #8
   b6e86:	4605      	mov	r5, r0
   b6e88:	2800      	cmp	r0, #0
   b6e8a:	d0f0      	beq.n	b6e6e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   b6e8c:	4649      	mov	r1, r9
   b6e8e:	4630      	mov	r0, r6
   b6e90:	f7ff ffcb 	bl	b6e2a <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   b6e94:	4668      	mov	r0, sp
   b6e96:	f7fe fc71 	bl	b577c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6e9a:	4628      	mov	r0, r5
   b6e9c:	b007      	add	sp, #28
   b6e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   b6ea2:	2500      	movs	r5, #0
   b6ea4:	e7f6      	b.n	b6e94 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000b6ea6 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b6ea6:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b6ea8:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b6eaa:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b6eac:	344c      	adds	r4, #76	; 0x4c
   b6eae:	b1b9      	cbz	r1, b6ee0 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b6eb0:	e9cd 1200 	strd	r1, r2, [sp]
   b6eb4:	a802      	add	r0, sp, #8
   b6eb6:	4669      	mov	r1, sp
   b6eb8:	f7ff f8e0 	bl	b607c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b6ebc:	2300      	movs	r3, #0
	__x.swap(*this);
   b6ebe:	a906      	add	r1, sp, #24
   b6ec0:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b6ec2:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b6ec4:	f7ff ff8b 	bl	b6dde <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b6ec8:	4621      	mov	r1, r4
   b6eca:	a806      	add	r0, sp, #24
   b6ecc:	f7ff ff87 	bl	b6dde <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b6ed0:	a806      	add	r0, sp, #24
   b6ed2:	f7fe fc0c 	bl	b56ee <_ZNSt14_Function_baseD1Ev>
   b6ed6:	a802      	add	r0, sp, #8
   b6ed8:	f7fe fc09 	bl	b56ee <_ZNSt14_Function_baseD1Ev>
}
   b6edc:	b00a      	add	sp, #40	; 0x28
   b6ede:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b6ee0:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b6ee2:	e7eb      	b.n	b6ebc <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b6ee4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6ee4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6ee8:	4604      	mov	r4, r0
   b6eea:	460d      	mov	r5, r1
   b6eec:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6eee:	d914      	bls.n	b6f1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6ef0:	4290      	cmp	r0, r2
   b6ef2:	d213      	bcs.n	b6f1c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6ef4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6ef8:	1a75      	subs	r5, r6, r1
   b6efa:	f1a1 0708 	sub.w	r7, r1, #8
   b6efe:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6f00:	42b7      	cmp	r7, r6
   b6f02:	d018      	beq.n	b6f36 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6f04:	b11c      	cbz	r4, b6f0e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6f06:	4631      	mov	r1, r6
   b6f08:	4620      	mov	r0, r4
   b6f0a:	f7ff f8e4 	bl	b60d6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b6f0e:	1d30      	adds	r0, r6, #4
   b6f10:	f7fd ff56 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6f14:	3e08      	subs	r6, #8
   b6f16:	3c08      	subs	r4, #8
   b6f18:	e7f2      	b.n	b6f00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6f1a:	d00c      	beq.n	b6f36 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6f1c:	42b5      	cmp	r5, r6
   b6f1e:	d00a      	beq.n	b6f36 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6f20:	b11c      	cbz	r4, b6f2a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6f22:	4629      	mov	r1, r5
   b6f24:	4620      	mov	r0, r4
   b6f26:	f7ff f8d6 	bl	b60d6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6f2a:	1d28      	adds	r0, r5, #4
   b6f2c:	f7fd ff48 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6f30:	3508      	adds	r5, #8
   b6f32:	3408      	adds	r4, #8
   b6f34:	e7f2      	b.n	b6f1c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6f38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6f38:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6f3a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6f3c:	4605      	mov	r5, r0
        if (n > 0) {
   b6f3e:	dd11      	ble.n	b6f64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6f40:	00f0      	lsls	r0, r6, #3
   b6f42:	f7fe faa5 	bl	b5490 <malloc>
            if (!d) {
   b6f46:	4604      	mov	r4, r0
   b6f48:	b158      	cbz	r0, b6f62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6f4a:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6f4e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6f52:	f7ff ffc7 	bl	b6ee4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6f56:	6828      	ldr	r0, [r5, #0]
   b6f58:	f7fe faa2 	bl	b54a0 <free>
        data_ = d;
   b6f5c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6f5e:	60ae      	str	r6, [r5, #8]
        return true;
   b6f60:	2001      	movs	r0, #1
    }
   b6f62:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6f64:	2400      	movs	r4, #0
   b6f66:	e7f6      	b.n	b6f56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b6f68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b6f6c:	2300      	movs	r3, #0
   b6f6e:	e9c0 3300 	strd	r3, r3, [r0]
   b6f72:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6f74:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6f76:	6849      	ldr	r1, [r1, #4]
   b6f78:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6f7a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6f7c:	dd13      	ble.n	b6fa6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b6f7e:	f7ff ffdb 	bl	b6f38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6f82:	b180      	cbz	r0, b6fa6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6f84:	e9d5 6300 	ldrd	r6, r3, [r5]
   b6f88:	6827      	ldr	r7, [r4, #0]
   b6f8a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b6f8e:	45b0      	cmp	r8, r6
   b6f90:	d007      	beq.n	b6fa2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b6f92:	b11f      	cbz	r7, b6f9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b6f94:	4631      	mov	r1, r6
   b6f96:	4638      	mov	r0, r7
   b6f98:	f7ff f89d 	bl	b60d6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   b6f9c:	3608      	adds	r6, #8
   b6f9e:	3708      	adds	r7, #8
   b6fa0:	e7f5      	b.n	b6f8e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b6fa2:	686b      	ldr	r3, [r5, #4]
   b6fa4:	6063      	str	r3, [r4, #4]
}
   b6fa6:	4620      	mov	r0, r4
   b6fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6fac <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   b6fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6fae:	460d      	mov	r5, r1
   b6fb0:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6fb2:	a801      	add	r0, sp, #4
   b6fb4:	f7fe fbd4 	bl	b5760 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   b6fb8:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   b6fba:	4620      	mov	r0, r4
   b6fbc:	310c      	adds	r1, #12
   b6fbe:	f7ff ffd3 	bl	b6f68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b6fc2:	a801      	add	r0, sp, #4
   b6fc4:	f7fe fbda 	bl	b577c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6fc8:	4620      	mov	r0, r4
   b6fca:	b003      	add	sp, #12
   b6fcc:	bd30      	pop	{r4, r5, pc}

000b6fce <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b6fce:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   b6fd0:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b6fd2:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b6fd4:	4605      	mov	r5, r0
   b6fd6:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   b6fd8:	b933      	cbnz	r3, b6fe8 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   b6fda:	4608      	mov	r0, r1
   b6fdc:	f7fe fb4c 	bl	b5678 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   b6fe0:	b910      	cbnz	r0, b6fe8 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   b6fe2:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   b6fe4:	2201      	movs	r2, #1
   b6fe6:	729a      	strb	r2, [r3, #10]
    return services();
   b6fe8:	4628      	mov	r0, r5
   b6fea:	4621      	mov	r1, r4
   b6fec:	f7ff ffde 	bl	b6fac <_ZNK8particle13BlePeerDevice8servicesEv>
}
   b6ff0:	4628      	mov	r0, r5
   b6ff2:	bd38      	pop	{r3, r4, r5, pc}

000b6ff4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6ff4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6ff6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6ff8:	6845      	ldr	r5, [r0, #4]
   b6ffa:	4668      	mov	r0, sp
   b6ffc:	f7ff f86b 	bl	b60d6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7000:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7004:	4299      	cmp	r1, r3
   b7006:	da10      	bge.n	b702a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7008:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b700a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b700c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7010:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7014:	4629      	mov	r1, r5
   b7016:	f105 0008 	add.w	r0, r5, #8
   b701a:	f7ff ff63 	bl	b6ee4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b701e:	b98d      	cbnz	r5, b7044 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7020:	6863      	ldr	r3, [r4, #4]
   b7022:	3301      	adds	r3, #1
   b7024:	6063      	str	r3, [r4, #4]
    return true;
   b7026:	2601      	movs	r6, #1
   b7028:	e006      	b.n	b7038 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b702a:	3101      	adds	r1, #1
   b702c:	4620      	mov	r0, r4
   b702e:	f7ff ff83 	bl	b6f38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7032:	4606      	mov	r6, r0
   b7034:	2800      	cmp	r0, #0
   b7036:	d1e7      	bne.n	b7008 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   b7038:	a801      	add	r0, sp, #4
   b703a:	f7fd fec1 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b703e:	4630      	mov	r0, r6
   b7040:	b002      	add	sp, #8
   b7042:	bd70      	pop	{r4, r5, r6, pc}
   b7044:	4669      	mov	r1, sp
   b7046:	4628      	mov	r0, r5
   b7048:	f7ff f845 	bl	b60d6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b704c:	e7e8      	b.n	b7020 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b7050 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b7050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   b7054:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b7110 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   b7058:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b7114 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b705c:	b093      	sub	sp, #76	; 0x4c
   b705e:	4605      	mov	r5, r0
   b7060:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   b7062:	2700      	movs	r7, #0
   b7064:	682b      	ldr	r3, [r5, #0]
   b7066:	42bb      	cmp	r3, r7
   b7068:	d94e      	bls.n	b7108 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   b706a:	a803      	add	r0, sp, #12
   b706c:	f7fe fe5e 	bl	b5d2c <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b7070:	261c      	movs	r6, #28
   b7072:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   b7074:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   b7076:	437e      	muls	r6, r7
   b7078:	4432      	add	r2, r6
   b707a:	f10d 0c14 	add.w	ip, sp, #20
   b707e:	1d13      	adds	r3, r2, #4
   b7080:	46e3      	mov	fp, ip
   b7082:	3214      	adds	r2, #20
   b7084:	6818      	ldr	r0, [r3, #0]
   b7086:	6859      	ldr	r1, [r3, #4]
   b7088:	46e6      	mov	lr, ip
   b708a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   b708e:	3308      	adds	r3, #8
   b7090:	4293      	cmp	r3, r2
   b7092:	46f4      	mov	ip, lr
   b7094:	d1f6      	bne.n	b7084 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   b7096:	6818      	ldr	r0, [r3, #0]
   b7098:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   b709c:	4659      	mov	r1, fp
   b709e:	a80a      	add	r0, sp, #40	; 0x28
   b70a0:	f7fe fc68 	bl	b5974 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b70a4:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   b70a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b70ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b70ae:	f8dc 3000 	ldr.w	r3, [ip]
   b70b2:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   b70b4:	686b      	ldr	r3, [r5, #4]
   b70b6:	9a03      	ldr	r2, [sp, #12]
   b70b8:	4433      	add	r3, r6
   b70ba:	a903      	add	r1, sp, #12
   b70bc:	8b1b      	ldrh	r3, [r3, #24]
   b70be:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   b70c0:	686b      	ldr	r3, [r5, #4]
   b70c2:	4433      	add	r3, r6
   b70c4:	8b5b      	ldrh	r3, [r3, #26]
   b70c6:	82d3      	strh	r3, [r2, #22]
        return services_;
   b70c8:	f8d8 0000 	ldr.w	r0, [r8]
   b70cc:	f100 040c 	add.w	r4, r0, #12
   b70d0:	a80a      	add	r0, sp, #40	; 0x28
   b70d2:	f7ff f800 	bl	b60d6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   b70d6:	4620      	mov	r0, r4
   b70d8:	a90a      	add	r1, sp, #40	; 0x28
   b70da:	f7ff ff8b 	bl	b6ff4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b70de:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b70e0:	a80b      	add	r0, sp, #44	; 0x2c
   b70e2:	f7fd fe6d 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b70e6:	b954      	cbnz	r4, b70fe <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   b70e8:	2320      	movs	r3, #32
   b70ea:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   b70ee:	f8cd 9000 	str.w	r9, [sp]
   b70f2:	4623      	mov	r3, r4
   b70f4:	aa0a      	add	r2, sp, #40	; 0x28
   b70f6:	4651      	mov	r1, sl
   b70f8:	2032      	movs	r0, #50	; 0x32
   b70fa:	f7fe f905 	bl	b5308 <log_message>
   b70fe:	a804      	add	r0, sp, #16
   b7100:	f7fd fe5e 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b7104:	3701      	adds	r7, #1
   b7106:	e7ad      	b.n	b7064 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   b7108:	b013      	add	sp, #76	; 0x4c
   b710a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b710e:	bf00      	nop
   b7110:	000ba3e4 	.word	0x000ba3e4
   b7114:	000ba30b 	.word	0x000ba30b

000b7118 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7118:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b711a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b711c:	4604      	mov	r4, r0
   b711e:	460d      	mov	r5, r1
   b7120:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7122:	d914      	bls.n	b714e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7124:	4290      	cmp	r0, r2
   b7126:	d213      	bcs.n	b7150 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7128:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b712c:	1a75      	subs	r5, r6, r1
   b712e:	f1a1 0708 	sub.w	r7, r1, #8
   b7132:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7134:	42b7      	cmp	r7, r6
   b7136:	d018      	beq.n	b716a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7138:	b11c      	cbz	r4, b7142 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b713a:	4631      	mov	r1, r6
   b713c:	4620      	mov	r0, r4
   b713e:	f7fe ffbc 	bl	b60ba <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7142:	1d30      	adds	r0, r6, #4
   b7144:	f7fd fe3c 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7148:	3e08      	subs	r6, #8
   b714a:	3c08      	subs	r4, #8
   b714c:	e7f2      	b.n	b7134 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b714e:	d00c      	beq.n	b716a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7150:	42b5      	cmp	r5, r6
   b7152:	d00a      	beq.n	b716a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7154:	b11c      	cbz	r4, b715e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7156:	4629      	mov	r1, r5
   b7158:	4620      	mov	r0, r4
   b715a:	f7fe ffae 	bl	b60ba <_ZN8particle17BleCharacteristicC1ERKS0_>
   b715e:	1d28      	adds	r0, r5, #4
   b7160:	f7fd fe2e 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7164:	3508      	adds	r5, #8
   b7166:	3408      	adds	r4, #8
   b7168:	e7f2      	b.n	b7150 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b716a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b716c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b716c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b716e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7170:	4605      	mov	r5, r0
        if (n > 0) {
   b7172:	dd11      	ble.n	b7198 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7174:	00f0      	lsls	r0, r6, #3
   b7176:	f7fe f98b 	bl	b5490 <malloc>
            if (!d) {
   b717a:	4604      	mov	r4, r0
   b717c:	b158      	cbz	r0, b7196 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b717e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7182:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7186:	f7ff ffc7 	bl	b7118 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b718a:	6828      	ldr	r0, [r5, #0]
   b718c:	f7fe f988 	bl	b54a0 <free>
        data_ = d;
   b7190:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7192:	60ae      	str	r6, [r5, #8]
        return true;
   b7194:	2001      	movs	r0, #1
    }
   b7196:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7198:	2400      	movs	r4, #0
   b719a:	e7f6      	b.n	b718a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b719c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b719c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b71a0:	2300      	movs	r3, #0
   b71a2:	e9c0 3300 	strd	r3, r3, [r0]
   b71a6:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b71a8:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b71aa:	6849      	ldr	r1, [r1, #4]
   b71ac:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b71ae:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b71b0:	dd13      	ble.n	b71da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b71b2:	f7ff ffdb 	bl	b716c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b71b6:	b180      	cbz	r0, b71da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b71b8:	e9d5 6300 	ldrd	r6, r3, [r5]
   b71bc:	6827      	ldr	r7, [r4, #0]
   b71be:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b71c2:	45b0      	cmp	r8, r6
   b71c4:	d007      	beq.n	b71d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b71c6:	b11f      	cbz	r7, b71d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b71c8:	4631      	mov	r1, r6
   b71ca:	4638      	mov	r0, r7
   b71cc:	f7fe ff75 	bl	b60ba <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   b71d0:	3608      	adds	r6, #8
   b71d2:	3708      	adds	r7, #8
   b71d4:	e7f5      	b.n	b71c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b71d6:	686b      	ldr	r3, [r5, #4]
   b71d8:	6063      	str	r3, [r4, #4]
}
   b71da:	4620      	mov	r0, r4
   b71dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b71e0 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   b71e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b71e2:	460d      	mov	r5, r1
   b71e4:	4604      	mov	r4, r0
    WiringBleLock lk;
   b71e6:	a801      	add	r0, sp, #4
   b71e8:	f7fe faba 	bl	b5760 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   b71ec:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   b71ee:	4620      	mov	r0, r4
   b71f0:	3118      	adds	r1, #24
   b71f2:	f7ff ffd3 	bl	b719c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b71f6:	a801      	add	r0, sp, #4
   b71f8:	f7fe fac0 	bl	b577c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b71fc:	4620      	mov	r0, r4
   b71fe:	b003      	add	sp, #12
   b7200:	bd30      	pop	{r4, r5, pc}

000b7202 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7202:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7204:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7206:	6845      	ldr	r5, [r0, #4]
   b7208:	4668      	mov	r0, sp
   b720a:	f7fe ff56 	bl	b60ba <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b720e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7212:	4299      	cmp	r1, r3
   b7214:	da10      	bge.n	b7238 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7216:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7218:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b721a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b721e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7222:	4629      	mov	r1, r5
   b7224:	f105 0008 	add.w	r0, r5, #8
   b7228:	f7ff ff76 	bl	b7118 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b722c:	b98d      	cbnz	r5, b7252 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b722e:	6863      	ldr	r3, [r4, #4]
   b7230:	3301      	adds	r3, #1
   b7232:	6063      	str	r3, [r4, #4]
    return true;
   b7234:	2601      	movs	r6, #1
   b7236:	e006      	b.n	b7246 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7238:	3101      	adds	r1, #1
   b723a:	4620      	mov	r0, r4
   b723c:	f7ff ff96 	bl	b716c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7240:	4606      	mov	r6, r0
   b7242:	2800      	cmp	r0, #0
   b7244:	d1e7      	bne.n	b7216 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7246:	a801      	add	r0, sp, #4
   b7248:	f7fd fdba 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b724c:	4630      	mov	r0, r6
   b724e:	b002      	add	sp, #8
   b7250:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7252:	4669      	mov	r1, sp
   b7254:	4628      	mov	r0, r5
   b7256:	f7fe ff30 	bl	b60ba <_ZN8particle17BleCharacteristicC1ERKS0_>
   b725a:	e7e8      	b.n	b722e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b725c <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b725c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b725e:	b085      	sub	sp, #20
   b7260:	4605      	mov	r5, r0
    WiringBleLock lk;
   b7262:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b7264:	460c      	mov	r4, r1
   b7266:	4617      	mov	r7, r2
    WiringBleLock lk;
   b7268:	f7fe fa7a 	bl	b5760 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   b726c:	2300      	movs	r3, #0
   b726e:	e9c5 3300 	strd	r3, r3, [r5]
   b7272:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   b7274:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b7276:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   b727a:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   b727e:	42b4      	cmp	r4, r6
   b7280:	d011      	beq.n	b72a6 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   b7282:	6838      	ldr	r0, [r7, #0]
   b7284:	4621      	mov	r1, r4
   b7286:	f7fe fccb 	bl	b5c20 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   b728a:	b150      	cbz	r0, b72a2 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   b728c:	4621      	mov	r1, r4
   b728e:	a802      	add	r0, sp, #8
   b7290:	f7fe ff13 	bl	b60ba <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7294:	a902      	add	r1, sp, #8
   b7296:	4628      	mov	r0, r5
   b7298:	f7ff ffb3 	bl	b7202 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   b729c:	a803      	add	r0, sp, #12
   b729e:	f7fd fd8f 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   b72a2:	3408      	adds	r4, #8
   b72a4:	e7eb      	b.n	b727e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   b72a6:	a801      	add	r0, sp, #4
   b72a8:	f7fe fa68 	bl	b577c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b72ac:	4628      	mov	r0, r5
   b72ae:	b005      	add	sp, #20
   b72b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b72b4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b72b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   b72b8:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b72ba:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b72bc:	b091      	sub	sp, #68	; 0x44
   b72be:	4606      	mov	r6, r0
   b72c0:	460f      	mov	r7, r1
   b72c2:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   b72c4:	b933      	cbnz	r3, b72d4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   b72c6:	e9c0 3300 	strd	r3, r3, [r0]
   b72ca:	6083      	str	r3, [r0, #8]
}
   b72cc:	4630      	mov	r0, r6
   b72ce:	b011      	add	sp, #68	; 0x44
   b72d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   b72d4:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   b72d6:	7e0d      	ldrb	r5, [r1, #24]
   b72d8:	2d00      	cmp	r5, #0
   b72da:	d158      	bne.n	b738e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   b72dc:	2320      	movs	r3, #32
   b72de:	462a      	mov	r2, r5
   b72e0:	a803      	add	r0, sp, #12
   b72e2:	e9cd 3508 	strd	r3, r5, [sp, #32]
   b72e6:	f7fe fc0f 	bl	b5b08 <_ZNK8particle7BleUuid8toStringEb>
   b72ea:	9b03      	ldr	r3, [sp, #12]
   b72ec:	9301      	str	r3, [sp, #4]
   b72ee:	4b2b      	ldr	r3, [pc, #172]	; (b739c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   b72f0:	492b      	ldr	r1, [pc, #172]	; (b73a0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   b72f2:	9300      	str	r3, [sp, #0]
   b72f4:	aa08      	add	r2, sp, #32
   b72f6:	462b      	mov	r3, r5
   b72f8:	2001      	movs	r0, #1
   b72fa:	f7fe f805 	bl	b5308 <log_message>
   b72fe:	a803      	add	r0, sp, #12
   b7300:	f002 f998 	bl	b9634 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   b7304:	231c      	movs	r3, #28
   b7306:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   b730a:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   b730e:	8a9a      	ldrh	r2, [r3, #20]
   b7310:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   b7314:	8adb      	ldrh	r3, [r3, #22]
   b7316:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   b731a:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   b731c:	4a21      	ldr	r2, [pc, #132]	; (b73a4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   b731e:	8818      	ldrh	r0, [r3, #0]
   b7320:	9500      	str	r5, [sp, #0]
   b7322:	a908      	add	r1, sp, #32
   b7324:	f7fd fe9e 	bl	b5064 <hal_ble_gatt_client_discover_characteristics>
   b7328:	2800      	cmp	r0, #0
   b732a:	db30      	blt.n	b738e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   b732c:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b732e:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b7332:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   b7336:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   b7338:	f1a4 0308 	sub.w	r3, r4, #8
   b733c:	4599      	cmp	r9, r3
   b733e:	d022      	beq.n	b7386 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   b7340:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b7344:	89db      	ldrh	r3, [r3, #14]
   b7346:	2b00      	cmp	r3, #0
   b7348:	d0f5      	beq.n	b7336 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   b734a:	2210      	movs	r2, #16
   b734c:	2100      	movs	r1, #0
   b734e:	eb0d 0002 	add.w	r0, sp, r2
   b7352:	9503      	str	r5, [sp, #12]
   b7354:	f002 fde4 	bl	b9f20 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   b7358:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b735c:	89d9      	ldrh	r1, [r3, #14]
   b735e:	683b      	ldr	r3, [r7, #0]
   b7360:	aa03      	add	r2, sp, #12
   b7362:	8818      	ldrh	r0, [r3, #0]
   b7364:	9500      	str	r5, [sp, #0]
   b7366:	2313      	movs	r3, #19
   b7368:	f7fd fe86 	bl	b5078 <hal_ble_gatt_client_read>
                if (len > 0) {
   b736c:	2800      	cmp	r0, #0
   b736e:	d0e2      	beq.n	b7336 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   b7370:	ab10      	add	r3, sp, #64	; 0x40
   b7372:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   b7374:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   b7376:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   b737a:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   b737e:	303c      	adds	r0, #60	; 0x3c
   b7380:	f002 f9fa 	bl	b9778 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   b7384:	e7d7      	b.n	b7336 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   b7386:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   b738a:	2201      	movs	r2, #1
   b738c:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   b738e:	4642      	mov	r2, r8
   b7390:	4639      	mov	r1, r7
   b7392:	4630      	mov	r0, r6
   b7394:	f7ff ff62 	bl	b725c <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   b7398:	e798      	b.n	b72cc <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   b739a:	bf00      	nop
   b739c:	000ba409 	.word	0x000ba409
   b73a0:	000ba30b 	.word	0x000ba30b
   b73a4:	000b754d 	.word	0x000b754d

000b73a8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b73a8:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   b73aa:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b73ac:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b73ae:	b085      	sub	sp, #20
   b73b0:	4606      	mov	r6, r0
   b73b2:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   b73b4:	b92b      	cbnz	r3, b73c2 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   b73b6:	a801      	add	r0, sp, #4
   b73b8:	f7ff fe09 	bl	b6fce <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   b73bc:	a801      	add	r0, sp, #4
   b73be:	f7fe fea5 	bl	b610c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   b73c2:	682b      	ldr	r3, [r5, #0]
   b73c4:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   b73c8:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   b73cc:	42bc      	cmp	r4, r7
   b73ce:	d009      	beq.n	b73e4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   b73d0:	4622      	mov	r2, r4
   b73d2:	4629      	mov	r1, r5
   b73d4:	a801      	add	r0, sp, #4
   b73d6:	f7ff ff6d 	bl	b72b4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   b73da:	a801      	add	r0, sp, #4
   b73dc:	f7fe fea8 	bl	b6130 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   b73e0:	3408      	adds	r4, #8
   b73e2:	e7f3      	b.n	b73cc <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   b73e4:	4630      	mov	r0, r6
   b73e6:	4629      	mov	r1, r5
   b73e8:	f7ff fefa 	bl	b71e0 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   b73ec:	4630      	mov	r0, r6
   b73ee:	b005      	add	sp, #20
   b73f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b73f4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b73f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b73f8:	4605      	mov	r5, r0
   b73fa:	b093      	sub	sp, #76	; 0x4c
    return address_;
   b73fc:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   b73fe:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b7400:	460f      	mov	r7, r1
    return address_;
   b7402:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b7404:	4698      	mov	r8, r3
    return address_;
   b7406:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   b7408:	4b41      	ldr	r3, [pc, #260]	; (b7510 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   b740a:	9304      	str	r3, [sp, #16]
    return address_;
   b740c:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   b740e:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   b7410:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   b7414:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   b7418:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   b741c:	f7fe fd52 	bl	b5ec4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7420:	4b3c      	ldr	r3, [pc, #240]	; (b7514 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   b7422:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b7424:	f7fe fd4e 	bl	b5ec4 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b7428:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b742a:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b742c:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b742e:	464a      	mov	r2, r9
   b7430:	a804      	add	r0, sp, #16
   b7432:	f7fd fe2b 	bl	b508c <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   b7436:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   b7438:	4604      	mov	r4, r0
   b743a:	b138      	cbz	r0, b744c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   b743c:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b743e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7442:	801a      	strh	r2, [r3, #0]
}
   b7444:	4620      	mov	r0, r4
   b7446:	b013      	add	sp, #76	; 0x4c
   b7448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WiringBleLock lk;
   b744c:	a803      	add	r0, sp, #12
   b744e:	f7fe f987 	bl	b5760 <_ZN8particle3ble13WiringBleLockC1Ev>
        bind(addr);
   b7452:	4639      	mov	r1, r7
   b7454:	4628      	mov	r0, r5
   b7456:	f7fe fcb9 	bl	b5dcc <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b745a:	f7fe fd33 	bl	b5ec4 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b745e:	6807      	ldr	r7, [r0, #0]
   b7460:	4629      	mov	r1, r5
   b7462:	3718      	adds	r7, #24
   b7464:	4630      	mov	r0, r6
   b7466:	f7fe fe40 	bl	b60ea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b746a:	4631      	mov	r1, r6
   b746c:	4638      	mov	r0, r7
   b746e:	f7ff f99d 	bl	b67ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7472:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   b7474:	a80b      	add	r0, sp, #44	; 0x2c
   b7476:	f7fd fca3 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b747a:	f04f 0920 	mov.w	r9, #32
   b747e:	bb1f      	cbnz	r7, b74c8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   b7480:	4632      	mov	r2, r6
   b7482:	4b25      	ldr	r3, [pc, #148]	; (b7518 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   b7484:	4e25      	ldr	r6, [pc, #148]	; (b751c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   b7486:	4926      	ldr	r1, [pc, #152]	; (b7520 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b7488:	9300      	str	r3, [sp, #0]
   b748a:	2032      	movs	r0, #50	; 0x32
   b748c:	4623      	mov	r3, r4
   b748e:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b7492:	f7fd ff39 	bl	b5308 <log_message>
   b7496:	6830      	ldr	r0, [r6, #0]
   b7498:	f7fd fe36 	bl	b5108 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b749c:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   b749e:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b74a2:	4621      	mov	r1, r4
   b74a4:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b74a6:	4c1f      	ldr	r4, [pc, #124]	; (b7524 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b74a8:	f7fd fdc8 	bl	b503c <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   b74ac:	6830      	ldr	r0, [r6, #0]
   b74ae:	f7fd fe23 	bl	b50f8 <os_mutex_recursive_lock>
        locked_ = true;
   b74b2:	2301      	movs	r3, #1
   b74b4:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   b74b8:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b74ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b74be:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b74c0:	a803      	add	r0, sp, #12
   b74c2:	f7fe f95b 	bl	b577c <_ZN8particle3ble13WiringBleLockD1Ev>
   b74c6:	e7bd      	b.n	b7444 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   b74c8:	a803      	add	r0, sp, #12
   b74ca:	f7fe f957 	bl	b577c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   b74ce:	4b16      	ldr	r3, [pc, #88]	; (b7528 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   b74d0:	9300      	str	r3, [sp, #0]
   b74d2:	4913      	ldr	r1, [pc, #76]	; (b7520 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b74d4:	4623      	mov	r3, r4
   b74d6:	4632      	mov	r2, r6
   b74d8:	2001      	movs	r0, #1
   b74da:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b74de:	f7fd ff13 	bl	b5308 <log_message>
    if (automatic) {
   b74e2:	f1b8 0f00 	cmp.w	r8, #0
   b74e6:	d0ad      	beq.n	b7444 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b74e8:	4629      	mov	r1, r5
   b74ea:	4630      	mov	r0, r6
   b74ec:	f7ff ff5c 	bl	b73a8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   b74f0:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   b74f4:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   b74f8:	42bd      	cmp	r5, r7
   b74fa:	d005      	beq.n	b7508 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   b74fc:	4628      	mov	r0, r5
   b74fe:	2101      	movs	r1, #1
   b7500:	f7fe fbda 	bl	b5cb8 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   b7504:	3508      	adds	r5, #8
   b7506:	e7f7      	b.n	b74f8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b7508:	4630      	mov	r0, r6
   b750a:	f7fe fe11 	bl	b6130 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b750e:	e799      	b.n	b7444 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   b7510:	00180003 	.word	0x00180003
   b7514:	000b6865 	.word	0x000b6865
   b7518:	000ba43b 	.word	0x000ba43b
   b751c:	2003e668 	.word	0x2003e668
   b7520:	000ba30b 	.word	0x000ba30b
   b7524:	fffffefc 	.word	0xfffffefc
   b7528:	000ba457 	.word	0x000ba457

000b752c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   b752c:	b513      	push	{r0, r1, r4, lr}
   b752e:	4604      	mov	r4, r0
   b7530:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   b7534:	f7fe fc16 	bl	b5d64 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   b7538:	9b00      	ldr	r3, [sp, #0]
   b753a:	9901      	ldr	r1, [sp, #4]
   b753c:	2200      	movs	r2, #0
   b753e:	4620      	mov	r0, r4
   b7540:	f7ff ff58 	bl	b73f4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   b7544:	4620      	mov	r0, r4
   b7546:	b002      	add	sp, #8
   b7548:	bd10      	pop	{r4, pc}
	...

000b754c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   b7550:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b7552:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   b7554:	2600      	movs	r6, #0
   b7556:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   b755a:	4b66      	ldr	r3, [pc, #408]	; (b76f4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   b755c:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b755e:	4605      	mov	r5, r0
   b7560:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   b7562:	4633      	mov	r3, r6
   b7564:	4964      	ldr	r1, [pc, #400]	; (b76f8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b7566:	f8df 9194 	ldr.w	r9, [pc, #404]	; b76fc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   b756a:	f8df 818c 	ldr.w	r8, [pc, #396]	; b76f8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b756e:	f8df a190 	ldr.w	sl, [pc, #400]	; b7700 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   b7572:	aa0c      	add	r2, sp, #48	; 0x30
   b7574:	2001      	movs	r0, #1
   b7576:	f7fd fec7 	bl	b5308 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   b757a:	682b      	ldr	r3, [r5, #0]
   b757c:	42b3      	cmp	r3, r6
   b757e:	f240 80b5 	bls.w	b76ec <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   b7582:	a803      	add	r0, sp, #12
   b7584:	f7fe fb72 	bl	b5c6c <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   b7588:	a805      	add	r0, sp, #20
   b758a:	f7fe fbcf 	bl	b5d2c <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b758e:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b7592:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   b7594:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   b7596:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b759a:	445b      	add	r3, fp
        this->size = halHandles.size;
   b759c:	8bd9      	ldrh	r1, [r3, #30]
   b759e:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   b75a0:	8c19      	ldrh	r1, [r3, #32]
   b75a2:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   b75a4:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   b75a6:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   b75a8:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   b75aa:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   b75ac:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   b75ae:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   b75b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   b75b2:	8253      	strh	r3, [r2, #18]
   b75b4:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   b75b8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   b75bc:	429a      	cmp	r2, r3
   b75be:	d07d      	beq.n	b76bc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   b75c0:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   b75c2:	8ac4      	ldrh	r4, [r0, #22]
   b75c4:	428c      	cmp	r4, r1
   b75c6:	d377      	bcc.n	b76b8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   b75c8:	8a84      	ldrh	r4, [r0, #20]
   b75ca:	428c      	cmp	r4, r1
   b75cc:	d874      	bhi.n	b76b8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b75ce:	6859      	ldr	r1, [r3, #4]
   b75d0:	9005      	str	r0, [sp, #20]
   b75d2:	a806      	add	r0, sp, #24
   b75d4:	f7fe f89f 	bl	b5716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   b75d8:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   b75dc:	f8dd e00c 	ldr.w	lr, [sp, #12]
   b75e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b75e4:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   b75e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b75ea:	f8dc 3000 	ldr.w	r3, [ip]
   b75ee:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   b75f0:	892b      	ldrh	r3, [r5, #8]
   b75f2:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   b75f6:	686b      	ldr	r3, [r5, #4]
   b75f8:	9c03      	ldr	r4, [sp, #12]
   b75fa:	445b      	add	r3, fp
   b75fc:	7e5b      	ldrb	r3, [r3, #25]
   b75fe:	f013 0f02 	tst.w	r3, #2
   b7602:	d16e      	bne.n	b76e2 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   b7604:	686b      	ldr	r3, [r5, #4]
   b7606:	445b      	add	r3, fp
   b7608:	7e5b      	ldrb	r3, [r3, #25]
   b760a:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   b760c:	bf42      	ittt	mi
   b760e:	7923      	ldrbmi	r3, [r4, #4]
   b7610:	f043 0304 	orrmi.w	r3, r3, #4
   b7614:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   b7616:	686b      	ldr	r3, [r5, #4]
   b7618:	445b      	add	r3, fp
   b761a:	7e5b      	ldrb	r3, [r3, #25]
   b761c:	0719      	lsls	r1, r3, #28
   b761e:	bf42      	ittt	mi
   b7620:	7923      	ldrbmi	r3, [r4, #4]
   b7622:	f043 0308 	orrmi.w	r3, r3, #8
   b7626:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   b7628:	686b      	ldr	r3, [r5, #4]
   b762a:	445b      	add	r3, fp
   b762c:	7e5b      	ldrb	r3, [r3, #25]
   b762e:	06da      	lsls	r2, r3, #27
   b7630:	bf42      	ittt	mi
   b7632:	7923      	ldrbmi	r3, [r4, #4]
   b7634:	f043 0310 	orrmi.w	r3, r3, #16
   b7638:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   b763a:	686b      	ldr	r3, [r5, #4]
   b763c:	445b      	add	r3, fp
   b763e:	aa07      	add	r2, sp, #28
   b7640:	7e5b      	ldrb	r3, [r3, #25]
   b7642:	069b      	lsls	r3, r3, #26
   b7644:	bf42      	ittt	mi
   b7646:	7923      	ldrbmi	r3, [r4, #4]
   b7648:	f043 0320 	orrmi.w	r3, r3, #32
   b764c:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   b764e:	686b      	ldr	r3, [r5, #4]
   b7650:	449b      	add	fp, r3
   b7652:	f10b 0304 	add.w	r3, fp, #4
   b7656:	4696      	mov	lr, r2
   b7658:	f10b 0b14 	add.w	fp, fp, #20
   b765c:	6818      	ldr	r0, [r3, #0]
   b765e:	6859      	ldr	r1, [r3, #4]
   b7660:	4694      	mov	ip, r2
   b7662:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b7666:	3308      	adds	r3, #8
   b7668:	455b      	cmp	r3, fp
   b766a:	4662      	mov	r2, ip
   b766c:	d1f6      	bne.n	b765c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   b766e:	6818      	ldr	r0, [r3, #0]
   b7670:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   b7674:	4671      	mov	r1, lr
   b7676:	a80c      	add	r0, sp, #48	; 0x30
   b7678:	f7fe f97c 	bl	b5974 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b767c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   b7680:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7684:	3414      	adds	r4, #20
   b7686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7688:	f8dc 3000 	ldr.w	r3, [ip]
   b768c:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   b768e:	a903      	add	r1, sp, #12
   b7690:	a80c      	add	r0, sp, #48	; 0x30
   b7692:	f7fe fd12 	bl	b60ba <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7696:	a90c      	add	r1, sp, #48	; 0x30
   b7698:	f107 0018 	add.w	r0, r7, #24
   b769c:	f7ff fdb1 	bl	b7202 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b76a0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b76a2:	a80d      	add	r0, sp, #52	; 0x34
   b76a4:	f7fd fb8c 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b76a8:	b99c      	cbnz	r4, b76d2 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b76aa:	2320      	movs	r3, #32
   b76ac:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   b76b0:	f8cd a000 	str.w	sl, [sp]
   b76b4:	4623      	mov	r3, r4
   b76b6:	e007      	b.n	b76c8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   b76b8:	3308      	adds	r3, #8
   b76ba:	e77f      	b.n	b75bc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b76bc:	2420      	movs	r4, #32
   b76be:	2300      	movs	r3, #0
   b76c0:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   b76c4:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b76c8:	aa0c      	add	r2, sp, #48	; 0x30
   b76ca:	4641      	mov	r1, r8
   b76cc:	2032      	movs	r0, #50	; 0x32
   b76ce:	f7fd fe1b 	bl	b5308 <log_message>
   b76d2:	a806      	add	r0, sp, #24
   b76d4:	f7fd fb74 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b76d8:	a804      	add	r0, sp, #16
   b76da:	f7fd fb71 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b76de:	3601      	adds	r6, #1
   b76e0:	e74b      	b.n	b757a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   b76e2:	7923      	ldrb	r3, [r4, #4]
   b76e4:	f043 0302 	orr.w	r3, r3, #2
   b76e8:	7123      	strb	r3, [r4, #4]
   b76ea:	e78b      	b.n	b7604 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   b76ec:	b015      	add	sp, #84	; 0x54
   b76ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b76f2:	bf00      	nop
   b76f4:	000ba474 	.word	0x000ba474
   b76f8:	000ba30b 	.word	0x000ba30b
   b76fc:	000ba48f 	.word	0x000ba48f
   b7700:	000ba4be 	.word	0x000ba4be

000b7704 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7704:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7708:	4604      	mov	r4, r0
   b770a:	460d      	mov	r5, r1
   b770c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b770e:	d914      	bls.n	b773a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7710:	4290      	cmp	r0, r2
   b7712:	d213      	bcs.n	b773c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7714:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b7718:	1a75      	subs	r5, r6, r1
   b771a:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b771e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7720:	42b7      	cmp	r7, r6
   b7722:	d018      	beq.n	b7756 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7724:	b11c      	cbz	r4, b772e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7726:	4631      	mov	r1, r6
   b7728:	4620      	mov	r0, r4
   b772a:	f7fe ff27 	bl	b657c <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b772e:	4630      	mov	r0, r6
   b7730:	f7fe fc27 	bl	b5f82 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b7734:	3e24      	subs	r6, #36	; 0x24
   b7736:	3c24      	subs	r4, #36	; 0x24
   b7738:	e7f2      	b.n	b7720 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b773a:	d00c      	beq.n	b7756 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b773c:	42b5      	cmp	r5, r6
   b773e:	d00a      	beq.n	b7756 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7740:	b11c      	cbz	r4, b774a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7742:	4629      	mov	r1, r5
   b7744:	4620      	mov	r0, r4
   b7746:	f7fe ff19 	bl	b657c <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b774a:	4628      	mov	r0, r5
   b774c:	f7fe fc19 	bl	b5f82 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b7750:	3524      	adds	r5, #36	; 0x24
   b7752:	3424      	adds	r4, #36	; 0x24
   b7754:	e7f2      	b.n	b773c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7758 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b775a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b775c:	4605      	mov	r5, r0
        if (n > 0) {
   b775e:	dd13      	ble.n	b7788 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b7760:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b7762:	fb07 f006 	mul.w	r0, r7, r6
   b7766:	f7fd fe93 	bl	b5490 <malloc>
            if (!d) {
   b776a:	4604      	mov	r4, r0
   b776c:	b158      	cbz	r0, b7786 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b776e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7772:	fb07 1202 	mla	r2, r7, r2, r1
   b7776:	f7ff ffc5 	bl	b7704 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b777a:	6828      	ldr	r0, [r5, #0]
   b777c:	f7fd fe90 	bl	b54a0 <free>
        data_ = d;
   b7780:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7782:	60ae      	str	r6, [r5, #8]
        return true;
   b7784:	2001      	movs	r0, #1
    }
   b7786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7788:	2400      	movs	r4, #0
   b778a:	e7f6      	b.n	b777a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b778c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b778c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b7790:	2300      	movs	r3, #0
   b7792:	e9c0 3300 	strd	r3, r3, [r0]
   b7796:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7798:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b779a:	6849      	ldr	r1, [r1, #4]
   b779c:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b779e:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b77a0:	dd29      	ble.n	b77f6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x6a>
   b77a2:	f7ff ffd9 	bl	b7758 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b77a6:	b330      	cbz	r0, b77f6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x6a>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b77a8:	e9d7 4300 	ldrd	r4, r3, [r7]
   b77ac:	f04f 0824 	mov.w	r8, #36	; 0x24
   b77b0:	682e      	ldr	r6, [r5, #0]
   b77b2:	fb08 4803 	mla	r8, r8, r3, r4
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
   b77b6:	3408      	adds	r4, #8
        for (; it != end; ++it, ++dest) {
   b77b8:	f1a4 0208 	sub.w	r2, r4, #8
   b77bc:	4590      	cmp	r8, r2
   b77be:	d018      	beq.n	b77f2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x66>
            new(dest) T(*it);
   b77c0:	b1a6      	cbz	r6, b77ec <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x60>
    address_ = addr.address_;
   b77c2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b77c6:	6033      	str	r3, [r6, #0]
   b77c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   b77cc:	6073      	str	r3, [r6, #4]
class BleAdvertisingData {
   b77ce:	4621      	mov	r1, r4
   b77d0:	f106 0008 	add.w	r0, r6, #8
   b77d4:	f7fe feb5 	bl	b6542 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b77d8:	f104 010c 	add.w	r1, r4, #12
   b77dc:	f106 0014 	add.w	r0, r6, #20
   b77e0:	f7fe feaf 	bl	b6542 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b77e4:	f994 3018 	ldrsb.w	r3, [r4, #24]
   b77e8:	f886 3020 	strb.w	r3, [r6, #32]
        for (; it != end; ++it, ++dest) {
   b77ec:	3624      	adds	r6, #36	; 0x24
   b77ee:	3424      	adds	r4, #36	; 0x24
   b77f0:	e7e2      	b.n	b77b8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b77f2:	687b      	ldr	r3, [r7, #4]
   b77f4:	606b      	str	r3, [r5, #4]
}
   b77f6:	4628      	mov	r0, r5
   b77f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b77fc <_ZN8particle16BleScanDelegator5startEv>:
    Vector<BleScanResult> start() {
   b77fc:	b538      	push	{r3, r4, r5, lr}
   b77fe:	460c      	mov	r4, r1
   b7800:	4605      	mov	r5, r0
        scanResultCallback_ = nullptr;
   b7802:	f101 0018 	add.w	r0, r1, #24
   b7806:	f7fd ff21 	bl	b564c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b780a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b780e:	f7fd ff28 	bl	b5662 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        hal_ble_gap_start_scan(onScanResultCallback, this, nullptr);
   b7812:	2200      	movs	r2, #0
   b7814:	4621      	mov	r1, r4
   b7816:	4804      	ldr	r0, [pc, #16]	; (b7828 <_ZN8particle16BleScanDelegator5startEv+0x2c>)
   b7818:	f7fd fbfe 	bl	b5018 <hal_ble_gap_start_scan>
        return resultsVector_;
   b781c:	4621      	mov	r1, r4
   b781e:	4628      	mov	r0, r5
   b7820:	f7ff ffb4 	bl	b778c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>
    }
   b7824:	4628      	mov	r0, r5
   b7826:	bd38      	pop	{r3, r4, r5, pc}
   b7828:	000b784d 	.word	0x000b784d

000b782c <_ZNK8particle14BleLocalDevice4scanEv>:
Vector<BleScanResult> BleLocalDevice::scan() const {
   b782c:	b510      	push	{r4, lr}
   b782e:	b09e      	sub	sp, #120	; 0x78
   b7830:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b7832:	a801      	add	r0, sp, #4
   b7834:	f7fe fbaf 	bl	b5f96 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start();
   b7838:	a901      	add	r1, sp, #4
   b783a:	4620      	mov	r0, r4
   b783c:	f7ff ffde 	bl	b77fc <_ZN8particle16BleScanDelegator5startEv>
    BleScanDelegator scanner;
   b7840:	a801      	add	r0, sp, #4
   b7842:	f7fe fbdd 	bl	b6000 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b7846:	4620      	mov	r0, r4
   b7848:	b01e      	add	sp, #120	; 0x78
   b784a:	bd10      	pop	{r4, pc}

000b784c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b784c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7850:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b7852:	ad01      	add	r5, sp, #4
   b7854:	4606      	mov	r6, r0
   b7856:	4628      	mov	r0, r5
   b7858:	460c      	mov	r4, r1
   b785a:	f7fe f804 	bl	b5866 <_ZN8particle10BleAddressC1Ev>
   b785e:	a803      	add	r0, sp, #12
   b7860:	f7fe ff67 	bl	b6732 <_ZN8particle18BleAdvertisingDataC1Ev>
   b7864:	a806      	add	r0, sp, #24
   b7866:	f7fe ff64 	bl	b6732 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b786a:	6930      	ldr	r0, [r6, #16]
   b786c:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b786e:	89f2      	ldrh	r2, [r6, #14]
   b7870:	ab13      	add	r3, sp, #76	; 0x4c
   b7872:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b7874:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b7878:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b787a:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b787c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b7880:	a806      	add	r0, sp, #24
   b7882:	f7fe feca 	bl	b661a <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b7886:	89b2      	ldrh	r2, [r6, #12]
   b7888:	6871      	ldr	r1, [r6, #4]
   b788a:	a803      	add	r0, sp, #12
   b788c:	f7fe fec5 	bl	b661a <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b7890:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b7894:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b7896:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b7898:	d003      	beq.n	b78a2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b789a:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b789e:	429a      	cmp	r2, r3
   b78a0:	db5c      	blt.n	b795c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b78a2:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b78a6:	2b7f      	cmp	r3, #127	; 0x7f
   b78a8:	d003      	beq.n	b78b2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b78aa:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b78ae:	429a      	cmp	r2, r3
   b78b0:	dc54      	bgt.n	b795c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b78b2:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b78b6:	4638      	mov	r0, r7
   b78b8:	f7fe fd28 	bl	b630c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b78bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b78be:	2b00      	cmp	r3, #0
   b78c0:	dd52      	ble.n	b7968 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b78c2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b78c4:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b78c8:	45b1      	cmp	r9, r6
   b78ca:	d050      	beq.n	b796e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b78cc:	4630      	mov	r0, r6
   b78ce:	4629      	mov	r1, r5
   b78d0:	f7fd ffb5 	bl	b583e <_ZNK8particle10BleAddresseqERKS0_>
   b78d4:	3608      	adds	r6, #8
   b78d6:	4680      	mov	r8, r0
   b78d8:	2800      	cmp	r0, #0
   b78da:	d0f5      	beq.n	b78c8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b78dc:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b78de:	f7fd fddf 	bl	b54a0 <free>
        if (!delegator->filterByRssi(result) ||
   b78e2:	f1b8 0f00 	cmp.w	r8, #0
   b78e6:	d039      	beq.n	b795c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b78e8:	4629      	mov	r1, r5
   b78ea:	4620      	mov	r0, r4
   b78ec:	f7fe fcd1 	bl	b6292 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b78f0:	b3a0      	cbz	r0, b795c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b78f2:	4629      	mov	r1, r5
   b78f4:	4620      	mov	r0, r4
   b78f6:	f7ff fa07 	bl	b6d08 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b78fa:	4606      	mov	r6, r0
   b78fc:	b370      	cbz	r0, b795c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b78fe:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b7902:	4638      	mov	r0, r7
   b7904:	f7fe fd4d 	bl	b63a2 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b7908:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b790a:	2b00      	cmp	r3, #0
   b790c:	dd12      	ble.n	b7934 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b790e:	a806      	add	r0, sp, #24
   b7910:	f7fe f95a 	bl	b5bc8 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b7914:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b7916:	a803      	add	r0, sp, #12
   b7918:	f7fe f956 	bl	b5bc8 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b791c:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b7920:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b7924:	429a      	cmp	r2, r3
   b7926:	d025      	beq.n	b7974 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b7928:	f833 1b02 	ldrh.w	r1, [r3], #2
   b792c:	4588      	cmp	r8, r1
   b792e:	d001      	beq.n	b7934 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b7930:	4288      	cmp	r0, r1
   b7932:	d1f7      	bne.n	b7924 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b7934:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b7936:	f7fd fdb3 	bl	b54a0 <free>
              !delegator->filterByServiceUUID(result) ||
   b793a:	b17e      	cbz	r6, b795c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b793c:	4629      	mov	r1, r5
   b793e:	4620      	mov	r0, r4
   b7940:	f7fe fd64 	bl	b640c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b7944:	b150      	cbz	r0, b795c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b7946:	6a23      	ldr	r3, [r4, #32]
   b7948:	b1b3      	cbz	r3, b7978 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b794a:	6963      	ldr	r3, [r4, #20]
   b794c:	9513      	str	r5, [sp, #76]	; 0x4c
   b794e:	3301      	adds	r3, #1
   b7950:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7952:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b7954:	4639      	mov	r1, r7
   b7956:	f104 0018 	add.w	r0, r4, #24
   b795a:	4798      	blx	r3
            return;
   b795c:	4628      	mov	r0, r5
   b795e:	f7fe fb10 	bl	b5f82 <_ZN8particle13BleScanResultD1Ev>
    }
   b7962:	b01d      	add	sp, #116	; 0x74
   b7964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b7968:	f04f 0801 	mov.w	r8, #1
   b796c:	e7b6      	b.n	b78dc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b796e:	f04f 0800 	mov.w	r8, #0
   b7972:	e7b3      	b.n	b78dc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b7974:	2600      	movs	r6, #0
   b7976:	e7dd      	b.n	b7934 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b7978:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b797c:	f1b8 0f00 	cmp.w	r8, #0
   b7980:	d007      	beq.n	b7992 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b7982:	6963      	ldr	r3, [r4, #20]
   b7984:	3301      	adds	r3, #1
   b7986:	6163      	str	r3, [r4, #20]
   b7988:	4629      	mov	r1, r5
   b798a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b798c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7990:	e7e3      	b.n	b795a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b7992:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b7996:	f1bc 0f00 	cmp.w	ip, #0
   b799a:	d024      	beq.n	b79e6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19a>
            if (delegator->foundCount_ < delegator->targetCount_) {
   b799c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   b79a0:	4293      	cmp	r3, r2
   b79a2:	d2db      	bcs.n	b795c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_] = result;
   b79a4:	2224      	movs	r2, #36	; 0x24
   b79a6:	4353      	muls	r3, r2
    address_ = addr.address_;
   b79a8:	462a      	mov	r2, r5
   b79aa:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_] = result;
   b79ac:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b79b0:	f84c 0003 	str.w	r0, [ip, r3]
   b79b4:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b79b6:	f106 0008 	add.w	r0, r6, #8
   b79ba:	a903      	add	r1, sp, #12
   b79bc:	f7fe fdf5 	bl	b65aa <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b79c0:	a906      	add	r1, sp, #24
   b79c2:	f106 0014 	add.w	r0, r6, #20
   b79c6:	f7fe fdf0 	bl	b65aa <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b79ca:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b79ce:	f886 3020 	strb.w	r3, [r6, #32]
                delegator->foundCount_++;
   b79d2:	6963      	ldr	r3, [r4, #20]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b79d4:	6922      	ldr	r2, [r4, #16]
                delegator->foundCount_++;
   b79d6:	3301      	adds	r3, #1
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b79d8:	4293      	cmp	r3, r2
                delegator->foundCount_++;
   b79da:	6163      	str	r3, [r4, #20]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b79dc:	d3be      	bcc.n	b795c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b79de:	4640      	mov	r0, r8
   b79e0:	f7fd fb22 	bl	b5028 <hal_ble_gap_stop_scan>
   b79e4:	e7ba      	b.n	b795c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b79e6:	e895 0003 	ldmia.w	r5, {r0, r1}
   b79ea:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b79ee:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b79f2:	a903      	add	r1, sp, #12
   b79f4:	a80c      	add	r0, sp, #48	; 0x30
   b79f6:	f7fe fda4 	bl	b6542 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b79fa:	a906      	add	r1, sp, #24
   b79fc:	a80f      	add	r0, sp, #60	; 0x3c
   b79fe:	f7fe fda0 	bl	b6542 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b7a02:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b7a06:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b7a0a:	4641      	mov	r1, r8
   b7a0c:	4638      	mov	r0, r7
   b7a0e:	6866      	ldr	r6, [r4, #4]
   b7a10:	f7fe fdb4 	bl	b657c <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7a14:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7a18:	4299      	cmp	r1, r3
   b7a1a:	da10      	bge.n	b7a3e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f2>
    T* const p = data_ + i;
   b7a1c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7a1e:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b7a20:	2224      	movs	r2, #36	; 0x24
   b7a22:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b7a26:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b7a2a:	fb02 3201 	mla	r2, r2, r1, r3
   b7a2e:	4631      	mov	r1, r6
   b7a30:	f7ff fe68 	bl	b7704 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7a34:	b986      	cbnz	r6, b7a58 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20c>
    ++size_;
   b7a36:	6863      	ldr	r3, [r4, #4]
   b7a38:	3301      	adds	r3, #1
   b7a3a:	6063      	str	r3, [r4, #4]
    return true;
   b7a3c:	e005      	b.n	b7a4a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1fe>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7a3e:	3101      	adds	r1, #1
   b7a40:	4620      	mov	r0, r4
   b7a42:	f7ff fe89 	bl	b7758 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7a46:	2800      	cmp	r0, #0
   b7a48:	d1e8      	bne.n	b7a1c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d0>
    return insert(size_, std::move(value));
   b7a4a:	4638      	mov	r0, r7
   b7a4c:	f7fe fa99 	bl	b5f82 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b7a50:	4640      	mov	r0, r8
   b7a52:	f7fe fa96 	bl	b5f82 <_ZN8particle13BleScanResultD1Ev>
   b7a56:	e781      	b.n	b795c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b7a58:	4639      	mov	r1, r7
   b7a5a:	4630      	mov	r0, r6
   b7a5c:	f7fe fd8e 	bl	b657c <_ZN8particle13BleScanResultC1EOS0_>
   b7a60:	e7e9      	b.n	b7a36 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ea>
	...

000b7a64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b7a64:	4802      	ldr	r0, [pc, #8]	; (b7a70 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7a66:	2300      	movs	r3, #0
   b7a68:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b7a6a:	f7fd bb35 	b.w	b50d8 <os_mutex_recursive_create>
   b7a6e:	bf00      	nop
   b7a70:	2003e668 	.word	0x2003e668

000b7a74 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b7a74:	2200      	movs	r2, #0
   b7a76:	6840      	ldr	r0, [r0, #4]
   b7a78:	4611      	mov	r1, r2
   b7a7a:	f7fd bcc1 	b.w	b5400 <network_ready>

000b7a7e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b7a7e:	2200      	movs	r2, #0
   b7a80:	6840      	ldr	r0, [r0, #4]
   b7a82:	4611      	mov	r1, r2
   b7a84:	f7fd bcdc 	b.w	b5440 <network_listening>

000b7a88 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7a88:	2200      	movs	r2, #0
   b7a8a:	6840      	ldr	r0, [r0, #4]
   b7a8c:	4611      	mov	r1, r2
   b7a8e:	f7fd bce7 	b.w	b5460 <network_get_listen_timeout>

000b7a92 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7a92:	6840      	ldr	r0, [r0, #4]
   b7a94:	2200      	movs	r2, #0
   b7a96:	f7fd bcdb 	b.w	b5450 <network_set_listen_timeout>

000b7a9a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7a9a:	6840      	ldr	r0, [r0, #4]
   b7a9c:	2200      	movs	r2, #0
   b7a9e:	f081 0101 	eor.w	r1, r1, #1
   b7aa2:	f7fd bcc5 	b.w	b5430 <network_listen>

000b7aa6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7aa6:	2300      	movs	r3, #0
   b7aa8:	6840      	ldr	r0, [r0, #4]
   b7aaa:	461a      	mov	r2, r3
   b7aac:	4619      	mov	r1, r3
   b7aae:	f7fd bcb7 	b.w	b5420 <network_off>

000b7ab2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7ab2:	2300      	movs	r3, #0
   b7ab4:	6840      	ldr	r0, [r0, #4]
   b7ab6:	461a      	mov	r2, r3
   b7ab8:	4619      	mov	r1, r3
   b7aba:	f7fd bca9 	b.w	b5410 <network_on>

000b7abe <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7abe:	2200      	movs	r2, #0
   b7ac0:	6840      	ldr	r0, [r0, #4]
   b7ac2:	4611      	mov	r1, r2
   b7ac4:	f7fd bc8c 	b.w	b53e0 <network_connecting>

000b7ac8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7ac8:	6840      	ldr	r0, [r0, #4]
   b7aca:	2200      	movs	r2, #0
   b7acc:	2102      	movs	r1, #2
   b7ace:	f7fd bc8f 	b.w	b53f0 <network_disconnect>

000b7ad2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7ad2:	2300      	movs	r3, #0
   b7ad4:	6840      	ldr	r0, [r0, #4]
   b7ad6:	461a      	mov	r2, r3
   b7ad8:	f7fd bc7a 	b.w	b53d0 <network_connect>

000b7adc <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b7adc:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b7ade:	4b13      	ldr	r3, [pc, #76]	; (b7b2c <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b7ae0:	6003      	str	r3, [r0, #0]
   b7ae2:	2518      	movs	r5, #24
   b7ae4:	3330      	adds	r3, #48	; 0x30
   b7ae6:	b086      	sub	sp, #24
   b7ae8:	460e      	mov	r6, r1
   b7aea:	6043      	str	r3, [r0, #4]
   b7aec:	462a      	mov	r2, r5
   b7aee:	2100      	movs	r1, #0
   b7af0:	4604      	mov	r4, r0
   b7af2:	3008      	adds	r0, #8
   b7af4:	f002 fa14 	bl	b9f20 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b7af8:	2200      	movs	r2, #0
   b7afa:	6870      	ldr	r0, [r6, #4]
   b7afc:	4611      	mov	r1, r2
   b7afe:	f7fd fc7f 	bl	b5400 <network_ready>
   b7b02:	b178      	cbz	r0, b7b24 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b7b04:	2100      	movs	r1, #0
   b7b06:	462a      	mov	r2, r5
   b7b08:	4668      	mov	r0, sp
   b7b0a:	f002 fa09 	bl	b9f20 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b7b0e:	4669      	mov	r1, sp
   b7b10:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b7b12:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b7b16:	f7fd fad7 	bl	b50c8 <cellular_signal>
   b7b1a:	b918      	cbnz	r0, b7b24 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b7b1c:	4669      	mov	r1, sp
   b7b1e:	4620      	mov	r0, r4
   b7b20:	f000 f8b8 	bl	b7c94 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b7b24:	4620      	mov	r0, r4
   b7b26:	b006      	add	sp, #24
   b7b28:	bd70      	pop	{r4, r5, r6, pc}
   b7b2a:	bf00      	nop
   b7b2c:	000ba584 	.word	0x000ba584

000b7b30 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b7b30:	4b08      	ldr	r3, [pc, #32]	; (b7b54 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b7b32:	b510      	push	{r4, lr}
   b7b34:	2428      	movs	r4, #40	; 0x28
   b7b36:	4622      	mov	r2, r4
   b7b38:	4618      	mov	r0, r3
   b7b3a:	2100      	movs	r1, #0
   b7b3c:	f002 f9f0 	bl	b9f20 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7b40:	4b05      	ldr	r3, [pc, #20]	; (b7b58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b7b42:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b7b44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7b48:	6042      	str	r2, [r0, #4]
   b7b4a:	2204      	movs	r2, #4
   b7b4c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b7b4e:	4a03      	ldr	r2, [pc, #12]	; (b7b5c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b7b50:	601a      	str	r2, [r3, #0]
   b7b52:	bd10      	pop	{r4, pc}
   b7b54:	2003e678 	.word	0x2003e678
   b7b58:	2003e670 	.word	0x2003e670
   b7b5c:	000ba548 	.word	0x000ba548

000b7b60 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b7b60:	4770      	bx	lr

000b7b62 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b7b62:	7b00      	ldrb	r0, [r0, #12]
   b7b64:	4770      	bx	lr

000b7b66 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b7b66:	7b03      	ldrb	r3, [r0, #12]
   b7b68:	b14b      	cbz	r3, b7b7e <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b7b6a:	6903      	ldr	r3, [r0, #16]
   b7b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b7b70:	d005      	beq.n	b7b7e <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b7b72:	6980      	ldr	r0, [r0, #24]
   b7b74:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b7b78:	bf18      	it	ne
   b7b7a:	2001      	movne	r0, #1
   b7b7c:	4770      	bx	lr
   b7b7e:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b7b80:	4770      	bx	lr

000b7b82 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b7b82:	6803      	ldr	r3, [r0, #0]
   b7b84:	6a1b      	ldr	r3, [r3, #32]
   b7b86:	4718      	bx	r3

000b7b88 <_ZNK14CellularSignal7printToER5Print>:
{
   b7b88:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b7b8a:	6803      	ldr	r3, [r0, #0]
{
   b7b8c:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b7b8e:	691b      	ldr	r3, [r3, #16]
{
   b7b90:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b7b92:	4798      	blx	r3
   b7b94:	2102      	movs	r1, #2
   b7b96:	4628      	mov	r0, r5
   b7b98:	f001 fd1c 	bl	b95d4 <_ZN5Print5printEfi>
    n += p.print(',');
   b7b9c:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b7b9e:	4604      	mov	r4, r0
    n += p.print(',');
   b7ba0:	4628      	mov	r0, r5
   b7ba2:	f001 fc17 	bl	b93d4 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b7ba6:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b7ba8:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b7baa:	699b      	ldr	r3, [r3, #24]
   b7bac:	4630      	mov	r0, r6
   b7bae:	4798      	blx	r3
   b7bb0:	2102      	movs	r1, #2
   b7bb2:	4628      	mov	r0, r5
   b7bb4:	f001 fd0e 	bl	b95d4 <_ZN5Print5printEfi>
}
   b7bb8:	4420      	add	r0, r4
   b7bba:	bd70      	pop	{r4, r5, r6, pc}

000b7bbc <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b7bbc:	f1a0 0004 	sub.w	r0, r0, #4
   b7bc0:	f7ff bfe2 	b.w	b7b88 <_ZNK14CellularSignal7printToER5Print>

000b7bc4 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b7bc4:	b510      	push	{r4, lr}
   b7bc6:	2120      	movs	r1, #32
   b7bc8:	4604      	mov	r4, r0
   b7bca:	f7fc ff7c 	bl	b4ac6 <_ZdlPvj>
   b7bce:	4620      	mov	r0, r4
   b7bd0:	bd10      	pop	{r4, pc}
	...

000b7bd4 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b7bd4:	7b03      	ldrb	r3, [r0, #12]
   b7bd6:	b17b      	cbz	r3, b7bf8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   b7bd8:	6943      	ldr	r3, [r0, #20]
   b7bda:	2b00      	cmp	r3, #0
   b7bdc:	db0c      	blt.n	b7bf8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b7bde:	ee07 3a90 	vmov	s15, r3
   b7be2:	ed9f 7a07 	vldr	s14, [pc, #28]	; b7c00 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b7be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b7bea:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b7bee:	eddf 7a05 	vldr	s15, [pc, #20]	; b7c04 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b7bf2:	ee20 0a27 	vmul.f32	s0, s0, s15
   b7bf6:	4770      	bx	lr
    return -1.0f;
   b7bf8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b7bfc:	4770      	bx	lr
   b7bfe:	bf00      	nop
   b7c00:	477fff00 	.word	0x477fff00
   b7c04:	42c80000 	.word	0x42c80000

000b7c08 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b7c08:	7b03      	ldrb	r3, [r0, #12]
   b7c0a:	b163      	cbz	r3, b7c26 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b7c0c:	6903      	ldr	r3, [r0, #16]
   b7c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b7c12:	d008      	beq.n	b7c26 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b7c14:	ee07 3a90 	vmov	s15, r3
   b7c18:	ed9f 7a04 	vldr	s14, [pc, #16]	; b7c2c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b7c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b7c20:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b7c24:	4770      	bx	lr
    return 0.0f;
   b7c26:	ed9f 0a02 	vldr	s0, [pc, #8]	; b7c30 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b7c2a:	4770      	bx	lr
   b7c2c:	42c80000 	.word	0x42c80000
   b7c30:	00000000 	.word	0x00000000

000b7c34 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b7c34:	7b03      	ldrb	r3, [r0, #12]
   b7c36:	b17b      	cbz	r3, b7c58 <_ZNK14CellularSignal10getQualityEv+0x24>
   b7c38:	69c3      	ldr	r3, [r0, #28]
   b7c3a:	2b00      	cmp	r3, #0
   b7c3c:	db0c      	blt.n	b7c58 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b7c3e:	ee07 3a90 	vmov	s15, r3
   b7c42:	ed9f 7a07 	vldr	s14, [pc, #28]	; b7c60 <_ZNK14CellularSignal10getQualityEv+0x2c>
   b7c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b7c4a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b7c4e:	eddf 7a05 	vldr	s15, [pc, #20]	; b7c64 <_ZNK14CellularSignal10getQualityEv+0x30>
   b7c52:	ee20 0a27 	vmul.f32	s0, s0, s15
   b7c56:	4770      	bx	lr
    return -1.0f;
   b7c58:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b7c5c:	4770      	bx	lr
   b7c5e:	bf00      	nop
   b7c60:	477fff00 	.word	0x477fff00
   b7c64:	42c80000 	.word	0x42c80000

000b7c68 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b7c68:	7b03      	ldrb	r3, [r0, #12]
   b7c6a:	b163      	cbz	r3, b7c86 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b7c6c:	6983      	ldr	r3, [r0, #24]
   b7c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b7c72:	d008      	beq.n	b7c86 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b7c74:	ee07 3a90 	vmov	s15, r3
   b7c78:	ed9f 7a04 	vldr	s14, [pc, #16]	; b7c8c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b7c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b7c80:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b7c84:	4770      	bx	lr
    return 0.0f;
   b7c86:	ed9f 0a02 	vldr	s0, [pc, #8]	; b7c90 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b7c8a:	4770      	bx	lr
   b7c8c:	42c80000 	.word	0x42c80000
   b7c90:	00000000 	.word	0x00000000

000b7c94 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b7c94:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b7c96:	460d      	mov	r5, r1
   b7c98:	f100 0408 	add.w	r4, r0, #8
   b7c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7ca0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7ca4:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b7ca8:	2001      	movs	r0, #1
   b7caa:	bd30      	pop	{r4, r5, pc}

000b7cac <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7cac:	2200      	movs	r2, #0
   b7cae:	6840      	ldr	r0, [r0, #4]
   b7cb0:	4611      	mov	r1, r2
   b7cb2:	f7fd bbc5 	b.w	b5440 <network_listening>

000b7cb6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7cb6:	2200      	movs	r2, #0
   b7cb8:	6840      	ldr	r0, [r0, #4]
   b7cba:	4611      	mov	r1, r2
   b7cbc:	f7fd bbd0 	b.w	b5460 <network_get_listen_timeout>

000b7cc0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7cc0:	6840      	ldr	r0, [r0, #4]
   b7cc2:	2200      	movs	r2, #0
   b7cc4:	f7fd bbc4 	b.w	b5450 <network_set_listen_timeout>

000b7cc8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7cc8:	6840      	ldr	r0, [r0, #4]
   b7cca:	2200      	movs	r2, #0
   b7ccc:	f081 0101 	eor.w	r1, r1, #1
   b7cd0:	f7fd bbae 	b.w	b5430 <network_listen>

000b7cd4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7cd4:	2300      	movs	r3, #0
   b7cd6:	6840      	ldr	r0, [r0, #4]
   b7cd8:	461a      	mov	r2, r3
   b7cda:	4619      	mov	r1, r3
   b7cdc:	f7fd bba0 	b.w	b5420 <network_off>

000b7ce0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7ce0:	2300      	movs	r3, #0
   b7ce2:	6840      	ldr	r0, [r0, #4]
   b7ce4:	461a      	mov	r2, r3
   b7ce6:	4619      	mov	r1, r3
   b7ce8:	f7fd bb92 	b.w	b5410 <network_on>

000b7cec <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7cec:	2200      	movs	r2, #0
   b7cee:	6840      	ldr	r0, [r0, #4]
   b7cf0:	4611      	mov	r1, r2
   b7cf2:	f7fd bb85 	b.w	b5400 <network_ready>

000b7cf6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7cf6:	2200      	movs	r2, #0
   b7cf8:	6840      	ldr	r0, [r0, #4]
   b7cfa:	4611      	mov	r1, r2
   b7cfc:	f7fd bb70 	b.w	b53e0 <network_connecting>

000b7d00 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7d00:	6840      	ldr	r0, [r0, #4]
   b7d02:	2200      	movs	r2, #0
   b7d04:	2102      	movs	r1, #2
   b7d06:	f7fd bb73 	b.w	b53f0 <network_disconnect>

000b7d0a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7d0a:	2300      	movs	r3, #0
   b7d0c:	6840      	ldr	r0, [r0, #4]
   b7d0e:	461a      	mov	r2, r3
   b7d10:	f7fd bb5e 	b.w	b53d0 <network_connect>

000b7d14 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b7d14:	4b02      	ldr	r3, [pc, #8]	; (b7d20 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7d16:	2203      	movs	r2, #3
   b7d18:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7d1a:	4a02      	ldr	r2, [pc, #8]	; (b7d24 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7d1c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7d1e:	4770      	bx	lr
   b7d20:	2003e6a0 	.word	0x2003e6a0
   b7d24:	000ba5c0 	.word	0x000ba5c0

000b7d28 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b7d28:	6800      	ldr	r0, [r0, #0]
   b7d2a:	f000 b861 	b.w	b7df0 <_ZN7TwoWire4lockEv>

000b7d2e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b7d2e:	b510      	push	{r4, lr}
   b7d30:	4604      	mov	r4, r0
      lock_(_lock) {
   b7d32:	6001      	str	r1, [r0, #0]
   b7d34:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b7d36:	b10a      	cbz	r2, b7d3c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b7d38:	f7ff fff6 	bl	b7d28 <_ZN9FuelGauge4lockEv>
}
   b7d3c:	4620      	mov	r0, r4
   b7d3e:	bd10      	pop	{r4, pc}

000b7d40 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b7d40:	b513      	push	{r0, r1, r4, lr}
   b7d42:	4604      	mov	r4, r0
   b7d44:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b7d46:	f001 ff27 	bl	b9b98 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b7d4a:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b7d4c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b7d4e:	4620      	mov	r0, r4
   b7d50:	f7ff ffed 	bl	b7d2e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b7d54:	4620      	mov	r0, r4
   b7d56:	b002      	add	sp, #8
   b7d58:	bd10      	pop	{r4, pc}

000b7d5a <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7d5a:	4770      	bx	lr

000b7d5c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d5e:	4606      	mov	r6, r0
   b7d60:	4615      	mov	r5, r2
   b7d62:	460c      	mov	r4, r1
   b7d64:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7d66:	42bc      	cmp	r4, r7
   b7d68:	d006      	beq.n	b7d78 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7d6a:	6833      	ldr	r3, [r6, #0]
   b7d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7d70:	689b      	ldr	r3, [r3, #8]
   b7d72:	4630      	mov	r0, r6
   b7d74:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7d76:	e7f6      	b.n	b7d66 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7d78:	4628      	mov	r0, r5
   b7d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7d7c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7d7c:	7c00      	ldrb	r0, [r0, #16]
   b7d7e:	2200      	movs	r2, #0
   b7d80:	f7fd b9e2 	b.w	b5148 <hal_i2c_write>

000b7d84 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7d84:	7c00      	ldrb	r0, [r0, #16]
   b7d86:	2100      	movs	r1, #0
   b7d88:	f7fd b9e6 	b.w	b5158 <hal_i2c_available>

000b7d8c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7d8c:	7c00      	ldrb	r0, [r0, #16]
   b7d8e:	2100      	movs	r1, #0
   b7d90:	f7fd b9ea 	b.w	b5168 <hal_i2c_read>

000b7d94 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7d94:	7c00      	ldrb	r0, [r0, #16]
   b7d96:	2100      	movs	r1, #0
   b7d98:	f7fd b9ee 	b.w	b5178 <hal_i2c_peek>

000b7d9c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7d9c:	7c00      	ldrb	r0, [r0, #16]
   b7d9e:	2100      	movs	r1, #0
   b7da0:	f7fd b9f2 	b.w	b5188 <hal_i2c_flush>

000b7da4 <_ZN7TwoWireD0Ev>:
   b7da4:	b510      	push	{r4, lr}
   b7da6:	2114      	movs	r1, #20
   b7da8:	4604      	mov	r4, r0
   b7daa:	f7fc fe8c 	bl	b4ac6 <_ZdlPvj>
   b7dae:	4620      	mov	r0, r4
   b7db0:	bd10      	pop	{r4, pc}
	...

000b7db4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7db4:	b538      	push	{r3, r4, r5, lr}
   b7db6:	4604      	mov	r4, r0
   b7db8:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7dbe:	2200      	movs	r2, #0
   b7dc0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7dc4:	4b09      	ldr	r3, [pc, #36]	; (b7dec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b7dc6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7dc8:	4608      	mov	r0, r1
   b7dca:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b7dcc:	4629      	mov	r1, r5
   b7dce:	f7fd f9e3 	bl	b5198 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7dd2:	30bf      	adds	r0, #191	; 0xbf
   b7dd4:	d108      	bne.n	b7de8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b7dd6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7dd8:	07db      	lsls	r3, r3, #31
   b7dda:	d505      	bpl.n	b7de8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b7ddc:	6868      	ldr	r0, [r5, #4]
   b7dde:	f7fd fb5f 	bl	b54a0 <free>
    free(conf.tx_buffer);
   b7de2:	68e8      	ldr	r0, [r5, #12]
   b7de4:	f7fd fb5c 	bl	b54a0 <free>
}
   b7de8:	4620      	mov	r0, r4
   b7dea:	bd38      	pop	{r3, r4, r5, pc}
   b7dec:	000ba5fc 	.word	0x000ba5fc

000b7df0 <_ZN7TwoWire4lockEv>:
{
  return hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b7df0:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b7df2:	2100      	movs	r1, #0
   b7df4:	7c00      	ldrb	r0, [r0, #16]
   b7df6:	f7fd f9d7 	bl	b51a8 <hal_i2c_lock>
}
   b7dfa:	fab0 f080 	clz	r0, r0
   b7dfe:	0940      	lsrs	r0, r0, #5
   b7e00:	bd08      	pop	{r3, pc}

000b7e02 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7e02:	4770      	bx	lr

000b7e04 <_ZN9IPAddressD0Ev>:
   b7e04:	b510      	push	{r4, lr}
   b7e06:	2118      	movs	r1, #24
   b7e08:	4604      	mov	r4, r0
   b7e0a:	f7fc fe5c 	bl	b4ac6 <_ZdlPvj>
   b7e0e:	4620      	mov	r0, r4
   b7e10:	bd10      	pop	{r4, pc}

000b7e12 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7e12:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7e14:	7d03      	ldrb	r3, [r0, #20]
   b7e16:	2b06      	cmp	r3, #6
{
   b7e18:	b08d      	sub	sp, #52	; 0x34
   b7e1a:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7e1c:	f100 0704 	add.w	r7, r0, #4
   b7e20:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7e24:	d012      	beq.n	b7e4c <_ZNK9IPAddress7printToER5Print+0x3a>
   b7e26:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7e2a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7e2e:	220a      	movs	r2, #10
   b7e30:	4630      	mov	r0, r6
   b7e32:	f001 fae8 	bl	b9406 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7e36:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7e38:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7e3a:	d019      	beq.n	b7e70 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7e3c:	2c00      	cmp	r4, #0
   b7e3e:	d0f4      	beq.n	b7e2a <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7e40:	212e      	movs	r1, #46	; 0x2e
   b7e42:	4630      	mov	r0, r6
   b7e44:	f001 fac6 	bl	b93d4 <_ZN5Print5printEc>
   b7e48:	4404      	add	r4, r0
   b7e4a:	e7ee      	b.n	b7e2a <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7e4c:	232f      	movs	r3, #47	; 0x2f
   b7e4e:	466a      	mov	r2, sp
   b7e50:	4639      	mov	r1, r7
   b7e52:	200a      	movs	r0, #10
		buf[0] = 0;
   b7e54:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7e58:	f7fd f9ae 	bl	b51b8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7e5c:	4668      	mov	r0, sp
   b7e5e:	f7fc fdeb 	bl	b4a38 <strlen>
   b7e62:	6833      	ldr	r3, [r6, #0]
   b7e64:	4602      	mov	r2, r0
   b7e66:	68db      	ldr	r3, [r3, #12]
   b7e68:	4669      	mov	r1, sp
   b7e6a:	4630      	mov	r0, r6
   b7e6c:	4798      	blx	r3
   b7e6e:	4604      	mov	r4, r0
    }
    return n;
}
   b7e70:	4620      	mov	r0, r4
   b7e72:	b00d      	add	sp, #52	; 0x34
   b7e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b7e78 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7e78:	b510      	push	{r4, lr}
   b7e7a:	4b05      	ldr	r3, [pc, #20]	; (b7e90 <_ZN9IPAddressC1Ev+0x18>)
   b7e7c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7e7e:	2211      	movs	r2, #17
   b7e80:	f840 3b04 	str.w	r3, [r0], #4
   b7e84:	2100      	movs	r1, #0
   b7e86:	f002 f84b 	bl	b9f20 <memset>
}
   b7e8a:	4620      	mov	r0, r4
   b7e8c:	bd10      	pop	{r4, pc}
   b7e8e:	bf00      	nop
   b7e90:	000ba624 	.word	0x000ba624

000b7e94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7e94:	4603      	mov	r3, r0
   b7e96:	4a07      	ldr	r2, [pc, #28]	; (b7eb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7e98:	b510      	push	{r4, lr}
   b7e9a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7e9e:	f101 0210 	add.w	r2, r1, #16
   b7ea2:	f851 4b04 	ldr.w	r4, [r1], #4
   b7ea6:	f843 4b04 	str.w	r4, [r3], #4
   b7eaa:	4291      	cmp	r1, r2
   b7eac:	d1f9      	bne.n	b7ea2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7eae:	780a      	ldrb	r2, [r1, #0]
   b7eb0:	701a      	strb	r2, [r3, #0]
}
   b7eb2:	bd10      	pop	{r4, pc}
   b7eb4:	000ba624 	.word	0x000ba624

000b7eb8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7eb8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7eba:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7ebe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7ec2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7ec6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7eca:	2304      	movs	r3, #4
   b7ecc:	6041      	str	r1, [r0, #4]
   b7ece:	7503      	strb	r3, [r0, #20]
}
   b7ed0:	bd10      	pop	{r4, pc}
	...

000b7ed4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7ed4:	b507      	push	{r0, r1, r2, lr}
   b7ed6:	4b06      	ldr	r3, [pc, #24]	; (b7ef0 <_ZN9IPAddressC1EPKh+0x1c>)
   b7ed8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7eda:	78cb      	ldrb	r3, [r1, #3]
   b7edc:	9300      	str	r3, [sp, #0]
   b7ede:	788b      	ldrb	r3, [r1, #2]
   b7ee0:	784a      	ldrb	r2, [r1, #1]
   b7ee2:	7809      	ldrb	r1, [r1, #0]
   b7ee4:	f7ff ffe8 	bl	b7eb8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7ee8:	b003      	add	sp, #12
   b7eea:	f85d fb04 	ldr.w	pc, [sp], #4
   b7eee:	bf00      	nop
   b7ef0:	000ba624 	.word	0x000ba624

000b7ef4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b7ef4:	f100 0310 	add.w	r3, r0, #16
   b7ef8:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b7efa:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b7efe:	2901      	cmp	r1, #1
   b7f00:	4618      	mov	r0, r3
   b7f02:	d108      	bne.n	b7f16 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b7f04:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b7f08:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b7f0c:	3a01      	subs	r2, #1
   b7f0e:	f103 0310 	add.w	r3, r3, #16
   b7f12:	d1f2      	bne.n	b7efa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b7f14:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b7f16:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b7f18:	bf04      	itt	eq
   b7f1a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b7f1e:	1852      	addeq	r2, r2, r1
   b7f20:	e7f4      	b.n	b7f0c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b7f22 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b7f22:	b40e      	push	{r1, r2, r3}
   b7f24:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7f26:	b088      	sub	sp, #32
   b7f28:	af00      	add	r7, sp, #0
   b7f2a:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7f2e:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b7f30:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7f34:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b7f36:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7f38:	462b      	mov	r3, r5
   b7f3a:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b7f3c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7f3e:	f7fd fabf 	bl	b54c0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b7f42:	280f      	cmp	r0, #15
   b7f44:	687a      	ldr	r2, [r7, #4]
   b7f46:	d91a      	bls.n	b7f7e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b7f48:	f100 0308 	add.w	r3, r0, #8
   b7f4c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b7f50:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b7f52:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7f56:	1c41      	adds	r1, r0, #1
   b7f58:	462b      	mov	r3, r5
   b7f5a:	4668      	mov	r0, sp
        va_start(args, fmt);
   b7f5c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7f5e:	f7fd faaf 	bl	b54c0 <vsnprintf>
        if (n > 0) {
   b7f62:	1e02      	subs	r2, r0, #0
   b7f64:	dd04      	ble.n	b7f70 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b7f66:	6823      	ldr	r3, [r4, #0]
   b7f68:	4669      	mov	r1, sp
   b7f6a:	689b      	ldr	r3, [r3, #8]
   b7f6c:	4620      	mov	r0, r4
   b7f6e:	4798      	blx	r3
   b7f70:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b7f72:	3720      	adds	r7, #32
   b7f74:	46bd      	mov	sp, r7
   b7f76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7f7a:	b003      	add	sp, #12
   b7f7c:	4770      	bx	lr
    } else if (n > 0) {
   b7f7e:	2800      	cmp	r0, #0
   b7f80:	d0f7      	beq.n	b7f72 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b7f82:	6823      	ldr	r3, [r4, #0]
   b7f84:	4602      	mov	r2, r0
   b7f86:	689b      	ldr	r3, [r3, #8]
   b7f88:	f107 0110 	add.w	r1, r7, #16
   b7f8c:	4620      	mov	r0, r4
   b7f8e:	4798      	blx	r3
}
   b7f90:	e7ef      	b.n	b7f72 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b7f92 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7f92:	b538      	push	{r3, r4, r5, lr}
   b7f94:	680b      	ldr	r3, [r1, #0]
   b7f96:	6003      	str	r3, [r0, #0]
   b7f98:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b7f9a:	6843      	ldr	r3, [r0, #4]
   b7f9c:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7f9e:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b7fa0:	d008      	beq.n	b7fb4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b7fa2:	b115      	cbz	r5, b7faa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b7fa4:	686b      	ldr	r3, [r5, #4]
   b7fa6:	3301      	adds	r3, #1
   b7fa8:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b7faa:	6860      	ldr	r0, [r4, #4]
   b7fac:	b108      	cbz	r0, b7fb2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b7fae:	f7fc fdf1 	bl	b4b94 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b7fb2:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7fb4:	bd38      	pop	{r3, r4, r5, pc}

000b7fb6 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b7fb6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b7fb8:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b7fba:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b7fbe:	689b      	ldr	r3, [r3, #8]
   b7fc0:	2201      	movs	r2, #1
   b7fc2:	f10d 0107 	add.w	r1, sp, #7
   b7fc6:	4798      	blx	r3
}
   b7fc8:	b003      	add	sp, #12
   b7fca:	f85d fb04 	ldr.w	pc, [sp], #4

000b7fce <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7fce:	460b      	mov	r3, r1
   b7fd0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b7fd2:	2200      	movs	r2, #0
   b7fd4:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b7fd6:	e9c0 2200 	strd	r2, r2, [r0]
   b7fda:	4604      	mov	r4, r0
        t_ = t;
   b7fdc:	6083      	str	r3, [r0, #8]
    if (t) {
   b7fde:	b90b      	cbnz	r3, b7fe4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b7fe0:	4620      	mov	r0, r4
   b7fe2:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b7fe4:	f7ff ffd5 	bl	b7f92 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b7fe8:	e7fa      	b.n	b7fe0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b7fea <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b7fea:	6883      	ldr	r3, [r0, #8]
   b7fec:	b1eb      	cbz	r3, b802a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b7fee:	781a      	ldrb	r2, [r3, #0]
   b7ff0:	2a03      	cmp	r2, #3
   b7ff2:	d81a      	bhi.n	b802a <_ZNK5spark9JSONValue4typeEv+0x40>
   b7ff4:	e8df f002 	tbb	[pc, r2]
   b7ff8:	1b021704 	.word	0x1b021704
   b7ffc:	2005      	movs	r0, #5
   b7ffe:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b8000:	6802      	ldr	r2, [r0, #0]
   b8002:	685b      	ldr	r3, [r3, #4]
   b8004:	6852      	ldr	r2, [r2, #4]
   b8006:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b8008:	282d      	cmp	r0, #45	; 0x2d
   b800a:	d012      	beq.n	b8032 <_ZNK5spark9JSONValue4typeEv+0x48>
   b800c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8010:	2b09      	cmp	r3, #9
   b8012:	d90e      	bls.n	b8032 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b8014:	2874      	cmp	r0, #116	; 0x74
   b8016:	d00e      	beq.n	b8036 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b8018:	2866      	cmp	r0, #102	; 0x66
   b801a:	d00c      	beq.n	b8036 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b801c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b8020:	4258      	negs	r0, r3
   b8022:	4158      	adcs	r0, r3
   b8024:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b8026:	2006      	movs	r0, #6
   b8028:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b802a:	2000      	movs	r0, #0
   b802c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b802e:	2004      	movs	r0, #4
   b8030:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b8032:	2003      	movs	r0, #3
   b8034:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b8036:	2002      	movs	r0, #2
}
   b8038:	4770      	bx	lr

000b803a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b803a:	b510      	push	{r4, lr}
   b803c:	4604      	mov	r4, r0
    switch (type()) {
   b803e:	f7ff ffd4 	bl	b7fea <_ZNK5spark9JSONValue4typeEv>
   b8042:	2802      	cmp	r0, #2
   b8044:	d00e      	beq.n	b8064 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b8046:	1ec3      	subs	r3, r0, #3
   b8048:	b2db      	uxtb	r3, r3
   b804a:	2b01      	cmp	r3, #1
   b804c:	d814      	bhi.n	b8078 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b804e:	6822      	ldr	r2, [r4, #0]
   b8050:	68a3      	ldr	r3, [r4, #8]
   b8052:	6850      	ldr	r0, [r2, #4]
   b8054:	685b      	ldr	r3, [r3, #4]
}
   b8056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b805a:	220a      	movs	r2, #10
   b805c:	2100      	movs	r1, #0
   b805e:	4418      	add	r0, r3
   b8060:	f002 b86a 	b.w	ba138 <strtol>
        const char* const s = d_->json + t_->start;
   b8064:	6822      	ldr	r2, [r4, #0]
   b8066:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b8068:	6852      	ldr	r2, [r2, #4]
   b806a:	685b      	ldr	r3, [r3, #4]
   b806c:	5cd0      	ldrb	r0, [r2, r3]
   b806e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b8072:	4258      	negs	r0, r3
   b8074:	4158      	adcs	r0, r3
}
   b8076:	bd10      	pop	{r4, pc}
    switch (type()) {
   b8078:	2000      	movs	r0, #0
   b807a:	e7fc      	b.n	b8076 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b807c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b807c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b807e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b8080:	e9c0 3300 	strd	r3, r3, [r0]
   b8084:	4604      	mov	r4, r0
        n_(0) {
   b8086:	480e      	ldr	r0, [pc, #56]	; (b80c0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b8088:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b808c:	b1a9      	cbz	r1, b80ba <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b808e:	780b      	ldrb	r3, [r1, #0]
   b8090:	2b03      	cmp	r3, #3
   b8092:	d006      	beq.n	b80a2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b8094:	b98b      	cbnz	r3, b80ba <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b8096:	6813      	ldr	r3, [r2, #0]
   b8098:	6858      	ldr	r0, [r3, #4]
   b809a:	684b      	ldr	r3, [r1, #4]
   b809c:	5cc3      	ldrb	r3, [r0, r3]
   b809e:	2b6e      	cmp	r3, #110	; 0x6e
   b80a0:	d007      	beq.n	b80b2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b80a2:	6813      	ldr	r3, [r2, #0]
   b80a4:	684d      	ldr	r5, [r1, #4]
   b80a6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b80a8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b80aa:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b80ac:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b80ae:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b80b0:	60e3      	str	r3, [r4, #12]
   b80b2:	4611      	mov	r1, r2
   b80b4:	4620      	mov	r0, r4
   b80b6:	f7ff ff6c 	bl	b7f92 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b80ba:	4620      	mov	r0, r4
   b80bc:	bd38      	pop	{r3, r4, r5, pc}
   b80be:	bf00      	nop
   b80c0:	000ba696 	.word	0x000ba696

000b80c4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b80c4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b80c6:	2500      	movs	r5, #0
   b80c8:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b80ca:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b80ce:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b80d2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b80d6:	4604      	mov	r4, r0
   b80d8:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b80da:	b14b      	cbz	r3, b80f0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b80dc:	781a      	ldrb	r2, [r3, #0]
   b80de:	2a01      	cmp	r2, #1
   b80e0:	d106      	bne.n	b80f0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b80e2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b80e6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b80e8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b80ea:	6143      	str	r3, [r0, #20]
   b80ec:	f7ff ff51 	bl	b7f92 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b80f0:	4620      	mov	r0, r4
   b80f2:	bd38      	pop	{r3, r4, r5, pc}

000b80f4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b80f4:	b510      	push	{r4, lr}
    if (!n_) {
   b80f6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b80f8:	4604      	mov	r4, r0
    if (!n_) {
   b80fa:	b163      	cbz	r3, b8116 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b80fc:	6880      	ldr	r0, [r0, #8]
   b80fe:	60e0      	str	r0, [r4, #12]
    --n_;
   b8100:	3b01      	subs	r3, #1
    ++t_;
   b8102:	3010      	adds	r0, #16
   b8104:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b8106:	6120      	str	r0, [r4, #16]
    --n_;
   b8108:	6163      	str	r3, [r4, #20]
    if (n_) {
   b810a:	b113      	cbz	r3, b8112 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b810c:	f7ff fef2 	bl	b7ef4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b8110:	60a0      	str	r0, [r4, #8]
    return true;
   b8112:	2001      	movs	r0, #1
   b8114:	e000      	b.n	b8118 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b8116:	4618      	mov	r0, r3
}
   b8118:	bd10      	pop	{r4, pc}

000b811a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b811a:	b510      	push	{r4, lr}
    write('}');
   b811c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b811e:	4604      	mov	r4, r0
    write('}');
   b8120:	f7ff ff49 	bl	b7fb6 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b8124:	2301      	movs	r3, #1
   b8126:	7123      	strb	r3, [r4, #4]
}
   b8128:	4620      	mov	r0, r4
   b812a:	bd10      	pop	{r4, pc}

000b812c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b812c:	b508      	push	{r3, lr}
    switch (state_) {
   b812e:	7903      	ldrb	r3, [r0, #4]
   b8130:	2b01      	cmp	r3, #1
   b8132:	d002      	beq.n	b813a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b8134:	2b02      	cmp	r3, #2
   b8136:	d004      	beq.n	b8142 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b8138:	bd08      	pop	{r3, pc}
        write(',');
   b813a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b813c:	f7ff ff3b 	bl	b7fb6 <_ZN5spark10JSONWriter5writeEc>
}
   b8140:	e7fa      	b.n	b8138 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b8142:	213a      	movs	r1, #58	; 0x3a
   b8144:	e7fa      	b.n	b813c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b8146 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b8146:	b510      	push	{r4, lr}
   b8148:	4604      	mov	r4, r0
    writeSeparator();
   b814a:	f7ff ffef 	bl	b812c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b814e:	4620      	mov	r0, r4
   b8150:	217b      	movs	r1, #123	; 0x7b
   b8152:	f7ff ff30 	bl	b7fb6 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b8156:	2300      	movs	r3, #0
   b8158:	7123      	strb	r3, [r4, #4]
}
   b815a:	4620      	mov	r0, r4
   b815c:	bd10      	pop	{r4, pc}
	...

000b8160 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b8160:	b513      	push	{r0, r1, r4, lr}
   b8162:	4604      	mov	r4, r0
   b8164:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b8166:	f7ff ffe1 	bl	b812c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b816a:	6823      	ldr	r3, [r4, #0]
   b816c:	9a01      	ldr	r2, [sp, #4]
   b816e:	68db      	ldr	r3, [r3, #12]
   b8170:	4903      	ldr	r1, [pc, #12]	; (b8180 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b8172:	4620      	mov	r0, r4
   b8174:	4798      	blx	r3
    state_ = NEXT;
   b8176:	2301      	movs	r3, #1
}
   b8178:	4620      	mov	r0, r4
    state_ = NEXT;
   b817a:	7123      	strb	r3, [r4, #4]
}
   b817c:	b002      	add	sp, #8
   b817e:	bd10      	pop	{r4, pc}
   b8180:	000ba630 	.word	0x000ba630

000b8184 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b8184:	b513      	push	{r0, r1, r4, lr}
   b8186:	4604      	mov	r4, r0
   b8188:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b818a:	f7ff ffcf 	bl	b812c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b818e:	6823      	ldr	r3, [r4, #0]
   b8190:	9a01      	ldr	r2, [sp, #4]
   b8192:	68db      	ldr	r3, [r3, #12]
   b8194:	4903      	ldr	r1, [pc, #12]	; (b81a4 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b8196:	4620      	mov	r0, r4
   b8198:	4798      	blx	r3
    state_ = NEXT;
   b819a:	2301      	movs	r3, #1
}
   b819c:	4620      	mov	r0, r4
    state_ = NEXT;
   b819e:	7123      	strb	r3, [r4, #4]
}
   b81a0:	b002      	add	sp, #8
   b81a2:	bd10      	pop	{r4, pc}
   b81a4:	000ba633 	.word	0x000ba633

000b81a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b81a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b81ac:	460d      	mov	r5, r1
    write('"');
   b81ae:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b81b0:	4690      	mov	r8, r2
   b81b2:	4604      	mov	r4, r0
    write('"');
   b81b4:	f7ff feff 	bl	b7fb6 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b81b8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b8260 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b81bc:	44a8      	add	r8, r5
    const char *s = str;
   b81be:	462f      	mov	r7, r5
    while (s != end) {
   b81c0:	4547      	cmp	r7, r8
   b81c2:	46ba      	mov	sl, r7
   b81c4:	d03d      	beq.n	b8242 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b81c6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b81ca:	2e22      	cmp	r6, #34	; 0x22
   b81cc:	d006      	beq.n	b81dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b81ce:	2e5c      	cmp	r6, #92	; 0x5c
   b81d0:	d004      	beq.n	b81dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b81d2:	4630      	mov	r0, r6
   b81d4:	f001 fe64 	bl	b9ea0 <isprint>
   b81d8:	2800      	cmp	r0, #0
   b81da:	d1f1      	bne.n	b81c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b81dc:	6823      	ldr	r3, [r4, #0]
   b81de:	ebaa 0205 	sub.w	r2, sl, r5
   b81e2:	689b      	ldr	r3, [r3, #8]
   b81e4:	4629      	mov	r1, r5
   b81e6:	4620      	mov	r0, r4
   b81e8:	4798      	blx	r3
            write('\\');
   b81ea:	215c      	movs	r1, #92	; 0x5c
   b81ec:	4620      	mov	r0, r4
   b81ee:	f7ff fee2 	bl	b7fb6 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b81f2:	2e0d      	cmp	r6, #13
   b81f4:	d80a      	bhi.n	b820c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b81f6:	2e07      	cmp	r6, #7
   b81f8:	d91c      	bls.n	b8234 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b81fa:	f1a6 0308 	sub.w	r3, r6, #8
   b81fe:	2b05      	cmp	r3, #5
   b8200:	d818      	bhi.n	b8234 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b8202:	e8df f003 	tbb	[pc, r3]
   b8206:	0f0d      	.short	0x0f0d
   b8208:	15131711 	.word	0x15131711
   b820c:	2e22      	cmp	r6, #34	; 0x22
   b820e:	d001      	beq.n	b8214 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b8210:	2e5c      	cmp	r6, #92	; 0x5c
   b8212:	d10f      	bne.n	b8234 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b8214:	4631      	mov	r1, r6
                write('b');
   b8216:	4620      	mov	r0, r4
   b8218:	f7ff fecd 	bl	b7fb6 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b821c:	463d      	mov	r5, r7
    while (s != end) {
   b821e:	e7cf      	b.n	b81c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b8220:	2162      	movs	r1, #98	; 0x62
   b8222:	e7f8      	b.n	b8216 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b8224:	2174      	movs	r1, #116	; 0x74
   b8226:	e7f6      	b.n	b8216 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b8228:	216e      	movs	r1, #110	; 0x6e
   b822a:	e7f4      	b.n	b8216 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b822c:	2166      	movs	r1, #102	; 0x66
   b822e:	e7f2      	b.n	b8216 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b8230:	2172      	movs	r1, #114	; 0x72
   b8232:	e7f0      	b.n	b8216 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b8234:	6823      	ldr	r3, [r4, #0]
   b8236:	4632      	mov	r2, r6
   b8238:	68db      	ldr	r3, [r3, #12]
   b823a:	4649      	mov	r1, r9
   b823c:	4620      	mov	r0, r4
   b823e:	4798      	blx	r3
                break;
   b8240:	e7ec      	b.n	b821c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b8242:	42bd      	cmp	r5, r7
   b8244:	d005      	beq.n	b8252 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b8246:	6823      	ldr	r3, [r4, #0]
   b8248:	1b7a      	subs	r2, r7, r5
   b824a:	689b      	ldr	r3, [r3, #8]
   b824c:	4629      	mov	r1, r5
   b824e:	4620      	mov	r0, r4
   b8250:	4798      	blx	r3
    }
    write('"');
   b8252:	2122      	movs	r1, #34	; 0x22
   b8254:	4620      	mov	r0, r4
   b8256:	f7ff feae 	bl	b7fb6 <_ZN5spark10JSONWriter5writeEc>
}
   b825a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b825e:	bf00      	nop
   b8260:	000ba636 	.word	0x000ba636

000b8264 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b8264:	b513      	push	{r0, r1, r4, lr}
   b8266:	4604      	mov	r4, r0
   b8268:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b826c:	f7ff ff5e 	bl	b812c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b8270:	4620      	mov	r0, r4
   b8272:	e9dd 2100 	ldrd	r2, r1, [sp]
   b8276:	f7ff ff97 	bl	b81a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b827a:	2302      	movs	r3, #2
}
   b827c:	4620      	mov	r0, r4
    state_ = VALUE;
   b827e:	7123      	strb	r3, [r4, #4]
}
   b8280:	b002      	add	sp, #8
   b8282:	bd10      	pop	{r4, pc}

000b8284 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b8284:	b513      	push	{r0, r1, r4, lr}
   b8286:	4604      	mov	r4, r0
   b8288:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b828c:	f7ff ff4e 	bl	b812c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b8290:	4620      	mov	r0, r4
   b8292:	e9dd 2100 	ldrd	r2, r1, [sp]
   b8296:	f7ff ff87 	bl	b81a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b829a:	2301      	movs	r3, #1
}
   b829c:	4620      	mov	r0, r4
    state_ = NEXT;
   b829e:	7123      	strb	r3, [r4, #4]
}
   b82a0:	b002      	add	sp, #8
   b82a2:	bd10      	pop	{r4, pc}

000b82a4 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b82a4:	6880      	ldr	r0, [r0, #8]
   b82a6:	6803      	ldr	r3, [r0, #0]
   b82a8:	68db      	ldr	r3, [r3, #12]
   b82aa:	4718      	bx	r3

000b82ac <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b82ac:	4770      	bx	lr

000b82ae <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b82ae:	4608      	mov	r0, r1
   b82b0:	b111      	cbz	r1, b82b8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b82b2:	680b      	ldr	r3, [r1, #0]
   b82b4:	685b      	ldr	r3, [r3, #4]
   b82b6:	4718      	bx	r3
}
   b82b8:	4770      	bx	lr

000b82ba <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b82ba:	4770      	bx	lr

000b82bc <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b82bc:	4770      	bx	lr

000b82be <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b82be:	4770      	bx	lr

000b82c0 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b82c0:	4770      	bx	lr

000b82c2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b82c2:	b538      	push	{r3, r4, r5, lr}
   b82c4:	4604      	mov	r4, r0
   b82c6:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b82c8:	6800      	ldr	r0, [r0, #0]
   b82ca:	212e      	movs	r1, #46	; 0x2e
   b82cc:	f001 fe6b 	bl	b9fa6 <strchrnul>
    size = s - category;
   b82d0:	6823      	ldr	r3, [r4, #0]
   b82d2:	1ac3      	subs	r3, r0, r3
   b82d4:	602b      	str	r3, [r5, #0]
    if (size) {
   b82d6:	b123      	cbz	r3, b82e2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b82d8:	7803      	ldrb	r3, [r0, #0]
   b82da:	b103      	cbz	r3, b82de <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b82dc:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b82de:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b82e0:	6020      	str	r0, [r4, #0]
}
   b82e2:	4618      	mov	r0, r3
   b82e4:	bd38      	pop	{r3, r4, r5, pc}

000b82e6 <_ZN5spark16JSONStreamWriterD0Ev>:
   b82e6:	b510      	push	{r4, lr}
   b82e8:	210c      	movs	r1, #12
   b82ea:	4604      	mov	r4, r0
   b82ec:	f7fc fbeb 	bl	b4ac6 <_ZdlPvj>
   b82f0:	4620      	mov	r0, r4
   b82f2:	bd10      	pop	{r4, pc}

000b82f4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b82f4:	b510      	push	{r4, lr}
   b82f6:	2104      	movs	r1, #4
   b82f8:	4604      	mov	r4, r0
   b82fa:	f7fc fbe4 	bl	b4ac6 <_ZdlPvj>
   b82fe:	4620      	mov	r0, r4
   b8300:	bd10      	pop	{r4, pc}

000b8302 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b8302:	b510      	push	{r4, lr}
   b8304:	2104      	movs	r1, #4
   b8306:	4604      	mov	r4, r0
   b8308:	f7fc fbdd 	bl	b4ac6 <_ZdlPvj>
   b830c:	4620      	mov	r0, r4
   b830e:	bd10      	pop	{r4, pc}

000b8310 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   b8310:	f7fc bef2 	b.w	b50f8 <os_mutex_recursive_lock>

000b8314 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b8314:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b8316:	f7fc fb85 	bl	b4a24 <strcmp>
}
   b831a:	fab0 f080 	clz	r0, r0
   b831e:	0940      	lsrs	r0, r0, #5
   b8320:	bd08      	pop	{r3, pc}

000b8322 <__tcf_1>:
   b8322:	4770      	bx	lr

000b8324 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b8324:	b510      	push	{r4, lr}
   b8326:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b8328:	f001 fb58 	bl	b99dc <_Z16_fetch_usbserialv>
   b832c:	4284      	cmp	r4, r0
   b832e:	d010      	beq.n	b8352 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b8330:	f001 fc72 	bl	b9c18 <_Z22__fetch_global_Serial1v>
   b8334:	4284      	cmp	r4, r0
   b8336:	d105      	bne.n	b8344 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b8338:	f001 fc6e 	bl	b9c18 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b833c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b8340:	f001 bae7 	b.w	b9912 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b8344:	b12c      	cbz	r4, b8352 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b8346:	6823      	ldr	r3, [r4, #0]
   b8348:	4620      	mov	r0, r4
   b834a:	685b      	ldr	r3, [r3, #4]
}
   b834c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8350:	4718      	bx	r3
   b8352:	bd10      	pop	{r4, pc}

000b8354 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8354:	680b      	ldr	r3, [r1, #0]
   b8356:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b8358:	684b      	ldr	r3, [r1, #4]
   b835a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b835c:	b113      	cbz	r3, b8364 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b835e:	685a      	ldr	r2, [r3, #4]
   b8360:	3201      	adds	r2, #1
   b8362:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8364:	4770      	bx	lr

000b8366 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b8366:	b513      	push	{r0, r1, r4, lr}
   b8368:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b836a:	4608      	mov	r0, r1
   b836c:	9101      	str	r1, [sp, #4]
   b836e:	f7fc fb63 	bl	b4a38 <strlen>
   b8372:	9901      	ldr	r1, [sp, #4]
   b8374:	4602      	mov	r2, r0
   b8376:	4620      	mov	r0, r4
}
   b8378:	b002      	add	sp, #8
   b837a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b837e:	f7ff bf81 	b.w	b8284 <_ZN5spark10JSONWriter5valueEPKcj>

000b8382 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b8382:	b513      	push	{r0, r1, r4, lr}
   b8384:	4604      	mov	r4, r0
    write(str, strlen(str));
   b8386:	4608      	mov	r0, r1
   b8388:	9101      	str	r1, [sp, #4]
   b838a:	f7fc fb55 	bl	b4a38 <strlen>
   b838e:	6823      	ldr	r3, [r4, #0]
   b8390:	9901      	ldr	r1, [sp, #4]
   b8392:	68db      	ldr	r3, [r3, #12]
   b8394:	4602      	mov	r2, r0
   b8396:	4620      	mov	r0, r4
}
   b8398:	b002      	add	sp, #8
   b839a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b839e:	4718      	bx	r3

000b83a0 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b83a0:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b83a2:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b83a4:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b83a8:	68db      	ldr	r3, [r3, #12]
   b83aa:	2201      	movs	r2, #1
   b83ac:	f10d 0107 	add.w	r1, sp, #7
   b83b0:	4798      	blx	r3
}
   b83b2:	b003      	add	sp, #12
   b83b4:	f85d fb04 	ldr.w	pc, [sp], #4

000b83b8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b83b8:	680a      	ldr	r2, [r1, #0]
   b83ba:	6002      	str	r2, [r0, #0]
   b83bc:	684a      	ldr	r2, [r1, #4]
   b83be:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b83c0:	2200      	movs	r2, #0
   b83c2:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b83c6:	b510      	push	{r4, lr}
   b83c8:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b83ca:	688c      	ldr	r4, [r1, #8]
   b83cc:	6084      	str	r4, [r0, #8]
   b83ce:	68cc      	ldr	r4, [r1, #12]
   b83d0:	60c4      	str	r4, [r0, #12]
   b83d2:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b83d4:	608a      	str	r2, [r1, #8]
   b83d6:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b83d8:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b83da:	610a      	str	r2, [r1, #16]
   b83dc:	bd10      	pop	{r4, pc}
	...

000b83e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b83e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
   b83e4:	e9d0 8400 	ldrd	r8, r4, [r0]
   b83e8:	f04f 0a14 	mov.w	sl, #20
   b83ec:	9300      	str	r3, [sp, #0]
   b83ee:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b83f2:	4b18      	ldr	r3, [pc, #96]	; (b8454 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b83f4:	10a4      	asrs	r4, r4, #2
   b83f6:	4617      	mov	r7, r2
   b83f8:	435c      	muls	r4, r3
   b83fa:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b83fc:	2c00      	cmp	r4, #0
   b83fe:	dd21      	ble.n	b8444 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b8400:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b8402:	fb0a f006 	mul.w	r0, sl, r6
   b8406:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b840a:	463a      	mov	r2, r7
   b840c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b8410:	5828      	ldr	r0, [r5, r0]
   b8412:	9101      	str	r1, [sp, #4]
   b8414:	455f      	cmp	r7, fp
   b8416:	bf28      	it	cs
   b8418:	465a      	movcs	r2, fp
   b841a:	f001 fdd6 	bl	b9fca <strncmp>
                if (cmp == 0) {
   b841e:	2800      	cmp	r0, #0
   b8420:	9901      	ldr	r1, [sp, #4]
   b8422:	f04f 0301 	mov.w	r3, #1
   b8426:	d10b      	bne.n	b8440 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b8428:	455f      	cmp	r7, fp
   b842a:	d103      	bne.n	b8434 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b842c:	9a00      	ldr	r2, [sp, #0]
   b842e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b8430:	4634      	mov	r4, r6
   b8432:	e7e3      	b.n	b83fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b8434:	d9fc      	bls.n	b8430 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b8436:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b8438:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b843c:	3e01      	subs	r6, #1
   b843e:	e7f7      	b.n	b8430 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b8440:	dbf9      	blt.n	b8436 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b8442:	e7f5      	b.n	b8430 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b8444:	eba5 0508 	sub.w	r5, r5, r8
}
   b8448:	4802      	ldr	r0, [pc, #8]	; (b8454 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b844a:	10ad      	asrs	r5, r5, #2
   b844c:	4368      	muls	r0, r5
   b844e:	b003      	add	sp, #12
   b8450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8454:	cccccccd 	.word	0xcccccccd

000b8458 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b8458:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b845a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b845c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b845e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b8460:	b303      	cbz	r3, b84a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b8462:	b1f9      	cbz	r1, b84a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b8464:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b8466:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b846a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b846c:	a903      	add	r1, sp, #12
   b846e:	a801      	add	r0, sp, #4
   b8470:	f7ff ff27 	bl	b82c2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b8474:	4601      	mov	r1, r0
   b8476:	b1a8      	cbz	r0, b84a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b8478:	f10d 030b 	add.w	r3, sp, #11
   b847c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b847e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8482:	4620      	mov	r0, r4
   b8484:	f7ff ffac 	bl	b83e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b8488:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b848c:	b153      	cbz	r3, b84a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b848e:	6823      	ldr	r3, [r4, #0]
   b8490:	2414      	movs	r4, #20
   b8492:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b8496:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b8498:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b849c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b849e:	bfa8      	it	ge
   b84a0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b84a2:	e7e3      	b.n	b846c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b84a4:	4628      	mov	r0, r5
   b84a6:	b004      	add	sp, #16
   b84a8:	bd70      	pop	{r4, r5, r6, pc}

000b84aa <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b84aa:	b40e      	push	{r1, r2, r3}
   b84ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   b84ae:	b08c      	sub	sp, #48	; 0x30
   b84b0:	af00      	add	r7, sp, #0
   b84b2:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b84b6:	4604      	mov	r4, r0
   b84b8:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b84bc:	607a      	str	r2, [r7, #4]
   b84be:	462b      	mov	r3, r5
   b84c0:	2120      	movs	r1, #32
   b84c2:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b84c6:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b84c8:	f7fc fffa 	bl	b54c0 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b84cc:	281f      	cmp	r0, #31
   b84ce:	687a      	ldr	r2, [r7, #4]
   b84d0:	d91a      	bls.n	b8508 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b84d2:	f100 0308 	add.w	r3, r0, #8
   b84d6:	f023 0307 	bic.w	r3, r3, #7
        }
   b84da:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b84dc:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b84e0:	1c41      	adds	r1, r0, #1
   b84e2:	462b      	mov	r3, r5
   b84e4:	4668      	mov	r0, sp
        va_start(args, fmt);
   b84e6:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b84e8:	f7fc ffea 	bl	b54c0 <vsnprintf>
        if (n > 0) {
   b84ec:	1e02      	subs	r2, r0, #0
   b84ee:	dd04      	ble.n	b84fa <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b84f0:	6823      	ldr	r3, [r4, #0]
   b84f2:	4669      	mov	r1, sp
   b84f4:	68db      	ldr	r3, [r3, #12]
   b84f6:	4620      	mov	r0, r4
   b84f8:	4798      	blx	r3
   b84fa:	46b5      	mov	sp, r6
}
   b84fc:	3730      	adds	r7, #48	; 0x30
   b84fe:	46bd      	mov	sp, r7
   b8500:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8504:	b003      	add	sp, #12
   b8506:	4770      	bx	lr
    } else if (n > 0) {
   b8508:	2800      	cmp	r0, #0
   b850a:	d0f7      	beq.n	b84fc <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b850c:	6823      	ldr	r3, [r4, #0]
   b850e:	4602      	mov	r2, r0
   b8510:	68db      	ldr	r3, [r3, #12]
   b8512:	f107 0110 	add.w	r1, r7, #16
   b8516:	4620      	mov	r0, r4
   b8518:	4798      	blx	r3
}
   b851a:	e7ef      	b.n	b84fc <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b851c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b851c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b851e:	4c09      	ldr	r4, [pc, #36]	; (b8544 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b8520:	7823      	ldrb	r3, [r4, #0]
   b8522:	f3bf 8f5b 	dmb	ish
   b8526:	07db      	lsls	r3, r3, #31
   b8528:	d409      	bmi.n	b853e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b852a:	4620      	mov	r0, r4
   b852c:	f7fc fada 	bl	b4ae4 <__cxa_guard_acquire>
   b8530:	b128      	cbz	r0, b853e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b8532:	4620      	mov	r0, r4
   b8534:	f7fc fadb 	bl	b4aee <__cxa_guard_release>
   b8538:	4803      	ldr	r0, [pc, #12]	; (b8548 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b853a:	f001 fcab 	bl	b9e94 <atexit>
}
   b853e:	4803      	ldr	r0, [pc, #12]	; (b854c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b8540:	bd10      	pop	{r4, pc}
   b8542:	bf00      	nop
   b8544:	2003e6ac 	.word	0x2003e6ac
   b8548:	000b82bb 	.word	0x000b82bb
   b854c:	2003e530 	.word	0x2003e530

000b8550 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b8550:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b8552:	4c09      	ldr	r4, [pc, #36]	; (b8578 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b8554:	7823      	ldrb	r3, [r4, #0]
   b8556:	f3bf 8f5b 	dmb	ish
   b855a:	07db      	lsls	r3, r3, #31
   b855c:	d409      	bmi.n	b8572 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b855e:	4620      	mov	r0, r4
   b8560:	f7fc fac0 	bl	b4ae4 <__cxa_guard_acquire>
   b8564:	b128      	cbz	r0, b8572 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b8566:	4620      	mov	r0, r4
   b8568:	f7fc fac1 	bl	b4aee <__cxa_guard_release>
   b856c:	4803      	ldr	r0, [pc, #12]	; (b857c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b856e:	f001 fc91 	bl	b9e94 <atexit>
    return &factory;
}
   b8572:	4803      	ldr	r0, [pc, #12]	; (b8580 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b8574:	bd10      	pop	{r4, pc}
   b8576:	bf00      	nop
   b8578:	2003e6b0 	.word	0x2003e6b0
   b857c:	000b8323 	.word	0x000b8323
   b8580:	2003e534 	.word	0x2003e534

000b8584 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b8584:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b8586:	2500      	movs	r5, #0
   b8588:	4604      	mov	r4, r0
   b858a:	e9c0 5500 	strd	r5, r5, [r0]
   b858e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b8592:	6085      	str	r5, [r0, #8]
   b8594:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b8596:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b859a:	f7fc fd9d 	bl	b50d8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b859e:	f7ff ffbd 	bl	b851c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b85a2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b85a4:	f7ff ffd4 	bl	b8550 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b85a8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b85aa:	6220      	str	r0, [r4, #32]
}
   b85ac:	4620      	mov	r0, r4
   b85ae:	bd38      	pop	{r3, r4, r5, pc}

000b85b0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b85b0:	b510      	push	{r4, lr}
    static LogManager mgr;
   b85b2:	4c0a      	ldr	r4, [pc, #40]	; (b85dc <_ZN5spark10LogManager8instanceEv+0x2c>)
   b85b4:	7823      	ldrb	r3, [r4, #0]
   b85b6:	f3bf 8f5b 	dmb	ish
   b85ba:	07db      	lsls	r3, r3, #31
   b85bc:	d40c      	bmi.n	b85d8 <_ZN5spark10LogManager8instanceEv+0x28>
   b85be:	4620      	mov	r0, r4
   b85c0:	f7fc fa90 	bl	b4ae4 <__cxa_guard_acquire>
   b85c4:	b140      	cbz	r0, b85d8 <_ZN5spark10LogManager8instanceEv+0x28>
   b85c6:	4806      	ldr	r0, [pc, #24]	; (b85e0 <_ZN5spark10LogManager8instanceEv+0x30>)
   b85c8:	f7ff ffdc 	bl	b8584 <_ZN5spark10LogManagerC1Ev>
   b85cc:	4620      	mov	r0, r4
   b85ce:	f7fc fa8e 	bl	b4aee <__cxa_guard_release>
   b85d2:	4804      	ldr	r0, [pc, #16]	; (b85e4 <_ZN5spark10LogManager8instanceEv+0x34>)
   b85d4:	f001 fc5e 	bl	b9e94 <atexit>
    return &mgr;
}
   b85d8:	4801      	ldr	r0, [pc, #4]	; (b85e0 <_ZN5spark10LogManager8instanceEv+0x30>)
   b85da:	bd10      	pop	{r4, pc}
   b85dc:	2003e6a8 	.word	0x2003e6a8
   b85e0:	2003e6b8 	.word	0x2003e6b8
   b85e4:	000b8b05 	.word	0x000b8b05

000b85e8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b85e8:	4a02      	ldr	r2, [pc, #8]	; (b85f4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b85ea:	4903      	ldr	r1, [pc, #12]	; (b85f8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b85ec:	4803      	ldr	r0, [pc, #12]	; (b85fc <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b85ee:	2300      	movs	r3, #0
   b85f0:	f7fc bea2 	b.w	b5338 <log_set_callbacks>
   b85f4:	000b88e9 	.word	0x000b88e9
   b85f8:	000b8875 	.word	0x000b8875
   b85fc:	000b87f5 	.word	0x000b87f5

000b8600 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b8600:	2300      	movs	r3, #0
   b8602:	461a      	mov	r2, r3
   b8604:	4619      	mov	r1, r3
   b8606:	4618      	mov	r0, r3
   b8608:	f7fc be96 	b.w	b5338 <log_set_callbacks>

000b860c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b860c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b860e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8610:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8612:	4668      	mov	r0, sp
   b8614:	f7ff fe9e 	bl	b8354 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b8618:	466a      	mov	r2, sp
   b861a:	4629      	mov	r1, r5
   b861c:	4620      	mov	r0, r4
   b861e:	f7ff fd51 	bl	b80c4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b8622:	a801      	add	r0, sp, #4
   b8624:	f7fc fbcc 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8628:	4620      	mov	r0, r4
   b862a:	b003      	add	sp, #12
   b862c:	bd30      	pop	{r4, r5, pc}

000b862e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b862e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b8630:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8632:	4604      	mov	r4, r0
   b8634:	4668      	mov	r0, sp
   b8636:	f7ff fe8d 	bl	b8354 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b863a:	466a      	mov	r2, sp
   b863c:	4629      	mov	r1, r5
   b863e:	4620      	mov	r0, r4
   b8640:	f7ff fd1c 	bl	b807c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8644:	a801      	add	r0, sp, #4
   b8646:	f7fc fbbb 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b864a:	4620      	mov	r0, r4
   b864c:	b003      	add	sp, #12
   b864e:	bd30      	pop	{r4, r5, pc}

000b8650 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8650:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b8652:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8654:	4604      	mov	r4, r0
   b8656:	4668      	mov	r0, sp
   b8658:	f7ff fe7c 	bl	b8354 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b865c:	466a      	mov	r2, sp
   b865e:	4629      	mov	r1, r5
   b8660:	4620      	mov	r0, r4
   b8662:	f7ff fcb4 	bl	b7fce <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8666:	a801      	add	r0, sp, #4
   b8668:	f7fc fbaa 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b866c:	4620      	mov	r0, r4
   b866e:	b003      	add	sp, #12
   b8670:	bd30      	pop	{r4, r5, pc}
	...

000b8674 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b8674:	b570      	push	{r4, r5, r6, lr}
   b8676:	b08a      	sub	sp, #40	; 0x28
   b8678:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b867a:	4601      	mov	r1, r0
   b867c:	a804      	add	r0, sp, #16
   b867e:	f7ff ffc5 	bl	b860c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b8682:	4e14      	ldr	r6, [pc, #80]	; (b86d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b8684:	a804      	add	r0, sp, #16
   b8686:	f7ff fd35 	bl	b80f4 <_ZN5spark18JSONObjectIterator4nextEv>
   b868a:	b1e8      	cbz	r0, b86c8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b868c:	a904      	add	r1, sp, #16
   b868e:	4668      	mov	r0, sp
   b8690:	f7ff ffcd 	bl	b862e <_ZNK5spark18JSONObjectIterator4nameEv>
   b8694:	9802      	ldr	r0, [sp, #8]
   b8696:	4631      	mov	r1, r6
   b8698:	f7ff fe3c 	bl	b8314 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b869c:	4604      	mov	r4, r0
   b869e:	b110      	cbz	r0, b86a6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b86a0:	1e2c      	subs	r4, r5, #0
   b86a2:	bf18      	it	ne
   b86a4:	2401      	movne	r4, #1
   b86a6:	a801      	add	r0, sp, #4
   b86a8:	f7fc fb8a 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b86ac:	2c00      	cmp	r4, #0
   b86ae:	d0e9      	beq.n	b8684 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b86b0:	a904      	add	r1, sp, #16
   b86b2:	4668      	mov	r0, sp
   b86b4:	f7ff ffcc 	bl	b8650 <_ZNK5spark18JSONObjectIterator5valueEv>
   b86b8:	4668      	mov	r0, sp
   b86ba:	f7ff fcbe 	bl	b803a <_ZNK5spark9JSONValue5toIntEv>
   b86be:	6028      	str	r0, [r5, #0]
   b86c0:	a801      	add	r0, sp, #4
   b86c2:	f7fc fb7d 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b86c6:	e7dd      	b.n	b8684 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b86c8:	a805      	add	r0, sp, #20
   b86ca:	f7fc fb79 	bl	b4dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b86ce:	b00a      	add	sp, #40	; 0x28
   b86d0:	bd70      	pop	{r4, r5, r6, pc}
   b86d2:	bf00      	nop
   b86d4:	000ba63c 	.word	0x000ba63c

000b86d8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b86d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b86da:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b86dc:	4620      	mov	r0, r4
   b86de:	4913      	ldr	r1, [pc, #76]	; (b872c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b86e0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b86e2:	f7fc f99f 	bl	b4a24 <strcmp>
   b86e6:	b950      	cbnz	r0, b86fe <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b86e8:	f001 f978 	bl	b99dc <_Z16_fetch_usbserialv>
   b86ec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b86f0:	f001 f964 	bl	b99bc <_ZN9USBSerial5beginEl>
}
   b86f4:	b003      	add	sp, #12
   b86f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b86fa:	f001 b96f 	b.w	b99dc <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b86fe:	490c      	ldr	r1, [pc, #48]	; (b8730 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b8700:	4620      	mov	r0, r4
   b8702:	f7fc f98f 	bl	b4a24 <strcmp>
   b8706:	b978      	cbnz	r0, b8728 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b8708:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b870c:	a901      	add	r1, sp, #4
   b870e:	4628      	mov	r0, r5
        int baud = 9600;
   b8710:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b8712:	f7ff ffaf 	bl	b8674 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b8716:	f001 fa7f 	bl	b9c18 <_Z22__fetch_global_Serial1v>
   b871a:	9901      	ldr	r1, [sp, #4]
   b871c:	f001 f8f6 	bl	b990c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b8720:	f001 fa7a 	bl	b9c18 <_Z22__fetch_global_Serial1v>
}
   b8724:	b003      	add	sp, #12
   b8726:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b8728:	2000      	movs	r0, #0
   b872a:	e7fb      	b.n	b8724 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b872c:	000ba641 	.word	0x000ba641
   b8730:	000ba648 	.word	0x000ba648

000b8734 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8734:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8736:	e9d0 5300 	ldrd	r5, r3, [r0]
   b873a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b873c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b873e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8742:	42ae      	cmp	r6, r5
   b8744:	d005      	beq.n	b8752 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b8746:	f105 0008 	add.w	r0, r5, #8
   b874a:	f7ff fff3 	bl	b8734 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b874e:	3514      	adds	r5, #20
   b8750:	e7f7      	b.n	b8742 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b8752:	6820      	ldr	r0, [r4, #0]
   b8754:	f7fc fea4 	bl	b54a0 <free>
}
   b8758:	4620      	mov	r0, r4
   b875a:	bd70      	pop	{r4, r5, r6, pc}

000b875c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b875c:	b510      	push	{r4, lr}
   b875e:	4604      	mov	r4, r0
   b8760:	300c      	adds	r0, #12
   b8762:	f7ff ffe7 	bl	b8734 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b8766:	4620      	mov	r0, r4
   b8768:	f7fd fc31 	bl	b5fce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b876c:	4620      	mov	r0, r4
   b876e:	bd10      	pop	{r4, pc}

000b8770 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b8770:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b8772:	4b04      	ldr	r3, [pc, #16]	; (b8784 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b8774:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b8776:	f840 3b04 	str.w	r3, [r0], #4
   b877a:	f7ff ffef 	bl	b875c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b877e:	4620      	mov	r0, r4
   b8780:	bd10      	pop	{r4, pc}
   b8782:	bf00      	nop
   b8784:	000ba2c4 	.word	0x000ba2c4

000b8788 <_ZN5spark16StreamLogHandlerD0Ev>:
   b8788:	b510      	push	{r4, lr}
   b878a:	4604      	mov	r4, r0
   b878c:	f7ff fff0 	bl	b8770 <_ZN5spark16StreamLogHandlerD1Ev>
   b8790:	4620      	mov	r0, r4
   b8792:	2124      	movs	r1, #36	; 0x24
   b8794:	f7fc f997 	bl	b4ac6 <_ZdlPvj>
   b8798:	4620      	mov	r0, r4
   b879a:	bd10      	pop	{r4, pc}

000b879c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b879c:	b510      	push	{r4, lr}
   b879e:	4b03      	ldr	r3, [pc, #12]	; (b87ac <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b87a0:	6003      	str	r3, [r0, #0]
   b87a2:	4604      	mov	r4, r0
   b87a4:	f7ff ffe4 	bl	b8770 <_ZN5spark16StreamLogHandlerD1Ev>
   b87a8:	4620      	mov	r0, r4
   b87aa:	bd10      	pop	{r4, pc}
   b87ac:	000ba6e8 	.word	0x000ba6e8

000b87b0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b87b0:	b510      	push	{r4, lr}
   b87b2:	4604      	mov	r4, r0
   b87b4:	f7ff fff2 	bl	b879c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b87b8:	4620      	mov	r0, r4
   b87ba:	2124      	movs	r1, #36	; 0x24
   b87bc:	f7fc f983 	bl	b4ac6 <_ZdlPvj>
   b87c0:	4620      	mov	r0, r4
   b87c2:	bd10      	pop	{r4, pc}

000b87c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b87c4:	2200      	movs	r2, #0
   b87c6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b87ca:	b510      	push	{r4, lr}
        capacity_(0) {
   b87cc:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b87ce:	680c      	ldr	r4, [r1, #0]
   b87d0:	6004      	str	r4, [r0, #0]
   b87d2:	684c      	ldr	r4, [r1, #4]
   b87d4:	6044      	str	r4, [r0, #4]
   b87d6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b87d8:	600a      	str	r2, [r1, #0]
   b87da:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b87dc:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b87de:	608a      	str	r2, [r1, #8]
}
   b87e0:	bd10      	pop	{r4, pc}

000b87e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b87e2:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b87e4:	6803      	ldr	r3, [r0, #0]
   b87e6:	4604      	mov	r4, r0
   b87e8:	6818      	ldr	r0, [r3, #0]
   b87ea:	f7fc fc8d 	bl	b5108 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b87ee:	4620      	mov	r0, r4
   b87f0:	bd10      	pop	{r4, pc}
	...

000b87f4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b87f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b87f8:	b087      	sub	sp, #28
   b87fa:	4680      	mov	r8, r0
   b87fc:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b87fe:	4b1c      	ldr	r3, [pc, #112]	; (b8870 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b8800:	685b      	ldr	r3, [r3, #4]
   b8802:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8806:	4689      	mov	r9, r1
   b8808:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b880a:	b96b      	cbnz	r3, b8828 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b880c:	f7ff fed0 	bl	b85b0 <_ZN5spark10LogManager8instanceEv>
   b8810:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8812:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b8816:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8818:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b881a:	f7ff fd79 	bl	b8310 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b881e:	7b23      	ldrb	r3, [r4, #12]
   b8820:	b12b      	cbz	r3, b882e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b8822:	a805      	add	r0, sp, #20
   b8824:	f7ff ffdd 	bl	b87e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b8828:	b007      	add	sp, #28
   b882a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b882e:	2301      	movs	r3, #1
   b8830:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b8832:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b8836:	fa5f f989 	uxtb.w	r9, r9
   b883a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b883e:	45aa      	cmp	sl, r5
   b8840:	d012      	beq.n	b8868 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b8842:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b8846:	4631      	mov	r1, r6
   b8848:	1d38      	adds	r0, r7, #4
   b884a:	f7ff fe05 	bl	b8458 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b884e:	4581      	cmp	r9, r0
   b8850:	d3f5      	bcc.n	b883e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b8852:	683b      	ldr	r3, [r7, #0]
   b8854:	9a03      	ldr	r2, [sp, #12]
   b8856:	9200      	str	r2, [sp, #0]
   b8858:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b885c:	464a      	mov	r2, r9
   b885e:	4633      	mov	r3, r6
   b8860:	4641      	mov	r1, r8
   b8862:	4638      	mov	r0, r7
   b8864:	47d8      	blx	fp
   b8866:	e7ea      	b.n	b883e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b8868:	2300      	movs	r3, #0
   b886a:	7323      	strb	r3, [r4, #12]
   b886c:	e7d9      	b.n	b8822 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b886e:	bf00      	nop
   b8870:	e000ed00 	.word	0xe000ed00

000b8874 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b8874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8878:	469b      	mov	fp, r3
   b887a:	4b1a      	ldr	r3, [pc, #104]	; (b88e4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b887c:	685b      	ldr	r3, [r3, #4]
   b887e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8882:	4680      	mov	r8, r0
   b8884:	4689      	mov	r9, r1
   b8886:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b8888:	b96b      	cbnz	r3, b88a6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b888a:	f7ff fe91 	bl	b85b0 <_ZN5spark10LogManager8instanceEv>
   b888e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8890:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b8894:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8896:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8898:	f7ff fd3a 	bl	b8310 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b889c:	7b23      	ldrb	r3, [r4, #12]
   b889e:	b12b      	cbz	r3, b88ac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b88a0:	a801      	add	r0, sp, #4
   b88a2:	f7ff ff9e 	bl	b87e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b88a6:	b003      	add	sp, #12
   b88a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b88ac:	2301      	movs	r3, #1
   b88ae:	7323      	strb	r3, [r4, #12]
   b88b0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b88b4:	b2f6      	uxtb	r6, r6
   b88b6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b88ba:	4555      	cmp	r5, sl
   b88bc:	d00e      	beq.n	b88dc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b88be:	f855 7b04 	ldr.w	r7, [r5], #4
   b88c2:	4659      	mov	r1, fp
   b88c4:	1d38      	adds	r0, r7, #4
   b88c6:	f7ff fdc7 	bl	b8458 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b88ca:	4286      	cmp	r6, r0
   b88cc:	d3f5      	bcc.n	b88ba <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b88ce:	683b      	ldr	r3, [r7, #0]
   b88d0:	464a      	mov	r2, r9
   b88d2:	68db      	ldr	r3, [r3, #12]
   b88d4:	4641      	mov	r1, r8
   b88d6:	4638      	mov	r0, r7
   b88d8:	4798      	blx	r3
   b88da:	e7ee      	b.n	b88ba <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b88dc:	2300      	movs	r3, #0
   b88de:	7323      	strb	r3, [r4, #12]
   b88e0:	e7de      	b.n	b88a0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b88e2:	bf00      	nop
   b88e4:	e000ed00 	.word	0xe000ed00

000b88e8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b88e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b88ec:	4b16      	ldr	r3, [pc, #88]	; (b8948 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b88ee:	685b      	ldr	r3, [r3, #4]
   b88f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b88f4:	4605      	mov	r5, r0
   b88f6:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b88f8:	bb1b      	cbnz	r3, b8942 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b88fa:	f7ff fe59 	bl	b85b0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b88fe:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b8902:	4604      	mov	r4, r0
   b8904:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8906:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8908:	f7ff fd02 	bl	b8310 <_ZN14RecursiveMutex4lockEv.isra.0>
   b890c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b8910:	2446      	movs	r4, #70	; 0x46
   b8912:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8916:	45b0      	cmp	r8, r6
   b8918:	d109      	bne.n	b892e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b891a:	a801      	add	r0, sp, #4
   b891c:	f7ff ff61 	bl	b87e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b8920:	42a5      	cmp	r5, r4
   b8922:	bfb4      	ite	lt
   b8924:	2000      	movlt	r0, #0
   b8926:	2001      	movge	r0, #1
}
   b8928:	b002      	add	sp, #8
   b892a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b892e:	f856 0b04 	ldr.w	r0, [r6], #4
   b8932:	4639      	mov	r1, r7
   b8934:	3004      	adds	r0, #4
   b8936:	f7ff fd8f 	bl	b8458 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b893a:	4284      	cmp	r4, r0
   b893c:	bfa8      	it	ge
   b893e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b8940:	e7e9      	b.n	b8916 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b8942:	2000      	movs	r0, #0
   b8944:	e7f0      	b.n	b8928 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b8946:	bf00      	nop
   b8948:	e000ed00 	.word	0xe000ed00

000b894c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b894e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b8952:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8954:	4604      	mov	r4, r0
   b8956:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8958:	db0d      	blt.n	b8976 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b895a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b895c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b895e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8960:	dd04      	ble.n	b896c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b8962:	00b9      	lsls	r1, r7, #2
   b8964:	f7fc fda4 	bl	b54b0 <realloc>
            if (!d) {
   b8968:	b918      	cbnz	r0, b8972 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b896a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b896c:	f7fc fd98 	bl	b54a0 <free>
        T* d = nullptr;
   b8970:	2000      	movs	r0, #0
        data_ = d;
   b8972:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8974:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8976:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8978:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b897a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b897e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8980:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b8984:	1d08      	adds	r0, r1, #4
   b8986:	f001 fab1 	bl	b9eec <memmove>
    new(p) T(std::move(value));
   b898a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b898e:	6863      	ldr	r3, [r4, #4]
   b8990:	3301      	adds	r3, #1
   b8992:	6063      	str	r3, [r4, #4]
    return true;
   b8994:	2001      	movs	r0, #1
   b8996:	e7e8      	b.n	b896a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b8998 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b8998:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b899a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b899e:	4604      	mov	r4, r0
   b89a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b89a2:	9301      	str	r3, [sp, #4]
   b89a4:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b89a6:	f7ff fcb3 	bl	b8310 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b89aa:	e9d4 3200 	ldrd	r3, r2, [r4]
   b89ae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b89b2:	4293      	cmp	r3, r2
   b89b4:	4619      	mov	r1, r3
   b89b6:	d00b      	beq.n	b89d0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b89b8:	6809      	ldr	r1, [r1, #0]
   b89ba:	42a9      	cmp	r1, r5
   b89bc:	f103 0304 	add.w	r3, r3, #4
   b89c0:	d1f7      	bne.n	b89b2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b89c2:	a801      	add	r0, sp, #4
   b89c4:	f7ff ff0d 	bl	b87e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b89c8:	2500      	movs	r5, #0
}
   b89ca:	4628      	mov	r0, r5
   b89cc:	b003      	add	sp, #12
   b89ce:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b89d0:	4629      	mov	r1, r5
   b89d2:	4620      	mov	r0, r4
   b89d4:	f7ff ffba 	bl	b894c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b89d8:	4605      	mov	r5, r0
   b89da:	2800      	cmp	r0, #0
   b89dc:	d0f1      	beq.n	b89c2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b89de:	6863      	ldr	r3, [r4, #4]
   b89e0:	2b01      	cmp	r3, #1
   b89e2:	d101      	bne.n	b89e8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b89e4:	f7ff fe00 	bl	b85e8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b89e8:	a801      	add	r0, sp, #4
   b89ea:	f7ff fefa 	bl	b87e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b89ee:	e7ec      	b.n	b89ca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b89f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b89f0:	b570      	push	{r4, r5, r6, lr}
   b89f2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b89f4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b89f8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b89fa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b89fe:	4282      	cmp	r2, r0
   b8a00:	d00f      	beq.n	b8a22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b8a02:	4601      	mov	r1, r0
            if (*p == value) {
   b8a04:	681d      	ldr	r5, [r3, #0]
   b8a06:	f851 6b04 	ldr.w	r6, [r1], #4
   b8a0a:	42ae      	cmp	r6, r5
   b8a0c:	d107      	bne.n	b8a1e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8a0e:	1a52      	subs	r2, r2, r1
   b8a10:	f001 fa6c 	bl	b9eec <memmove>
    --size_;
   b8a14:	6863      	ldr	r3, [r4, #4]
   b8a16:	3b01      	subs	r3, #1
   b8a18:	6063      	str	r3, [r4, #4]
    return true;
   b8a1a:	2001      	movs	r0, #1
}
   b8a1c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b8a1e:	4608      	mov	r0, r1
   b8a20:	e7ed      	b.n	b89fe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b8a22:	2000      	movs	r0, #0
   b8a24:	e7fa      	b.n	b8a1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b8a26 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b8a26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b8a28:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b8a2c:	4604      	mov	r4, r0
   b8a2e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8a30:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8a32:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b8a34:	f7ff fc6c 	bl	b8310 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b8a38:	a901      	add	r1, sp, #4
   b8a3a:	4620      	mov	r0, r4
   b8a3c:	f7ff ffd8 	bl	b89f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b8a40:	b118      	cbz	r0, b8a4a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b8a42:	6863      	ldr	r3, [r4, #4]
   b8a44:	b90b      	cbnz	r3, b8a4a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b8a46:	f7ff fddb 	bl	b8600 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b8a4a:	a803      	add	r0, sp, #12
   b8a4c:	f7ff fec9 	bl	b87e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b8a50:	b004      	add	sp, #16
   b8a52:	bd10      	pop	{r4, pc}

000b8a54 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b8a54:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b8a56:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b8a5a:	2318      	movs	r3, #24
   b8a5c:	4604      	mov	r4, r0
   b8a5e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b8a62:	42ae      	cmp	r6, r5
   b8a64:	d015      	beq.n	b8a92 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b8a66:	f105 0110 	add.w	r1, r5, #16
   b8a6a:	4620      	mov	r0, r4
   b8a6c:	f7ff ffc0 	bl	b89f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b8a70:	6863      	ldr	r3, [r4, #4]
   b8a72:	b90b      	cbnz	r3, b8a78 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b8a74:	f7ff fdc4 	bl	b8600 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b8a78:	69e0      	ldr	r0, [r4, #28]
   b8a7a:	6929      	ldr	r1, [r5, #16]
   b8a7c:	6803      	ldr	r3, [r0, #0]
   b8a7e:	68db      	ldr	r3, [r3, #12]
   b8a80:	4798      	blx	r3
        if (h.stream) {
   b8a82:	6969      	ldr	r1, [r5, #20]
   b8a84:	b119      	cbz	r1, b8a8e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b8a86:	6a20      	ldr	r0, [r4, #32]
   b8a88:	6803      	ldr	r3, [r0, #0]
   b8a8a:	68db      	ldr	r3, [r3, #12]
   b8a8c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b8a8e:	3518      	adds	r5, #24
   b8a90:	e7e7      	b.n	b8a62 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b8a92:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b8a96:	2618      	movs	r6, #24
   b8a98:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8a9c:	42ae      	cmp	r6, r5
   b8a9e:	d004      	beq.n	b8aaa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b8aa0:	4628      	mov	r0, r5
   b8aa2:	f000 fdc7 	bl	b9634 <_ZN6StringD1Ev>
   b8aa6:	3518      	adds	r5, #24
   b8aa8:	e7f8      	b.n	b8a9c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b8aaa:	2300      	movs	r3, #0
   b8aac:	6163      	str	r3, [r4, #20]
}
   b8aae:	bd70      	pop	{r4, r5, r6, pc}

000b8ab0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b8ab0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8ab2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b8ab4:	f7ff fda4 	bl	b8600 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b8ab8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b8abc:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8abe:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8ac0:	f7ff fc26 	bl	b8310 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b8ac4:	4620      	mov	r0, r4
   b8ac6:	f7ff ffc5 	bl	b8a54 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b8aca:	a801      	add	r0, sp, #4
   b8acc:	f7ff fe89 	bl	b87e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b8ad0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8ad2:	b108      	cbz	r0, b8ad8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b8ad4:	f7fc fb08 	bl	b50e8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b8ad8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b8adc:	2618      	movs	r6, #24
   b8ade:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8ae2:	42ae      	cmp	r6, r5
   b8ae4:	d004      	beq.n	b8af0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b8ae6:	4628      	mov	r0, r5
   b8ae8:	f000 fda4 	bl	b9634 <_ZN6StringD1Ev>
   b8aec:	3518      	adds	r5, #24
   b8aee:	e7f8      	b.n	b8ae2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b8af0:	6920      	ldr	r0, [r4, #16]
   b8af2:	f7fc fcd5 	bl	b54a0 <free>
   b8af6:	6820      	ldr	r0, [r4, #0]
   b8af8:	f7fc fcd2 	bl	b54a0 <free>
}
   b8afc:	4620      	mov	r0, r4
   b8afe:	b002      	add	sp, #8
   b8b00:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8b04 <__tcf_2>:
    static LogManager mgr;
   b8b04:	4801      	ldr	r0, [pc, #4]	; (b8b0c <__tcf_2+0x8>)
   b8b06:	f7ff bfd3 	b.w	b8ab0 <_ZN5spark10LogManagerD1Ev>
   b8b0a:	bf00      	nop
   b8b0c:	2003e6b8 	.word	0x2003e6b8

000b8b10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b8b10:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b14:	4604      	mov	r4, r0
   b8b16:	460d      	mov	r5, r1
   b8b18:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8b1a:	d915      	bls.n	b8b48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b8b1c:	4290      	cmp	r0, r2
   b8b1e:	d214      	bcs.n	b8b4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b8b20:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b8b24:	1a75      	subs	r5, r6, r1
   b8b26:	f1a1 0714 	sub.w	r7, r1, #20
   b8b2a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8b2c:	42b7      	cmp	r7, r6
   b8b2e:	d01a      	beq.n	b8b66 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b8b30:	b11c      	cbz	r4, b8b3a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b8b32:	4631      	mov	r1, r6
   b8b34:	4620      	mov	r0, r4
   b8b36:	f7ff fc3f 	bl	b83b8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b8b3a:	f106 0008 	add.w	r0, r6, #8
   b8b3e:	f7ff fdf9 	bl	b8734 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b8b42:	3e14      	subs	r6, #20
   b8b44:	3c14      	subs	r4, #20
   b8b46:	e7f1      	b.n	b8b2c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b8b48:	d00d      	beq.n	b8b66 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b8b4a:	42b5      	cmp	r5, r6
   b8b4c:	d00b      	beq.n	b8b66 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b8b4e:	b11c      	cbz	r4, b8b58 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b8b50:	4629      	mov	r1, r5
   b8b52:	4620      	mov	r0, r4
   b8b54:	f7ff fc30 	bl	b83b8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b8b58:	f105 0008 	add.w	r0, r5, #8
   b8b5c:	f7ff fdea 	bl	b8734 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b8b60:	3514      	adds	r5, #20
   b8b62:	3414      	adds	r4, #20
   b8b64:	e7f1      	b.n	b8b4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b8b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8b68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b8b68:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b6c:	4604      	mov	r4, r0
   b8b6e:	460d      	mov	r5, r1
   b8b70:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8b72:	d914      	bls.n	b8b9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b8b74:	4290      	cmp	r0, r2
   b8b76:	d213      	bcs.n	b8ba0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b8b78:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b8b7c:	1a75      	subs	r5, r6, r1
   b8b7e:	f1a1 0710 	sub.w	r7, r1, #16
   b8b82:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8b84:	42b7      	cmp	r7, r6
   b8b86:	d018      	beq.n	b8bba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b8b88:	b11c      	cbz	r4, b8b92 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b8b8a:	4631      	mov	r1, r6
   b8b8c:	4620      	mov	r0, r4
   b8b8e:	f000 fdce 	bl	b972e <_ZN6StringC1EOS_>
                end->~T();
   b8b92:	4630      	mov	r0, r6
   b8b94:	f000 fd4e 	bl	b9634 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b8b98:	3e10      	subs	r6, #16
   b8b9a:	3c10      	subs	r4, #16
   b8b9c:	e7f2      	b.n	b8b84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b8b9e:	d00c      	beq.n	b8bba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b8ba0:	42b5      	cmp	r5, r6
   b8ba2:	d00a      	beq.n	b8bba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b8ba4:	b11c      	cbz	r4, b8bae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b8ba6:	4629      	mov	r1, r5
   b8ba8:	4620      	mov	r0, r4
   b8baa:	f000 fdc0 	bl	b972e <_ZN6StringC1EOS_>
                p->~T();
   b8bae:	4628      	mov	r0, r5
   b8bb0:	f000 fd40 	bl	b9634 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b8bb4:	3510      	adds	r5, #16
   b8bb6:	3410      	adds	r4, #16
   b8bb8:	e7f2      	b.n	b8ba0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b8bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8bbc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b8bbc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8bbe:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8bc0:	4605      	mov	r5, r0
        if (n > 0) {
   b8bc2:	dd11      	ble.n	b8be8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8bc4:	0130      	lsls	r0, r6, #4
   b8bc6:	f7fc fc63 	bl	b5490 <malloc>
            if (!d) {
   b8bca:	4604      	mov	r4, r0
   b8bcc:	b158      	cbz	r0, b8be6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8bce:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8bd2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b8bd6:	f7ff ffc7 	bl	b8b68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b8bda:	6828      	ldr	r0, [r5, #0]
   b8bdc:	f7fc fc60 	bl	b54a0 <free>
        data_ = d;
   b8be0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8be2:	60ae      	str	r6, [r5, #8]
        return true;
   b8be4:	2001      	movs	r0, #1
    }
   b8be6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8be8:	2400      	movs	r4, #0
   b8bea:	e7f6      	b.n	b8bda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b8bec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b8bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8bf0:	4690      	mov	r8, r2
   b8bf2:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b8bf4:	2300      	movs	r3, #0
   b8bf6:	9103      	str	r1, [sp, #12]
    return size_;
   b8bf8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b8bfc:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b8bfe:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b8c00:	4299      	cmp	r1, r3
        capacity_(0) {
   b8c02:	e9c0 3300 	strd	r3, r3, [r0]
   b8c06:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b8c0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b8c0e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b8c12:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b8c14:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b8c16:	dc23      	bgt.n	b8c60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b8c18:	e9d8 5700 	ldrd	r5, r7, [r8]
   b8c1c:	2314      	movs	r3, #20
   b8c1e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b8c22:	42af      	cmp	r7, r5
   b8c24:	d03b      	beq.n	b8c9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b8c26:	4629      	mov	r1, r5
   b8c28:	a80b      	add	r0, sp, #44	; 0x2c
   b8c2a:	f000 fd80 	bl	b972e <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b8c2e:	a90b      	add	r1, sp, #44	; 0x2c
   b8c30:	a80f      	add	r0, sp, #60	; 0x3c
   b8c32:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b8c34:	f000 fd7b 	bl	b972e <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c38:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b8c3c:	4299      	cmp	r1, r3
   b8c3e:	da1b      	bge.n	b8c78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b8c40:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b8c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b8c44:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b8c48:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b8c4c:	4631      	mov	r1, r6
   b8c4e:	f106 0010 	add.w	r0, r6, #16
   b8c52:	f7ff ff89 	bl	b8b68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b8c56:	b9ee      	cbnz	r6, b8c94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b8c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8c5a:	3301      	adds	r3, #1
   b8c5c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b8c5e:	e011      	b.n	b8c84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b8c60:	a808      	add	r0, sp, #32
   b8c62:	f7ff ffab 	bl	b8bbc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b8c66:	2800      	cmp	r0, #0
   b8c68:	d1d6      	bne.n	b8c18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b8c6a:	a808      	add	r0, sp, #32
   b8c6c:	f7fd f9af 	bl	b5fce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b8c70:	4620      	mov	r0, r4
   b8c72:	b015      	add	sp, #84	; 0x54
   b8c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c78:	3101      	adds	r1, #1
   b8c7a:	a808      	add	r0, sp, #32
   b8c7c:	f7ff ff9e 	bl	b8bbc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b8c80:	2800      	cmp	r0, #0
   b8c82:	d1dd      	bne.n	b8c40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b8c84:	a80f      	add	r0, sp, #60	; 0x3c
   b8c86:	f000 fcd5 	bl	b9634 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b8c8a:	a80b      	add	r0, sp, #44	; 0x2c
   b8c8c:	f000 fcd2 	bl	b9634 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b8c90:	3514      	adds	r5, #20
   b8c92:	e7c6      	b.n	b8c22 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b8c94:	a90f      	add	r1, sp, #60	; 0x3c
   b8c96:	4630      	mov	r0, r6
   b8c98:	f000 fd49 	bl	b972e <_ZN6StringC1EOS_>
   b8c9c:	e7dc      	b.n	b8c58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b8c9e:	2600      	movs	r6, #0
   b8ca0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b8ca4:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b8ca6:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b8caa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b8cae:	429e      	cmp	r6, r3
   b8cb0:	da7c      	bge.n	b8dac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b8cb2:	0133      	lsls	r3, r6, #4
   b8cb4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b8cb6:	9306      	str	r3, [sp, #24]
        if (!category) {
   b8cb8:	b90b      	cbnz	r3, b8cbe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b8cba:	3601      	adds	r6, #1
   b8cbc:	e7f5      	b.n	b8caa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b8cbe:	2300      	movs	r3, #0
   b8cc0:	9307      	str	r3, [sp, #28]
   b8cc2:	fb09 f306 	mul.w	r3, r9, r6
   b8cc6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b8cc8:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b8cca:	a907      	add	r1, sp, #28
   b8ccc:	a806      	add	r0, sp, #24
   b8cce:	f7ff faf8 	bl	b82c2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b8cd2:	4682      	mov	sl, r0
   b8cd4:	2800      	cmp	r0, #0
   b8cd6:	d0f0      	beq.n	b8cba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b8cd8:	f04f 0300 	mov.w	r3, #0
   b8cdc:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8ce0:	4601      	mov	r1, r0
   b8ce2:	9a07      	ldr	r2, [sp, #28]
   b8ce4:	f10d 0317 	add.w	r3, sp, #23
   b8ce8:	4628      	mov	r0, r5
   b8cea:	f7ff fb79 	bl	b83e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8cee:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8cf2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8cf4:	2f00      	cmp	r7, #0
   b8cf6:	d14a      	bne.n	b8d8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b8cf8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b8cfc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b8d00:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b8d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8d08:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b8d0c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b8d10:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8d12:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b8d16:	4293      	cmp	r3, r2
   b8d18:	db17      	blt.n	b8d4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b8d1a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b8d1e:	f1ba 0f00 	cmp.w	sl, #0
   b8d22:	dd30      	ble.n	b8d86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b8d24:	fb09 f00a 	mul.w	r0, r9, sl
   b8d28:	f7fc fbb2 	bl	b5490 <malloc>
            if (!d) {
   b8d2c:	4683      	mov	fp, r0
   b8d2e:	b360      	cbz	r0, b8d8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b8d30:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8d34:	fb09 1202 	mla	r2, r9, r2, r1
   b8d38:	f7ff feea 	bl	b8b10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b8d3c:	6828      	ldr	r0, [r5, #0]
   b8d3e:	f7fc fbaf 	bl	b54a0 <free>
        data_ = d;
   b8d42:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b8d46:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b8d4a:	682b      	ldr	r3, [r5, #0]
   b8d4c:	9a01      	ldr	r2, [sp, #4]
   b8d4e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b8d52:	686a      	ldr	r2, [r5, #4]
   b8d54:	4651      	mov	r1, sl
   b8d56:	fb09 3202 	mla	r2, r9, r2, r3
   b8d5a:	f10a 0014 	add.w	r0, sl, #20
   b8d5e:	f7ff fed7 	bl	b8b10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b8d62:	f1ba 0f00 	cmp.w	sl, #0
   b8d66:	d003      	beq.n	b8d70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b8d68:	a90f      	add	r1, sp, #60	; 0x3c
   b8d6a:	4650      	mov	r0, sl
   b8d6c:	f7ff fb24 	bl	b83b8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b8d70:	686b      	ldr	r3, [r5, #4]
   b8d72:	3301      	adds	r3, #1
   b8d74:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b8d76:	a811      	add	r0, sp, #68	; 0x44
   b8d78:	f7ff fcdc 	bl	b8734 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8d7c:	b13f      	cbz	r7, b8d8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b8d7e:	a80b      	add	r0, sp, #44	; 0x2c
   b8d80:	f7ff fcd8 	bl	b8734 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b8d84:	e771      	b.n	b8c6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b8d86:	46bb      	mov	fp, r7
   b8d88:	e7d8      	b.n	b8d3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8d8a:	2701      	movs	r7, #1
   b8d8c:	e7f3      	b.n	b8d76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b8d8e:	9b01      	ldr	r3, [sp, #4]
   b8d90:	682d      	ldr	r5, [r5, #0]
   b8d92:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b8d96:	9b06      	ldr	r3, [sp, #24]
   b8d98:	781b      	ldrb	r3, [r3, #0]
   b8d9a:	b92b      	cbnz	r3, b8da8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b8d9c:	f8d8 3000 	ldr.w	r3, [r8]
   b8da0:	9a02      	ldr	r2, [sp, #8]
   b8da2:	4413      	add	r3, r2
   b8da4:	7c1b      	ldrb	r3, [r3, #16]
   b8da6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b8da8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b8daa:	e78e      	b.n	b8cca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8dac:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b8dae:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8db0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8db2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8db4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8db6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b8db8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b8dba:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8dbc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8dbe:	60a2      	str	r2, [r4, #8]
   b8dc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b8dc2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8dc4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b8dc6:	60e2      	str	r2, [r4, #12]
   b8dc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b8dca:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8dcc:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8dce:	6122      	str	r2, [r4, #16]
   b8dd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b8dd2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b8dd4:	9b03      	ldr	r3, [sp, #12]
   b8dd6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b8dd8:	6162      	str	r2, [r4, #20]
   b8dda:	7623      	strb	r3, [r4, #24]
   b8ddc:	e7cf      	b.n	b8d7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b8de0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b8de0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8de2:	4604      	mov	r4, r0
   b8de4:	b087      	sub	sp, #28
   b8de6:	460d      	mov	r5, r1
        filter_(level, filters) {
   b8de8:	4626      	mov	r6, r4
        stream_(&stream) {
   b8dea:	4619      	mov	r1, r3
   b8dec:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b8dee:	4617      	mov	r7, r2
        stream_(&stream) {
   b8df0:	f7fc f82f 	bl	b4e52 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b8df4:	4b0b      	ldr	r3, [pc, #44]	; (b8e24 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b8df6:	f846 3b04 	str.w	r3, [r6], #4
   b8dfa:	4669      	mov	r1, sp
   b8dfc:	a803      	add	r0, sp, #12
   b8dfe:	f7fc f828 	bl	b4e52 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b8e02:	aa03      	add	r2, sp, #12
   b8e04:	4639      	mov	r1, r7
   b8e06:	4630      	mov	r0, r6
   b8e08:	f7ff fef0 	bl	b8bec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8e0c:	a803      	add	r0, sp, #12
   b8e0e:	f7fb ffdf 	bl	b4dd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b8e12:	4668      	mov	r0, sp
   b8e14:	f7fb ffdc 	bl	b4dd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b8e18:	4b03      	ldr	r3, [pc, #12]	; (b8e28 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b8e1a:	6023      	str	r3, [r4, #0]
}
   b8e1c:	4620      	mov	r0, r4
        stream_(&stream) {
   b8e1e:	6225      	str	r5, [r4, #32]
}
   b8e20:	b007      	add	sp, #28
   b8e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8e24:	000ba2c4 	.word	0x000ba2c4
   b8e28:	000ba6d0 	.word	0x000ba6d0

000b8e2c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b8e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8e2e:	460f      	mov	r7, r1
   b8e30:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8e32:	491d      	ldr	r1, [pc, #116]	; (b8ea8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b8e34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8e36:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b8e38:	4616      	mov	r6, r2
   b8e3a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8e3c:	f7fb fdf2 	bl	b4a24 <strcmp>
   b8e40:	b9c0      	cbnz	r0, b8e74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b8e42:	b1a4      	cbz	r4, b8e6e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b8e44:	4629      	mov	r1, r5
   b8e46:	a801      	add	r0, sp, #4
   b8e48:	f7ff fcbc 	bl	b87c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b8e4c:	4917      	ldr	r1, [pc, #92]	; (b8eac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b8e4e:	2024      	movs	r0, #36	; 0x24
   b8e50:	f000 ff06 	bl	b9c60 <_ZnwjRKSt9nothrow_t>
   b8e54:	4605      	mov	r5, r0
   b8e56:	b130      	cbz	r0, b8e66 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b8e58:	ab01      	add	r3, sp, #4
   b8e5a:	4632      	mov	r2, r6
   b8e5c:	4621      	mov	r1, r4
   b8e5e:	f7ff ffbf 	bl	b8de0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8e62:	4b13      	ldr	r3, [pc, #76]	; (b8eb0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b8e64:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b8e66:	a801      	add	r0, sp, #4
   b8e68:	f7fb ffb2 	bl	b4dd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b8e6c:	462c      	mov	r4, r5
}
   b8e6e:	4620      	mov	r0, r4
   b8e70:	b005      	add	sp, #20
   b8e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b8e74:	490f      	ldr	r1, [pc, #60]	; (b8eb4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b8e76:	4638      	mov	r0, r7
   b8e78:	f7fb fdd4 	bl	b4a24 <strcmp>
   b8e7c:	b990      	cbnz	r0, b8ea4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b8e7e:	2c00      	cmp	r4, #0
   b8e80:	d0f5      	beq.n	b8e6e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b8e82:	4629      	mov	r1, r5
   b8e84:	a801      	add	r0, sp, #4
   b8e86:	f7ff fc9d 	bl	b87c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b8e8a:	4908      	ldr	r1, [pc, #32]	; (b8eac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b8e8c:	2024      	movs	r0, #36	; 0x24
   b8e8e:	f000 fee7 	bl	b9c60 <_ZnwjRKSt9nothrow_t>
   b8e92:	4605      	mov	r5, r0
   b8e94:	2800      	cmp	r0, #0
   b8e96:	d0e6      	beq.n	b8e66 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b8e98:	ab01      	add	r3, sp, #4
   b8e9a:	4632      	mov	r2, r6
   b8e9c:	4621      	mov	r1, r4
   b8e9e:	f7ff ff9f 	bl	b8de0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8ea2:	e7e0      	b.n	b8e66 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b8ea4:	2400      	movs	r4, #0
   b8ea6:	e7e2      	b.n	b8e6e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b8ea8:	000ba650 	.word	0x000ba650
   b8eac:	000ba7ec 	.word	0x000ba7ec
   b8eb0:	000ba6e8 	.word	0x000ba6e8
   b8eb4:	000ba654 	.word	0x000ba654

000b8eb8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b8eb8:	4b01      	ldr	r3, [pc, #4]	; (b8ec0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8eba:	4a02      	ldr	r2, [pc, #8]	; (b8ec4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8ebc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8ebe:	4770      	bx	lr
   b8ec0:	2003e6b4 	.word	0x2003e6b4
   b8ec4:	000ba665 	.word	0x000ba665

000b8ec8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8ecc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b8ece:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8ed2:	4604      	mov	r4, r0
   b8ed4:	460e      	mov	r6, r1
   b8ed6:	4617      	mov	r7, r2
   b8ed8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b8eda:	f000 fd7f 	bl	b99dc <_Z16_fetch_usbserialv>
   b8ede:	4581      	cmp	r9, r0
   b8ee0:	d04c      	beq.n	b8f7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b8ee2:	792b      	ldrb	r3, [r5, #4]
   b8ee4:	0719      	lsls	r1, r3, #28
   b8ee6:	d504      	bpl.n	b8ef2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b8ee8:	696a      	ldr	r2, [r5, #20]
   b8eea:	4954      	ldr	r1, [pc, #336]	; (b903c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b8eec:	4620      	mov	r0, r4
   b8eee:	f7ff fadc 	bl	b84aa <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b8ef2:	f1b8 0f00 	cmp.w	r8, #0
   b8ef6:	d00d      	beq.n	b8f14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b8ef8:	215b      	movs	r1, #91	; 0x5b
   b8efa:	4620      	mov	r0, r4
   b8efc:	f7ff fa50 	bl	b83a0 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b8f00:	4641      	mov	r1, r8
   b8f02:	4620      	mov	r0, r4
   b8f04:	f7ff fa3d 	bl	b8382 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b8f08:	6823      	ldr	r3, [r4, #0]
   b8f0a:	494d      	ldr	r1, [pc, #308]	; (b9040 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b8f0c:	68db      	ldr	r3, [r3, #12]
   b8f0e:	2202      	movs	r2, #2
   b8f10:	4620      	mov	r0, r4
   b8f12:	4798      	blx	r3
    if (attr.has_file) {
   b8f14:	792b      	ldrb	r3, [r5, #4]
   b8f16:	07da      	lsls	r2, r3, #31
   b8f18:	d523      	bpl.n	b8f62 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b8f1a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b8f1e:	212f      	movs	r1, #47	; 0x2f
   b8f20:	4640      	mov	r0, r8
   b8f22:	f001 f872 	bl	ba00a <strrchr>
    if (s1) {
   b8f26:	b108      	cbz	r0, b8f2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b8f28:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b8f2c:	4641      	mov	r1, r8
   b8f2e:	4620      	mov	r0, r4
   b8f30:	f7ff fa27 	bl	b8382 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b8f34:	792b      	ldrb	r3, [r5, #4]
   b8f36:	079b      	lsls	r3, r3, #30
   b8f38:	d508      	bpl.n	b8f4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b8f3a:	213a      	movs	r1, #58	; 0x3a
   b8f3c:	4620      	mov	r0, r4
   b8f3e:	f7ff fa2f 	bl	b83a0 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b8f42:	68ea      	ldr	r2, [r5, #12]
   b8f44:	493f      	ldr	r1, [pc, #252]	; (b9044 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b8f46:	4620      	mov	r0, r4
   b8f48:	f7ff faaf 	bl	b84aa <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b8f4c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b8f4e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b8f50:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b8f54:	68db      	ldr	r3, [r3, #12]
   b8f56:	bf14      	ite	ne
   b8f58:	493b      	ldrne	r1, [pc, #236]	; (b9048 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b8f5a:	493c      	ldreq	r1, [pc, #240]	; (b904c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b8f5c:	2202      	movs	r2, #2
            write(": ", 2);
   b8f5e:	4620      	mov	r0, r4
   b8f60:	4798      	blx	r3
    if (attr.has_function) {
   b8f62:	792b      	ldrb	r3, [r5, #4]
   b8f64:	0758      	lsls	r0, r3, #29
   b8f66:	d51d      	bpl.n	b8fa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b8f68:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b8f6a:	460b      	mov	r3, r1
   b8f6c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b8f6e:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8f72:	b160      	cbz	r0, b8f8e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b8f74:	2820      	cmp	r0, #32
   b8f76:	d108      	bne.n	b8f8a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b8f78:	4619      	mov	r1, r3
   b8f7a:	e7f7      	b.n	b8f6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b8f7c:	4834      	ldr	r0, [pc, #208]	; (b9050 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b8f7e:	f000 f982 	bl	b9286 <_ZN5spark12NetworkClass9listeningEv>
   b8f82:	2800      	cmp	r0, #0
   b8f84:	d0ad      	beq.n	b8ee2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b8f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b8f8a:	2828      	cmp	r0, #40	; 0x28
   b8f8c:	d1ee      	bne.n	b8f6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b8f8e:	6823      	ldr	r3, [r4, #0]
   b8f90:	1a52      	subs	r2, r2, r1
   b8f92:	68db      	ldr	r3, [r3, #12]
   b8f94:	4620      	mov	r0, r4
   b8f96:	4798      	blx	r3
        write("(): ", 4);
   b8f98:	6823      	ldr	r3, [r4, #0]
   b8f9a:	492e      	ldr	r1, [pc, #184]	; (b9054 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b8f9c:	68db      	ldr	r3, [r3, #12]
   b8f9e:	2204      	movs	r2, #4
   b8fa0:	4620      	mov	r0, r4
   b8fa2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b8fa4:	2100      	movs	r1, #0
   b8fa6:	4638      	mov	r0, r7
   b8fa8:	f7fc f9be 	bl	b5328 <log_level_name>
   b8fac:	4601      	mov	r1, r0
    write(s);
   b8fae:	4620      	mov	r0, r4
   b8fb0:	f7ff f9e7 	bl	b8382 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b8fb4:	6823      	ldr	r3, [r4, #0]
   b8fb6:	4925      	ldr	r1, [pc, #148]	; (b904c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b8fb8:	68db      	ldr	r3, [r3, #12]
   b8fba:	2202      	movs	r2, #2
   b8fbc:	4620      	mov	r0, r4
   b8fbe:	4798      	blx	r3
    if (msg) {
   b8fc0:	b11e      	cbz	r6, b8fca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b8fc2:	4631      	mov	r1, r6
   b8fc4:	4620      	mov	r0, r4
   b8fc6:	f7ff f9dc 	bl	b8382 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b8fca:	792b      	ldrb	r3, [r5, #4]
   b8fcc:	f013 0f30 	tst.w	r3, #48	; 0x30
   b8fd0:	d02c      	beq.n	b902c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b8fd2:	6823      	ldr	r3, [r4, #0]
   b8fd4:	4920      	ldr	r1, [pc, #128]	; (b9058 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b8fd6:	68db      	ldr	r3, [r3, #12]
   b8fd8:	2202      	movs	r2, #2
   b8fda:	4620      	mov	r0, r4
   b8fdc:	4798      	blx	r3
        if (attr.has_code) {
   b8fde:	792b      	ldrb	r3, [r5, #4]
   b8fe0:	06d9      	lsls	r1, r3, #27
   b8fe2:	d50a      	bpl.n	b8ffa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b8fe4:	6823      	ldr	r3, [r4, #0]
   b8fe6:	491d      	ldr	r1, [pc, #116]	; (b905c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b8fe8:	68db      	ldr	r3, [r3, #12]
   b8fea:	2207      	movs	r2, #7
   b8fec:	4620      	mov	r0, r4
   b8fee:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b8ff0:	69aa      	ldr	r2, [r5, #24]
   b8ff2:	491b      	ldr	r1, [pc, #108]	; (b9060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b8ff4:	4620      	mov	r0, r4
   b8ff6:	f7ff fa58 	bl	b84aa <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b8ffa:	792b      	ldrb	r3, [r5, #4]
   b8ffc:	069a      	lsls	r2, r3, #26
   b8ffe:	d511      	bpl.n	b9024 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b9000:	06db      	lsls	r3, r3, #27
   b9002:	d505      	bpl.n	b9010 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b9004:	6823      	ldr	r3, [r4, #0]
   b9006:	4910      	ldr	r1, [pc, #64]	; (b9048 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b9008:	68db      	ldr	r3, [r3, #12]
   b900a:	2202      	movs	r2, #2
   b900c:	4620      	mov	r0, r4
   b900e:	4798      	blx	r3
            write("details = ", 10);
   b9010:	6823      	ldr	r3, [r4, #0]
   b9012:	4914      	ldr	r1, [pc, #80]	; (b9064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b9014:	68db      	ldr	r3, [r3, #12]
   b9016:	4620      	mov	r0, r4
   b9018:	220a      	movs	r2, #10
   b901a:	4798      	blx	r3
            write(attr.details);
   b901c:	69e9      	ldr	r1, [r5, #28]
   b901e:	4620      	mov	r0, r4
   b9020:	f7ff f9af 	bl	b8382 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b9024:	215d      	movs	r1, #93	; 0x5d
   b9026:	4620      	mov	r0, r4
   b9028:	f7ff f9ba 	bl	b83a0 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b902c:	6823      	ldr	r3, [r4, #0]
   b902e:	490e      	ldr	r1, [pc, #56]	; (b9068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b9030:	68db      	ldr	r3, [r3, #12]
   b9032:	4620      	mov	r0, r4
   b9034:	2202      	movs	r2, #2
}
   b9036:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b903a:	4718      	bx	r3
   b903c:	000ba669 	.word	0x000ba669
   b9040:	000ba670 	.word	0x000ba670
   b9044:	000ba630 	.word	0x000ba630
   b9048:	000ba673 	.word	0x000ba673
   b904c:	000ba678 	.word	0x000ba678
   b9050:	2003e6e0 	.word	0x2003e6e0
   b9054:	000ba676 	.word	0x000ba676
   b9058:	000ba67b 	.word	0x000ba67b
   b905c:	000ba67e 	.word	0x000ba67e
   b9060:	000ba686 	.word	0x000ba686
   b9064:	000ba689 	.word	0x000ba689
   b9068:	000ba694 	.word	0x000ba694

000b906c <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b906c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9070:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b9072:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b9074:	460d      	mov	r5, r1
   b9076:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b9078:	f000 fcb0 	bl	b99dc <_Z16_fetch_usbserialv>
   b907c:	4287      	cmp	r7, r0
   b907e:	d007      	beq.n	b9090 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b9080:	6a20      	ldr	r0, [r4, #32]
   b9082:	6803      	ldr	r3, [r0, #0]
   b9084:	4632      	mov	r2, r6
   b9086:	4629      	mov	r1, r5
   b9088:	68db      	ldr	r3, [r3, #12]
}
   b908a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b908e:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b9090:	4803      	ldr	r0, [pc, #12]	; (b90a0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b9092:	f000 f8f8 	bl	b9286 <_ZN5spark12NetworkClass9listeningEv>
   b9096:	2800      	cmp	r0, #0
   b9098:	d0f2      	beq.n	b9080 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b909a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b909e:	bf00      	nop
   b90a0:	2003e6e0 	.word	0x2003e6e0

000b90a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b90a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b90a8:	b085      	sub	sp, #20
    return stream_;
   b90aa:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b90ae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b90b0:	4605      	mov	r5, r0
   b90b2:	460f      	mov	r7, r1
   b90b4:	4690      	mov	r8, r2
   b90b6:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b90b8:	f000 fc90 	bl	b99dc <_Z16_fetch_usbserialv>
   b90bc:	4581      	cmp	r9, r0
   b90be:	d105      	bne.n	b90cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b90c0:	4849      	ldr	r0, [pc, #292]	; (b91e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b90c2:	f000 f8e0 	bl	b9286 <_ZN5spark12NetworkClass9listeningEv>
   b90c6:	2800      	cmp	r0, #0
   b90c8:	f040 808a 	bne.w	b91e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b90cc:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b90ce:	4a47      	ldr	r2, [pc, #284]	; (b91ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b90d0:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b90d2:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b90d6:	a801      	add	r0, sp, #4
        strm_(stream) {
   b90d8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b90da:	f88d 9008 	strb.w	r9, [sp, #8]
   b90de:	f7ff f832 	bl	b8146 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b90e2:	4649      	mov	r1, r9
   b90e4:	4640      	mov	r0, r8
   b90e6:	f7fc f91f 	bl	b5328 <log_level_name>
    json.name("l", 1).value(s);
   b90ea:	4941      	ldr	r1, [pc, #260]	; (b91f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b90ec:	4680      	mov	r8, r0
   b90ee:	2201      	movs	r2, #1
   b90f0:	a801      	add	r0, sp, #4
   b90f2:	f7ff f8b7 	bl	b8264 <_ZN5spark10JSONWriter4nameEPKcj>
   b90f6:	4641      	mov	r1, r8
   b90f8:	f7ff f935 	bl	b8366 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b90fc:	b13f      	cbz	r7, b910e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b90fe:	493d      	ldr	r1, [pc, #244]	; (b91f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b9100:	2201      	movs	r2, #1
   b9102:	a801      	add	r0, sp, #4
   b9104:	f7ff f8ae 	bl	b8264 <_ZN5spark10JSONWriter4nameEPKcj>
   b9108:	4639      	mov	r1, r7
   b910a:	f7ff f92c 	bl	b8366 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b910e:	b13e      	cbz	r6, b9120 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b9110:	4939      	ldr	r1, [pc, #228]	; (b91f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b9112:	2201      	movs	r2, #1
   b9114:	a801      	add	r0, sp, #4
   b9116:	f7ff f8a5 	bl	b8264 <_ZN5spark10JSONWriter4nameEPKcj>
   b911a:	4631      	mov	r1, r6
   b911c:	f7ff f923 	bl	b8366 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b9120:	7923      	ldrb	r3, [r4, #4]
   b9122:	07df      	lsls	r7, r3, #31
   b9124:	d50e      	bpl.n	b9144 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b9126:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b9128:	212f      	movs	r1, #47	; 0x2f
   b912a:	4630      	mov	r0, r6
   b912c:	f000 ff6d 	bl	ba00a <strrchr>
    if (s1) {
   b9130:	b100      	cbz	r0, b9134 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b9132:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b9134:	4931      	ldr	r1, [pc, #196]	; (b91fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b9136:	2201      	movs	r2, #1
   b9138:	a801      	add	r0, sp, #4
   b913a:	f7ff f893 	bl	b8264 <_ZN5spark10JSONWriter4nameEPKcj>
   b913e:	4631      	mov	r1, r6
   b9140:	f7ff f911 	bl	b8366 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b9144:	7923      	ldrb	r3, [r4, #4]
   b9146:	079e      	lsls	r6, r3, #30
   b9148:	d507      	bpl.n	b915a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b914a:	492d      	ldr	r1, [pc, #180]	; (b9200 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b914c:	2202      	movs	r2, #2
   b914e:	a801      	add	r0, sp, #4
   b9150:	f7ff f888 	bl	b8264 <_ZN5spark10JSONWriter4nameEPKcj>
   b9154:	68e1      	ldr	r1, [r4, #12]
   b9156:	f7ff f803 	bl	b8160 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b915a:	7923      	ldrb	r3, [r4, #4]
   b915c:	0758      	lsls	r0, r3, #29
   b915e:	d514      	bpl.n	b918a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b9160:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b9162:	4633      	mov	r3, r6
   b9164:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b9166:	f813 2b01 	ldrb.w	r2, [r3], #1
   b916a:	b12a      	cbz	r2, b9178 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b916c:	2a20      	cmp	r2, #32
   b916e:	d101      	bne.n	b9174 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b9170:	461e      	mov	r6, r3
   b9172:	e7f7      	b.n	b9164 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b9174:	2a28      	cmp	r2, #40	; 0x28
   b9176:	d1f5      	bne.n	b9164 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b9178:	4922      	ldr	r1, [pc, #136]	; (b9204 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b917a:	2202      	movs	r2, #2
   b917c:	a801      	add	r0, sp, #4
   b917e:	f7ff f871 	bl	b8264 <_ZN5spark10JSONWriter4nameEPKcj>
   b9182:	1bba      	subs	r2, r7, r6
   b9184:	4631      	mov	r1, r6
   b9186:	f7ff f87d 	bl	b8284 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b918a:	7923      	ldrb	r3, [r4, #4]
   b918c:	0719      	lsls	r1, r3, #28
   b918e:	d507      	bpl.n	b91a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b9190:	491d      	ldr	r1, [pc, #116]	; (b9208 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b9192:	2201      	movs	r2, #1
   b9194:	a801      	add	r0, sp, #4
   b9196:	f7ff f865 	bl	b8264 <_ZN5spark10JSONWriter4nameEPKcj>
   b919a:	6961      	ldr	r1, [r4, #20]
   b919c:	f7fe fff2 	bl	b8184 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b91a0:	7923      	ldrb	r3, [r4, #4]
   b91a2:	06da      	lsls	r2, r3, #27
   b91a4:	d508      	bpl.n	b91b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b91a6:	2204      	movs	r2, #4
   b91a8:	4918      	ldr	r1, [pc, #96]	; (b920c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b91aa:	eb0d 0002 	add.w	r0, sp, r2
   b91ae:	f7ff f859 	bl	b8264 <_ZN5spark10JSONWriter4nameEPKcj>
   b91b2:	69a1      	ldr	r1, [r4, #24]
   b91b4:	f7fe ffd4 	bl	b8160 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b91b8:	7923      	ldrb	r3, [r4, #4]
   b91ba:	069b      	lsls	r3, r3, #26
   b91bc:	d507      	bpl.n	b91ce <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b91be:	4914      	ldr	r1, [pc, #80]	; (b9210 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b91c0:	2206      	movs	r2, #6
   b91c2:	a801      	add	r0, sp, #4
   b91c4:	f7ff f84e 	bl	b8264 <_ZN5spark10JSONWriter4nameEPKcj>
   b91c8:	69e1      	ldr	r1, [r4, #28]
   b91ca:	f7ff f8cc 	bl	b8366 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b91ce:	a801      	add	r0, sp, #4
   b91d0:	f7fe ffa3 	bl	b811a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b91d4:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b91d6:	490f      	ldr	r1, [pc, #60]	; (b9214 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b91d8:	6803      	ldr	r3, [r0, #0]
   b91da:	2202      	movs	r2, #2
   b91dc:	68db      	ldr	r3, [r3, #12]
   b91de:	4798      	blx	r3
}
   b91e0:	b005      	add	sp, #20
   b91e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b91e6:	bf00      	nop
   b91e8:	2003e6e0 	.word	0x2003e6e0
   b91ec:	000ba6b8 	.word	0x000ba6b8
   b91f0:	000ba646 	.word	0x000ba646
   b91f4:	000ba697 	.word	0x000ba697
   b91f8:	000ba94f 	.word	0x000ba94f
   b91fc:	000ba76a 	.word	0x000ba76a
   b9200:	000ba699 	.word	0x000ba699
   b9204:	000ba69c 	.word	0x000ba69c
   b9208:	000ba69f 	.word	0x000ba69f
   b920c:	000ba6a1 	.word	0x000ba6a1
   b9210:	000ba6a6 	.word	0x000ba6a6
   b9214:	000ba694 	.word	0x000ba694

000b9218 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9218:	2300      	movs	r3, #0
   b921a:	6840      	ldr	r0, [r0, #4]
   b921c:	461a      	mov	r2, r3
   b921e:	f7fc b8d7 	b.w	b53d0 <network_connect>

000b9222 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9222:	6840      	ldr	r0, [r0, #4]
   b9224:	2200      	movs	r2, #0
   b9226:	2102      	movs	r1, #2
   b9228:	f7fc b8e2 	b.w	b53f0 <network_disconnect>

000b922c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b922c:	2200      	movs	r2, #0
   b922e:	6840      	ldr	r0, [r0, #4]
   b9230:	4611      	mov	r1, r2
   b9232:	f7fc b8d5 	b.w	b53e0 <network_connecting>

000b9236 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9236:	2200      	movs	r2, #0
   b9238:	6840      	ldr	r0, [r0, #4]
   b923a:	4611      	mov	r1, r2
   b923c:	f7fc b8e0 	b.w	b5400 <network_ready>

000b9240 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9240:	2300      	movs	r3, #0
   b9242:	6840      	ldr	r0, [r0, #4]
   b9244:	461a      	mov	r2, r3
   b9246:	4619      	mov	r1, r3
   b9248:	f7fc b8e2 	b.w	b5410 <network_on>

000b924c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b924c:	2300      	movs	r3, #0
   b924e:	6840      	ldr	r0, [r0, #4]
   b9250:	461a      	mov	r2, r3
   b9252:	4619      	mov	r1, r3
   b9254:	f7fc b8e4 	b.w	b5420 <network_off>

000b9258 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9258:	6840      	ldr	r0, [r0, #4]
   b925a:	2100      	movs	r1, #0
   b925c:	f7fc b908 	b.w	b5470 <network_is_on>

000b9260 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9260:	6840      	ldr	r0, [r0, #4]
   b9262:	2100      	movs	r1, #0
   b9264:	f7fc b90c 	b.w	b5480 <network_is_off>

000b9268 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9268:	6840      	ldr	r0, [r0, #4]
   b926a:	2200      	movs	r2, #0
   b926c:	f081 0101 	eor.w	r1, r1, #1
   b9270:	f7fc b8de 	b.w	b5430 <network_listen>

000b9274 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9274:	6840      	ldr	r0, [r0, #4]
   b9276:	2200      	movs	r2, #0
   b9278:	f7fc b8ea 	b.w	b5450 <network_set_listen_timeout>

000b927c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b927c:	2200      	movs	r2, #0
   b927e:	6840      	ldr	r0, [r0, #4]
   b9280:	4611      	mov	r1, r2
   b9282:	f7fc b8ed 	b.w	b5460 <network_get_listen_timeout>

000b9286 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9286:	2200      	movs	r2, #0
   b9288:	6840      	ldr	r0, [r0, #4]
   b928a:	4611      	mov	r1, r2
   b928c:	f7fc b8d8 	b.w	b5440 <network_listening>

000b9290 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9294:	b095      	sub	sp, #84	; 0x54
   b9296:	4614      	mov	r4, r2
   b9298:	460d      	mov	r5, r1
   b929a:	4607      	mov	r7, r0
    IPAddress addr;
   b929c:	f7fe fdec 	bl	b7e78 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b92a0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b92a2:	221c      	movs	r2, #28
   b92a4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b92a6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b92a8:	f000 fe3a 	bl	b9f20 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b92ac:	2340      	movs	r3, #64	; 0x40
   b92ae:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b92b0:	4620      	mov	r0, r4
   b92b2:	466b      	mov	r3, sp
   b92b4:	aa0c      	add	r2, sp, #48	; 0x30
   b92b6:	2100      	movs	r1, #0
   b92b8:	f7fb ff8e 	bl	b51d8 <netdb_getaddrinfo>
    if (!r) {
   b92bc:	4604      	mov	r4, r0
   b92be:	2800      	cmp	r0, #0
   b92c0:	d14b      	bne.n	b935a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b92c2:	4602      	mov	r2, r0
   b92c4:	2101      	movs	r1, #1
   b92c6:	6868      	ldr	r0, [r5, #4]
   b92c8:	f7fc f89a 	bl	b5400 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b92cc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b92ce:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b92d0:	4622      	mov	r2, r4
   b92d2:	6868      	ldr	r0, [r5, #4]
   b92d4:	f7fc f894 	bl	b5400 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b92d8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b92da:	4681      	mov	r9, r0
        bool ok = false;
   b92dc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b92de:	2e00      	cmp	r6, #0
   b92e0:	d03b      	beq.n	b935a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b92e2:	2900      	cmp	r1, #0
   b92e4:	d139      	bne.n	b935a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b92e6:	6873      	ldr	r3, [r6, #4]
   b92e8:	2b02      	cmp	r3, #2
   b92ea:	d003      	beq.n	b92f4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b92ec:	2b0a      	cmp	r3, #10
   b92ee:	d011      	beq.n	b9314 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b92f0:	69f6      	ldr	r6, [r6, #28]
   b92f2:	e7f4      	b.n	b92de <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b92f4:	f1b8 0f00 	cmp.w	r8, #0
   b92f8:	d0fa      	beq.n	b92f0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b92fa:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b92fc:	a806      	add	r0, sp, #24
   b92fe:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9300:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9302:	f7fe fde7 	bl	b7ed4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9308:	1d3c      	adds	r4, r7, #4
   b930a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b930c:	682b      	ldr	r3, [r5, #0]
   b930e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9310:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9312:	e7ed      	b.n	b92f0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9314:	f1b9 0f00 	cmp.w	r9, #0
   b9318:	d0ea      	beq.n	b92f0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b931a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b931c:	2210      	movs	r2, #16
   b931e:	a801      	add	r0, sp, #4
   b9320:	f000 fdfe 	bl	b9f20 <memset>
                    a.v = 6;
   b9324:	2306      	movs	r3, #6
   b9326:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b932a:	ad01      	add	r5, sp, #4
   b932c:	f104 0308 	add.w	r3, r4, #8
   b9330:	3418      	adds	r4, #24
   b9332:	6818      	ldr	r0, [r3, #0]
   b9334:	6859      	ldr	r1, [r3, #4]
   b9336:	462a      	mov	r2, r5
   b9338:	c203      	stmia	r2!, {r0, r1}
   b933a:	3308      	adds	r3, #8
   b933c:	42a3      	cmp	r3, r4
   b933e:	4615      	mov	r5, r2
   b9340:	d1f7      	bne.n	b9332 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9342:	a901      	add	r1, sp, #4
   b9344:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9346:	ad07      	add	r5, sp, #28
   b9348:	f7fe fda4 	bl	b7e94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b934c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b934e:	1d3c      	adds	r4, r7, #4
   b9350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9352:	682b      	ldr	r3, [r5, #0]
   b9354:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9356:	4649      	mov	r1, r9
   b9358:	e7ca      	b.n	b92f0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b935a:	9800      	ldr	r0, [sp, #0]
   b935c:	f7fb ff34 	bl	b51c8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9360:	4638      	mov	r0, r7
   b9362:	b015      	add	sp, #84	; 0x54
   b9364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9368 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9368:	4b02      	ldr	r3, [pc, #8]	; (b9374 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b936a:	4a03      	ldr	r2, [pc, #12]	; (b9378 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b936c:	601a      	str	r2, [r3, #0]
   b936e:	2200      	movs	r2, #0
   b9370:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b9372:	4770      	bx	lr
   b9374:	2003e6e0 	.word	0x2003e6e0
   b9378:	000ba730 	.word	0x000ba730

000b937c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b937c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b937e:	4606      	mov	r6, r0
   b9380:	460d      	mov	r5, r1
  size_t n = 0;
   b9382:	188f      	adds	r7, r1, r2
   b9384:	2400      	movs	r4, #0
  while (size--) {
   b9386:	42bd      	cmp	r5, r7
   b9388:	d00c      	beq.n	b93a4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b938a:	6833      	ldr	r3, [r6, #0]
   b938c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9390:	689b      	ldr	r3, [r3, #8]
   b9392:	4630      	mov	r0, r6
   b9394:	4798      	blx	r3
     if (chunk>=0)
   b9396:	1e03      	subs	r3, r0, #0
   b9398:	db01      	blt.n	b939e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b939a:	441c      	add	r4, r3
  while (size--) {
   b939c:	e7f3      	b.n	b9386 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b939e:	2c00      	cmp	r4, #0
   b93a0:	bf08      	it	eq
   b93a2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b93a4:	4620      	mov	r0, r4
   b93a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b93a8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b93a8:	b513      	push	{r0, r1, r4, lr}
   b93aa:	4604      	mov	r4, r0
    }
   b93ac:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b93ae:	b159      	cbz	r1, b93c8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b93b0:	9101      	str	r1, [sp, #4]
   b93b2:	f7fb fb41 	bl	b4a38 <strlen>
   b93b6:	6823      	ldr	r3, [r4, #0]
   b93b8:	9901      	ldr	r1, [sp, #4]
   b93ba:	68db      	ldr	r3, [r3, #12]
   b93bc:	4602      	mov	r2, r0
   b93be:	4620      	mov	r0, r4
    }
   b93c0:	b002      	add	sp, #8
   b93c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b93c6:	4718      	bx	r3
    }
   b93c8:	b002      	add	sp, #8
   b93ca:	bd10      	pop	{r4, pc}

000b93cc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b93cc:	b508      	push	{r3, lr}
  return write(str);
   b93ce:	f7ff ffeb 	bl	b93a8 <_ZN5Print5writeEPKc>
}
   b93d2:	bd08      	pop	{r3, pc}

000b93d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b93d4:	6803      	ldr	r3, [r0, #0]
   b93d6:	689b      	ldr	r3, [r3, #8]
   b93d8:	4718      	bx	r3

000b93da <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b93da:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b93dc:	210d      	movs	r1, #13
{
   b93de:	4605      	mov	r5, r0
  size_t n = print('\r');
   b93e0:	f7ff fff8 	bl	b93d4 <_ZN5Print5printEc>
  n += print('\n');
   b93e4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b93e6:	4604      	mov	r4, r0
  n += print('\n');
   b93e8:	4628      	mov	r0, r5
   b93ea:	f7ff fff3 	bl	b93d4 <_ZN5Print5printEc>
  return n;
}
   b93ee:	4420      	add	r0, r4
   b93f0:	bd38      	pop	{r3, r4, r5, pc}

000b93f2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b93f2:	b538      	push	{r3, r4, r5, lr}
   b93f4:	4605      	mov	r5, r0
  return write(str);
   b93f6:	f7ff ffd7 	bl	b93a8 <_ZN5Print5writeEPKc>
   b93fa:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b93fc:	4628      	mov	r0, r5
   b93fe:	f7ff ffec 	bl	b93da <_ZN5Print7printlnEv>
  return n;
}
   b9402:	4420      	add	r0, r4
   b9404:	bd38      	pop	{r3, r4, r5, pc}

000b9406 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b9406:	b530      	push	{r4, r5, lr}
   b9408:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b940a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b940c:	2a01      	cmp	r2, #1
  *str = '\0';
   b940e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b9412:	bf98      	it	ls
   b9414:	220a      	movls	r2, #10
   b9416:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9418:	460d      	mov	r5, r1
   b941a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b941e:	fb01 5312 	mls	r3, r1, r2, r5
   b9422:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9426:	2b09      	cmp	r3, #9
   b9428:	bf94      	ite	ls
   b942a:	3330      	addls	r3, #48	; 0x30
   b942c:	3337      	addhi	r3, #55	; 0x37
   b942e:	b2db      	uxtb	r3, r3
  } while(n);
   b9430:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9432:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9436:	d9ef      	bls.n	b9418 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9438:	4621      	mov	r1, r4
   b943a:	f7ff ffb5 	bl	b93a8 <_ZN5Print5writeEPKc>
}
   b943e:	b00b      	add	sp, #44	; 0x2c
   b9440:	bd30      	pop	{r4, r5, pc}
	...

000b9444 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b9444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9448:	ec55 4b10 	vmov	r4, r5, d0
   b944c:	4606      	mov	r6, r0
   b944e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b9450:	ee10 2a10 	vmov	r2, s0
   b9454:	ee10 0a10 	vmov	r0, s0
   b9458:	462b      	mov	r3, r5
   b945a:	4629      	mov	r1, r5
   b945c:	f7fb fa34 	bl	b48c8 <__aeabi_dcmpun>
   b9460:	b140      	cbz	r0, b9474 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b9462:	4953      	ldr	r1, [pc, #332]	; (b95b0 <_ZN5Print10printFloatEdh+0x16c>)
   b9464:	4630      	mov	r0, r6
   b9466:	f7ff ff9f 	bl	b93a8 <_ZN5Print5writeEPKc>
   b946a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b946c:	4650      	mov	r0, sl
   b946e:	b003      	add	sp, #12
   b9470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b9474:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b9478:	4b4e      	ldr	r3, [pc, #312]	; (b95b4 <_ZN5Print10printFloatEdh+0x170>)
   b947a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b947e:	4620      	mov	r0, r4
   b9480:	4649      	mov	r1, r9
   b9482:	f7fb fa21 	bl	b48c8 <__aeabi_dcmpun>
   b9486:	b948      	cbnz	r0, b949c <_ZN5Print10printFloatEdh+0x58>
   b9488:	4b4a      	ldr	r3, [pc, #296]	; (b95b4 <_ZN5Print10printFloatEdh+0x170>)
   b948a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b948e:	4620      	mov	r0, r4
   b9490:	4649      	mov	r1, r9
   b9492:	f7fb f9fb 	bl	b488c <__aeabi_dcmple>
   b9496:	b908      	cbnz	r0, b949c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b9498:	4947      	ldr	r1, [pc, #284]	; (b95b8 <_ZN5Print10printFloatEdh+0x174>)
   b949a:	e7e3      	b.n	b9464 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b949c:	4b47      	ldr	r3, [pc, #284]	; (b95bc <_ZN5Print10printFloatEdh+0x178>)
   b949e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b94a2:	4620      	mov	r0, r4
   b94a4:	4629      	mov	r1, r5
   b94a6:	f7fb fa05 	bl	b48b4 <__aeabi_dcmpgt>
   b94aa:	b108      	cbz	r0, b94b0 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b94ac:	4944      	ldr	r1, [pc, #272]	; (b95c0 <_ZN5Print10printFloatEdh+0x17c>)
   b94ae:	e7d9      	b.n	b9464 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b94b0:	4b44      	ldr	r3, [pc, #272]	; (b95c4 <_ZN5Print10printFloatEdh+0x180>)
   b94b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b94b6:	4620      	mov	r0, r4
   b94b8:	4629      	mov	r1, r5
   b94ba:	f7fb f9dd 	bl	b4878 <__aeabi_dcmplt>
   b94be:	2800      	cmp	r0, #0
   b94c0:	d1f4      	bne.n	b94ac <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b94c2:	2200      	movs	r2, #0
   b94c4:	2300      	movs	r3, #0
   b94c6:	4620      	mov	r0, r4
   b94c8:	4629      	mov	r1, r5
   b94ca:	f7fb f9d5 	bl	b4878 <__aeabi_dcmplt>
   b94ce:	b1d0      	cbz	r0, b9506 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b94d0:	212d      	movs	r1, #45	; 0x2d
   b94d2:	4630      	mov	r0, r6
   b94d4:	f7ff ff7e 	bl	b93d4 <_ZN5Print5printEc>
     number = -number;
   b94d8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b94dc:	4682      	mov	sl, r0
     number = -number;
   b94de:	461d      	mov	r5, r3
  double rounding = 0.5;
   b94e0:	4939      	ldr	r1, [pc, #228]	; (b95c8 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b94e2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b95d0 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b94e6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b94ea:	2000      	movs	r0, #0
    rounding /= 10.0;
   b94ec:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b94f0:	fa5f f38b 	uxtb.w	r3, fp
   b94f4:	429f      	cmp	r7, r3
   b94f6:	d908      	bls.n	b950a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b94f8:	4642      	mov	r2, r8
   b94fa:	464b      	mov	r3, r9
   b94fc:	f7fb f874 	bl	b45e8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b9500:	f10b 0b01 	add.w	fp, fp, #1
   b9504:	e7f4      	b.n	b94f0 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b9506:	4682      	mov	sl, r0
   b9508:	e7ea      	b.n	b94e0 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b950a:	4622      	mov	r2, r4
   b950c:	462b      	mov	r3, r5
   b950e:	f7fa fd8b 	bl	b4028 <__adddf3>
   b9512:	460d      	mov	r5, r1
   b9514:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b9516:	f7fb fa15 	bl	b4944 <__aeabi_d2uiz>
   b951a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b951c:	f7fa fec0 	bl	b42a0 <__aeabi_ui2d>
   b9520:	4602      	mov	r2, r0
   b9522:	460b      	mov	r3, r1
   b9524:	4620      	mov	r0, r4
   b9526:	4629      	mov	r1, r5
   b9528:	f7fa fd7c 	bl	b4024 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b952c:	220a      	movs	r2, #10
   b952e:	4604      	mov	r4, r0
   b9530:	460d      	mov	r5, r1
   b9532:	4630      	mov	r0, r6
   b9534:	4641      	mov	r1, r8
   b9536:	f7ff ff66 	bl	b9406 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b953a:	4482      	add	sl, r0
  if (digits > 0) {
   b953c:	2f00      	cmp	r7, #0
   b953e:	d095      	beq.n	b946c <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b9540:	4922      	ldr	r1, [pc, #136]	; (b95cc <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b9542:	f8df 908c 	ldr.w	r9, [pc, #140]	; b95d0 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b9546:	4630      	mov	r0, r6
   b9548:	f7ff ff2e 	bl	b93a8 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b954c:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b9550:	4482      	add	sl, r0
  while (digits-- > 0)
   b9552:	2f00      	cmp	r7, #0
   b9554:	d08a      	beq.n	b946c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b9556:	4642      	mov	r2, r8
   b9558:	464b      	mov	r3, r9
   b955a:	4620      	mov	r0, r4
   b955c:	4629      	mov	r1, r5
   b955e:	f7fa ff19 	bl	b4394 <__aeabi_dmul>
   b9562:	4604      	mov	r4, r0
   b9564:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b9566:	f7fb f9c5 	bl	b48f4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b956a:	f1b0 0b00 	subs.w	fp, r0, #0
   b956e:	da1c      	bge.n	b95aa <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b9570:	212d      	movs	r1, #45	; 0x2d
   b9572:	4630      	mov	r0, r6
   b9574:	f7ff ff2e 	bl	b93d4 <_ZN5Print5printEc>
            val = -n;
   b9578:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b957c:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b957e:	220a      	movs	r2, #10
   b9580:	4630      	mov	r0, r6
   b9582:	9301      	str	r3, [sp, #4]
   b9584:	f7ff ff3f 	bl	b9406 <_ZN5Print11printNumberEmh>
   b9588:	9b01      	ldr	r3, [sp, #4]
   b958a:	4418      	add	r0, r3
    n += print(toPrint);
   b958c:	4482      	add	sl, r0
    remainder -= toPrint;
   b958e:	4658      	mov	r0, fp
   b9590:	f7fa fe96 	bl	b42c0 <__aeabi_i2d>
   b9594:	4602      	mov	r2, r0
   b9596:	460b      	mov	r3, r1
   b9598:	4620      	mov	r0, r4
   b959a:	4629      	mov	r1, r5
   b959c:	f7fa fd42 	bl	b4024 <__aeabi_dsub>
   b95a0:	3f01      	subs	r7, #1
   b95a2:	4604      	mov	r4, r0
   b95a4:	460d      	mov	r5, r1
   b95a6:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b95a8:	e7d3      	b.n	b9552 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b95aa:	4659      	mov	r1, fp
        size_t t = 0;
   b95ac:	2300      	movs	r3, #0
   b95ae:	e7e6      	b.n	b957e <_ZN5Print10printFloatEdh+0x13a>
   b95b0:	000ba764 	.word	0x000ba764
   b95b4:	7fefffff 	.word	0x7fefffff
   b95b8:	000ba768 	.word	0x000ba768
   b95bc:	41efffff 	.word	0x41efffff
   b95c0:	000ba76c 	.word	0x000ba76c
   b95c4:	c1efffff 	.word	0xc1efffff
   b95c8:	3fe00000 	.word	0x3fe00000
   b95cc:	000ba2a8 	.word	0x000ba2a8
   b95d0:	40240000 	.word	0x40240000

000b95d4 <_ZN5Print5printEfi>:
{
   b95d4:	b538      	push	{r3, r4, r5, lr}
   b95d6:	4604      	mov	r4, r0
   b95d8:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b95dc:	b2cd      	uxtb	r5, r1
   b95de:	f7fa fe81 	bl	b42e4 <__aeabi_f2d>
   b95e2:	ec41 0b10 	vmov	d0, r0, r1
   b95e6:	4629      	mov	r1, r5
   b95e8:	4620      	mov	r0, r4
}
   b95ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b95ee:	f7ff bf29 	b.w	b9444 <_ZN5Print10printFloatEdh>

000b95f2 <_ZN5Print7printlnEdi>:
{
   b95f2:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b95f4:	b2c9      	uxtb	r1, r1
{
   b95f6:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b95f8:	f7ff ff24 	bl	b9444 <_ZN5Print10printFloatEdh>
   b95fc:	4604      	mov	r4, r0
  n += println();
   b95fe:	4628      	mov	r0, r5
   b9600:	f7ff feeb 	bl	b93da <_ZN5Print7printlnEv>
}
   b9604:	4420      	add	r0, r4
   b9606:	bd38      	pop	{r3, r4, r5, pc}

000b9608 <_ZN5Print7printlnEfi>:
{
   b9608:	b538      	push	{r3, r4, r5, lr}
   b960a:	4604      	mov	r4, r0
   b960c:	ee10 0a10 	vmov	r0, s0
   b9610:	460d      	mov	r5, r1
    return println((double)num, digits);
   b9612:	f7fa fe67 	bl	b42e4 <__aeabi_f2d>
   b9616:	ec41 0b10 	vmov	d0, r0, r1
   b961a:	4629      	mov	r1, r5
   b961c:	4620      	mov	r0, r4
}
   b961e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b9622:	f7ff bfe6 	b.w	b95f2 <_ZN5Print7printlnEdi>
	...

000b9628 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b9628:	4b01      	ldr	r3, [pc, #4]	; (b9630 <_GLOBAL__sub_I_RGB+0x8>)
   b962a:	2200      	movs	r2, #0
   b962c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b962e:	4770      	bx	lr
   b9630:	2003e6e8 	.word	0x2003e6e8

000b9634 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b9634:	b510      	push	{r4, lr}
   b9636:	4604      	mov	r4, r0
{
	free(buffer);
   b9638:	6800      	ldr	r0, [r0, #0]
   b963a:	f7fb ff31 	bl	b54a0 <free>
}
   b963e:	4620      	mov	r0, r4
   b9640:	bd10      	pop	{r4, pc}

000b9642 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b9642:	b510      	push	{r4, lr}
   b9644:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b9646:	6800      	ldr	r0, [r0, #0]
   b9648:	b108      	cbz	r0, b964e <_ZN6String10invalidateEv+0xc>
   b964a:	f7fb ff29 	bl	b54a0 <free>
	buffer = NULL;
   b964e:	2300      	movs	r3, #0
	capacity = len = 0;
   b9650:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b9654:	6023      	str	r3, [r4, #0]
}
   b9656:	bd10      	pop	{r4, pc}

000b9658 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b9658:	b538      	push	{r3, r4, r5, lr}
   b965a:	4604      	mov	r4, r0
   b965c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b965e:	6800      	ldr	r0, [r0, #0]
   b9660:	3101      	adds	r1, #1
   b9662:	f7fb ff25 	bl	b54b0 <realloc>
	if (newbuffer) {
   b9666:	b110      	cbz	r0, b966e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b9668:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b966c:	2001      	movs	r0, #1
	}
	return 0;
}
   b966e:	bd38      	pop	{r3, r4, r5, pc}

000b9670 <_ZN6String7reserveEj>:
{
   b9670:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b9672:	6803      	ldr	r3, [r0, #0]
{
   b9674:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b9676:	b123      	cbz	r3, b9682 <_ZN6String7reserveEj+0x12>
   b9678:	6843      	ldr	r3, [r0, #4]
   b967a:	428b      	cmp	r3, r1
   b967c:	d301      	bcc.n	b9682 <_ZN6String7reserveEj+0x12>
   b967e:	2001      	movs	r0, #1
}
   b9680:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b9682:	4620      	mov	r0, r4
   b9684:	f7ff ffe8 	bl	b9658 <_ZN6String12changeBufferEj>
   b9688:	2800      	cmp	r0, #0
   b968a:	d0f9      	beq.n	b9680 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b968c:	68a3      	ldr	r3, [r4, #8]
   b968e:	2b00      	cmp	r3, #0
   b9690:	d1f5      	bne.n	b967e <_ZN6String7reserveEj+0xe>
   b9692:	6822      	ldr	r2, [r4, #0]
   b9694:	7013      	strb	r3, [r2, #0]
   b9696:	e7f2      	b.n	b967e <_ZN6String7reserveEj+0xe>

000b9698 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b9698:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b969a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b969c:	4611      	mov	r1, r2
   b969e:	9201      	str	r2, [sp, #4]
{
   b96a0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b96a2:	f7ff ffe5 	bl	b9670 <_ZN6String7reserveEj>
   b96a6:	9a01      	ldr	r2, [sp, #4]
   b96a8:	b928      	cbnz	r0, b96b6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b96aa:	4620      	mov	r0, r4
   b96ac:	f7ff ffc9 	bl	b9642 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b96b0:	4620      	mov	r0, r4
   b96b2:	b003      	add	sp, #12
   b96b4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b96b6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b96b8:	4629      	mov	r1, r5
   b96ba:	6820      	ldr	r0, [r4, #0]
   b96bc:	f000 fc08 	bl	b9ed0 <memcpy>
	buffer[len] = 0;
   b96c0:	6822      	ldr	r2, [r4, #0]
   b96c2:	68a3      	ldr	r3, [r4, #8]
   b96c4:	2100      	movs	r1, #0
   b96c6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b96c8:	e7f2      	b.n	b96b0 <_ZN6String4copyEPKcj+0x18>

000b96ca <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b96ca:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b96cc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b96ce:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b96d2:	4604      	mov	r4, r0
	len = 0;
   b96d4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b96d6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b96d8:	b141      	cbz	r1, b96ec <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b96da:	4608      	mov	r0, r1
   b96dc:	9101      	str	r1, [sp, #4]
   b96de:	f7fb f9ab 	bl	b4a38 <strlen>
   b96e2:	9901      	ldr	r1, [sp, #4]
   b96e4:	4602      	mov	r2, r0
   b96e6:	4620      	mov	r0, r4
   b96e8:	f7ff ffd6 	bl	b9698 <_ZN6String4copyEPKcj>
}
   b96ec:	4620      	mov	r0, r4
   b96ee:	b002      	add	sp, #8
   b96f0:	bd10      	pop	{r4, pc}

000b96f2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b96f2:	b538      	push	{r3, r4, r5, lr}
   b96f4:	4605      	mov	r5, r0
	if (buffer) {
   b96f6:	6800      	ldr	r0, [r0, #0]
{
   b96f8:	460c      	mov	r4, r1
	if (buffer) {
   b96fa:	b170      	cbz	r0, b971a <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
   b96fc:	686a      	ldr	r2, [r5, #4]
   b96fe:	688b      	ldr	r3, [r1, #8]
   b9700:	429a      	cmp	r2, r3
   b9702:	d308      	bcc.n	b9716 <_ZN6String4moveERS_+0x24>
   b9704:	6809      	ldr	r1, [r1, #0]
   b9706:	b131      	cbz	r1, b9716 <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
   b9708:	f000 fc57 	bl	b9fba <strcpy>
			len = rhs.len;
   b970c:	68a3      	ldr	r3, [r4, #8]
   b970e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b9710:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b9712:	60a3      	str	r3, [r4, #8]
}
   b9714:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b9716:	f7fb fec3 	bl	b54a0 <free>
	buffer = rhs.buffer;
   b971a:	6823      	ldr	r3, [r4, #0]
   b971c:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b971e:	6863      	ldr	r3, [r4, #4]
   b9720:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b9722:	68a3      	ldr	r3, [r4, #8]
   b9724:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b9726:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b9728:	e9c4 3300 	strd	r3, r3, [r4]
   b972c:	e7f1      	b.n	b9712 <_ZN6String4moveERS_+0x20>

000b972e <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b972e:	b510      	push	{r4, lr}
	buffer = NULL;
   b9730:	2300      	movs	r3, #0
	capacity = 0;
   b9732:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b9736:	4604      	mov	r4, r0
	len = 0;
   b9738:	6083      	str	r3, [r0, #8]
	flags = 0;
   b973a:	7303      	strb	r3, [r0, #12]
	move(rval);
   b973c:	f7ff ffd9 	bl	b96f2 <_ZN6String4moveERS_>
}
   b9740:	4620      	mov	r0, r4
   b9742:	bd10      	pop	{r4, pc}

000b9744 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b9744:	4288      	cmp	r0, r1
{
   b9746:	b510      	push	{r4, lr}
   b9748:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b974a:	d005      	beq.n	b9758 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b974c:	680b      	ldr	r3, [r1, #0]
   b974e:	b12b      	cbz	r3, b975c <_ZN6StringaSERKS_+0x18>
   b9750:	688a      	ldr	r2, [r1, #8]
   b9752:	4619      	mov	r1, r3
   b9754:	f7ff ffa0 	bl	b9698 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9758:	4620      	mov	r0, r4
   b975a:	bd10      	pop	{r4, pc}
	else invalidate();
   b975c:	f7ff ff71 	bl	b9642 <_ZN6String10invalidateEv>
   b9760:	e7fa      	b.n	b9758 <_ZN6StringaSERKS_+0x14>

000b9762 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b9762:	b510      	push	{r4, lr}
	buffer = NULL;
   b9764:	2300      	movs	r3, #0
String::String(const String &value)
   b9766:	4604      	mov	r4, r0
	capacity = 0;
   b9768:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b976c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b976e:	7303      	strb	r3, [r0, #12]
	*this = value;
   b9770:	f7ff ffe8 	bl	b9744 <_ZN6StringaSERKS_>
}
   b9774:	4620      	mov	r0, r4
   b9776:	bd10      	pop	{r4, pc}

000b9778 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b9778:	b513      	push	{r0, r1, r4, lr}
   b977a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b977c:	b159      	cbz	r1, b9796 <_ZN6StringaSEPKc+0x1e>
   b977e:	4608      	mov	r0, r1
   b9780:	9101      	str	r1, [sp, #4]
   b9782:	f7fb f959 	bl	b4a38 <strlen>
   b9786:	9901      	ldr	r1, [sp, #4]
   b9788:	4602      	mov	r2, r0
   b978a:	4620      	mov	r0, r4
   b978c:	f7ff ff84 	bl	b9698 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9790:	4620      	mov	r0, r4
   b9792:	b002      	add	sp, #8
   b9794:	bd10      	pop	{r4, pc}
	else invalidate();
   b9796:	f7ff ff54 	bl	b9642 <_ZN6String10invalidateEv>
   b979a:	e7f9      	b.n	b9790 <_ZN6StringaSEPKc+0x18>

000b979c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b979c:	b570      	push	{r4, r5, r6, lr}
   b979e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b97a0:	460e      	mov	r6, r1
   b97a2:	b909      	cbnz	r1, b97a8 <_ZN6String6concatEPKcj+0xc>
   b97a4:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b97a6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b97a8:	b16a      	cbz	r2, b97c6 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b97aa:	6884      	ldr	r4, [r0, #8]
   b97ac:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b97ae:	4621      	mov	r1, r4
   b97b0:	f7ff ff5e 	bl	b9670 <_ZN6String7reserveEj>
   b97b4:	2800      	cmp	r0, #0
   b97b6:	d0f5      	beq.n	b97a4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b97b8:	6828      	ldr	r0, [r5, #0]
   b97ba:	68ab      	ldr	r3, [r5, #8]
   b97bc:	4631      	mov	r1, r6
   b97be:	4418      	add	r0, r3
   b97c0:	f000 fbfb 	bl	b9fba <strcpy>
	len = newlen;
   b97c4:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b97c6:	2001      	movs	r0, #1
   b97c8:	e7ed      	b.n	b97a6 <_ZN6String6concatEPKcj+0xa>

000b97ca <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b97ca:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b97cc:	2300      	movs	r3, #0
	buf[0] = c;
   b97ce:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b97d2:	2201      	movs	r2, #1
   b97d4:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b97d6:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b97da:	f7ff ffdf 	bl	b979c <_ZN6String6concatEPKcj>
}
   b97de:	b003      	add	sp, #12
   b97e0:	f85d fb04 	ldr.w	pc, [sp], #4

000b97e4 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b97e4:	6802      	ldr	r2, [r0, #0]
{
   b97e6:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b97e8:	6809      	ldr	r1, [r1, #0]
   b97ea:	b162      	cbz	r2, b9806 <_ZNK6String9compareToERKS_+0x22>
   b97ec:	b941      	cbnz	r1, b9800 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b97ee:	6880      	ldr	r0, [r0, #8]
   b97f0:	b160      	cbz	r0, b980c <_ZNK6String9compareToERKS_+0x28>
   b97f2:	7810      	ldrb	r0, [r2, #0]
   b97f4:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b97f6:	6898      	ldr	r0, [r3, #8]
   b97f8:	b140      	cbz	r0, b980c <_ZNK6String9compareToERKS_+0x28>
   b97fa:	7809      	ldrb	r1, [r1, #0]
   b97fc:	4248      	negs	r0, r1
   b97fe:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b9800:	4610      	mov	r0, r2
   b9802:	f7fb b90f 	b.w	b4a24 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b9806:	2900      	cmp	r1, #0
   b9808:	d1f5      	bne.n	b97f6 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b980a:	4608      	mov	r0, r1
}
   b980c:	4770      	bx	lr

000b980e <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b980e:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b9810:	6882      	ldr	r2, [r0, #8]
   b9812:	688b      	ldr	r3, [r1, #8]
   b9814:	429a      	cmp	r2, r3
   b9816:	d105      	bne.n	b9824 <_ZNK6String6equalsERKS_+0x16>
   b9818:	f7ff ffe4 	bl	b97e4 <_ZNK6String9compareToERKS_>
   b981c:	fab0 f080 	clz	r0, r0
   b9820:	0940      	lsrs	r0, r0, #5
}
   b9822:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b9824:	2000      	movs	r0, #0
   b9826:	e7fc      	b.n	b9822 <_ZNK6String6equalsERKS_+0x14>

000b9828 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b9828:	4b05      	ldr	r3, [pc, #20]	; (b9840 <_GLOBAL__sub_I_System+0x18>)
   b982a:	2202      	movs	r2, #2
   b982c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b982e:	4b05      	ldr	r3, [pc, #20]	; (b9844 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b9830:	4a05      	ldr	r2, [pc, #20]	; (b9848 <_GLOBAL__sub_I_System+0x20>)
   b9832:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b9834:	2000      	movs	r0, #0
   b9836:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b983a:	f7fb bd85 	b.w	b5348 <set_system_mode>
   b983e:	bf00      	nop
   b9840:	2003e704 	.word	0x2003e704
   b9844:	2003e6f8 	.word	0x2003e6f8
   b9848:	ffff0000 	.word	0xffff0000

000b984c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b984c:	4b02      	ldr	r3, [pc, #8]	; (b9858 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b984e:	681a      	ldr	r2, [r3, #0]
   b9850:	4b02      	ldr	r3, [pc, #8]	; (b985c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9852:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9854:	4770      	bx	lr
   b9856:	bf00      	nop
   b9858:	2003e538 	.word	0x2003e538
   b985c:	2003e708 	.word	0x2003e708

000b9860 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9860:	4770      	bx	lr

000b9862 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9862:	7441      	strb	r1, [r0, #17]
}
   b9864:	4770      	bx	lr

000b9866 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9866:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9868:	7c00      	ldrb	r0, [r0, #16]
   b986a:	f7fb fced 	bl	b5248 <hal_usart_available_data_for_write>
}
   b986e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9872:	bd08      	pop	{r3, pc}

000b9874 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9874:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9876:	7c00      	ldrb	r0, [r0, #16]
   b9878:	f7fb fcc6 	bl	b5208 <hal_usart_available>
}
   b987c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9880:	bd08      	pop	{r3, pc}

000b9882 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b9882:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9884:	7c00      	ldrb	r0, [r0, #16]
   b9886:	f7fb fccf 	bl	b5228 <hal_usart_peek>
}
   b988a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b988e:	bd08      	pop	{r3, pc}

000b9890 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9890:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9892:	7c00      	ldrb	r0, [r0, #16]
   b9894:	f7fb fcc0 	bl	b5218 <hal_usart_read>
}
   b9898:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b989c:	bd08      	pop	{r3, pc}

000b989e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b989e:	7c00      	ldrb	r0, [r0, #16]
   b98a0:	f7fb bcca 	b.w	b5238 <hal_usart_flush>

000b98a4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b98a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b98a6:	7c45      	ldrb	r5, [r0, #17]
{
   b98a8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b98aa:	b12d      	cbz	r5, b98b8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b98ac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b98ae:	b003      	add	sp, #12
   b98b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b98b4:	f7fb bca0 	b.w	b51f8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b98b8:	7c00      	ldrb	r0, [r0, #16]
   b98ba:	9101      	str	r1, [sp, #4]
   b98bc:	f7fb fcc4 	bl	b5248 <hal_usart_available_data_for_write>
   b98c0:	2800      	cmp	r0, #0
   b98c2:	9901      	ldr	r1, [sp, #4]
   b98c4:	dcf2      	bgt.n	b98ac <_ZN11USARTSerial5writeEh+0x8>
}
   b98c6:	4628      	mov	r0, r5
   b98c8:	b003      	add	sp, #12
   b98ca:	bd30      	pop	{r4, r5, pc}

000b98cc <_ZN11USARTSerialD0Ev>:
   b98cc:	b510      	push	{r4, lr}
   b98ce:	2114      	movs	r1, #20
   b98d0:	4604      	mov	r4, r0
   b98d2:	f7fb f8f8 	bl	b4ac6 <_ZdlPvj>
   b98d6:	4620      	mov	r0, r4
   b98d8:	bd10      	pop	{r4, pc}
	...

000b98dc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b98dc:	b510      	push	{r4, lr}
   b98de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b98e2:	4604      	mov	r4, r0
   b98e4:	4608      	mov	r0, r1
   b98e6:	4611      	mov	r1, r2
   b98e8:	2200      	movs	r2, #0
   b98ea:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b98ee:	4b04      	ldr	r3, [pc, #16]	; (b9900 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b98f0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b98f2:	2301      	movs	r3, #1
  _serial = serial;
   b98f4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b98f6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b98f8:	f7fb fcb6 	bl	b5268 <hal_usart_init_ex>
}
   b98fc:	4620      	mov	r0, r4
   b98fe:	bd10      	pop	{r4, pc}
   b9900:	000ba794 	.word	0x000ba794

000b9904 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b9904:	7c00      	ldrb	r0, [r0, #16]
   b9906:	2300      	movs	r3, #0
   b9908:	f7fb bca6 	b.w	b5258 <hal_usart_begin_config>

000b990c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b990c:	2200      	movs	r2, #0
   b990e:	f7ff bff9 	b.w	b9904 <_ZN11USARTSerial5beginEmm>

000b9912 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b9912:	7c00      	ldrb	r0, [r0, #16]
   b9914:	f7fb bc68 	b.w	b51e8 <hal_usart_end>

000b9918 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9918:	7441      	strb	r1, [r0, #17]
}
   b991a:	4770      	bx	lr

000b991c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b991c:	4770      	bx	lr

000b991e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b991e:	4770      	bx	lr

000b9920 <_ZN9USBSerial4readEv>:
{
   b9920:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9922:	2100      	movs	r1, #0
   b9924:	7c00      	ldrb	r0, [r0, #16]
   b9926:	f7fb fccf 	bl	b52c8 <HAL_USB_USART_Receive_Data>
}
   b992a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b992e:	bd08      	pop	{r3, pc}

000b9930 <_ZN9USBSerial4peekEv>:
{
   b9930:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9932:	2101      	movs	r1, #1
   b9934:	7c00      	ldrb	r0, [r0, #16]
   b9936:	f7fb fcc7 	bl	b52c8 <HAL_USB_USART_Receive_Data>
}
   b993a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b993e:	bd08      	pop	{r3, pc}

000b9940 <_ZN9USBSerial17availableForWriteEv>:
{
   b9940:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b9942:	7c00      	ldrb	r0, [r0, #16]
   b9944:	f7fb fcb8 	bl	b52b8 <HAL_USB_USART_Available_Data_For_Write>
}
   b9948:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b994c:	bd08      	pop	{r3, pc}

000b994e <_ZN9USBSerial9availableEv>:
{
   b994e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9950:	7c00      	ldrb	r0, [r0, #16]
   b9952:	f7fb fca9 	bl	b52a8 <HAL_USB_USART_Available_Data>
}
   b9956:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b995a:	bd08      	pop	{r3, pc}

000b995c <_ZN9USBSerial5writeEh>:
{
   b995c:	b513      	push	{r0, r1, r4, lr}
   b995e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9960:	7c00      	ldrb	r0, [r0, #16]
{
   b9962:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9964:	f7fb fca8 	bl	b52b8 <HAL_USB_USART_Available_Data_For_Write>
   b9968:	2800      	cmp	r0, #0
   b996a:	9901      	ldr	r1, [sp, #4]
   b996c:	dc01      	bgt.n	b9972 <_ZN9USBSerial5writeEh+0x16>
   b996e:	7c60      	ldrb	r0, [r4, #17]
   b9970:	b120      	cbz	r0, b997c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b9972:	7c20      	ldrb	r0, [r4, #16]
   b9974:	f7fb fcb0 	bl	b52d8 <HAL_USB_USART_Send_Data>
   b9978:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b997c:	b002      	add	sp, #8
   b997e:	bd10      	pop	{r4, pc}

000b9980 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9980:	7c00      	ldrb	r0, [r0, #16]
   b9982:	f7fb bcb1 	b.w	b52e8 <HAL_USB_USART_Flush_Data>

000b9986 <_ZN9USBSerialD0Ev>:
   b9986:	b510      	push	{r4, lr}
   b9988:	2114      	movs	r1, #20
   b998a:	4604      	mov	r4, r0
   b998c:	f7fb f89b 	bl	b4ac6 <_ZdlPvj>
   b9990:	4620      	mov	r0, r4
   b9992:	bd10      	pop	{r4, pc}

000b9994 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9994:	b510      	push	{r4, lr}
   b9996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b999a:	4604      	mov	r4, r0
   b999c:	4608      	mov	r0, r1
   b999e:	2100      	movs	r1, #0
   b99a0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b99a4:	4b04      	ldr	r3, [pc, #16]	; (b99b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b99a6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b99a8:	2301      	movs	r3, #1
  _serial = serial;
   b99aa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b99ac:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b99ae:	4611      	mov	r1, r2
   b99b0:	f7fb fc62 	bl	b5278 <HAL_USB_USART_Init>
}
   b99b4:	4620      	mov	r0, r4
   b99b6:	bd10      	pop	{r4, pc}
   b99b8:	000ba7c4 	.word	0x000ba7c4

000b99bc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b99bc:	7c00      	ldrb	r0, [r0, #16]
   b99be:	2200      	movs	r2, #0
   b99c0:	f7fb bc62 	b.w	b5288 <HAL_USB_USART_Begin>

000b99c4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b99c4:	7c00      	ldrb	r0, [r0, #16]
   b99c6:	f7fb bc67 	b.w	b5298 <HAL_USB_USART_End>

000b99ca <_Z19acquireSerialBufferv>:
{
   b99ca:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b99cc:	2214      	movs	r2, #20
{
   b99ce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b99d0:	2100      	movs	r1, #0
   b99d2:	f000 faa5 	bl	b9f20 <memset>
}
   b99d6:	4620      	mov	r0, r4
   b99d8:	bd10      	pop	{r4, pc}
	...

000b99dc <_Z16_fetch_usbserialv>:
{
   b99dc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b99de:	4c0f      	ldr	r4, [pc, #60]	; (b9a1c <_Z16_fetch_usbserialv+0x40>)
{
   b99e0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b99e2:	a803      	add	r0, sp, #12
   b99e4:	f7ff fff1 	bl	b99ca <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b99e8:	7821      	ldrb	r1, [r4, #0]
   b99ea:	f3bf 8f5b 	dmb	ish
   b99ee:	f011 0101 	ands.w	r1, r1, #1
   b99f2:	d10f      	bne.n	b9a14 <_Z16_fetch_usbserialv+0x38>
   b99f4:	4620      	mov	r0, r4
   b99f6:	9101      	str	r1, [sp, #4]
   b99f8:	f7fb f874 	bl	b4ae4 <__cxa_guard_acquire>
   b99fc:	9901      	ldr	r1, [sp, #4]
   b99fe:	b148      	cbz	r0, b9a14 <_Z16_fetch_usbserialv+0x38>
   b9a00:	aa03      	add	r2, sp, #12
   b9a02:	4807      	ldr	r0, [pc, #28]	; (b9a20 <_Z16_fetch_usbserialv+0x44>)
   b9a04:	f7ff ffc6 	bl	b9994 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9a08:	4620      	mov	r0, r4
   b9a0a:	f7fb f870 	bl	b4aee <__cxa_guard_release>
   b9a0e:	4805      	ldr	r0, [pc, #20]	; (b9a24 <_Z16_fetch_usbserialv+0x48>)
   b9a10:	f000 fa40 	bl	b9e94 <atexit>
	return _usbserial;
}
   b9a14:	4802      	ldr	r0, [pc, #8]	; (b9a20 <_Z16_fetch_usbserialv+0x44>)
   b9a16:	b008      	add	sp, #32
   b9a18:	bd10      	pop	{r4, pc}
   b9a1a:	bf00      	nop
   b9a1c:	2003e70c 	.word	0x2003e70c
   b9a20:	2003e710 	.word	0x2003e710
   b9a24:	000b991d 	.word	0x000b991d

000b9a28 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9a28:	4b01      	ldr	r3, [pc, #4]	; (b9a30 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b9a2a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9a2c:	4770      	bx	lr
   b9a2e:	bf00      	nop
   b9a30:	2003e53c 	.word	0x2003e53c

000b9a34 <serialEventRun>:
{
   b9a34:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9a36:	4b0b      	ldr	r3, [pc, #44]	; (b9a64 <serialEventRun+0x30>)
   b9a38:	b143      	cbz	r3, b9a4c <serialEventRun+0x18>
   b9a3a:	f7ff ffcf 	bl	b99dc <_Z16_fetch_usbserialv>
   b9a3e:	6803      	ldr	r3, [r0, #0]
   b9a40:	691b      	ldr	r3, [r3, #16]
   b9a42:	4798      	blx	r3
   b9a44:	2800      	cmp	r0, #0
   b9a46:	dd01      	ble.n	b9a4c <serialEventRun+0x18>
        serialEvent();
   b9a48:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9a4c:	4b06      	ldr	r3, [pc, #24]	; (b9a68 <serialEventRun+0x34>)
   b9a4e:	b143      	cbz	r3, b9a62 <serialEventRun+0x2e>
   b9a50:	f000 f8e2 	bl	b9c18 <_Z22__fetch_global_Serial1v>
   b9a54:	6803      	ldr	r3, [r0, #0]
   b9a56:	691b      	ldr	r3, [r3, #16]
   b9a58:	4798      	blx	r3
   b9a5a:	2800      	cmp	r0, #0
   b9a5c:	dd01      	ble.n	b9a62 <serialEventRun+0x2e>
        serialEvent1();
   b9a5e:	f3af 8000 	nop.w
}
   b9a62:	bd08      	pop	{r3, pc}
	...

000b9a6c <_post_loop>:
{
   b9a6c:	b508      	push	{r3, lr}
	serialEventRun();
   b9a6e:	f7ff ffe1 	bl	b9a34 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b9a72:	f7fb fb61 	bl	b5138 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b9a76:	4b01      	ldr	r3, [pc, #4]	; (b9a7c <_post_loop+0x10>)
   b9a78:	6018      	str	r0, [r3, #0]
}
   b9a7a:	bd08      	pop	{r3, pc}
   b9a7c:	2003e72c 	.word	0x2003e72c

000b9a80 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9a80:	4805      	ldr	r0, [pc, #20]	; (b9a98 <_Z33system_initialize_user_backup_ramv+0x18>)
   b9a82:	4a06      	ldr	r2, [pc, #24]	; (b9a9c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9a84:	4906      	ldr	r1, [pc, #24]	; (b9aa0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9a86:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9a88:	1a12      	subs	r2, r2, r0
   b9a8a:	f000 fa21 	bl	b9ed0 <memcpy>
    __backup_sram_signature = signature;
   b9a8e:	4b05      	ldr	r3, [pc, #20]	; (b9aa4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b9a90:	4a05      	ldr	r2, [pc, #20]	; (b9aa8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b9a92:	601a      	str	r2, [r3, #0]
}
   b9a94:	bd08      	pop	{r3, pc}
   b9a96:	bf00      	nop
   b9a98:	2003f400 	.word	0x2003f400
   b9a9c:	2003f404 	.word	0x2003f404
   b9aa0:	000bab10 	.word	0x000bab10
   b9aa4:	2003f400 	.word	0x2003f400
   b9aa8:	9a271c1e 	.word	0x9a271c1e

000b9aac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9aac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9aae:	2300      	movs	r3, #0
   b9ab0:	9300      	str	r3, [sp, #0]
   b9ab2:	461a      	mov	r2, r3
   b9ab4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9ab8:	f7fb fc60 	bl	b537c <system_ctrl_set_result>
}
   b9abc:	b003      	add	sp, #12
   b9abe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9ac4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9ac4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b9ac6:	8843      	ldrh	r3, [r0, #2]
   b9ac8:	2b0a      	cmp	r3, #10
   b9aca:	d008      	beq.n	b9ade <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9acc:	2b50      	cmp	r3, #80	; 0x50
   b9ace:	d10b      	bne.n	b9ae8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9ad0:	4b09      	ldr	r3, [pc, #36]	; (b9af8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9ad2:	681b      	ldr	r3, [r3, #0]
   b9ad4:	b14b      	cbz	r3, b9aea <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b9ad6:	b003      	add	sp, #12
   b9ad8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9adc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b9ade:	f7ff ffe5 	bl	b9aac <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9ae2:	b003      	add	sp, #12
   b9ae4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9ae8:	2300      	movs	r3, #0
   b9aea:	9300      	str	r3, [sp, #0]
   b9aec:	461a      	mov	r2, r3
   b9aee:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9af2:	f7fb fc43 	bl	b537c <system_ctrl_set_result>
}
   b9af6:	e7f4      	b.n	b9ae2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9af8:	2003e728 	.word	0x2003e728

000b9afc <module_user_init_hook>:
{
   b9afc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b9afe:	4812      	ldr	r0, [pc, #72]	; (b9b48 <module_user_init_hook+0x4c>)
   b9b00:	2100      	movs	r1, #0
   b9b02:	f7fb fcfd 	bl	b5500 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9b06:	4b11      	ldr	r3, [pc, #68]	; (b9b4c <module_user_init_hook+0x50>)
   b9b08:	681a      	ldr	r2, [r3, #0]
   b9b0a:	4b11      	ldr	r3, [pc, #68]	; (b9b50 <module_user_init_hook+0x54>)
   b9b0c:	429a      	cmp	r2, r3
   b9b0e:	4b11      	ldr	r3, [pc, #68]	; (b9b54 <module_user_init_hook+0x58>)
   b9b10:	bf0c      	ite	eq
   b9b12:	2201      	moveq	r2, #1
   b9b14:	2200      	movne	r2, #0
   b9b16:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9b18:	d001      	beq.n	b9b1e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b9b1a:	f7ff ffb1 	bl	b9a80 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9b1e:	f7fb fafb 	bl	b5118 <HAL_RNG_GetRandomNumber>
   b9b22:	4604      	mov	r4, r0
    srand(seed);
   b9b24:	f000 fa04 	bl	b9f30 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9b28:	4b0b      	ldr	r3, [pc, #44]	; (b9b58 <module_user_init_hook+0x5c>)
   b9b2a:	b113      	cbz	r3, b9b32 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9b2c:	4620      	mov	r0, r4
   b9b2e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9b32:	2100      	movs	r1, #0
   b9b34:	4808      	ldr	r0, [pc, #32]	; (b9b58 <module_user_init_hook+0x5c>)
   b9b36:	f7fb fc43 	bl	b53c0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b9b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9b3e:	4807      	ldr	r0, [pc, #28]	; (b9b5c <module_user_init_hook+0x60>)
   b9b40:	2100      	movs	r1, #0
   b9b42:	f7fb bc11 	b.w	b5368 <system_ctrl_set_app_request_handler>
   b9b46:	bf00      	nop
   b9b48:	000b9a29 	.word	0x000b9a29
   b9b4c:	2003f400 	.word	0x2003f400
   b9b50:	9a271c1e 	.word	0x9a271c1e
   b9b54:	2003e724 	.word	0x2003e724
   b9b58:	00000000 	.word	0x00000000
   b9b5c:	000b9ac5 	.word	0x000b9ac5

000b9b60 <__tcf_1>:
   b9b60:	4770      	bx	lr
	...

000b9b64 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig(HAL_I2C_INTERFACE1);
}

#if Wiring_Wire1
hal_i2c_config_t __attribute__((weak)) acquireWire1Buffer()
{
   b9b64:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b9b66:	4b0a      	ldr	r3, [pc, #40]	; (b9b90 <_Z18acquireWire1Bufferv+0x2c>)
   b9b68:	6003      	str	r3, [r0, #0]
   b9b6a:	2301      	movs	r3, #1
{
   b9b6c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9b6e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9b70:	4908      	ldr	r1, [pc, #32]	; (b9b94 <_Z18acquireWire1Bufferv+0x30>)
   b9b72:	2020      	movs	r0, #32
   b9b74:	f000 f876 	bl	b9c64 <_ZnajRKSt9nothrow_t>
	};
   b9b78:	2520      	movs	r5, #32
   b9b7a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9b7c:	4905      	ldr	r1, [pc, #20]	; (b9b94 <_Z18acquireWire1Bufferv+0x30>)
	};
   b9b7e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9b80:	4628      	mov	r0, r5
   b9b82:	f000 f86f 	bl	b9c64 <_ZnajRKSt9nothrow_t>
	};
   b9b86:	e9c4 0503 	strd	r0, r5, [r4, #12]
	return defaultWireConfig(HAL_I2C_INTERFACE2);
}
   b9b8a:	4620      	mov	r0, r4
   b9b8c:	bd38      	pop	{r3, r4, r5, pc}
   b9b8e:	bf00      	nop
   b9b90:	00010018 	.word	0x00010018
   b9b94:	000ba7ec 	.word	0x000ba7ec

000b9b98 <_Z20__fetch_global_Wire1v>:
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b9b98:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b9b9a:	4c0e      	ldr	r4, [pc, #56]	; (b9bd4 <_Z20__fetch_global_Wire1v+0x3c>)
   b9b9c:	7823      	ldrb	r3, [r4, #0]
   b9b9e:	f3bf 8f5b 	dmb	ish
   b9ba2:	07db      	lsls	r3, r3, #31
{
   b9ba4:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b9ba6:	d411      	bmi.n	b9bcc <_Z20__fetch_global_Wire1v+0x34>
   b9ba8:	4620      	mov	r0, r4
   b9baa:	f7fa ff9b 	bl	b4ae4 <__cxa_guard_acquire>
   b9bae:	b168      	cbz	r0, b9bcc <_Z20__fetch_global_Wire1v+0x34>
   b9bb0:	4668      	mov	r0, sp
   b9bb2:	f7ff ffd7 	bl	b9b64 <_Z18acquireWire1Bufferv>
   b9bb6:	466a      	mov	r2, sp
   b9bb8:	2101      	movs	r1, #1
   b9bba:	4807      	ldr	r0, [pc, #28]	; (b9bd8 <_Z20__fetch_global_Wire1v+0x40>)
   b9bbc:	f7fe f8fa 	bl	b7db4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9bc0:	4620      	mov	r0, r4
   b9bc2:	f7fa ff94 	bl	b4aee <__cxa_guard_release>
   b9bc6:	4805      	ldr	r0, [pc, #20]	; (b9bdc <_Z20__fetch_global_Wire1v+0x44>)
   b9bc8:	f000 f964 	bl	b9e94 <atexit>
	return wire;
}
   b9bcc:	4802      	ldr	r0, [pc, #8]	; (b9bd8 <_Z20__fetch_global_Wire1v+0x40>)
   b9bce:	b006      	add	sp, #24
   b9bd0:	bd10      	pop	{r4, pc}
   b9bd2:	bf00      	nop
   b9bd4:	2003e730 	.word	0x2003e730
   b9bd8:	2003e734 	.word	0x2003e734
   b9bdc:	000b9b61 	.word	0x000b9b61

000b9be0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9be0:	4770      	bx	lr
	...

000b9be4 <_Z20acquireSerial1Bufferv>:
{
   b9be4:	b538      	push	{r3, r4, r5, lr}
   b9be6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9be8:	2514      	movs	r5, #20
   b9bea:	462a      	mov	r2, r5
   b9bec:	2100      	movs	r1, #0
   b9bee:	f000 f997 	bl	b9f20 <memset>
   b9bf2:	8025      	strh	r5, [r4, #0]
   b9bf4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9bf6:	4907      	ldr	r1, [pc, #28]	; (b9c14 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9bf8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9bfa:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9bfc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9bfe:	f000 f831 	bl	b9c64 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9c02:	4904      	ldr	r1, [pc, #16]	; (b9c14 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9c04:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9c06:	4628      	mov	r0, r5
   b9c08:	f000 f82c 	bl	b9c64 <_ZnajRKSt9nothrow_t>
    };
   b9c0c:	60e0      	str	r0, [r4, #12]
}
   b9c0e:	4620      	mov	r0, r4
   b9c10:	bd38      	pop	{r3, r4, r5, pc}
   b9c12:	bf00      	nop
   b9c14:	000ba7ec 	.word	0x000ba7ec

000b9c18 <_Z22__fetch_global_Serial1v>:
{
   b9c18:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9c1a:	4d0e      	ldr	r5, [pc, #56]	; (b9c54 <_Z22__fetch_global_Serial1v+0x3c>)
   b9c1c:	7829      	ldrb	r1, [r5, #0]
   b9c1e:	f3bf 8f5b 	dmb	ish
   b9c22:	f011 0401 	ands.w	r4, r1, #1
{
   b9c26:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9c28:	d111      	bne.n	b9c4e <_Z22__fetch_global_Serial1v+0x36>
   b9c2a:	4628      	mov	r0, r5
   b9c2c:	f7fa ff5a 	bl	b4ae4 <__cxa_guard_acquire>
   b9c30:	b168      	cbz	r0, b9c4e <_Z22__fetch_global_Serial1v+0x36>
   b9c32:	a801      	add	r0, sp, #4
   b9c34:	f7ff ffd6 	bl	b9be4 <_Z20acquireSerial1Bufferv>
   b9c38:	aa01      	add	r2, sp, #4
   b9c3a:	4621      	mov	r1, r4
   b9c3c:	4806      	ldr	r0, [pc, #24]	; (b9c58 <_Z22__fetch_global_Serial1v+0x40>)
   b9c3e:	f7ff fe4d 	bl	b98dc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9c42:	4628      	mov	r0, r5
   b9c44:	f7fa ff53 	bl	b4aee <__cxa_guard_release>
   b9c48:	4804      	ldr	r0, [pc, #16]	; (b9c5c <_Z22__fetch_global_Serial1v+0x44>)
   b9c4a:	f000 f923 	bl	b9e94 <atexit>
    return serial1;
}
   b9c4e:	4802      	ldr	r0, [pc, #8]	; (b9c58 <_Z22__fetch_global_Serial1v+0x40>)
   b9c50:	b007      	add	sp, #28
   b9c52:	bd30      	pop	{r4, r5, pc}
   b9c54:	2003e748 	.word	0x2003e748
   b9c58:	2003e74c 	.word	0x2003e74c
   b9c5c:	000b9be1 	.word	0x000b9be1

000b9c60 <_ZnwjRKSt9nothrow_t>:
   b9c60:	f7fa bf2d 	b.w	b4abe <_Znwj>

000b9c64 <_ZnajRKSt9nothrow_t>:
   b9c64:	f7fa bf2d 	b.w	b4ac2 <_Znaj>

000b9c68 <_ZSt25__throw_bad_function_callv>:
   b9c68:	b508      	push	{r3, lr}
   b9c6a:	f7fb fc31 	bl	b54d0 <abort>
	...

000b9c70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9c70:	4901      	ldr	r1, [pc, #4]	; (b9c78 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9c72:	f000 b8f9 	b.w	b9e68 <_ZNKSt9type_infoeqERKS_>
   b9c76:	bf00      	nop
   b9c78:	000ba808 	.word	0x000ba808

000b9c7c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9c7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9c7e:	2400      	movs	r4, #0
   b9c80:	2310      	movs	r3, #16
   b9c82:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b9c86:	6803      	ldr	r3, [r0, #0]
   b9c88:	4615      	mov	r5, r2
   b9c8a:	699e      	ldr	r6, [r3, #24]
   b9c8c:	6812      	ldr	r2, [r2, #0]
   b9c8e:	466b      	mov	r3, sp
   b9c90:	e9cd 4400 	strd	r4, r4, [sp]
   b9c94:	47b0      	blx	r6
   b9c96:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9c9a:	f003 0306 	and.w	r3, r3, #6
   b9c9e:	2b06      	cmp	r3, #6
   b9ca0:	bf03      	ittte	eq
   b9ca2:	9b00      	ldreq	r3, [sp, #0]
   b9ca4:	602b      	streq	r3, [r5, #0]
   b9ca6:	2001      	moveq	r0, #1
   b9ca8:	4620      	movne	r0, r4
   b9caa:	b004      	add	sp, #16
   b9cac:	bd70      	pop	{r4, r5, r6, pc}

000b9cae <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9cae:	9800      	ldr	r0, [sp, #0]
   b9cb0:	4290      	cmp	r0, r2
   b9cb2:	bf14      	ite	ne
   b9cb4:	2001      	movne	r0, #1
   b9cb6:	2006      	moveq	r0, #6
   b9cb8:	4770      	bx	lr
	...

000b9cbc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9cbc:	b510      	push	{r4, lr}
   b9cbe:	4b03      	ldr	r3, [pc, #12]	; (b9ccc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9cc0:	6003      	str	r3, [r0, #0]
   b9cc2:	4604      	mov	r4, r0
   b9cc4:	f000 f8cd 	bl	b9e62 <_ZNSt9type_infoD1Ev>
   b9cc8:	4620      	mov	r0, r4
   b9cca:	bd10      	pop	{r4, pc}
   b9ccc:	000ba848 	.word	0x000ba848

000b9cd0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9cd0:	b510      	push	{r4, lr}
   b9cd2:	4604      	mov	r4, r0
   b9cd4:	f7ff fff2 	bl	b9cbc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9cd8:	4620      	mov	r0, r4
   b9cda:	2108      	movs	r1, #8
   b9cdc:	f7fa fef3 	bl	b4ac6 <_ZdlPvj>
   b9ce0:	4620      	mov	r0, r4
   b9ce2:	bd10      	pop	{r4, pc}

000b9ce4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9ce8:	461f      	mov	r7, r3
   b9cea:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9cee:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9cf2:	4598      	cmp	r8, r3
   b9cf4:	4606      	mov	r6, r0
   b9cf6:	4615      	mov	r5, r2
   b9cf8:	d107      	bne.n	b9d0a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9cfa:	9907      	ldr	r1, [sp, #28]
   b9cfc:	f000 f8b4 	bl	b9e68 <_ZNKSt9type_infoeqERKS_>
   b9d00:	b118      	cbz	r0, b9d0a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9d02:	7165      	strb	r5, [r4, #5]
   b9d04:	2000      	movs	r0, #0
   b9d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9d0a:	4639      	mov	r1, r7
   b9d0c:	4630      	mov	r0, r6
   b9d0e:	f000 f8ab 	bl	b9e68 <_ZNKSt9type_infoeqERKS_>
   b9d12:	2800      	cmp	r0, #0
   b9d14:	d0f6      	beq.n	b9d04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9d16:	2301      	movs	r3, #1
   b9d18:	f8c4 8000 	str.w	r8, [r4]
   b9d1c:	7125      	strb	r5, [r4, #4]
   b9d1e:	71a3      	strb	r3, [r4, #6]
   b9d20:	e7f0      	b.n	b9d04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9d22 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9d22:	b538      	push	{r3, r4, r5, lr}
   b9d24:	4615      	mov	r5, r2
   b9d26:	461c      	mov	r4, r3
   b9d28:	f000 f89e 	bl	b9e68 <_ZNKSt9type_infoeqERKS_>
   b9d2c:	b120      	cbz	r0, b9d38 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9d2e:	2308      	movs	r3, #8
   b9d30:	60e3      	str	r3, [r4, #12]
   b9d32:	2306      	movs	r3, #6
   b9d34:	6025      	str	r5, [r4, #0]
   b9d36:	7123      	strb	r3, [r4, #4]
   b9d38:	bd38      	pop	{r3, r4, r5, pc}

000b9d3a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9d3c:	4605      	mov	r5, r0
   b9d3e:	460c      	mov	r4, r1
   b9d40:	9201      	str	r2, [sp, #4]
   b9d42:	461e      	mov	r6, r3
   b9d44:	f000 f890 	bl	b9e68 <_ZNKSt9type_infoeqERKS_>
   b9d48:	b950      	cbnz	r0, b9d60 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9d4a:	2e03      	cmp	r6, #3
   b9d4c:	d808      	bhi.n	b9d60 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9d4e:	6823      	ldr	r3, [r4, #0]
   b9d50:	9a01      	ldr	r2, [sp, #4]
   b9d52:	695b      	ldr	r3, [r3, #20]
   b9d54:	4629      	mov	r1, r5
   b9d56:	4620      	mov	r0, r4
   b9d58:	b002      	add	sp, #8
   b9d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9d5e:	4718      	bx	r3
   b9d60:	b002      	add	sp, #8
   b9d62:	bd70      	pop	{r4, r5, r6, pc}

000b9d64 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9d64:	b510      	push	{r4, lr}
   b9d66:	4b03      	ldr	r3, [pc, #12]	; (b9d74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9d68:	6003      	str	r3, [r0, #0]
   b9d6a:	4604      	mov	r4, r0
   b9d6c:	f7ff ffa6 	bl	b9cbc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9d70:	4620      	mov	r0, r4
   b9d72:	bd10      	pop	{r4, pc}
   b9d74:	000ba8a8 	.word	0x000ba8a8

000b9d78 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9d78:	b510      	push	{r4, lr}
   b9d7a:	4604      	mov	r4, r0
   b9d7c:	f7ff fff2 	bl	b9d64 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9d80:	4620      	mov	r0, r4
   b9d82:	210c      	movs	r1, #12
   b9d84:	f7fa fe9f 	bl	b4ac6 <_ZdlPvj>
   b9d88:	4620      	mov	r0, r4
   b9d8a:	bd10      	pop	{r4, pc}

000b9d8c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9d8e:	9f08      	ldr	r7, [sp, #32]
   b9d90:	4297      	cmp	r7, r2
   b9d92:	4605      	mov	r5, r0
   b9d94:	460e      	mov	r6, r1
   b9d96:	4614      	mov	r4, r2
   b9d98:	d00a      	beq.n	b9db0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b9d9a:	68a8      	ldr	r0, [r5, #8]
   b9d9c:	6802      	ldr	r2, [r0, #0]
   b9d9e:	9708      	str	r7, [sp, #32]
   b9da0:	6a15      	ldr	r5, [r2, #32]
   b9da2:	4631      	mov	r1, r6
   b9da4:	4622      	mov	r2, r4
   b9da6:	46ac      	mov	ip, r5
   b9da8:	b003      	add	sp, #12
   b9daa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9dae:	4760      	bx	ip
   b9db0:	4619      	mov	r1, r3
   b9db2:	9301      	str	r3, [sp, #4]
   b9db4:	f000 f858 	bl	b9e68 <_ZNKSt9type_infoeqERKS_>
   b9db8:	9b01      	ldr	r3, [sp, #4]
   b9dba:	2800      	cmp	r0, #0
   b9dbc:	d0ed      	beq.n	b9d9a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9dbe:	2006      	movs	r0, #6
   b9dc0:	b003      	add	sp, #12
   b9dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9dc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9dc4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9dc8:	460d      	mov	r5, r1
   b9dca:	4619      	mov	r1, r3
   b9dcc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9dd0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9dd4:	4681      	mov	r9, r0
   b9dd6:	4617      	mov	r7, r2
   b9dd8:	4698      	mov	r8, r3
   b9dda:	f000 f845 	bl	b9e68 <_ZNKSt9type_infoeqERKS_>
   b9dde:	b190      	cbz	r0, b9e06 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9de0:	2d00      	cmp	r5, #0
   b9de2:	6034      	str	r4, [r6, #0]
   b9de4:	7137      	strb	r7, [r6, #4]
   b9de6:	db09      	blt.n	b9dfc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9de8:	1961      	adds	r1, r4, r5
   b9dea:	458a      	cmp	sl, r1
   b9dec:	bf0c      	ite	eq
   b9dee:	2106      	moveq	r1, #6
   b9df0:	2101      	movne	r1, #1
   b9df2:	71b1      	strb	r1, [r6, #6]
   b9df4:	2000      	movs	r0, #0
   b9df6:	b001      	add	sp, #4
   b9df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9dfc:	3502      	adds	r5, #2
   b9dfe:	d1f9      	bne.n	b9df4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9e00:	2301      	movs	r3, #1
   b9e02:	71b3      	strb	r3, [r6, #6]
   b9e04:	e7f6      	b.n	b9df4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9e06:	4554      	cmp	r4, sl
   b9e08:	d106      	bne.n	b9e18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9e0a:	4659      	mov	r1, fp
   b9e0c:	4648      	mov	r0, r9
   b9e0e:	f000 f82b 	bl	b9e68 <_ZNKSt9type_infoeqERKS_>
   b9e12:	b108      	cbz	r0, b9e18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9e14:	7177      	strb	r7, [r6, #5]
   b9e16:	e7ed      	b.n	b9df4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9e18:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9e1c:	6803      	ldr	r3, [r0, #0]
   b9e1e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9e22:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9e26:	69dc      	ldr	r4, [r3, #28]
   b9e28:	463a      	mov	r2, r7
   b9e2a:	4643      	mov	r3, r8
   b9e2c:	4629      	mov	r1, r5
   b9e2e:	46a4      	mov	ip, r4
   b9e30:	b001      	add	sp, #4
   b9e32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9e36:	4760      	bx	ip

000b9e38 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9e3c:	4607      	mov	r7, r0
   b9e3e:	460c      	mov	r4, r1
   b9e40:	4615      	mov	r5, r2
   b9e42:	461e      	mov	r6, r3
   b9e44:	f7ff ff6d 	bl	b9d22 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9e48:	b948      	cbnz	r0, b9e5e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b9e4a:	68b8      	ldr	r0, [r7, #8]
   b9e4c:	6803      	ldr	r3, [r0, #0]
   b9e4e:	699f      	ldr	r7, [r3, #24]
   b9e50:	462a      	mov	r2, r5
   b9e52:	4633      	mov	r3, r6
   b9e54:	4621      	mov	r1, r4
   b9e56:	46bc      	mov	ip, r7
   b9e58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9e5c:	4760      	bx	ip
   b9e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9e62 <_ZNSt9type_infoD1Ev>:
   b9e62:	4770      	bx	lr

000b9e64 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9e64:	2000      	movs	r0, #0
   b9e66:	4770      	bx	lr

000b9e68 <_ZNKSt9type_infoeqERKS_>:
   b9e68:	4281      	cmp	r1, r0
   b9e6a:	b508      	push	{r3, lr}
   b9e6c:	d00e      	beq.n	b9e8c <_ZNKSt9type_infoeqERKS_+0x24>
   b9e6e:	6840      	ldr	r0, [r0, #4]
   b9e70:	7803      	ldrb	r3, [r0, #0]
   b9e72:	2b2a      	cmp	r3, #42	; 0x2a
   b9e74:	d00c      	beq.n	b9e90 <_ZNKSt9type_infoeqERKS_+0x28>
   b9e76:	6849      	ldr	r1, [r1, #4]
   b9e78:	780b      	ldrb	r3, [r1, #0]
   b9e7a:	2b2a      	cmp	r3, #42	; 0x2a
   b9e7c:	bf08      	it	eq
   b9e7e:	3101      	addeq	r1, #1
   b9e80:	f7fa fdd0 	bl	b4a24 <strcmp>
   b9e84:	fab0 f080 	clz	r0, r0
   b9e88:	0940      	lsrs	r0, r0, #5
   b9e8a:	bd08      	pop	{r3, pc}
   b9e8c:	2001      	movs	r0, #1
   b9e8e:	e7fc      	b.n	b9e8a <_ZNKSt9type_infoeqERKS_+0x22>
   b9e90:	2000      	movs	r0, #0
   b9e92:	e7fa      	b.n	b9e8a <_ZNKSt9type_infoeqERKS_+0x22>

000b9e94 <atexit>:
   b9e94:	2300      	movs	r3, #0
   b9e96:	4601      	mov	r1, r0
   b9e98:	461a      	mov	r2, r3
   b9e9a:	4618      	mov	r0, r3
   b9e9c:	f000 b956 	b.w	ba14c <__register_exitproc>

000b9ea0 <isprint>:
   b9ea0:	4b02      	ldr	r3, [pc, #8]	; (b9eac <isprint+0xc>)
   b9ea2:	4418      	add	r0, r3
   b9ea4:	7840      	ldrb	r0, [r0, #1]
   b9ea6:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b9eaa:	4770      	bx	lr
   b9eac:	000ba951 	.word	0x000ba951

000b9eb0 <memcmp>:
   b9eb0:	b510      	push	{r4, lr}
   b9eb2:	3901      	subs	r1, #1
   b9eb4:	4402      	add	r2, r0
   b9eb6:	4290      	cmp	r0, r2
   b9eb8:	d101      	bne.n	b9ebe <memcmp+0xe>
   b9eba:	2000      	movs	r0, #0
   b9ebc:	e005      	b.n	b9eca <memcmp+0x1a>
   b9ebe:	7803      	ldrb	r3, [r0, #0]
   b9ec0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9ec4:	42a3      	cmp	r3, r4
   b9ec6:	d001      	beq.n	b9ecc <memcmp+0x1c>
   b9ec8:	1b18      	subs	r0, r3, r4
   b9eca:	bd10      	pop	{r4, pc}
   b9ecc:	3001      	adds	r0, #1
   b9ece:	e7f2      	b.n	b9eb6 <memcmp+0x6>

000b9ed0 <memcpy>:
   b9ed0:	440a      	add	r2, r1
   b9ed2:	4291      	cmp	r1, r2
   b9ed4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9ed8:	d100      	bne.n	b9edc <memcpy+0xc>
   b9eda:	4770      	bx	lr
   b9edc:	b510      	push	{r4, lr}
   b9ede:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9ee6:	4291      	cmp	r1, r2
   b9ee8:	d1f9      	bne.n	b9ede <memcpy+0xe>
   b9eea:	bd10      	pop	{r4, pc}

000b9eec <memmove>:
   b9eec:	4288      	cmp	r0, r1
   b9eee:	b510      	push	{r4, lr}
   b9ef0:	eb01 0402 	add.w	r4, r1, r2
   b9ef4:	d902      	bls.n	b9efc <memmove+0x10>
   b9ef6:	4284      	cmp	r4, r0
   b9ef8:	4623      	mov	r3, r4
   b9efa:	d807      	bhi.n	b9f0c <memmove+0x20>
   b9efc:	1e43      	subs	r3, r0, #1
   b9efe:	42a1      	cmp	r1, r4
   b9f00:	d008      	beq.n	b9f14 <memmove+0x28>
   b9f02:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9f06:	f803 2f01 	strb.w	r2, [r3, #1]!
   b9f0a:	e7f8      	b.n	b9efe <memmove+0x12>
   b9f0c:	4402      	add	r2, r0
   b9f0e:	4601      	mov	r1, r0
   b9f10:	428a      	cmp	r2, r1
   b9f12:	d100      	bne.n	b9f16 <memmove+0x2a>
   b9f14:	bd10      	pop	{r4, pc}
   b9f16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b9f1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9f1e:	e7f7      	b.n	b9f10 <memmove+0x24>

000b9f20 <memset>:
   b9f20:	4402      	add	r2, r0
   b9f22:	4603      	mov	r3, r0
   b9f24:	4293      	cmp	r3, r2
   b9f26:	d100      	bne.n	b9f2a <memset+0xa>
   b9f28:	4770      	bx	lr
   b9f2a:	f803 1b01 	strb.w	r1, [r3], #1
   b9f2e:	e7f9      	b.n	b9f24 <memset+0x4>

000b9f30 <srand>:
   b9f30:	b538      	push	{r3, r4, r5, lr}
   b9f32:	4b10      	ldr	r3, [pc, #64]	; (b9f74 <srand+0x44>)
   b9f34:	681d      	ldr	r5, [r3, #0]
   b9f36:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9f38:	4604      	mov	r4, r0
   b9f3a:	b9b3      	cbnz	r3, b9f6a <srand+0x3a>
   b9f3c:	2018      	movs	r0, #24
   b9f3e:	f7fb faa7 	bl	b5490 <malloc>
   b9f42:	4602      	mov	r2, r0
   b9f44:	63a8      	str	r0, [r5, #56]	; 0x38
   b9f46:	b920      	cbnz	r0, b9f52 <srand+0x22>
   b9f48:	4b0b      	ldr	r3, [pc, #44]	; (b9f78 <srand+0x48>)
   b9f4a:	480c      	ldr	r0, [pc, #48]	; (b9f7c <srand+0x4c>)
   b9f4c:	2142      	movs	r1, #66	; 0x42
   b9f4e:	f7fb facf 	bl	b54f0 <__assert_func>
   b9f52:	490b      	ldr	r1, [pc, #44]	; (b9f80 <srand+0x50>)
   b9f54:	4b0b      	ldr	r3, [pc, #44]	; (b9f84 <srand+0x54>)
   b9f56:	e9c0 1300 	strd	r1, r3, [r0]
   b9f5a:	4b0b      	ldr	r3, [pc, #44]	; (b9f88 <srand+0x58>)
   b9f5c:	6083      	str	r3, [r0, #8]
   b9f5e:	230b      	movs	r3, #11
   b9f60:	8183      	strh	r3, [r0, #12]
   b9f62:	2100      	movs	r1, #0
   b9f64:	2001      	movs	r0, #1
   b9f66:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9f6a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9f6c:	2200      	movs	r2, #0
   b9f6e:	611c      	str	r4, [r3, #16]
   b9f70:	615a      	str	r2, [r3, #20]
   b9f72:	bd38      	pop	{r3, r4, r5, pc}
   b9f74:	2003e53c 	.word	0x2003e53c
   b9f78:	000ba8e1 	.word	0x000ba8e1
   b9f7c:	000ba8f8 	.word	0x000ba8f8
   b9f80:	abcd330e 	.word	0xabcd330e
   b9f84:	e66d1234 	.word	0xe66d1234
   b9f88:	0005deec 	.word	0x0005deec

000b9f8c <strchr>:
   b9f8c:	b2c9      	uxtb	r1, r1
   b9f8e:	4603      	mov	r3, r0
   b9f90:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9f94:	b11a      	cbz	r2, b9f9e <strchr+0x12>
   b9f96:	428a      	cmp	r2, r1
   b9f98:	d1f9      	bne.n	b9f8e <strchr+0x2>
   b9f9a:	4618      	mov	r0, r3
   b9f9c:	4770      	bx	lr
   b9f9e:	2900      	cmp	r1, #0
   b9fa0:	bf18      	it	ne
   b9fa2:	2300      	movne	r3, #0
   b9fa4:	e7f9      	b.n	b9f9a <strchr+0xe>

000b9fa6 <strchrnul>:
   b9fa6:	b510      	push	{r4, lr}
   b9fa8:	4604      	mov	r4, r0
   b9faa:	f7ff ffef 	bl	b9f8c <strchr>
   b9fae:	b918      	cbnz	r0, b9fb8 <strchrnul+0x12>
   b9fb0:	4620      	mov	r0, r4
   b9fb2:	f7fa fd41 	bl	b4a38 <strlen>
   b9fb6:	4420      	add	r0, r4
   b9fb8:	bd10      	pop	{r4, pc}

000b9fba <strcpy>:
   b9fba:	4603      	mov	r3, r0
   b9fbc:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9fc0:	f803 2b01 	strb.w	r2, [r3], #1
   b9fc4:	2a00      	cmp	r2, #0
   b9fc6:	d1f9      	bne.n	b9fbc <strcpy+0x2>
   b9fc8:	4770      	bx	lr

000b9fca <strncmp>:
   b9fca:	b510      	push	{r4, lr}
   b9fcc:	b17a      	cbz	r2, b9fee <strncmp+0x24>
   b9fce:	4603      	mov	r3, r0
   b9fd0:	3901      	subs	r1, #1
   b9fd2:	1884      	adds	r4, r0, r2
   b9fd4:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9fd8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b9fdc:	4290      	cmp	r0, r2
   b9fde:	d101      	bne.n	b9fe4 <strncmp+0x1a>
   b9fe0:	42a3      	cmp	r3, r4
   b9fe2:	d101      	bne.n	b9fe8 <strncmp+0x1e>
   b9fe4:	1a80      	subs	r0, r0, r2
   b9fe6:	bd10      	pop	{r4, pc}
   b9fe8:	2800      	cmp	r0, #0
   b9fea:	d1f3      	bne.n	b9fd4 <strncmp+0xa>
   b9fec:	e7fa      	b.n	b9fe4 <strncmp+0x1a>
   b9fee:	4610      	mov	r0, r2
   b9ff0:	e7f9      	b.n	b9fe6 <strncmp+0x1c>

000b9ff2 <strnlen>:
   b9ff2:	b510      	push	{r4, lr}
   b9ff4:	4602      	mov	r2, r0
   b9ff6:	4401      	add	r1, r0
   b9ff8:	428a      	cmp	r2, r1
   b9ffa:	4613      	mov	r3, r2
   b9ffc:	d003      	beq.n	ba006 <strnlen+0x14>
   b9ffe:	781c      	ldrb	r4, [r3, #0]
   ba000:	3201      	adds	r2, #1
   ba002:	2c00      	cmp	r4, #0
   ba004:	d1f8      	bne.n	b9ff8 <strnlen+0x6>
   ba006:	1a18      	subs	r0, r3, r0
   ba008:	bd10      	pop	{r4, pc}

000ba00a <strrchr>:
   ba00a:	b538      	push	{r3, r4, r5, lr}
   ba00c:	4603      	mov	r3, r0
   ba00e:	460c      	mov	r4, r1
   ba010:	b969      	cbnz	r1, ba02e <strrchr+0x24>
   ba012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ba016:	f7ff bfb9 	b.w	b9f8c <strchr>
   ba01a:	1c43      	adds	r3, r0, #1
   ba01c:	4605      	mov	r5, r0
   ba01e:	4621      	mov	r1, r4
   ba020:	4618      	mov	r0, r3
   ba022:	f7ff ffb3 	bl	b9f8c <strchr>
   ba026:	2800      	cmp	r0, #0
   ba028:	d1f7      	bne.n	ba01a <strrchr+0x10>
   ba02a:	4628      	mov	r0, r5
   ba02c:	bd38      	pop	{r3, r4, r5, pc}
   ba02e:	2500      	movs	r5, #0
   ba030:	e7f5      	b.n	ba01e <strrchr+0x14>
	...

000ba034 <_strtol_l.constprop.0>:
   ba034:	2b01      	cmp	r3, #1
   ba036:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba03a:	d001      	beq.n	ba040 <_strtol_l.constprop.0+0xc>
   ba03c:	2b24      	cmp	r3, #36	; 0x24
   ba03e:	d906      	bls.n	ba04e <_strtol_l.constprop.0+0x1a>
   ba040:	f7fb fa4e 	bl	b54e0 <__errno>
   ba044:	2316      	movs	r3, #22
   ba046:	6003      	str	r3, [r0, #0]
   ba048:	2000      	movs	r0, #0
   ba04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba04e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; ba134 <_strtol_l.constprop.0+0x100>
   ba052:	460d      	mov	r5, r1
   ba054:	462e      	mov	r6, r5
   ba056:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba05a:	f814 700c 	ldrb.w	r7, [r4, ip]
   ba05e:	f017 0708 	ands.w	r7, r7, #8
   ba062:	d1f7      	bne.n	ba054 <_strtol_l.constprop.0+0x20>
   ba064:	2c2d      	cmp	r4, #45	; 0x2d
   ba066:	d132      	bne.n	ba0ce <_strtol_l.constprop.0+0x9a>
   ba068:	782c      	ldrb	r4, [r5, #0]
   ba06a:	2701      	movs	r7, #1
   ba06c:	1cb5      	adds	r5, r6, #2
   ba06e:	2b00      	cmp	r3, #0
   ba070:	d05b      	beq.n	ba12a <_strtol_l.constprop.0+0xf6>
   ba072:	2b10      	cmp	r3, #16
   ba074:	d109      	bne.n	ba08a <_strtol_l.constprop.0+0x56>
   ba076:	2c30      	cmp	r4, #48	; 0x30
   ba078:	d107      	bne.n	ba08a <_strtol_l.constprop.0+0x56>
   ba07a:	782c      	ldrb	r4, [r5, #0]
   ba07c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   ba080:	2c58      	cmp	r4, #88	; 0x58
   ba082:	d14d      	bne.n	ba120 <_strtol_l.constprop.0+0xec>
   ba084:	786c      	ldrb	r4, [r5, #1]
   ba086:	2310      	movs	r3, #16
   ba088:	3502      	adds	r5, #2
   ba08a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   ba08e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   ba092:	f04f 0c00 	mov.w	ip, #0
   ba096:	fbb8 f9f3 	udiv	r9, r8, r3
   ba09a:	4666      	mov	r6, ip
   ba09c:	fb03 8a19 	mls	sl, r3, r9, r8
   ba0a0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   ba0a4:	f1be 0f09 	cmp.w	lr, #9
   ba0a8:	d816      	bhi.n	ba0d8 <_strtol_l.constprop.0+0xa4>
   ba0aa:	4674      	mov	r4, lr
   ba0ac:	42a3      	cmp	r3, r4
   ba0ae:	dd24      	ble.n	ba0fa <_strtol_l.constprop.0+0xc6>
   ba0b0:	f1bc 0f00 	cmp.w	ip, #0
   ba0b4:	db1e      	blt.n	ba0f4 <_strtol_l.constprop.0+0xc0>
   ba0b6:	45b1      	cmp	r9, r6
   ba0b8:	d31c      	bcc.n	ba0f4 <_strtol_l.constprop.0+0xc0>
   ba0ba:	d101      	bne.n	ba0c0 <_strtol_l.constprop.0+0x8c>
   ba0bc:	45a2      	cmp	sl, r4
   ba0be:	db19      	blt.n	ba0f4 <_strtol_l.constprop.0+0xc0>
   ba0c0:	fb06 4603 	mla	r6, r6, r3, r4
   ba0c4:	f04f 0c01 	mov.w	ip, #1
   ba0c8:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba0cc:	e7e8      	b.n	ba0a0 <_strtol_l.constprop.0+0x6c>
   ba0ce:	2c2b      	cmp	r4, #43	; 0x2b
   ba0d0:	bf04      	itt	eq
   ba0d2:	782c      	ldrbeq	r4, [r5, #0]
   ba0d4:	1cb5      	addeq	r5, r6, #2
   ba0d6:	e7ca      	b.n	ba06e <_strtol_l.constprop.0+0x3a>
   ba0d8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   ba0dc:	f1be 0f19 	cmp.w	lr, #25
   ba0e0:	d801      	bhi.n	ba0e6 <_strtol_l.constprop.0+0xb2>
   ba0e2:	3c37      	subs	r4, #55	; 0x37
   ba0e4:	e7e2      	b.n	ba0ac <_strtol_l.constprop.0+0x78>
   ba0e6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   ba0ea:	f1be 0f19 	cmp.w	lr, #25
   ba0ee:	d804      	bhi.n	ba0fa <_strtol_l.constprop.0+0xc6>
   ba0f0:	3c57      	subs	r4, #87	; 0x57
   ba0f2:	e7db      	b.n	ba0ac <_strtol_l.constprop.0+0x78>
   ba0f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   ba0f8:	e7e6      	b.n	ba0c8 <_strtol_l.constprop.0+0x94>
   ba0fa:	f1bc 0f00 	cmp.w	ip, #0
   ba0fe:	da05      	bge.n	ba10c <_strtol_l.constprop.0+0xd8>
   ba100:	2322      	movs	r3, #34	; 0x22
   ba102:	6003      	str	r3, [r0, #0]
   ba104:	4646      	mov	r6, r8
   ba106:	b942      	cbnz	r2, ba11a <_strtol_l.constprop.0+0xe6>
   ba108:	4630      	mov	r0, r6
   ba10a:	e79e      	b.n	ba04a <_strtol_l.constprop.0+0x16>
   ba10c:	b107      	cbz	r7, ba110 <_strtol_l.constprop.0+0xdc>
   ba10e:	4276      	negs	r6, r6
   ba110:	2a00      	cmp	r2, #0
   ba112:	d0f9      	beq.n	ba108 <_strtol_l.constprop.0+0xd4>
   ba114:	f1bc 0f00 	cmp.w	ip, #0
   ba118:	d000      	beq.n	ba11c <_strtol_l.constprop.0+0xe8>
   ba11a:	1e69      	subs	r1, r5, #1
   ba11c:	6011      	str	r1, [r2, #0]
   ba11e:	e7f3      	b.n	ba108 <_strtol_l.constprop.0+0xd4>
   ba120:	2430      	movs	r4, #48	; 0x30
   ba122:	2b00      	cmp	r3, #0
   ba124:	d1b1      	bne.n	ba08a <_strtol_l.constprop.0+0x56>
   ba126:	2308      	movs	r3, #8
   ba128:	e7af      	b.n	ba08a <_strtol_l.constprop.0+0x56>
   ba12a:	2c30      	cmp	r4, #48	; 0x30
   ba12c:	d0a5      	beq.n	ba07a <_strtol_l.constprop.0+0x46>
   ba12e:	230a      	movs	r3, #10
   ba130:	e7ab      	b.n	ba08a <_strtol_l.constprop.0+0x56>
   ba132:	bf00      	nop
   ba134:	000ba952 	.word	0x000ba952

000ba138 <strtol>:
   ba138:	4613      	mov	r3, r2
   ba13a:	460a      	mov	r2, r1
   ba13c:	4601      	mov	r1, r0
   ba13e:	4802      	ldr	r0, [pc, #8]	; (ba148 <strtol+0x10>)
   ba140:	6800      	ldr	r0, [r0, #0]
   ba142:	f7ff bf77 	b.w	ba034 <_strtol_l.constprop.0>
   ba146:	bf00      	nop
   ba148:	2003e53c 	.word	0x2003e53c

000ba14c <__register_exitproc>:
   ba14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba150:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba20c <__register_exitproc+0xc0>
   ba154:	4606      	mov	r6, r0
   ba156:	f8d8 0000 	ldr.w	r0, [r8]
   ba15a:	461f      	mov	r7, r3
   ba15c:	460d      	mov	r5, r1
   ba15e:	4691      	mov	r9, r2
   ba160:	f000 f856 	bl	ba210 <__retarget_lock_acquire_recursive>
   ba164:	4b25      	ldr	r3, [pc, #148]	; (ba1fc <__register_exitproc+0xb0>)
   ba166:	681c      	ldr	r4, [r3, #0]
   ba168:	b934      	cbnz	r4, ba178 <__register_exitproc+0x2c>
   ba16a:	4c25      	ldr	r4, [pc, #148]	; (ba200 <__register_exitproc+0xb4>)
   ba16c:	601c      	str	r4, [r3, #0]
   ba16e:	4b25      	ldr	r3, [pc, #148]	; (ba204 <__register_exitproc+0xb8>)
   ba170:	b113      	cbz	r3, ba178 <__register_exitproc+0x2c>
   ba172:	681b      	ldr	r3, [r3, #0]
   ba174:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba178:	6863      	ldr	r3, [r4, #4]
   ba17a:	2b1f      	cmp	r3, #31
   ba17c:	dd07      	ble.n	ba18e <__register_exitproc+0x42>
   ba17e:	f8d8 0000 	ldr.w	r0, [r8]
   ba182:	f000 f847 	bl	ba214 <__retarget_lock_release_recursive>
   ba186:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba18e:	b34e      	cbz	r6, ba1e4 <__register_exitproc+0x98>
   ba190:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba194:	b988      	cbnz	r0, ba1ba <__register_exitproc+0x6e>
   ba196:	4b1c      	ldr	r3, [pc, #112]	; (ba208 <__register_exitproc+0xbc>)
   ba198:	b923      	cbnz	r3, ba1a4 <__register_exitproc+0x58>
   ba19a:	f8d8 0000 	ldr.w	r0, [r8]
   ba19e:	f000 f838 	bl	ba212 <__retarget_lock_release>
   ba1a2:	e7f0      	b.n	ba186 <__register_exitproc+0x3a>
   ba1a4:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba1a8:	f7fb f972 	bl	b5490 <malloc>
   ba1ac:	2800      	cmp	r0, #0
   ba1ae:	d0f4      	beq.n	ba19a <__register_exitproc+0x4e>
   ba1b0:	2300      	movs	r3, #0
   ba1b2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba1b6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba1ba:	6863      	ldr	r3, [r4, #4]
   ba1bc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba1c0:	2201      	movs	r2, #1
   ba1c2:	409a      	lsls	r2, r3
   ba1c4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba1c8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba1cc:	4313      	orrs	r3, r2
   ba1ce:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba1d2:	2e02      	cmp	r6, #2
   ba1d4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba1d8:	bf02      	ittt	eq
   ba1da:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba1de:	4313      	orreq	r3, r2
   ba1e0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba1e4:	6863      	ldr	r3, [r4, #4]
   ba1e6:	f8d8 0000 	ldr.w	r0, [r8]
   ba1ea:	1c5a      	adds	r2, r3, #1
   ba1ec:	3302      	adds	r3, #2
   ba1ee:	6062      	str	r2, [r4, #4]
   ba1f0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba1f4:	f000 f80e 	bl	ba214 <__retarget_lock_release_recursive>
   ba1f8:	2000      	movs	r0, #0
   ba1fa:	e7c6      	b.n	ba18a <__register_exitproc+0x3e>
   ba1fc:	2003e7ec 	.word	0x2003e7ec
   ba200:	2003e760 	.word	0x2003e760
   ba204:	00000000 	.word	0x00000000
   ba208:	000b5491 	.word	0x000b5491
   ba20c:	2003e5a0 	.word	0x2003e5a0

000ba210 <__retarget_lock_acquire_recursive>:
   ba210:	4770      	bx	lr

000ba212 <__retarget_lock_release>:
   ba212:	4770      	bx	lr

000ba214 <__retarget_lock_release_recursive>:
   ba214:	4770      	bx	lr

000ba216 <link_code_end>:
	...

000ba218 <link_const_data_start>:
   ba218:	00000000 	.word	0x00000000
   ba21c:	34fb0000 	.word	0x34fb0000
   ba220:	00805f9b 	.word	0x00805f9b
   ba224:	10008000 	.word	0x10008000
	...

000ba230 <dynalib_user>:
   ba230:	000b4a49 000b4a85 000b4aad 000b4ab1     IJ...J...J...J..
   ba240:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   ba250:	72697620 6c617574 63655200 65766965      virtual.Receive
   ba260:	65542064 203a706d 74616200 79726574     d Temp: .battery
   ba270:	6c6f765f 65676174 454e4b00 25004c4c     _voltage.KNELL.%
   ba280:	65642064 65636976 6f662073 00646e75     d devices found.
   ba290:	72646461 20737365 6e756f66 43002e64     address found..C
   ba2a0:	454e4e4f 44455443 3846002e 3a32413a     ONNECTED..F8:A2:
   ba2b0:	453a3945 34303a46 0035363a              E9:EF:04:65.

000ba2bc <_ZTVN5spark10LogHandlerE>:
	...
   ba2cc:	000b4acd 000b4af5                       .J...J..

000ba2d4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   ba2dc:	000b4b4d 000b4b81 000b8ec9 000b906d     MK...K......m...

000ba2ec <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   ba2f4:	65737341 6f697472 6961466e 6572756c     AssertionFailure
   ba304:	6c616620 77006573 6e697269 6c622e67      false.wiring.bl
   ba314:	74530065 20747261 63736964 7265766f     e.Start discover
   ba324:	20676e69 76726573 73656369 7341002e     ing services..As
   ba334:	74726573 466e6f69 756c6961 68206572     sertionFailure h
   ba344:	625f6c61 735f656c 6b636174 696e695f     al_ble_stack_ini
   ba354:	756e2874 74706c6c 3d202972 5953203d     t(nullptr) == SY
   ba364:	4d455453 5252455f 4e5f524f 00454e4f     STEM_ERROR_NONE.
   ba374:	72656550 76656420 20656369 6d207369     Peer device is m
   ba384:	69737369 0021676e 6c696146 74206465     issing!.Failed t
   ba394:	6c61206f 61636f6c 6d206574 726f6d65     o allocate memor
   ba3a4:	46002179 656c6961 6f742064 70706120     y!.Failed to app
   ba3b4:	20646e65 72656570 6e654320 6c617274     end peer Central
   ba3c4:	76656420 2e656369 6e6f4300 7463656e      device..Connect
   ba3d4:	44006465 6f637369 63656e6e 00646574     ed.Disconnected.
   ba3e4:	6c696146 74206465 7061206f 646e6570     Failed to append
   ba3f4:	73696420 65766f63 20646572 76726573      discovered serv
   ba404:	2e656369 61745300 64207472 6f637369     ice..Start disco
   ba414:	69726576 6320676e 61726168 72657463     vering character
   ba424:	69747369 6f207363 65732066 63697672     istics of servic
   ba434:	25203a65 43002e73 6f6e6e61 64612074     e: %s..Cannot ad
   ba444:	656e2064 65702077 64207265 63697665     d new peer devic
   ba454:	4e002e65 70207765 70697265 61726568     e..New periphera
   ba464:	7369206c 6e6f6320 7463656e 002e6465     l is connected..
   ba474:	72616843 65746361 74736972 64206369     Characteristic d
   ba484:	6f637369 65726576 44002e64 6f637369     iscovered..Disco
   ba494:	65726576 68632064 63617261 69726574     vered characteri
   ba4a4:	63697473 68207327 6c646e61 73692065     stic's handle is
   ba4b4:	766e6920 64696c61 6146002e 64656c69      invalid..Failed
   ba4c4:	206f7420 65707061 6420646e 6f637369      to append disco
   ba4d4:	65726576 68632064 63617261 69726574     vered characteri
   ba4e4:	63697473 0000002e                       stic....

000ba4ec <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba4f4:	000b5517 000b5579 000b5701 000b55a3     .U..yU...W...U..
   ba504:	000b5519                                .U..

000ba508 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba510:	000b5513 000b5587 000b5515 000b55a9     .U...U...U...U..
   ba520:	000b5539                                9U..

000ba524 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba52c:	000b5511 000b5595 000b6155 000b55af     .U...U..Ua...U..
   ba53c:	000b5559                                YU..

000ba540 <_ZTVN5spark13CellularClassE>:
	...
   ba548:	000b7ad3 000b7ac9 000b7abf 000b7a75     .z...z...z..uz..
   ba558:	000b7ab3 000b7aa7 000b9259 000b9261     .z...z..Y...a...
   ba568:	000b7a9b 000b7a93 000b7a89 000b7a7f     .z...z...z...z..
   ba578:	000b9291                                ....

000ba57c <_ZTV14CellularSignal>:
	...
   ba584:	000b7b61 000b7bc5 000b7b63 000b7bd5     a{...{..c{...{..
   ba594:	000b7c09 000b7c35 000b7c69 000b7b89     .|..5|..i|...{..
   ba5a4:	000b7b67 000b7b83 fffffffc 00000000     g{...{..........
   ba5b4:	000b7bbd                                .{..

000ba5b8 <_ZTVN5spark13EthernetClassE>:
	...
   ba5c0:	000b7d0b 000b7d01 000b7cf7 000b7ced     .}...}...|...|..
   ba5d0:	000b7ce1 000b7cd5 000b9259 000b9261     .|...|..Y...a...
   ba5e0:	000b7cc9 000b7cc1 000b7cb7 000b7cad     .|...|...|...|..
   ba5f0:	000b9291                                ....

000ba5f4 <_ZTV7TwoWire>:
	...
   ba5fc:	000b7d5b 000b7da5 000b7d7d 000b7d5d     [}...}..}}..]}..
   ba60c:	000b7d85 000b7d8d 000b7d95 000b7d9d     .}...}...}...}..

000ba61c <_ZTV9IPAddress>:
	...
   ba624:	000b7e13 000b7e03 000b7e05 25006425     .~...~...~..%d.%
   ba634:	25750075 00783430 64756162 72655300     u.u%04x.baud.Ser
   ba644:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
   ba654:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
   ba664:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
   ba674:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
   ba684:	69250020 74656400 736c6961 00203d20      .%i.details = .
   ba694:	6d000a0d 006e6c00 74006e66 646f6300     ...m.ln.fn.t.cod
   ba6a4:	65640065 6c696174 00000000              e.detail....

000ba6b0 <_ZTVN5spark16JSONStreamWriterE>:
	...
   ba6b8:	000b82c1 000b82e7 000b82a5 000b7f23     ............#...

000ba6c8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   ba6d0:	000b8771 000b8789 000b8ec9 000b906d     q...........m...

000ba6e0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   ba6e8:	000b879d 000b87b1 000b90a5 000b82ad     ................

000ba6f8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   ba700:	000b82bf 000b82f5 000b8e2d 000b82af     ........-.......

000ba710 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   ba718:	000b82bd 000b8303 000b86d9 000b8325     ............%...

000ba728 <_ZTVN5spark12NetworkClassE>:
	...
   ba730:	000b9219 000b9223 000b922d 000b9237     ....#...-...7...
   ba740:	000b9241 000b924d 000b9259 000b9261     A...M...Y...a...
   ba750:	000b9269 000b9275 000b927d 000b9287     i...u...}.......
   ba760:	000b9291 006e616e 00666e69 0066766f     ....nan.inf.ovf.
   ba770:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   ba780:	007a2553 74637361 00656d69              S%z.asctime.

000ba78c <_ZTV11USARTSerial>:
	...
   ba794:	000b9861 000b98cd 000b98a5 000b937d     a...........}...
   ba7a4:	000b9875 000b9891 000b9883 000b989f     u...............
   ba7b4:	000b9863 000b9867                       c...g...

000ba7bc <_ZTV9USBSerial>:
	...
   ba7c4:	000b991f 000b9987 000b995d 000b937d     ........]...}...
   ba7d4:	000b994f 000b9921 000b9931 000b9981     O...!...1.......
   ba7e4:	000b9941 000b9919                       A.......

000ba7ec <_ZSt7nothrow>:
	...

000ba7ed <_ZTSSt19_Sp_make_shared_tag>:
   ba7ed:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   ba7fd:	5f646572 00676174                        red_tag....

000ba808 <_ZTISt19_Sp_make_shared_tag>:
   ba808:	000ba848 000ba7ed                       H.......

000ba810 <_ZTIN10__cxxabiv117__class_type_infoE>:
   ba810:	000ba8a8 000ba81c 000ba8cc              ............

000ba81c <_ZTSN10__cxxabiv117__class_type_infoE>:
   ba81c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   ba82c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   ba83c:	00000045                                E...

000ba840 <_ZTVN10__cxxabiv117__class_type_infoE>:
   ba840:	00000000 000ba810 000b9cbd 000b9cd1     ................
   ba850:	000b9e65 000b9e65 000b9d3b 000b9c7d     e...e...;...}...
   ba860:	000b9d23 000b9ce5 000b9caf              #...........

000ba86c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ba86c:	000ba8a8 000ba878 000ba810              ....x.......

000ba878 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ba878:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   ba888:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   ba898:	456f666e 00000000                       nfoE....

000ba8a0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba8a0:	00000000 000ba86c 000b9d65 000b9d79     ....l...e...y...
   ba8b0:	000b9e65 000b9e65 000b9d3b 000b9c7d     e...e...;...}...
   ba8c0:	000b9e39 000b9dc5 000b9d8d              9...........

000ba8cc <_ZTISt9type_info>:
   ba8cc:	000ba848 000ba8d4                       H.......

000ba8d4 <_ZTSSt9type_info>:
   ba8d4:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   ba8e4:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   ba8f4:	00646564 706d742f 6e656a2f 736e696b     ded./tmp/jenkins
   ba904:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   ba914:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   ba924:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   ba934:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   ba944:	696c6474 61722f62 632e646e               tdlib/rand.c.

000ba951 <_ctype_>:
   ba951:	20202000 20202020 28282020 20282828     .         ((((( 
   ba961:	20202020 20202020 20202020 20202020                     
   ba971:	10108820 10101010 10101010 10101010      ...............
   ba981:	04040410 04040404 10040404 10101010     ................
   ba991:	41411010 41414141 01010101 01010101     ..AAAAAA........
   ba9a1:	01010101 01010101 01010101 10101010     ................
   ba9b1:	42421010 42424242 02020202 02020202     ..BBBBBB........
   ba9c1:	02020202 02020202 02020202 10101010     ................
   ba9d1:	00000020 00000000 00000000 00000000      ...............
	...

000baa52 <link_const_data_end>:
	...

000baa54 <link_constructors_location>:
   baa54:	000b4eb9 	.word	0x000b4eb9
   baa58:	000b7a65 	.word	0x000b7a65
   baa5c:	000b7b31 	.word	0x000b7b31
   baa60:	000b7d15 	.word	0x000b7d15
   baa64:	000b8eb9 	.word	0x000b8eb9
   baa68:	000b9369 	.word	0x000b9369
   baa6c:	000b9629 	.word	0x000b9629
   baa70:	000b9829 	.word	0x000b9829
   baa74:	000b984d 	.word	0x000b984d
