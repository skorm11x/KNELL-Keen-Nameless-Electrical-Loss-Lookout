
/Users/christopherkosik/Documents/particle_deviceos/705-power-loss-detection/target/5.2.0/boron/705-power-loss-detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000052fc  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000b9318  000b9318  00009318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .note.gnu.build-id 00000024  000b9320  000b9320  00009320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000007c  2003e574  000b9344  0000e574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000200  2003e5f0  2003e5f0  0001e5f0  2**2
                  ALLOC
  7 .backup       00000004  2003f400  000b93c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_product 00000006  000b93c4  000b93c4  000193c4  2**0
                  ALLOC
  9 .module_info_suffix 00000024  000b93ca  000b93ca  000193ca  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .module_info_crc 00000004  000b93ee  000b93ee  000193ee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .debug_info   001371a4  00000000  00000000  000193f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000153d1  00000000  00000000  00150596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0003e610  00000000  00000000  00165967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000030f8  00000000  00000000  001a3f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000b170  00000000  00000000  001a706f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a720  00000000  00000000  001b21df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00044ed0  00000000  00000000  001ec8ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013b282  00000000  00000000  002317cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00008c8c  00000000  00000000  0036ca54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <__aeabi_drsub>:
   b401c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4020:	e002      	b.n	b4028 <__adddf3>
   b4022:	bf00      	nop

000b4024 <__aeabi_dsub>:
   b4024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b4028 <__adddf3>:
   b4028:	b530      	push	{r4, r5, lr}
   b402a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b402e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4032:	ea94 0f05 	teq	r4, r5
   b4036:	bf08      	it	eq
   b4038:	ea90 0f02 	teqeq	r0, r2
   b403c:	bf1f      	itttt	ne
   b403e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4042:	ea55 0c02 	orrsne.w	ip, r5, r2
   b4046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b404e:	f000 80e2 	beq.w	b4216 <__adddf3+0x1ee>
   b4052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b4056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405a:	bfb8      	it	lt
   b405c:	426d      	neglt	r5, r5
   b405e:	dd0c      	ble.n	b407a <__adddf3+0x52>
   b4060:	442c      	add	r4, r5
   b4062:	ea80 0202 	eor.w	r2, r0, r2
   b4066:	ea81 0303 	eor.w	r3, r1, r3
   b406a:	ea82 0000 	eor.w	r0, r2, r0
   b406e:	ea83 0101 	eor.w	r1, r3, r1
   b4072:	ea80 0202 	eor.w	r2, r0, r2
   b4076:	ea81 0303 	eor.w	r3, r1, r3
   b407a:	2d36      	cmp	r5, #54	; 0x36
   b407c:	bf88      	it	hi
   b407e:	bd30      	pophi	{r4, r5, pc}
   b4080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b408c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4090:	d002      	beq.n	b4098 <__adddf3+0x70>
   b4092:	4240      	negs	r0, r0
   b4094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b409c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a4:	d002      	beq.n	b40ac <__adddf3+0x84>
   b40a6:	4252      	negs	r2, r2
   b40a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40ac:	ea94 0f05 	teq	r4, r5
   b40b0:	f000 80a7 	beq.w	b4202 <__adddf3+0x1da>
   b40b4:	f1a4 0401 	sub.w	r4, r4, #1
   b40b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b40bc:	db0d      	blt.n	b40da <__adddf3+0xb2>
   b40be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c2:	fa22 f205 	lsr.w	r2, r2, r5
   b40c6:	1880      	adds	r0, r0, r2
   b40c8:	f141 0100 	adc.w	r1, r1, #0
   b40cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d0:	1880      	adds	r0, r0, r2
   b40d2:	fa43 f305 	asr.w	r3, r3, r5
   b40d6:	4159      	adcs	r1, r3
   b40d8:	e00e      	b.n	b40f8 <__adddf3+0xd0>
   b40da:	f1a5 0520 	sub.w	r5, r5, #32
   b40de:	f10e 0e20 	add.w	lr, lr, #32
   b40e2:	2a01      	cmp	r2, #1
   b40e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40e8:	bf28      	it	cs
   b40ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40ee:	fa43 f305 	asr.w	r3, r3, r5
   b40f2:	18c0      	adds	r0, r0, r3
   b40f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b40fc:	d507      	bpl.n	b410e <__adddf3+0xe6>
   b40fe:	f04f 0e00 	mov.w	lr, #0
   b4102:	f1dc 0c00 	rsbs	ip, ip, #0
   b4106:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410a:	eb6e 0101 	sbc.w	r1, lr, r1
   b410e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4112:	d31b      	bcc.n	b414c <__adddf3+0x124>
   b4114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b4118:	d30c      	bcc.n	b4134 <__adddf3+0x10c>
   b411a:	0849      	lsrs	r1, r1, #1
   b411c:	ea5f 0030 	movs.w	r0, r0, rrx
   b4120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4124:	f104 0401 	add.w	r4, r4, #1
   b4128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b412c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4130:	f080 809a 	bcs.w	b4268 <__adddf3+0x240>
   b4134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4138:	bf08      	it	eq
   b413a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b413e:	f150 0000 	adcs.w	r0, r0, #0
   b4142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4146:	ea41 0105 	orr.w	r1, r1, r5
   b414a:	bd30      	pop	{r4, r5, pc}
   b414c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4150:	4140      	adcs	r0, r0
   b4152:	eb41 0101 	adc.w	r1, r1, r1
   b4156:	3c01      	subs	r4, #1
   b4158:	bf28      	it	cs
   b415a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b415e:	d2e9      	bcs.n	b4134 <__adddf3+0x10c>
   b4160:	f091 0f00 	teq	r1, #0
   b4164:	bf04      	itt	eq
   b4166:	4601      	moveq	r1, r0
   b4168:	2000      	moveq	r0, #0
   b416a:	fab1 f381 	clz	r3, r1
   b416e:	bf08      	it	eq
   b4170:	3320      	addeq	r3, #32
   b4172:	f1a3 030b 	sub.w	r3, r3, #11
   b4176:	f1b3 0220 	subs.w	r2, r3, #32
   b417a:	da0c      	bge.n	b4196 <__adddf3+0x16e>
   b417c:	320c      	adds	r2, #12
   b417e:	dd08      	ble.n	b4192 <__adddf3+0x16a>
   b4180:	f102 0c14 	add.w	ip, r2, #20
   b4184:	f1c2 020c 	rsb	r2, r2, #12
   b4188:	fa01 f00c 	lsl.w	r0, r1, ip
   b418c:	fa21 f102 	lsr.w	r1, r1, r2
   b4190:	e00c      	b.n	b41ac <__adddf3+0x184>
   b4192:	f102 0214 	add.w	r2, r2, #20
   b4196:	bfd8      	it	le
   b4198:	f1c2 0c20 	rsble	ip, r2, #32
   b419c:	fa01 f102 	lsl.w	r1, r1, r2
   b41a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a4:	bfdc      	itt	le
   b41a6:	ea41 010c 	orrle.w	r1, r1, ip
   b41aa:	4090      	lslle	r0, r2
   b41ac:	1ae4      	subs	r4, r4, r3
   b41ae:	bfa2      	ittt	ge
   b41b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b4:	4329      	orrge	r1, r5
   b41b6:	bd30      	popge	{r4, r5, pc}
   b41b8:	ea6f 0404 	mvn.w	r4, r4
   b41bc:	3c1f      	subs	r4, #31
   b41be:	da1c      	bge.n	b41fa <__adddf3+0x1d2>
   b41c0:	340c      	adds	r4, #12
   b41c2:	dc0e      	bgt.n	b41e2 <__adddf3+0x1ba>
   b41c4:	f104 0414 	add.w	r4, r4, #20
   b41c8:	f1c4 0220 	rsb	r2, r4, #32
   b41cc:	fa20 f004 	lsr.w	r0, r0, r4
   b41d0:	fa01 f302 	lsl.w	r3, r1, r2
   b41d4:	ea40 0003 	orr.w	r0, r0, r3
   b41d8:	fa21 f304 	lsr.w	r3, r1, r4
   b41dc:	ea45 0103 	orr.w	r1, r5, r3
   b41e0:	bd30      	pop	{r4, r5, pc}
   b41e2:	f1c4 040c 	rsb	r4, r4, #12
   b41e6:	f1c4 0220 	rsb	r2, r4, #32
   b41ea:	fa20 f002 	lsr.w	r0, r0, r2
   b41ee:	fa01 f304 	lsl.w	r3, r1, r4
   b41f2:	ea40 0003 	orr.w	r0, r0, r3
   b41f6:	4629      	mov	r1, r5
   b41f8:	bd30      	pop	{r4, r5, pc}
   b41fa:	fa21 f004 	lsr.w	r0, r1, r4
   b41fe:	4629      	mov	r1, r5
   b4200:	bd30      	pop	{r4, r5, pc}
   b4202:	f094 0f00 	teq	r4, #0
   b4206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420a:	bf06      	itte	eq
   b420c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4210:	3401      	addeq	r4, #1
   b4212:	3d01      	subne	r5, #1
   b4214:	e74e      	b.n	b40b4 <__adddf3+0x8c>
   b4216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421a:	bf18      	it	ne
   b421c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4220:	d029      	beq.n	b4276 <__adddf3+0x24e>
   b4222:	ea94 0f05 	teq	r4, r5
   b4226:	bf08      	it	eq
   b4228:	ea90 0f02 	teqeq	r0, r2
   b422c:	d005      	beq.n	b423a <__adddf3+0x212>
   b422e:	ea54 0c00 	orrs.w	ip, r4, r0
   b4232:	bf04      	itt	eq
   b4234:	4619      	moveq	r1, r3
   b4236:	4610      	moveq	r0, r2
   b4238:	bd30      	pop	{r4, r5, pc}
   b423a:	ea91 0f03 	teq	r1, r3
   b423e:	bf1e      	ittt	ne
   b4240:	2100      	movne	r1, #0
   b4242:	2000      	movne	r0, #0
   b4244:	bd30      	popne	{r4, r5, pc}
   b4246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424a:	d105      	bne.n	b4258 <__adddf3+0x230>
   b424c:	0040      	lsls	r0, r0, #1
   b424e:	4149      	adcs	r1, r1
   b4250:	bf28      	it	cs
   b4252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b4256:	bd30      	pop	{r4, r5, pc}
   b4258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b425c:	bf3c      	itt	cc
   b425e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4262:	bd30      	popcc	{r4, r5, pc}
   b4264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4270:	f04f 0000 	mov.w	r0, #0
   b4274:	bd30      	pop	{r4, r5, pc}
   b4276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427a:	bf1a      	itte	ne
   b427c:	4619      	movne	r1, r3
   b427e:	4610      	movne	r0, r2
   b4280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4284:	bf1c      	itt	ne
   b4286:	460b      	movne	r3, r1
   b4288:	4602      	movne	r2, r0
   b428a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b428e:	bf06      	itte	eq
   b4290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4294:	ea91 0f03 	teqeq	r1, r3
   b4298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b429c:	bd30      	pop	{r4, r5, pc}
   b429e:	bf00      	nop

000b42a0 <__aeabi_ui2d>:
   b42a0:	f090 0f00 	teq	r0, #0
   b42a4:	bf04      	itt	eq
   b42a6:	2100      	moveq	r1, #0
   b42a8:	4770      	bxeq	lr
   b42aa:	b530      	push	{r4, r5, lr}
   b42ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b4:	f04f 0500 	mov.w	r5, #0
   b42b8:	f04f 0100 	mov.w	r1, #0
   b42bc:	e750      	b.n	b4160 <__adddf3+0x138>
   b42be:	bf00      	nop

000b42c0 <__aeabi_i2d>:
   b42c0:	f090 0f00 	teq	r0, #0
   b42c4:	bf04      	itt	eq
   b42c6:	2100      	moveq	r1, #0
   b42c8:	4770      	bxeq	lr
   b42ca:	b530      	push	{r4, r5, lr}
   b42cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42d8:	bf48      	it	mi
   b42da:	4240      	negmi	r0, r0
   b42dc:	f04f 0100 	mov.w	r1, #0
   b42e0:	e73e      	b.n	b4160 <__adddf3+0x138>
   b42e2:	bf00      	nop

000b42e4 <__aeabi_f2d>:
   b42e4:	0042      	lsls	r2, r0, #1
   b42e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b42ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f2:	bf1f      	itttt	ne
   b42f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b42fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4300:	4770      	bxne	lr
   b4302:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b4306:	bf08      	it	eq
   b4308:	4770      	bxeq	lr
   b430a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b430e:	bf04      	itt	eq
   b4310:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4314:	4770      	bxeq	lr
   b4316:	b530      	push	{r4, r5, lr}
   b4318:	f44f 7460 	mov.w	r4, #896	; 0x380
   b431c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4324:	e71c      	b.n	b4160 <__adddf3+0x138>
   b4326:	bf00      	nop

000b4328 <__aeabi_ul2d>:
   b4328:	ea50 0201 	orrs.w	r2, r0, r1
   b432c:	bf08      	it	eq
   b432e:	4770      	bxeq	lr
   b4330:	b530      	push	{r4, r5, lr}
   b4332:	f04f 0500 	mov.w	r5, #0
   b4336:	e00a      	b.n	b434e <__aeabi_l2d+0x16>

000b4338 <__aeabi_l2d>:
   b4338:	ea50 0201 	orrs.w	r2, r0, r1
   b433c:	bf08      	it	eq
   b433e:	4770      	bxeq	lr
   b4340:	b530      	push	{r4, r5, lr}
   b4342:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b4346:	d502      	bpl.n	b434e <__aeabi_l2d+0x16>
   b4348:	4240      	negs	r0, r0
   b434a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b434e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4352:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b4356:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435a:	f43f aed8 	beq.w	b410e <__adddf3+0xe6>
   b435e:	f04f 0203 	mov.w	r2, #3
   b4362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4366:	bf18      	it	ne
   b4368:	3203      	addne	r2, #3
   b436a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436e:	bf18      	it	ne
   b4370:	3203      	addne	r2, #3
   b4372:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b4376:	f1c2 0320 	rsb	r3, r2, #32
   b437a:	fa00 fc03 	lsl.w	ip, r0, r3
   b437e:	fa20 f002 	lsr.w	r0, r0, r2
   b4382:	fa01 fe03 	lsl.w	lr, r1, r3
   b4386:	ea40 000e 	orr.w	r0, r0, lr
   b438a:	fa21 f102 	lsr.w	r1, r1, r2
   b438e:	4414      	add	r4, r2
   b4390:	e6bd      	b.n	b410e <__adddf3+0xe6>
   b4392:	bf00      	nop

000b4394 <__aeabi_dmul>:
   b4394:	b570      	push	{r4, r5, r6, lr}
   b4396:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b439e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a2:	bf1d      	ittte	ne
   b43a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43a8:	ea94 0f0c 	teqne	r4, ip
   b43ac:	ea95 0f0c 	teqne	r5, ip
   b43b0:	f000 f8de 	bleq	b4570 <__aeabi_dmul+0x1dc>
   b43b4:	442c      	add	r4, r5
   b43b6:	ea81 0603 	eor.w	r6, r1, r3
   b43ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43c6:	bf18      	it	ne
   b43c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d4:	d038      	beq.n	b4448 <__aeabi_dmul+0xb4>
   b43d6:	fba0 ce02 	umull	ip, lr, r0, r2
   b43da:	f04f 0500 	mov.w	r5, #0
   b43de:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ea:	f04f 0600 	mov.w	r6, #0
   b43ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f2:	f09c 0f00 	teq	ip, #0
   b43f6:	bf18      	it	ne
   b43f8:	f04e 0e01 	orrne.w	lr, lr, #1
   b43fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4400:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4404:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b4408:	d204      	bcs.n	b4414 <__aeabi_dmul+0x80>
   b440a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b440e:	416d      	adcs	r5, r5
   b4410:	eb46 0606 	adc.w	r6, r6, r6
   b4414:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b4418:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b441c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4420:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4424:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b4428:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b442c:	bf88      	it	hi
   b442e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4432:	d81e      	bhi.n	b4472 <__aeabi_dmul+0xde>
   b4434:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b4438:	bf08      	it	eq
   b443a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b443e:	f150 0000 	adcs.w	r0, r0, #0
   b4442:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4446:	bd70      	pop	{r4, r5, r6, pc}
   b4448:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b444c:	ea46 0101 	orr.w	r1, r6, r1
   b4450:	ea40 0002 	orr.w	r0, r0, r2
   b4454:	ea81 0103 	eor.w	r1, r1, r3
   b4458:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b445c:	bfc2      	ittt	gt
   b445e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4462:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4466:	bd70      	popgt	{r4, r5, r6, pc}
   b4468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b446c:	f04f 0e00 	mov.w	lr, #0
   b4470:	3c01      	subs	r4, #1
   b4472:	f300 80ab 	bgt.w	b45cc <__aeabi_dmul+0x238>
   b4476:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447a:	bfde      	ittt	le
   b447c:	2000      	movle	r0, #0
   b447e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4482:	bd70      	pople	{r4, r5, r6, pc}
   b4484:	f1c4 0400 	rsb	r4, r4, #0
   b4488:	3c20      	subs	r4, #32
   b448a:	da35      	bge.n	b44f8 <__aeabi_dmul+0x164>
   b448c:	340c      	adds	r4, #12
   b448e:	dc1b      	bgt.n	b44c8 <__aeabi_dmul+0x134>
   b4490:	f104 0414 	add.w	r4, r4, #20
   b4494:	f1c4 0520 	rsb	r5, r4, #32
   b4498:	fa00 f305 	lsl.w	r3, r0, r5
   b449c:	fa20 f004 	lsr.w	r0, r0, r4
   b44a0:	fa01 f205 	lsl.w	r2, r1, r5
   b44a4:	ea40 0002 	orr.w	r0, r0, r2
   b44a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b4:	fa21 f604 	lsr.w	r6, r1, r4
   b44b8:	eb42 0106 	adc.w	r1, r2, r6
   b44bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c0:	bf08      	it	eq
   b44c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44c6:	bd70      	pop	{r4, r5, r6, pc}
   b44c8:	f1c4 040c 	rsb	r4, r4, #12
   b44cc:	f1c4 0520 	rsb	r5, r4, #32
   b44d0:	fa00 f304 	lsl.w	r3, r0, r4
   b44d4:	fa20 f005 	lsr.w	r0, r0, r5
   b44d8:	fa01 f204 	lsl.w	r2, r1, r4
   b44dc:	ea40 0002 	orr.w	r0, r0, r2
   b44e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44e8:	f141 0100 	adc.w	r1, r1, #0
   b44ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f0:	bf08      	it	eq
   b44f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44f6:	bd70      	pop	{r4, r5, r6, pc}
   b44f8:	f1c4 0520 	rsb	r5, r4, #32
   b44fc:	fa00 f205 	lsl.w	r2, r0, r5
   b4500:	ea4e 0e02 	orr.w	lr, lr, r2
   b4504:	fa20 f304 	lsr.w	r3, r0, r4
   b4508:	fa01 f205 	lsl.w	r2, r1, r5
   b450c:	ea43 0302 	orr.w	r3, r3, r2
   b4510:	fa21 f004 	lsr.w	r0, r1, r4
   b4514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4518:	fa21 f204 	lsr.w	r2, r1, r4
   b451c:	ea20 0002 	bic.w	r0, r0, r2
   b4520:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4524:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b4528:	bf08      	it	eq
   b452a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b452e:	bd70      	pop	{r4, r5, r6, pc}
   b4530:	f094 0f00 	teq	r4, #0
   b4534:	d10f      	bne.n	b4556 <__aeabi_dmul+0x1c2>
   b4536:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453a:	0040      	lsls	r0, r0, #1
   b453c:	eb41 0101 	adc.w	r1, r1, r1
   b4540:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4544:	bf08      	it	eq
   b4546:	3c01      	subeq	r4, #1
   b4548:	d0f7      	beq.n	b453a <__aeabi_dmul+0x1a6>
   b454a:	ea41 0106 	orr.w	r1, r1, r6
   b454e:	f095 0f00 	teq	r5, #0
   b4552:	bf18      	it	ne
   b4554:	4770      	bxne	lr
   b4556:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455a:	0052      	lsls	r2, r2, #1
   b455c:	eb43 0303 	adc.w	r3, r3, r3
   b4560:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4564:	bf08      	it	eq
   b4566:	3d01      	subeq	r5, #1
   b4568:	d0f7      	beq.n	b455a <__aeabi_dmul+0x1c6>
   b456a:	ea43 0306 	orr.w	r3, r3, r6
   b456e:	4770      	bx	lr
   b4570:	ea94 0f0c 	teq	r4, ip
   b4574:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b4578:	bf18      	it	ne
   b457a:	ea95 0f0c 	teqne	r5, ip
   b457e:	d00c      	beq.n	b459a <__aeabi_dmul+0x206>
   b4580:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4584:	bf18      	it	ne
   b4586:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458a:	d1d1      	bne.n	b4530 <__aeabi_dmul+0x19c>
   b458c:	ea81 0103 	eor.w	r1, r1, r3
   b4590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4594:	f04f 0000 	mov.w	r0, #0
   b4598:	bd70      	pop	{r4, r5, r6, pc}
   b459a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b459e:	bf06      	itte	eq
   b45a0:	4610      	moveq	r0, r2
   b45a2:	4619      	moveq	r1, r3
   b45a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45a8:	d019      	beq.n	b45de <__aeabi_dmul+0x24a>
   b45aa:	ea94 0f0c 	teq	r4, ip
   b45ae:	d102      	bne.n	b45b6 <__aeabi_dmul+0x222>
   b45b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b4:	d113      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45b6:	ea95 0f0c 	teq	r5, ip
   b45ba:	d105      	bne.n	b45c8 <__aeabi_dmul+0x234>
   b45bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c0:	bf1c      	itt	ne
   b45c2:	4610      	movne	r0, r2
   b45c4:	4619      	movne	r1, r3
   b45c6:	d10a      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45c8:	ea81 0103 	eor.w	r1, r1, r3
   b45cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45d8:	f04f 0000 	mov.w	r0, #0
   b45dc:	bd70      	pop	{r4, r5, r6, pc}
   b45de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45e6:	bd70      	pop	{r4, r5, r6, pc}

000b45e8 <__aeabi_ddiv>:
   b45e8:	b570      	push	{r4, r5, r6, lr}
   b45ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45f6:	bf1d      	ittte	ne
   b45f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b45fc:	ea94 0f0c 	teqne	r4, ip
   b4600:	ea95 0f0c 	teqne	r5, ip
   b4604:	f000 f8a7 	bleq	b4756 <__aeabi_ddiv+0x16e>
   b4608:	eba4 0405 	sub.w	r4, r4, r5
   b460c:	ea81 0e03 	eor.w	lr, r1, r3
   b4610:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4614:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4618:	f000 8088 	beq.w	b472c <__aeabi_ddiv+0x144>
   b461c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4620:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4624:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b4628:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b462c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4630:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4634:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b4638:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b463c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4640:	429d      	cmp	r5, r3
   b4642:	bf08      	it	eq
   b4644:	4296      	cmpeq	r6, r2
   b4646:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b464e:	d202      	bcs.n	b4656 <__aeabi_ddiv+0x6e>
   b4650:	085b      	lsrs	r3, r3, #1
   b4652:	ea4f 0232 	mov.w	r2, r2, rrx
   b4656:	1ab6      	subs	r6, r6, r2
   b4658:	eb65 0503 	sbc.w	r5, r5, r3
   b465c:	085b      	lsrs	r3, r3, #1
   b465e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4662:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b4666:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466a:	ebb6 0e02 	subs.w	lr, r6, r2
   b466e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4672:	bf22      	ittt	cs
   b4674:	1ab6      	subcs	r6, r6, r2
   b4676:	4675      	movcs	r5, lr
   b4678:	ea40 000c 	orrcs.w	r0, r0, ip
   b467c:	085b      	lsrs	r3, r3, #1
   b467e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4682:	ebb6 0e02 	subs.w	lr, r6, r2
   b4686:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468a:	bf22      	ittt	cs
   b468c:	1ab6      	subcs	r6, r6, r2
   b468e:	4675      	movcs	r5, lr
   b4690:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4694:	085b      	lsrs	r3, r3, #1
   b4696:	ea4f 0232 	mov.w	r2, r2, rrx
   b469a:	ebb6 0e02 	subs.w	lr, r6, r2
   b469e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a2:	bf22      	ittt	cs
   b46a4:	1ab6      	subcs	r6, r6, r2
   b46a6:	4675      	movcs	r5, lr
   b46a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46ac:	085b      	lsrs	r3, r3, #1
   b46ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b46b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46ba:	bf22      	ittt	cs
   b46bc:	1ab6      	subcs	r6, r6, r2
   b46be:	4675      	movcs	r5, lr
   b46c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c4:	ea55 0e06 	orrs.w	lr, r5, r6
   b46c8:	d018      	beq.n	b46fc <__aeabi_ddiv+0x114>
   b46ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46e6:	d1c0      	bne.n	b466a <__aeabi_ddiv+0x82>
   b46e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46ec:	d10b      	bne.n	b4706 <__aeabi_ddiv+0x11e>
   b46ee:	ea41 0100 	orr.w	r1, r1, r0
   b46f2:	f04f 0000 	mov.w	r0, #0
   b46f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fa:	e7b6      	b.n	b466a <__aeabi_ddiv+0x82>
   b46fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4700:	bf04      	itt	eq
   b4702:	4301      	orreq	r1, r0
   b4704:	2000      	moveq	r0, #0
   b4706:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470a:	bf88      	it	hi
   b470c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4710:	f63f aeaf 	bhi.w	b4472 <__aeabi_dmul+0xde>
   b4714:	ebb5 0c03 	subs.w	ip, r5, r3
   b4718:	bf04      	itt	eq
   b471a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b471e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4722:	f150 0000 	adcs.w	r0, r0, #0
   b4726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472a:	bd70      	pop	{r4, r5, r6, pc}
   b472c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4730:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4734:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b4738:	bfc2      	ittt	gt
   b473a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b473e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4742:	bd70      	popgt	{r4, r5, r6, pc}
   b4744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4748:	f04f 0e00 	mov.w	lr, #0
   b474c:	3c01      	subs	r4, #1
   b474e:	e690      	b.n	b4472 <__aeabi_dmul+0xde>
   b4750:	ea45 0e06 	orr.w	lr, r5, r6
   b4754:	e68d      	b.n	b4472 <__aeabi_dmul+0xde>
   b4756:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475a:	ea94 0f0c 	teq	r4, ip
   b475e:	bf08      	it	eq
   b4760:	ea95 0f0c 	teqeq	r5, ip
   b4764:	f43f af3b 	beq.w	b45de <__aeabi_dmul+0x24a>
   b4768:	ea94 0f0c 	teq	r4, ip
   b476c:	d10a      	bne.n	b4784 <__aeabi_ddiv+0x19c>
   b476e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4772:	f47f af34 	bne.w	b45de <__aeabi_dmul+0x24a>
   b4776:	ea95 0f0c 	teq	r5, ip
   b477a:	f47f af25 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b477e:	4610      	mov	r0, r2
   b4780:	4619      	mov	r1, r3
   b4782:	e72c      	b.n	b45de <__aeabi_dmul+0x24a>
   b4784:	ea95 0f0c 	teq	r5, ip
   b4788:	d106      	bne.n	b4798 <__aeabi_ddiv+0x1b0>
   b478a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b478e:	f43f aefd 	beq.w	b458c <__aeabi_dmul+0x1f8>
   b4792:	4610      	mov	r0, r2
   b4794:	4619      	mov	r1, r3
   b4796:	e722      	b.n	b45de <__aeabi_dmul+0x24a>
   b4798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b479c:	bf18      	it	ne
   b479e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a2:	f47f aec5 	bne.w	b4530 <__aeabi_dmul+0x19c>
   b47a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47aa:	f47f af0d 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b47ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b2:	f47f aeeb 	bne.w	b458c <__aeabi_dmul+0x1f8>
   b47b6:	e712      	b.n	b45de <__aeabi_dmul+0x24a>

000b47b8 <__gedf2>:
   b47b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47bc:	e006      	b.n	b47cc <__cmpdf2+0x4>
   b47be:	bf00      	nop

000b47c0 <__ledf2>:
   b47c0:	f04f 0c01 	mov.w	ip, #1
   b47c4:	e002      	b.n	b47cc <__cmpdf2+0x4>
   b47c6:	bf00      	nop

000b47c8 <__cmpdf2>:
   b47c8:	f04f 0c01 	mov.w	ip, #1
   b47cc:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47dc:	bf18      	it	ne
   b47de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e2:	d01b      	beq.n	b481c <__cmpdf2+0x54>
   b47e4:	b001      	add	sp, #4
   b47e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ea:	bf0c      	ite	eq
   b47ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f0:	ea91 0f03 	teqne	r1, r3
   b47f4:	bf02      	ittt	eq
   b47f6:	ea90 0f02 	teqeq	r0, r2
   b47fa:	2000      	moveq	r0, #0
   b47fc:	4770      	bxeq	lr
   b47fe:	f110 0f00 	cmn.w	r0, #0
   b4802:	ea91 0f03 	teq	r1, r3
   b4806:	bf58      	it	pl
   b4808:	4299      	cmppl	r1, r3
   b480a:	bf08      	it	eq
   b480c:	4290      	cmpeq	r0, r2
   b480e:	bf2c      	ite	cs
   b4810:	17d8      	asrcs	r0, r3, #31
   b4812:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b4816:	f040 0001 	orr.w	r0, r0, #1
   b481a:	4770      	bx	lr
   b481c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4824:	d102      	bne.n	b482c <__cmpdf2+0x64>
   b4826:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482a:	d107      	bne.n	b483c <__cmpdf2+0x74>
   b482c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4834:	d1d6      	bne.n	b47e4 <__cmpdf2+0x1c>
   b4836:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483a:	d0d3      	beq.n	b47e4 <__cmpdf2+0x1c>
   b483c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4840:	4770      	bx	lr
   b4842:	bf00      	nop

000b4844 <__aeabi_cdrcmple>:
   b4844:	4684      	mov	ip, r0
   b4846:	4610      	mov	r0, r2
   b4848:	4662      	mov	r2, ip
   b484a:	468c      	mov	ip, r1
   b484c:	4619      	mov	r1, r3
   b484e:	4663      	mov	r3, ip
   b4850:	e000      	b.n	b4854 <__aeabi_cdcmpeq>
   b4852:	bf00      	nop

000b4854 <__aeabi_cdcmpeq>:
   b4854:	b501      	push	{r0, lr}
   b4856:	f7ff ffb7 	bl	b47c8 <__cmpdf2>
   b485a:	2800      	cmp	r0, #0
   b485c:	bf48      	it	mi
   b485e:	f110 0f00 	cmnmi.w	r0, #0
   b4862:	bd01      	pop	{r0, pc}

000b4864 <__aeabi_dcmpeq>:
   b4864:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4868:	f7ff fff4 	bl	b4854 <__aeabi_cdcmpeq>
   b486c:	bf0c      	ite	eq
   b486e:	2001      	moveq	r0, #1
   b4870:	2000      	movne	r0, #0
   b4872:	f85d fb08 	ldr.w	pc, [sp], #8
   b4876:	bf00      	nop

000b4878 <__aeabi_dcmplt>:
   b4878:	f84d ed08 	str.w	lr, [sp, #-8]!
   b487c:	f7ff ffea 	bl	b4854 <__aeabi_cdcmpeq>
   b4880:	bf34      	ite	cc
   b4882:	2001      	movcc	r0, #1
   b4884:	2000      	movcs	r0, #0
   b4886:	f85d fb08 	ldr.w	pc, [sp], #8
   b488a:	bf00      	nop

000b488c <__aeabi_dcmple>:
   b488c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4890:	f7ff ffe0 	bl	b4854 <__aeabi_cdcmpeq>
   b4894:	bf94      	ite	ls
   b4896:	2001      	movls	r0, #1
   b4898:	2000      	movhi	r0, #0
   b489a:	f85d fb08 	ldr.w	pc, [sp], #8
   b489e:	bf00      	nop

000b48a0 <__aeabi_dcmpge>:
   b48a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a4:	f7ff ffce 	bl	b4844 <__aeabi_cdrcmple>
   b48a8:	bf94      	ite	ls
   b48aa:	2001      	movls	r0, #1
   b48ac:	2000      	movhi	r0, #0
   b48ae:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b2:	bf00      	nop

000b48b4 <__aeabi_dcmpgt>:
   b48b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48b8:	f7ff ffc4 	bl	b4844 <__aeabi_cdrcmple>
   b48bc:	bf34      	ite	cc
   b48be:	2001      	movcc	r0, #1
   b48c0:	2000      	movcs	r0, #0
   b48c2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48c6:	bf00      	nop

000b48c8 <__aeabi_dcmpun>:
   b48c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d0:	d102      	bne.n	b48d8 <__aeabi_dcmpun+0x10>
   b48d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48d6:	d10a      	bne.n	b48ee <__aeabi_dcmpun+0x26>
   b48d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e0:	d102      	bne.n	b48e8 <__aeabi_dcmpun+0x20>
   b48e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48e6:	d102      	bne.n	b48ee <__aeabi_dcmpun+0x26>
   b48e8:	f04f 0000 	mov.w	r0, #0
   b48ec:	4770      	bx	lr
   b48ee:	f04f 0001 	mov.w	r0, #1
   b48f2:	4770      	bx	lr

000b48f4 <__aeabi_d2iz>:
   b48f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48fc:	d215      	bcs.n	b492a <__aeabi_d2iz+0x36>
   b48fe:	d511      	bpl.n	b4924 <__aeabi_d2iz+0x30>
   b4900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4908:	d912      	bls.n	b4930 <__aeabi_d2iz+0x3c>
   b490a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b490e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b4916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491a:	fa23 f002 	lsr.w	r0, r3, r2
   b491e:	bf18      	it	ne
   b4920:	4240      	negne	r0, r0
   b4922:	4770      	bx	lr
   b4924:	f04f 0000 	mov.w	r0, #0
   b4928:	4770      	bx	lr
   b492a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b492e:	d105      	bne.n	b493c <__aeabi_d2iz+0x48>
   b4930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4934:	bf08      	it	eq
   b4936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493a:	4770      	bx	lr
   b493c:	f04f 0000 	mov.w	r0, #0
   b4940:	4770      	bx	lr
   b4942:	bf00      	nop

000b4944 <__aeabi_d2uiz>:
   b4944:	004a      	lsls	r2, r1, #1
   b4946:	d211      	bcs.n	b496c <__aeabi_d2uiz+0x28>
   b4948:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b494c:	d211      	bcs.n	b4972 <__aeabi_d2uiz+0x2e>
   b494e:	d50d      	bpl.n	b496c <__aeabi_d2uiz+0x28>
   b4950:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4958:	d40e      	bmi.n	b4978 <__aeabi_d2uiz+0x34>
   b495a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b495e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b4966:	fa23 f002 	lsr.w	r0, r3, r2
   b496a:	4770      	bx	lr
   b496c:	f04f 0000 	mov.w	r0, #0
   b4970:	4770      	bx	lr
   b4972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4976:	d102      	bne.n	b497e <__aeabi_d2uiz+0x3a>
   b4978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b497c:	4770      	bx	lr
   b497e:	f04f 0000 	mov.w	r0, #0
   b4982:	4770      	bx	lr

000b4984 <__aeabi_uldivmod>:
   b4984:	b953      	cbnz	r3, b499c <__aeabi_uldivmod+0x18>
   b4986:	b94a      	cbnz	r2, b499c <__aeabi_uldivmod+0x18>
   b4988:	2900      	cmp	r1, #0
   b498a:	bf08      	it	eq
   b498c:	2800      	cmpeq	r0, #0
   b498e:	bf1c      	itt	ne
   b4990:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b4994:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b4998:	f000 b992 	b.w	b4cc0 <__aeabi_idiv0>
   b499c:	f1ad 0c08 	sub.w	ip, sp, #8
   b49a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b49a4:	f000 f824 	bl	b49f0 <__udivmoddi4>
   b49a8:	f8dd e004 	ldr.w	lr, [sp, #4]
   b49ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b49b0:	b004      	add	sp, #16
   b49b2:	4770      	bx	lr

000b49b4 <__aeabi_d2ulz>:
   b49b4:	b5d0      	push	{r4, r6, r7, lr}
   b49b6:	4b0c      	ldr	r3, [pc, #48]	; (b49e8 <__aeabi_d2ulz+0x34>)
   b49b8:	2200      	movs	r2, #0
   b49ba:	4606      	mov	r6, r0
   b49bc:	460f      	mov	r7, r1
   b49be:	f7ff fce9 	bl	b4394 <__aeabi_dmul>
   b49c2:	f7ff ffbf 	bl	b4944 <__aeabi_d2uiz>
   b49c6:	4604      	mov	r4, r0
   b49c8:	f7ff fc6a 	bl	b42a0 <__aeabi_ui2d>
   b49cc:	4b07      	ldr	r3, [pc, #28]	; (b49ec <__aeabi_d2ulz+0x38>)
   b49ce:	2200      	movs	r2, #0
   b49d0:	f7ff fce0 	bl	b4394 <__aeabi_dmul>
   b49d4:	4602      	mov	r2, r0
   b49d6:	460b      	mov	r3, r1
   b49d8:	4630      	mov	r0, r6
   b49da:	4639      	mov	r1, r7
   b49dc:	f7ff fb22 	bl	b4024 <__aeabi_dsub>
   b49e0:	f7ff ffb0 	bl	b4944 <__aeabi_d2uiz>
   b49e4:	4621      	mov	r1, r4
   b49e6:	bdd0      	pop	{r4, r6, r7, pc}
   b49e8:	3df00000 	.word	0x3df00000
   b49ec:	41f00000 	.word	0x41f00000

000b49f0 <__udivmoddi4>:
   b49f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b49f4:	9d08      	ldr	r5, [sp, #32]
   b49f6:	4604      	mov	r4, r0
   b49f8:	468e      	mov	lr, r1
   b49fa:	2b00      	cmp	r3, #0
   b49fc:	d14d      	bne.n	b4a9a <__udivmoddi4+0xaa>
   b49fe:	428a      	cmp	r2, r1
   b4a00:	4694      	mov	ip, r2
   b4a02:	d969      	bls.n	b4ad8 <__udivmoddi4+0xe8>
   b4a04:	fab2 f282 	clz	r2, r2
   b4a08:	b152      	cbz	r2, b4a20 <__udivmoddi4+0x30>
   b4a0a:	fa01 f302 	lsl.w	r3, r1, r2
   b4a0e:	f1c2 0120 	rsb	r1, r2, #32
   b4a12:	fa20 f101 	lsr.w	r1, r0, r1
   b4a16:	fa0c fc02 	lsl.w	ip, ip, r2
   b4a1a:	ea41 0e03 	orr.w	lr, r1, r3
   b4a1e:	4094      	lsls	r4, r2
   b4a20:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b4a24:	0c21      	lsrs	r1, r4, #16
   b4a26:	fbbe f6f8 	udiv	r6, lr, r8
   b4a2a:	fa1f f78c 	uxth.w	r7, ip
   b4a2e:	fb08 e316 	mls	r3, r8, r6, lr
   b4a32:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b4a36:	fb06 f107 	mul.w	r1, r6, r7
   b4a3a:	4299      	cmp	r1, r3
   b4a3c:	d90a      	bls.n	b4a54 <__udivmoddi4+0x64>
   b4a3e:	eb1c 0303 	adds.w	r3, ip, r3
   b4a42:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b4a46:	f080 811f 	bcs.w	b4c88 <__udivmoddi4+0x298>
   b4a4a:	4299      	cmp	r1, r3
   b4a4c:	f240 811c 	bls.w	b4c88 <__udivmoddi4+0x298>
   b4a50:	3e02      	subs	r6, #2
   b4a52:	4463      	add	r3, ip
   b4a54:	1a5b      	subs	r3, r3, r1
   b4a56:	b2a4      	uxth	r4, r4
   b4a58:	fbb3 f0f8 	udiv	r0, r3, r8
   b4a5c:	fb08 3310 	mls	r3, r8, r0, r3
   b4a60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b4a64:	fb00 f707 	mul.w	r7, r0, r7
   b4a68:	42a7      	cmp	r7, r4
   b4a6a:	d90a      	bls.n	b4a82 <__udivmoddi4+0x92>
   b4a6c:	eb1c 0404 	adds.w	r4, ip, r4
   b4a70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b4a74:	f080 810a 	bcs.w	b4c8c <__udivmoddi4+0x29c>
   b4a78:	42a7      	cmp	r7, r4
   b4a7a:	f240 8107 	bls.w	b4c8c <__udivmoddi4+0x29c>
   b4a7e:	4464      	add	r4, ip
   b4a80:	3802      	subs	r0, #2
   b4a82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b4a86:	1be4      	subs	r4, r4, r7
   b4a88:	2600      	movs	r6, #0
   b4a8a:	b11d      	cbz	r5, b4a94 <__udivmoddi4+0xa4>
   b4a8c:	40d4      	lsrs	r4, r2
   b4a8e:	2300      	movs	r3, #0
   b4a90:	e9c5 4300 	strd	r4, r3, [r5]
   b4a94:	4631      	mov	r1, r6
   b4a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4a9a:	428b      	cmp	r3, r1
   b4a9c:	d909      	bls.n	b4ab2 <__udivmoddi4+0xc2>
   b4a9e:	2d00      	cmp	r5, #0
   b4aa0:	f000 80ef 	beq.w	b4c82 <__udivmoddi4+0x292>
   b4aa4:	2600      	movs	r6, #0
   b4aa6:	e9c5 0100 	strd	r0, r1, [r5]
   b4aaa:	4630      	mov	r0, r6
   b4aac:	4631      	mov	r1, r6
   b4aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4ab2:	fab3 f683 	clz	r6, r3
   b4ab6:	2e00      	cmp	r6, #0
   b4ab8:	d14a      	bne.n	b4b50 <__udivmoddi4+0x160>
   b4aba:	428b      	cmp	r3, r1
   b4abc:	d302      	bcc.n	b4ac4 <__udivmoddi4+0xd4>
   b4abe:	4282      	cmp	r2, r0
   b4ac0:	f200 80f9 	bhi.w	b4cb6 <__udivmoddi4+0x2c6>
   b4ac4:	1a84      	subs	r4, r0, r2
   b4ac6:	eb61 0303 	sbc.w	r3, r1, r3
   b4aca:	2001      	movs	r0, #1
   b4acc:	469e      	mov	lr, r3
   b4ace:	2d00      	cmp	r5, #0
   b4ad0:	d0e0      	beq.n	b4a94 <__udivmoddi4+0xa4>
   b4ad2:	e9c5 4e00 	strd	r4, lr, [r5]
   b4ad6:	e7dd      	b.n	b4a94 <__udivmoddi4+0xa4>
   b4ad8:	b902      	cbnz	r2, b4adc <__udivmoddi4+0xec>
   b4ada:	deff      	udf	#255	; 0xff
   b4adc:	fab2 f282 	clz	r2, r2
   b4ae0:	2a00      	cmp	r2, #0
   b4ae2:	f040 8092 	bne.w	b4c0a <__udivmoddi4+0x21a>
   b4ae6:	eba1 010c 	sub.w	r1, r1, ip
   b4aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4aee:	fa1f fe8c 	uxth.w	lr, ip
   b4af2:	2601      	movs	r6, #1
   b4af4:	0c20      	lsrs	r0, r4, #16
   b4af6:	fbb1 f3f7 	udiv	r3, r1, r7
   b4afa:	fb07 1113 	mls	r1, r7, r3, r1
   b4afe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4b02:	fb0e f003 	mul.w	r0, lr, r3
   b4b06:	4288      	cmp	r0, r1
   b4b08:	d908      	bls.n	b4b1c <__udivmoddi4+0x12c>
   b4b0a:	eb1c 0101 	adds.w	r1, ip, r1
   b4b0e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b4b12:	d202      	bcs.n	b4b1a <__udivmoddi4+0x12a>
   b4b14:	4288      	cmp	r0, r1
   b4b16:	f200 80cb 	bhi.w	b4cb0 <__udivmoddi4+0x2c0>
   b4b1a:	4643      	mov	r3, r8
   b4b1c:	1a09      	subs	r1, r1, r0
   b4b1e:	b2a4      	uxth	r4, r4
   b4b20:	fbb1 f0f7 	udiv	r0, r1, r7
   b4b24:	fb07 1110 	mls	r1, r7, r0, r1
   b4b28:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b4b2c:	fb0e fe00 	mul.w	lr, lr, r0
   b4b30:	45a6      	cmp	lr, r4
   b4b32:	d908      	bls.n	b4b46 <__udivmoddi4+0x156>
   b4b34:	eb1c 0404 	adds.w	r4, ip, r4
   b4b38:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b4b3c:	d202      	bcs.n	b4b44 <__udivmoddi4+0x154>
   b4b3e:	45a6      	cmp	lr, r4
   b4b40:	f200 80bb 	bhi.w	b4cba <__udivmoddi4+0x2ca>
   b4b44:	4608      	mov	r0, r1
   b4b46:	eba4 040e 	sub.w	r4, r4, lr
   b4b4a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b4b4e:	e79c      	b.n	b4a8a <__udivmoddi4+0x9a>
   b4b50:	f1c6 0720 	rsb	r7, r6, #32
   b4b54:	40b3      	lsls	r3, r6
   b4b56:	fa22 fc07 	lsr.w	ip, r2, r7
   b4b5a:	ea4c 0c03 	orr.w	ip, ip, r3
   b4b5e:	fa20 f407 	lsr.w	r4, r0, r7
   b4b62:	fa01 f306 	lsl.w	r3, r1, r6
   b4b66:	431c      	orrs	r4, r3
   b4b68:	40f9      	lsrs	r1, r7
   b4b6a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b4b6e:	fa00 f306 	lsl.w	r3, r0, r6
   b4b72:	fbb1 f8f9 	udiv	r8, r1, r9
   b4b76:	0c20      	lsrs	r0, r4, #16
   b4b78:	fa1f fe8c 	uxth.w	lr, ip
   b4b7c:	fb09 1118 	mls	r1, r9, r8, r1
   b4b80:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4b84:	fb08 f00e 	mul.w	r0, r8, lr
   b4b88:	4288      	cmp	r0, r1
   b4b8a:	fa02 f206 	lsl.w	r2, r2, r6
   b4b8e:	d90b      	bls.n	b4ba8 <__udivmoddi4+0x1b8>
   b4b90:	eb1c 0101 	adds.w	r1, ip, r1
   b4b94:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b4b98:	f080 8088 	bcs.w	b4cac <__udivmoddi4+0x2bc>
   b4b9c:	4288      	cmp	r0, r1
   b4b9e:	f240 8085 	bls.w	b4cac <__udivmoddi4+0x2bc>
   b4ba2:	f1a8 0802 	sub.w	r8, r8, #2
   b4ba6:	4461      	add	r1, ip
   b4ba8:	1a09      	subs	r1, r1, r0
   b4baa:	b2a4      	uxth	r4, r4
   b4bac:	fbb1 f0f9 	udiv	r0, r1, r9
   b4bb0:	fb09 1110 	mls	r1, r9, r0, r1
   b4bb4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b4bb8:	fb00 fe0e 	mul.w	lr, r0, lr
   b4bbc:	458e      	cmp	lr, r1
   b4bbe:	d908      	bls.n	b4bd2 <__udivmoddi4+0x1e2>
   b4bc0:	eb1c 0101 	adds.w	r1, ip, r1
   b4bc4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b4bc8:	d26c      	bcs.n	b4ca4 <__udivmoddi4+0x2b4>
   b4bca:	458e      	cmp	lr, r1
   b4bcc:	d96a      	bls.n	b4ca4 <__udivmoddi4+0x2b4>
   b4bce:	3802      	subs	r0, #2
   b4bd0:	4461      	add	r1, ip
   b4bd2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b4bd6:	fba0 9402 	umull	r9, r4, r0, r2
   b4bda:	eba1 010e 	sub.w	r1, r1, lr
   b4bde:	42a1      	cmp	r1, r4
   b4be0:	46c8      	mov	r8, r9
   b4be2:	46a6      	mov	lr, r4
   b4be4:	d356      	bcc.n	b4c94 <__udivmoddi4+0x2a4>
   b4be6:	d053      	beq.n	b4c90 <__udivmoddi4+0x2a0>
   b4be8:	b15d      	cbz	r5, b4c02 <__udivmoddi4+0x212>
   b4bea:	ebb3 0208 	subs.w	r2, r3, r8
   b4bee:	eb61 010e 	sbc.w	r1, r1, lr
   b4bf2:	fa01 f707 	lsl.w	r7, r1, r7
   b4bf6:	fa22 f306 	lsr.w	r3, r2, r6
   b4bfa:	40f1      	lsrs	r1, r6
   b4bfc:	431f      	orrs	r7, r3
   b4bfe:	e9c5 7100 	strd	r7, r1, [r5]
   b4c02:	2600      	movs	r6, #0
   b4c04:	4631      	mov	r1, r6
   b4c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4c0a:	f1c2 0320 	rsb	r3, r2, #32
   b4c0e:	40d8      	lsrs	r0, r3
   b4c10:	fa0c fc02 	lsl.w	ip, ip, r2
   b4c14:	fa21 f303 	lsr.w	r3, r1, r3
   b4c18:	4091      	lsls	r1, r2
   b4c1a:	4301      	orrs	r1, r0
   b4c1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4c20:	fa1f fe8c 	uxth.w	lr, ip
   b4c24:	fbb3 f0f7 	udiv	r0, r3, r7
   b4c28:	fb07 3610 	mls	r6, r7, r0, r3
   b4c2c:	0c0b      	lsrs	r3, r1, #16
   b4c2e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b4c32:	fb00 f60e 	mul.w	r6, r0, lr
   b4c36:	429e      	cmp	r6, r3
   b4c38:	fa04 f402 	lsl.w	r4, r4, r2
   b4c3c:	d908      	bls.n	b4c50 <__udivmoddi4+0x260>
   b4c3e:	eb1c 0303 	adds.w	r3, ip, r3
   b4c42:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b4c46:	d22f      	bcs.n	b4ca8 <__udivmoddi4+0x2b8>
   b4c48:	429e      	cmp	r6, r3
   b4c4a:	d92d      	bls.n	b4ca8 <__udivmoddi4+0x2b8>
   b4c4c:	3802      	subs	r0, #2
   b4c4e:	4463      	add	r3, ip
   b4c50:	1b9b      	subs	r3, r3, r6
   b4c52:	b289      	uxth	r1, r1
   b4c54:	fbb3 f6f7 	udiv	r6, r3, r7
   b4c58:	fb07 3316 	mls	r3, r7, r6, r3
   b4c5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b4c60:	fb06 f30e 	mul.w	r3, r6, lr
   b4c64:	428b      	cmp	r3, r1
   b4c66:	d908      	bls.n	b4c7a <__udivmoddi4+0x28a>
   b4c68:	eb1c 0101 	adds.w	r1, ip, r1
   b4c6c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b4c70:	d216      	bcs.n	b4ca0 <__udivmoddi4+0x2b0>
   b4c72:	428b      	cmp	r3, r1
   b4c74:	d914      	bls.n	b4ca0 <__udivmoddi4+0x2b0>
   b4c76:	3e02      	subs	r6, #2
   b4c78:	4461      	add	r1, ip
   b4c7a:	1ac9      	subs	r1, r1, r3
   b4c7c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b4c80:	e738      	b.n	b4af4 <__udivmoddi4+0x104>
   b4c82:	462e      	mov	r6, r5
   b4c84:	4628      	mov	r0, r5
   b4c86:	e705      	b.n	b4a94 <__udivmoddi4+0xa4>
   b4c88:	4606      	mov	r6, r0
   b4c8a:	e6e3      	b.n	b4a54 <__udivmoddi4+0x64>
   b4c8c:	4618      	mov	r0, r3
   b4c8e:	e6f8      	b.n	b4a82 <__udivmoddi4+0x92>
   b4c90:	454b      	cmp	r3, r9
   b4c92:	d2a9      	bcs.n	b4be8 <__udivmoddi4+0x1f8>
   b4c94:	ebb9 0802 	subs.w	r8, r9, r2
   b4c98:	eb64 0e0c 	sbc.w	lr, r4, ip
   b4c9c:	3801      	subs	r0, #1
   b4c9e:	e7a3      	b.n	b4be8 <__udivmoddi4+0x1f8>
   b4ca0:	4646      	mov	r6, r8
   b4ca2:	e7ea      	b.n	b4c7a <__udivmoddi4+0x28a>
   b4ca4:	4620      	mov	r0, r4
   b4ca6:	e794      	b.n	b4bd2 <__udivmoddi4+0x1e2>
   b4ca8:	4640      	mov	r0, r8
   b4caa:	e7d1      	b.n	b4c50 <__udivmoddi4+0x260>
   b4cac:	46d0      	mov	r8, sl
   b4cae:	e77b      	b.n	b4ba8 <__udivmoddi4+0x1b8>
   b4cb0:	3b02      	subs	r3, #2
   b4cb2:	4461      	add	r1, ip
   b4cb4:	e732      	b.n	b4b1c <__udivmoddi4+0x12c>
   b4cb6:	4630      	mov	r0, r6
   b4cb8:	e709      	b.n	b4ace <__udivmoddi4+0xde>
   b4cba:	4464      	add	r4, ip
   b4cbc:	3802      	subs	r0, #2
   b4cbe:	e742      	b.n	b4b46 <__udivmoddi4+0x156>

000b4cc0 <__aeabi_idiv0>:
   b4cc0:	4770      	bx	lr
   b4cc2:	bf00      	nop

000b4cc4 <strcmp>:
   b4cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4ccc:	2a01      	cmp	r2, #1
   b4cce:	bf28      	it	cs
   b4cd0:	429a      	cmpcs	r2, r3
   b4cd2:	d0f7      	beq.n	b4cc4 <strcmp>
   b4cd4:	1ad0      	subs	r0, r2, r3
   b4cd6:	4770      	bx	lr

000b4cd8 <strlen>:
   b4cd8:	4603      	mov	r3, r0
   b4cda:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4cde:	2a00      	cmp	r2, #0
   b4ce0:	d1fb      	bne.n	b4cda <strlen+0x2>
   b4ce2:	1a18      	subs	r0, r3, r0
   b4ce4:	3801      	subs	r0, #1
   b4ce6:	4770      	bx	lr

000b4ce8 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4ce8:	4809      	ldr	r0, [pc, #36]	; (b4d10 <module_user_pre_init+0x28>)
   b4cea:	490a      	ldr	r1, [pc, #40]	; (b4d14 <module_user_pre_init+0x2c>)
   b4cec:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4cee:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4cf0:	d005      	beq.n	b4cfe <module_user_pre_init+0x16>
   b4cf2:	4a09      	ldr	r2, [pc, #36]	; (b4d18 <module_user_pre_init+0x30>)
   b4cf4:	4282      	cmp	r2, r0
   b4cf6:	d002      	beq.n	b4cfe <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4cf8:	1a12      	subs	r2, r2, r0
   b4cfa:	f003 fe49 	bl	b8990 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4cfe:	4807      	ldr	r0, [pc, #28]	; (b4d1c <module_user_pre_init+0x34>)
   b4d00:	4a07      	ldr	r2, [pc, #28]	; (b4d20 <module_user_pre_init+0x38>)
   b4d02:	2100      	movs	r1, #0
   b4d04:	1a12      	subs	r2, r2, r0
   b4d06:	f003 fe6b 	bl	b89e0 <memset>
    return &link_global_data_start;
}
   b4d0a:	4801      	ldr	r0, [pc, #4]	; (b4d10 <module_user_pre_init+0x28>)
   b4d0c:	bd08      	pop	{r3, pc}
   b4d0e:	bf00      	nop
   b4d10:	2003e574 	.word	0x2003e574
   b4d14:	000b9344 	.word	0x000b9344
   b4d18:	2003e5f0 	.word	0x2003e5f0
   b4d1c:	2003e5f0 	.word	0x2003e5f0
   b4d20:	2003e7f0 	.word	0x2003e7f0

000b4d24 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4d24:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4d26:	4e07      	ldr	r6, [pc, #28]	; (b4d44 <module_user_init+0x20>)
   b4d28:	4c07      	ldr	r4, [pc, #28]	; (b4d48 <module_user_init+0x24>)
    module_user_init_hook();
   b4d2a:	f003 fcc3 	bl	b86b4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4d2e:	1ba4      	subs	r4, r4, r6
   b4d30:	08a4      	lsrs	r4, r4, #2
   b4d32:	2500      	movs	r5, #0
   b4d34:	42ac      	cmp	r4, r5
   b4d36:	d100      	bne.n	b4d3a <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4d38:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4d3a:	f856 3b04 	ldr.w	r3, [r6], #4
   b4d3e:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4d40:	3501      	adds	r5, #1
   b4d42:	e7f7      	b.n	b4d34 <module_user_init+0x10>
   b4d44:	000b92f4 	.word	0x000b92f4
   b4d48:	000b9318 	.word	0x000b9318

000b4d4c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4d4c:	f000 b884 	b.w	b4e58 <setup>

000b4d50 <module_user_loop>:
}

void module_user_loop() {
   b4d50:	b508      	push	{r3, lr}
    loop();
   b4d52:	f000 fbad 	bl	b54b0 <loop>
    _post_loop();
}
   b4d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4d5a:	f003 bc63 	b.w	b8624 <_post_loop>

000b4d5e <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4d5e:	f000 bf63 	b.w	b5c28 <malloc>

000b4d62 <_Znaj>:
   b4d62:	f000 bf61 	b.w	b5c28 <malloc>

000b4d66 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4d66:	f000 bf67 	b.w	b5c38 <free>
	...

000b4d6c <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4d6c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4d6e:	4a03      	ldr	r2, [pc, #12]	; (b4d7c <__cxa_pure_virtual+0x10>)
   b4d70:	4903      	ldr	r1, [pc, #12]	; (b4d80 <__cxa_pure_virtual+0x14>)
   b4d72:	200c      	movs	r0, #12
   b4d74:	f000 fe52 	bl	b5a1c <panic_>
  while (1);
   b4d78:	e7fe      	b.n	b4d78 <__cxa_pure_virtual+0xc>
   b4d7a:	bf00      	nop
   b4d7c:	000b579d 	.word	0x000b579d
   b4d80:	000b8d10 	.word	0x000b8d10

000b4d84 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4d84:	7800      	ldrb	r0, [r0, #0]
   b4d86:	fab0 f080 	clz	r0, r0
   b4d8a:	0940      	lsrs	r0, r0, #5
   b4d8c:	4770      	bx	lr

000b4d8e <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4d8e:	2301      	movs	r3, #1
   b4d90:	7003      	strb	r3, [r0, #0]
   b4d92:	4770      	bx	lr

000b4d94 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b4d94:	4770      	bx	lr
	...

000b4d98 <_Z9ledToggle6String>:
}

/*
  Example "Particle" cloud event handler function. We use the standard connotation for return value success or failures.
*/
int ledToggle(String command) {
   b4d98:	b510      	push	{r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4d9a:	4908      	ldr	r1, [pc, #32]	; (b4dbc <_Z9ledToggle6String+0x24>)
   b4d9c:	4604      	mov	r4, r0
   b4d9e:	f003 faa6 	bl	b82ee <_ZNK6String6equalsEPKc>
    Then, the function returns a value to us to let us know what happened.
    In this case, it will return 1 for the LEDs turning on, 0 for the LEDs turning off,
    and -1 if we received a totally bogus command that didn't do anything to the LEDs.
    */

    if (command=="on") {
   b4da2:	b940      	cbnz	r0, b4db6 <_Z9ledToggle6String+0x1e>
   b4da4:	4906      	ldr	r1, [pc, #24]	; (b4dc0 <_Z9ledToggle6String+0x28>)
   b4da6:	4620      	mov	r0, r4
   b4da8:	f003 faa1 	bl	b82ee <_ZNK6String6equalsEPKc>
        //digitalWrite(led1,HIGH);
        //digitalWrite(led2,HIGH);
        return 1;
    }
    else if (command=="off") {
   b4dac:	fab0 f080 	clz	r0, r0
   b4db0:	0940      	lsrs	r0, r0, #5
   b4db2:	4240      	negs	r0, r0
        return 0;
    }
    else {
        return -1;
    }
   b4db4:	bd10      	pop	{r4, pc}
        return 1;
   b4db6:	2001      	movs	r0, #1
   b4db8:	e7fc      	b.n	b4db4 <_Z9ledToggle6String+0x1c>
   b4dba:	bf00      	nop
   b4dbc:	000b8d25 	.word	0x000b8d25
   b4dc0:	000b8d28 	.word	0x000b8d28

000b4dc4 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b4dc4:	b513      	push	{r0, r1, r4, lr}
   b4dc6:	4b05      	ldr	r3, [pc, #20]	; (b4ddc <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   b4dc8:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4dca:	f88d 3000 	strb.w	r3, [sp]
   b4dce:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b4dd0:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4dd2:	f001 fa3f 	bl	b6254 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   b4dd6:	4620      	mov	r0, r4
   b4dd8:	b002      	add	sp, #8
   b4dda:	bd10      	pop	{r4, pc}
   b4ddc:	2003e5fc 	.word	0x2003e5fc

000b4de0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4de0:	4b0a      	ldr	r3, [pc, #40]	; (b4e0c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4de2:	b510      	push	{r4, lr}
   b4de4:	4604      	mov	r4, r0
   b4de6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4de8:	f002 f8c6 	bl	b6f78 <_ZN5spark10LogManager8instanceEv>
   b4dec:	4621      	mov	r1, r4
   b4dee:	f002 fafe 	bl	b73ee <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4df2:	f003 fb83 	bl	b84fc <_Z16_fetch_usbserialv>
   b4df6:	f003 fb75 	bl	b84e4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4dfa:	4620      	mov	r0, r4
   b4dfc:	4b04      	ldr	r3, [pc, #16]	; (b4e10 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4dfe:	f840 3b04 	str.w	r3, [r0], #4
   b4e02:	f002 f98f 	bl	b7124 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4e06:	4620      	mov	r0, r4
   b4e08:	bd10      	pop	{r4, pc}
   b4e0a:	bf00      	nop
   b4e0c:	000b8e94 	.word	0x000b8e94
   b4e10:	000b8e7c 	.word	0x000b8e7c

000b4e14 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4e14:	b510      	push	{r4, lr}
   b4e16:	4604      	mov	r4, r0
    }
   b4e18:	f7ff ffe2 	bl	b4de0 <_ZN5spark16SerialLogHandlerD1Ev>
   b4e1c:	4620      	mov	r0, r4
   b4e1e:	2124      	movs	r1, #36	; 0x24
   b4e20:	f7ff ffa1 	bl	b4d66 <_ZdlPvj>
   b4e24:	4620      	mov	r0, r4
   b4e26:	bd10      	pop	{r4, pc}

000b4e28 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4e28:	b40e      	push	{r1, r2, r3}
   b4e2a:	b500      	push	{lr}
   b4e2c:	b08c      	sub	sp, #48	; 0x30
   b4e2e:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4e30:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4e34:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4e38:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4e3a:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4e3e:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4e40:	6801      	ldr	r1, [r0, #0]
   b4e42:	aa04      	add	r2, sp, #16
   b4e44:	201e      	movs	r0, #30
    attr.flags = 0;
   b4e46:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4e4a:	f000 fdef 	bl	b5a2c <log_message_v>
}
   b4e4e:	b00c      	add	sp, #48	; 0x30
   b4e50:	f85d eb04 	ldr.w	lr, [sp], #4
   b4e54:	b003      	add	sp, #12
   b4e56:	4770      	bx	lr

000b4e58 <setup>:
void setup() {
   b4e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4e5c:	4f33      	ldr	r7, [pc, #204]	; (b4f2c <setup+0xd4>)
   b4e5e:	4834      	ldr	r0, [pc, #208]	; (b4f30 <setup+0xd8>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4e60:	4e34      	ldr	r6, [pc, #208]	; (b4f34 <setup+0xdc>)
   b4e62:	b096      	sub	sp, #88	; 0x58
   b4e64:	2202      	movs	r2, #2
   b4e66:	2300      	movs	r3, #0
   b4e68:	4639      	mov	r1, r7
   b4e6a:	f000 fe3d 	bl	b5ae8 <spark_variable>
  initPowerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE); //this should be USB/ wall power for our design
   b4e6e:	2018      	movs	r0, #24
   b4e70:	f000 fc46 	bl	b5700 <_ZN17DiagnosticsHelper8getValueEt>
   b4e74:	4b30      	ldr	r3, [pc, #192]	; (b4f38 <setup+0xe0>)
   b4e76:	6018      	str	r0, [r3, #0]
  pinMode(LED1, OUTPUT);               // sets pin as output
   b4e78:	4b30      	ldr	r3, [pc, #192]	; (b4f3c <setup+0xe4>)
   b4e7a:	2101      	movs	r1, #1
   b4e7c:	8818      	ldrh	r0, [r3, #0]
   b4e7e:	f003 fc89 	bl	b8794 <pinMode>
  debug = 0; // 0  represents no debug, 1 represents debug
   b4e82:	2400      	movs	r4, #0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b4e84:	4a2e      	ldr	r2, [pc, #184]	; (b4f40 <setup+0xe8>)
   b4e86:	492f      	ldr	r1, [pc, #188]	; (b4f44 <setup+0xec>)
   b4e88:	482f      	ldr	r0, [pc, #188]	; (b4f48 <setup+0xf0>)
   b4e8a:	603c      	str	r4, [r7, #0]
   b4e8c:	f001 f8eb 	bl	b6066 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4e90:	6870      	ldr	r0, [r6, #4]
   b4e92:	4622      	mov	r2, r4
   b4e94:	4621      	mov	r1, r4
   b4e96:	f000 fe7f 	bl	b5b98 <network_ready>
  if (Cellular.ready()) {
   b4e9a:	2800      	cmp	r0, #0
   b4e9c:	d042      	beq.n	b4f24 <setup+0xcc>
      CellularSignal sig = Cellular.RSSI();
   b4e9e:	4631      	mov	r1, r6
   b4ea0:	a80e      	add	r0, sp, #56	; 0x38
   b4ea2:	f000 ff9d 	bl	b5de0 <_ZN5spark13CellularClass4RSSIEv>
      cell_sig_str = sig.getStrength();
   b4ea6:	a80e      	add	r0, sp, #56	; 0x38
   b4ea8:	f001 f816 	bl	b5ed8 <_ZNK14CellularSignal11getStrengthEv>
   b4eac:	f8df 80ac 	ldr.w	r8, [pc, #172]	; b4f5c <setup+0x104>
      cell_sig_qual = sig.getQuality();
   b4eb0:	a80e      	add	r0, sp, #56	; 0x38
      cell_sig_str = sig.getStrength();
   b4eb2:	ed88 0a00 	vstr	s0, [r8]
      cell_sig_qual = sig.getQuality();
   b4eb6:	f001 f83f 	bl	b5f38 <_ZNK14CellularSignal10getQualityEv>
   b4eba:	4b24      	ldr	r3, [pc, #144]	; (b4f4c <setup+0xf4>)
   b4ebc:	ed83 0a00 	vstr	s0, [r3]
      if(debug){
   b4ec0:	683b      	ldr	r3, [r7, #0]
      cell_sig_qual = sig.getQuality();
   b4ec2:	ee10 5a10 	vmov	r5, s0
      if(debug){
   b4ec6:	b36b      	cbz	r3, b4f24 <setup+0xcc>
        Log.info("Cellular ready at startup: %f strength and %f quality", cell_sig_str, cell_sig_qual);
   b4ec8:	f8d8 0000 	ldr.w	r0, [r8]
   b4ecc:	f7ff fa0a 	bl	b42e4 <__aeabi_f2d>
   b4ed0:	4602      	mov	r2, r0
   b4ed2:	460b      	mov	r3, r1
   b4ed4:	4628      	mov	r0, r5
   b4ed6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b4eda:	f7ff fa03 	bl	b42e4 <__aeabi_f2d>
   b4ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4ee2:	e9cd 0100 	strd	r0, r1, [sp]
   b4ee6:	491a      	ldr	r1, [pc, #104]	; (b4f50 <setup+0xf8>)
   b4ee8:	481a      	ldr	r0, [pc, #104]	; (b4f54 <setup+0xfc>)
   b4eea:	f7ff ff9d 	bl	b4e28 <_ZNK5spark6Logger4infoEPKcz>
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
   b4eee:	4622      	mov	r2, r4
   b4ef0:	4621      	mov	r1, r4
   b4ef2:	6870      	ldr	r0, [r6, #4]
   b4ef4:	f000 fe30 	bl	b5b58 <network_config>
   b4ef8:	1c81      	adds	r1, r0, #2
   b4efa:	a808      	add	r0, sp, #32
   b4efc:	f001 fcae 	bl	b685c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   b4f00:	a908      	add	r1, sp, #32
   b4f02:	a804      	add	r0, sp, #16
   b4f04:	f003 fa06 	bl	b8314 <_ZN6StringC1ERK9Printable>
        Log.info("localIP: %s", Cellular.localIP().toString().c_str());
   b4f08:	4913      	ldr	r1, [pc, #76]	; (b4f58 <setup+0x100>)
   b4f0a:	9a04      	ldr	r2, [sp, #16]
   b4f0c:	4811      	ldr	r0, [pc, #68]	; (b4f54 <setup+0xfc>)
   b4f0e:	f7ff ff8b 	bl	b4e28 <_ZNK5spark6Logger4infoEPKcz>
   b4f12:	a804      	add	r0, sp, #16
   b4f14:	f003 f8b0 	bl	b8078 <_ZN6StringD1Ev>
        Serial.begin(9600);
   b4f18:	f003 faf0 	bl	b84fc <_Z16_fetch_usbserialv>
   b4f1c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4f20:	f003 fadc 	bl	b84dc <_ZN9USBSerial5beginEl>
}
   b4f24:	b016      	add	sp, #88	; 0x58
   b4f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4f2a:	bf00      	nop
   b4f2c:	2003e60c 	.word	0x2003e60c
   b4f30:	000b8d2c 	.word	0x000b8d2c
   b4f34:	2003e648 	.word	0x2003e648
   b4f38:	2003e618 	.word	0x2003e618
   b4f3c:	2003e574 	.word	0x2003e574
   b4f40:	000b8d32 	.word	0x000b8d32
   b4f44:	000b4d99 	.word	0x000b4d99
   b4f48:	000b603b 	.word	0x000b603b
   b4f4c:	2003e604 	.word	0x2003e604
   b4f50:	000b8d36 	.word	0x000b8d36
   b4f54:	2003e68c 	.word	0x2003e68c
   b4f58:	000b8d6c 	.word	0x000b8d6c
   b4f5c:	2003e608 	.word	0x2003e608

000b4f60 <_Z19get_battery_voltagev>:
void get_battery_voltage(){
   b4f60:	b508      	push	{r3, lr}
  battery_voltage = fuel.getVCell();
   b4f62:	480a      	ldr	r0, [pc, #40]	; (b4f8c <_Z19get_battery_voltagev+0x2c>)
   b4f64:	f001 fb86 	bl	b6674 <_ZN9FuelGauge8getVCellEv>
   b4f68:	4b09      	ldr	r3, [pc, #36]	; (b4f90 <_Z19get_battery_voltagev+0x30>)
   b4f6a:	ed83 0a00 	vstr	s0, [r3]
  if(debug == 1){
   b4f6e:	4b09      	ldr	r3, [pc, #36]	; (b4f94 <_Z19get_battery_voltagev+0x34>)
   b4f70:	681b      	ldr	r3, [r3, #0]
   b4f72:	2b01      	cmp	r3, #1
  battery_voltage = fuel.getVCell();
   b4f74:	ee10 0a10 	vmov	r0, s0
  if(debug == 1){
   b4f78:	d107      	bne.n	b4f8a <_Z19get_battery_voltagev+0x2a>
    Log.info("Current battery voltage: %f", battery_voltage);
   b4f7a:	f7ff f9b3 	bl	b42e4 <__aeabi_f2d>
   b4f7e:	4602      	mov	r2, r0
   b4f80:	460b      	mov	r3, r1
   b4f82:	4805      	ldr	r0, [pc, #20]	; (b4f98 <_Z19get_battery_voltagev+0x38>)
   b4f84:	4905      	ldr	r1, [pc, #20]	; (b4f9c <_Z19get_battery_voltagev+0x3c>)
   b4f86:	f7ff ff4f 	bl	b4e28 <_ZNK5spark6Logger4infoEPKcz>
}
   b4f8a:	bd08      	pop	{r3, pc}
   b4f8c:	2003e610 	.word	0x2003e610
   b4f90:	2003e600 	.word	0x2003e600
   b4f94:	2003e60c 	.word	0x2003e60c
   b4f98:	2003e68c 	.word	0x2003e68c
   b4f9c:	000b8d78 	.word	0x000b8d78

000b4fa0 <_Z14test_flash_ledii>:
void test_flash_led(int LED, int time){
   b4fa0:	b538      	push	{r3, r4, r5, lr}
    digitalWrite(LED, HIGH);          // sets the LED on
   b4fa2:	b285      	uxth	r5, r0
void test_flash_led(int LED, int time){
   b4fa4:	460c      	mov	r4, r1
    digitalWrite(LED, HIGH);          // sets the LED on
   b4fa6:	4628      	mov	r0, r5
   b4fa8:	2101      	movs	r1, #1
   b4faa:	f003 fc04 	bl	b87b6 <digitalWrite>
    delay(time);                      
   b4fae:	4620      	mov	r0, r4
   b4fb0:	f000 fe82 	bl	b5cb8 <delay>
    digitalWrite(LED, LOW);           // sets the LED off
   b4fb4:	4628      	mov	r0, r5
   b4fb6:	2100      	movs	r1, #0
   b4fb8:	f003 fbfd 	bl	b87b6 <digitalWrite>
    delay(time);  
   b4fbc:	4620      	mov	r0, r4
}
   b4fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(time);  
   b4fc2:	f000 be79 	b.w	b5cb8 <delay>
	...

000b4fc8 <_Z19check_day_time_syncv>:
void check_day_time_sync() {
   b4fc8:	b510      	push	{r4, lr}
  if (millis() - lastSync > ONE_DAY_MILLIS) {
   b4fca:	4c09      	ldr	r4, [pc, #36]	; (b4ff0 <_Z19check_day_time_syncv+0x28>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4fcc:	f000 fbee 	bl	b57ac <HAL_Timer_Get_Milli_Seconds>
   b4fd0:	6823      	ldr	r3, [r4, #0]
   b4fd2:	1ac0      	subs	r0, r0, r3
   b4fd4:	4b07      	ldr	r3, [pc, #28]	; (b4ff4 <_Z19check_day_time_syncv+0x2c>)
   b4fd6:	4298      	cmp	r0, r3
   b4fd8:	d908      	bls.n	b4fec <_Z19check_day_time_syncv+0x24>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4fda:	f000 fd9d 	bl	b5b18 <spark_cloud_flag_connected>
        if (!connected()) {
   b4fde:	b110      	cbz	r0, b4fe6 <_Z19check_day_time_syncv+0x1e>
        return spark_sync_time(NULL);
   b4fe0:	2000      	movs	r0, #0
   b4fe2:	f000 fda9 	bl	b5b38 <spark_sync_time>
   b4fe6:	f000 fbe1 	bl	b57ac <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   b4fea:	6020      	str	r0, [r4, #0]
}
   b4fec:	bd10      	pop	{r4, pc}
   b4fee:	bf00      	nop
   b4ff0:	2003e61c 	.word	0x2003e61c
   b4ff4:	05265c00 	.word	0x05265c00

000b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4ff8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4ffa:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4ffc:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4ffe:	b17c      	cbz	r4, b5020 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5000:	6863      	ldr	r3, [r4, #4]
   b5002:	3b01      	subs	r3, #1
   b5004:	6063      	str	r3, [r4, #4]
   b5006:	b95b      	cbnz	r3, b5020 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5008:	6823      	ldr	r3, [r4, #0]
   b500a:	4620      	mov	r0, r4
   b500c:	689b      	ldr	r3, [r3, #8]
   b500e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5010:	68a3      	ldr	r3, [r4, #8]
   b5012:	3b01      	subs	r3, #1
   b5014:	60a3      	str	r3, [r4, #8]
   b5016:	b91b      	cbnz	r3, b5020 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5018:	6823      	ldr	r3, [r4, #0]
   b501a:	4620      	mov	r0, r4
   b501c:	68db      	ldr	r3, [r3, #12]
   b501e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5020:	4628      	mov	r0, r5
   b5022:	bd38      	pop	{r3, r4, r5, pc}

000b5024 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5024:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5026:	e9d0 5300 	ldrd	r5, r3, [r0]
   b502a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b502c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b502e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5032:	42ae      	cmp	r6, r5
   b5034:	d004      	beq.n	b5040 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b5036:	4628      	mov	r0, r5
   b5038:	f003 f81e 	bl	b8078 <_ZN6StringD1Ev>
   b503c:	3514      	adds	r5, #20
   b503e:	e7f8      	b.n	b5032 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5040:	6820      	ldr	r0, [r4, #0]
   b5042:	f000 fdf9 	bl	b5c38 <free>
    AllocatorT::free(data_);
}
   b5046:	4620      	mov	r0, r4
   b5048:	bd70      	pop	{r4, r5, r6, pc}

000b504a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>:
    // Constructs succeeded future
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
   b504a:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b504c:	6804      	ldr	r4, [r0, #0]
        return (application_thread_current(nullptr) != 0);
   b504e:	2000      	movs	r0, #0
   b5050:	f000 fd1c 	bl	b5a8c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5054:	b120      	cbz	r0, b5060 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b5056:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b5058:	b913      	cbnz	r3, b5060 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
        spark_process();
   b505a:	f000 fd55 	bl	b5b08 <spark_process>
    }
   b505e:	e7fa      	b.n	b5056 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0xc>
   b5060:	7863      	ldrb	r3, [r4, #1]
   b5062:	f3bf 8f5b 	dmb	ish
   b5066:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b5068:	b90b      	cbnz	r3, b506e <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x24>
        return std::move(defaultValue);
   b506a:	2000      	movs	r0, #0
        return this->p_->result();
    }
   b506c:	bd38      	pop	{r3, r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   b506e:	2000      	movs	r0, #0
   b5070:	f000 fd0c 	bl	b5a8c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5074:	b120      	cbz	r0, b5080 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
   b5076:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b5078:	b913      	cbnz	r3, b5080 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
        spark_process();
   b507a:	f000 fd45 	bl	b5b08 <spark_process>
    }
   b507e:	e7fa      	b.n	b5076 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x2c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b5080:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b5082:	2b01      	cmp	r3, #1
   b5084:	d1f1      	bne.n	b506a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x20>
            return result_;
   b5086:	7b20      	ldrb	r0, [r4, #12]
   b5088:	e7f0      	b.n	b506c <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x22>
	...

000b508c <_Z19detect_power_sourcev>:
void detect_power_source() {
   b508c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b5090:	2018      	movs	r0, #24
  if (powerSource != initPowerSource && powerSource != lastPowerSource) {
   b5092:	4d7b      	ldr	r5, [pc, #492]	; (b5280 <_Z19detect_power_sourcev+0x1f4>)
void detect_power_source() {
   b5094:	b08e      	sub	sp, #56	; 0x38
  int powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b5096:	f000 fb33 	bl	b5700 <_ZN17DiagnosticsHelper8getValueEt>
  if (powerSource != initPowerSource && powerSource != lastPowerSource) {
   b509a:	682b      	ldr	r3, [r5, #0]
   b509c:	4283      	cmp	r3, r0
  int powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b509e:	4604      	mov	r4, r0
  if (powerSource != initPowerSource && powerSource != lastPowerSource) {
   b50a0:	f000 810a 	beq.w	b52b8 <_Z19detect_power_sourcev+0x22c>
   b50a4:	4f77      	ldr	r7, [pc, #476]	; (b5284 <_Z19detect_power_sourcev+0x1f8>)
   b50a6:	683b      	ldr	r3, [r7, #0]
   b50a8:	4283      	cmp	r3, r0
   b50aa:	f000 8105 	beq.w	b52b8 <_Z19detect_power_sourcev+0x22c>
      if(debug) {
   b50ae:	4e76      	ldr	r6, [pc, #472]	; (b5288 <_Z19detect_power_sourcev+0x1fc>)
   b50b0:	6833      	ldr	r3, [r6, #0]
   b50b2:	b123      	cbz	r3, b50be <_Z19detect_power_sourcev+0x32>
        Log.info("Potential Power source change: %d", powerSource);
   b50b4:	4602      	mov	r2, r0
   b50b6:	4975      	ldr	r1, [pc, #468]	; (b528c <_Z19detect_power_sourcev+0x200>)
   b50b8:	4875      	ldr	r0, [pc, #468]	; (b5290 <_Z19detect_power_sourcev+0x204>)
   b50ba:	f7ff feb5 	bl	b4e28 <_ZNK5spark6Logger4infoEPKcz>
      delay(5000);
   b50be:	f241 3088 	movw	r0, #5000	; 0x1388
   b50c2:	f000 fdf9 	bl	b5cb8 <delay>
      powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b50c6:	2018      	movs	r0, #24
   b50c8:	f000 fb1a 	bl	b5700 <_ZN17DiagnosticsHelper8getValueEt>
      if(powerSource != initPowerSource) {
   b50cc:	682b      	ldr	r3, [r5, #0]
   b50ce:	4283      	cmp	r3, r0
      powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b50d0:	4604      	mov	r4, r0
      if(powerSource != initPowerSource) {
   b50d2:	f000 80f1 	beq.w	b52b8 <_Z19detect_power_sourcev+0x22c>
        if(debug) {
   b50d6:	6833      	ldr	r3, [r6, #0]
   b50d8:	b123      	cbz	r3, b50e4 <_Z19detect_power_sourcev+0x58>
          Log.info("Confirmed Power source change: %d", powerSource);
   b50da:	4602      	mov	r2, r0
   b50dc:	496d      	ldr	r1, [pc, #436]	; (b5294 <_Z19detect_power_sourcev+0x208>)
   b50de:	486c      	ldr	r0, [pc, #432]	; (b5290 <_Z19detect_power_sourcev+0x204>)
   b50e0:	f7ff fea2 	bl	b4e28 <_ZNK5spark6Logger4infoEPKcz>
        if(powerSource == 5) {
   b50e4:	2c05      	cmp	r4, #5
   b50e6:	d16d      	bne.n	b51c4 <_Z19detect_power_sourcev+0x138>
          get_battery_voltage();
   b50e8:	f7ff ff3a 	bl	b4f60 <_Z19get_battery_voltagev>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b50ec:	496a      	ldr	r1, [pc, #424]	; (b5298 <_Z19detect_power_sourcev+0x20c>)
          success = Particle.publish("From Wall power to Battery: Power Loss", String("Changed from "+String(initPowerSource)+" to: battery @"+battery_voltage+" V."));
   b50ee:	f8df 81c0 	ldr.w	r8, [pc, #448]	; b52b0 <_Z19detect_power_sourcev+0x224>
   b50f2:	f8df a1a4 	ldr.w	sl, [pc, #420]	; b5298 <_Z19detect_power_sourcev+0x20c>
            success = Particle.publish("From Wall power to Battery: Power Loss", String("Changed from "+String(initPowerSource)+" to: battery @"+battery_voltage+" V."));
   b50f6:	f8df 91a4 	ldr.w	r9, [pc, #420]	; b529c <_Z19detect_power_sourcev+0x210>
   b50fa:	a806      	add	r0, sp, #24
   b50fc:	f003 f807 	bl	b810e <_ZN6StringC1EPK19__FlashStringHelper>
          success = Particle.publish("From Wall power to Battery: Power Loss", String("Changed from "+String(initPowerSource)+" to: battery @"+battery_voltage+" V."));
   b5100:	220a      	movs	r2, #10
   b5102:	6829      	ldr	r1, [r5, #0]
   b5104:	a802      	add	r0, sp, #8
   b5106:	f003 f86a 	bl	b81de <_ZN6StringC1Eih>
   b510a:	a902      	add	r1, sp, #8
   b510c:	a806      	add	r0, sp, #24
   b510e:	f003 f8c3 	bl	b8298 <_ZplRK15StringSumHelperRK6String>
   b5112:	4962      	ldr	r1, [pc, #392]	; (b529c <_Z19detect_power_sourcev+0x210>)
   b5114:	f003 f8cc 	bl	b82b0 <_ZplRK15StringSumHelperPKc>
   b5118:	ed98 0a00 	vldr	s0, [r8]
   b511c:	f003 f8dd 	bl	b82da <_ZplRK15StringSumHelperf>
   b5120:	495f      	ldr	r1, [pc, #380]	; (b52a0 <_Z19detect_power_sourcev+0x214>)
   b5122:	f003 f8c5 	bl	b82b0 <_ZplRK15StringSumHelperPKc>
   b5126:	4601      	mov	r1, r0
   b5128:	a80a      	add	r0, sp, #40	; 0x28
   b512a:	f003 f83b 	bl	b81a4 <_ZN6StringC1ERKS_>
   b512e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5130:	495c      	ldr	r1, [pc, #368]	; (b52a4 <_Z19detect_power_sourcev+0x218>)
   b5132:	4668      	mov	r0, sp
   b5134:	f7ff fe46 	bl	b4dc4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
    ResultT result(ResultT defaultValue) const {
        return this->p_->result(std::move(defaultValue));
    }

    operator ResultT() const {
        return result();
   b5138:	4668      	mov	r0, sp
   b513a:	f7ff ff86 	bl	b504a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b513e:	4606      	mov	r6, r0
      ~__shared_ptr() = default;
   b5140:	a801      	add	r0, sp, #4
   b5142:	f7ff ff59 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5146:	a80a      	add	r0, sp, #40	; 0x28
   b5148:	f002 ff96 	bl	b8078 <_ZN6StringD1Ev>
   b514c:	a802      	add	r0, sp, #8
   b514e:	f002 ff93 	bl	b8078 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5152:	a806      	add	r0, sp, #24
   b5154:	f002 ff90 	bl	b8078 <_ZN6StringD1Ev>
          lastPowerSource = powerSource;
   b5158:	603c      	str	r4, [r7, #0]
            success = Particle.publish("From Wall power to Battery: Power Loss", String("Changed from "+String(initPowerSource)+" to: battery @"+battery_voltage+" V."));
   b515a:	4f51      	ldr	r7, [pc, #324]	; (b52a0 <_Z19detect_power_sourcev+0x214>)
          while(!success) {
   b515c:	2e00      	cmp	r6, #0
   b515e:	f040 80ab 	bne.w	b52b8 <_Z19detect_power_sourcev+0x22c>
	StringSumHelper(const char *p) : String(p) {}
   b5162:	4651      	mov	r1, sl
   b5164:	a806      	add	r0, sp, #24
   b5166:	f002 ffd2 	bl	b810e <_ZN6StringC1EPK19__FlashStringHelper>
            success = Particle.publish("From Wall power to Battery: Power Loss", String("Changed from "+String(initPowerSource)+" to: battery @"+battery_voltage+" V."));
   b516a:	220a      	movs	r2, #10
   b516c:	6829      	ldr	r1, [r5, #0]
   b516e:	a802      	add	r0, sp, #8
   b5170:	f003 f835 	bl	b81de <_ZN6StringC1Eih>
   b5174:	a902      	add	r1, sp, #8
   b5176:	a806      	add	r0, sp, #24
   b5178:	f003 f88e 	bl	b8298 <_ZplRK15StringSumHelperRK6String>
   b517c:	4649      	mov	r1, r9
   b517e:	f003 f897 	bl	b82b0 <_ZplRK15StringSumHelperPKc>
   b5182:	ed98 0a00 	vldr	s0, [r8]
   b5186:	f003 f8a8 	bl	b82da <_ZplRK15StringSumHelperf>
   b518a:	4639      	mov	r1, r7
   b518c:	f003 f890 	bl	b82b0 <_ZplRK15StringSumHelperPKc>
   b5190:	4601      	mov	r1, r0
   b5192:	a80a      	add	r0, sp, #40	; 0x28
   b5194:	f003 f806 	bl	b81a4 <_ZN6StringC1ERKS_>
   b5198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b519a:	4942      	ldr	r1, [pc, #264]	; (b52a4 <_Z19detect_power_sourcev+0x218>)
   b519c:	4668      	mov	r0, sp
   b519e:	f7ff fe11 	bl	b4dc4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b51a2:	4668      	mov	r0, sp
   b51a4:	f7ff ff51 	bl	b504a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b51a8:	4606      	mov	r6, r0
   b51aa:	a801      	add	r0, sp, #4
   b51ac:	f7ff ff24 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b51b0:	a80a      	add	r0, sp, #40	; 0x28
   b51b2:	f002 ff61 	bl	b8078 <_ZN6StringD1Ev>
   b51b6:	a802      	add	r0, sp, #8
   b51b8:	f002 ff5e 	bl	b8078 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b51bc:	a806      	add	r0, sp, #24
   b51be:	f002 ff5b 	bl	b8078 <_ZN6StringD1Ev>
          while(!success) {
   b51c2:	e7cb      	b.n	b515c <_Z19detect_power_sourcev+0xd0>
        if(powerSource == 1) {
   b51c4:	2c01      	cmp	r4, #1
   b51c6:	f040 80fe 	bne.w	b53c6 <_Z19detect_power_sourcev+0x33a>
	StringSumHelper(const char *p) : String(p) {}
   b51ca:	4933      	ldr	r1, [pc, #204]	; (b5298 <_Z19detect_power_sourcev+0x20c>)
   b51cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; b5298 <_Z19detect_power_sourcev+0x20c>
            success = Particle.publish("From Wall power to VIN: Power Loss", String("Changed from "+String(initPowerSource)+" to: VIN."));
   b51d0:	f8df 90d4 	ldr.w	r9, [pc, #212]	; b52a8 <_Z19detect_power_sourcev+0x21c>
   b51d4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; b52ac <_Z19detect_power_sourcev+0x220>
   b51d8:	a806      	add	r0, sp, #24
   b51da:	f002 ff98 	bl	b810e <_ZN6StringC1EPK19__FlashStringHelper>
          success = Particle.publish("From Wall power to VIN: Power Loss", String("Changed from "+String(initPowerSource)+" to: VIN."));
   b51de:	220a      	movs	r2, #10
   b51e0:	6829      	ldr	r1, [r5, #0]
   b51e2:	a802      	add	r0, sp, #8
   b51e4:	f002 fffb 	bl	b81de <_ZN6StringC1Eih>
   b51e8:	a902      	add	r1, sp, #8
   b51ea:	a806      	add	r0, sp, #24
   b51ec:	f003 f854 	bl	b8298 <_ZplRK15StringSumHelperRK6String>
   b51f0:	492d      	ldr	r1, [pc, #180]	; (b52a8 <_Z19detect_power_sourcev+0x21c>)
   b51f2:	f003 f85d 	bl	b82b0 <_ZplRK15StringSumHelperPKc>
   b51f6:	4601      	mov	r1, r0
   b51f8:	a80a      	add	r0, sp, #40	; 0x28
   b51fa:	f002 ffd3 	bl	b81a4 <_ZN6StringC1ERKS_>
   b51fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5200:	492a      	ldr	r1, [pc, #168]	; (b52ac <_Z19detect_power_sourcev+0x220>)
   b5202:	4668      	mov	r0, sp
   b5204:	f7ff fdde 	bl	b4dc4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b5208:	4668      	mov	r0, sp
   b520a:	f7ff ff1e 	bl	b504a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b520e:	4606      	mov	r6, r0
   b5210:	a801      	add	r0, sp, #4
   b5212:	f7ff fef1 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5216:	a80a      	add	r0, sp, #40	; 0x28
   b5218:	f002 ff2e 	bl	b8078 <_ZN6StringD1Ev>
   b521c:	a802      	add	r0, sp, #8
   b521e:	f002 ff2b 	bl	b8078 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5222:	a806      	add	r0, sp, #24
   b5224:	f002 ff28 	bl	b8078 <_ZN6StringD1Ev>
          while(!success) {
   b5228:	2e00      	cmp	r6, #0
   b522a:	d143      	bne.n	b52b4 <_Z19detect_power_sourcev+0x228>
	StringSumHelper(const char *p) : String(p) {}
   b522c:	4651      	mov	r1, sl
   b522e:	a806      	add	r0, sp, #24
   b5230:	f002 ff6d 	bl	b810e <_ZN6StringC1EPK19__FlashStringHelper>
            success = Particle.publish("From Wall power to VIN: Power Loss", String("Changed from "+String(initPowerSource)+" to: VIN."));
   b5234:	220a      	movs	r2, #10
   b5236:	6829      	ldr	r1, [r5, #0]
   b5238:	a802      	add	r0, sp, #8
   b523a:	f002 ffd0 	bl	b81de <_ZN6StringC1Eih>
   b523e:	a902      	add	r1, sp, #8
   b5240:	a806      	add	r0, sp, #24
   b5242:	f003 f829 	bl	b8298 <_ZplRK15StringSumHelperRK6String>
   b5246:	4649      	mov	r1, r9
   b5248:	f003 f832 	bl	b82b0 <_ZplRK15StringSumHelperPKc>
   b524c:	4601      	mov	r1, r0
   b524e:	a80a      	add	r0, sp, #40	; 0x28
   b5250:	f002 ffa8 	bl	b81a4 <_ZN6StringC1ERKS_>
   b5254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5256:	4641      	mov	r1, r8
   b5258:	4668      	mov	r0, sp
   b525a:	f7ff fdb3 	bl	b4dc4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b525e:	4668      	mov	r0, sp
   b5260:	f7ff fef3 	bl	b504a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b5264:	4606      	mov	r6, r0
   b5266:	a801      	add	r0, sp, #4
   b5268:	f7ff fec6 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b526c:	a80a      	add	r0, sp, #40	; 0x28
   b526e:	f002 ff03 	bl	b8078 <_ZN6StringD1Ev>
   b5272:	a802      	add	r0, sp, #8
   b5274:	f002 ff00 	bl	b8078 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5278:	a806      	add	r0, sp, #24
   b527a:	f002 fefd 	bl	b8078 <_ZN6StringD1Ev>
          while(!success) {
   b527e:	e7d3      	b.n	b5228 <_Z19detect_power_sourcev+0x19c>
   b5280:	2003e618 	.word	0x2003e618
   b5284:	2003e578 	.word	0x2003e578
   b5288:	2003e60c 	.word	0x2003e60c
   b528c:	000b8d94 	.word	0x000b8d94
   b5290:	2003e68c 	.word	0x2003e68c
   b5294:	000b8db6 	.word	0x000b8db6
   b5298:	000b8dd8 	.word	0x000b8dd8
   b529c:	000b8de6 	.word	0x000b8de6
   b52a0:	000b8df5 	.word	0x000b8df5
   b52a4:	000b8df9 	.word	0x000b8df9
   b52a8:	000b8e20 	.word	0x000b8e20
   b52ac:	000b8e2a 	.word	0x000b8e2a
   b52b0:	2003e600 	.word	0x2003e600
          lastPowerSource = powerSource;
   b52b4:	2301      	movs	r3, #1
   b52b6:	603b      	str	r3, [r7, #0]
  if(powerSource == initPowerSource && lastPowerSource != powerSource && lastPowerSource != -1) {
   b52b8:	682b      	ldr	r3, [r5, #0]
   b52ba:	42a3      	cmp	r3, r4
   b52bc:	f040 80e4 	bne.w	b5488 <_Z19detect_power_sourcev+0x3fc>
   b52c0:	4f73      	ldr	r7, [pc, #460]	; (b5490 <_Z19detect_power_sourcev+0x404>)
   b52c2:	683b      	ldr	r3, [r7, #0]
   b52c4:	42a3      	cmp	r3, r4
   b52c6:	f000 80df 	beq.w	b5488 <_Z19detect_power_sourcev+0x3fc>
   b52ca:	3301      	adds	r3, #1
   b52cc:	f000 80dc 	beq.w	b5488 <_Z19detect_power_sourcev+0x3fc>
    if(debug) {
   b52d0:	4e70      	ldr	r6, [pc, #448]	; (b5494 <_Z19detect_power_sourcev+0x408>)
   b52d2:	6833      	ldr	r3, [r6, #0]
   b52d4:	b123      	cbz	r3, b52e0 <_Z19detect_power_sourcev+0x254>
      Log.info("Potential Power source change: %d", powerSource);
   b52d6:	4970      	ldr	r1, [pc, #448]	; (b5498 <_Z19detect_power_sourcev+0x40c>)
   b52d8:	4870      	ldr	r0, [pc, #448]	; (b549c <_Z19detect_power_sourcev+0x410>)
   b52da:	4622      	mov	r2, r4
   b52dc:	f7ff fda4 	bl	b4e28 <_ZNK5spark6Logger4infoEPKcz>
    delay(5000);
   b52e0:	f241 3088 	movw	r0, #5000	; 0x1388
   b52e4:	f000 fce8 	bl	b5cb8 <delay>
    powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b52e8:	2018      	movs	r0, #24
   b52ea:	f000 fa09 	bl	b5700 <_ZN17DiagnosticsHelper8getValueEt>
    if(powerSource == initPowerSource) {
   b52ee:	682b      	ldr	r3, [r5, #0]
   b52f0:	4283      	cmp	r3, r0
    powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b52f2:	4604      	mov	r4, r0
    if(powerSource == initPowerSource) {
   b52f4:	f040 80c8 	bne.w	b5488 <_Z19detect_power_sourcev+0x3fc>
      if(debug) {
   b52f8:	6833      	ldr	r3, [r6, #0]
   b52fa:	b123      	cbz	r3, b5306 <_Z19detect_power_sourcev+0x27a>
        Log.info("Confirmed Power source change: %d", powerSource);
   b52fc:	4602      	mov	r2, r0
   b52fe:	4968      	ldr	r1, [pc, #416]	; (b54a0 <_Z19detect_power_sourcev+0x414>)
   b5300:	4866      	ldr	r0, [pc, #408]	; (b549c <_Z19detect_power_sourcev+0x410>)
   b5302:	f7ff fd91 	bl	b4e28 <_ZNK5spark6Logger4infoEPKcz>
        if(powerSource == 2 || powerSource == 3 || powerSource == 4) {
   b5306:	1ea3      	subs	r3, r4, #2
   b5308:	2b02      	cmp	r3, #2
   b530a:	f200 80bd 	bhi.w	b5488 <_Z19detect_power_sourcev+0x3fc>
	StringSumHelper(const char *p) : String(p) {}
   b530e:	4965      	ldr	r1, [pc, #404]	; (b54a4 <_Z19detect_power_sourcev+0x418>)
   b5310:	f8df a190 	ldr.w	sl, [pc, #400]	; b54a4 <_Z19detect_power_sourcev+0x418>
            success = Particle.publish("Power source: USB", String("Changed from "+String(initPowerSource)+" to: USB/Wall power."));
   b5314:	f8df 9190 	ldr.w	r9, [pc, #400]	; b54a8 <_Z19detect_power_sourcev+0x41c>
   b5318:	f8df 8190 	ldr.w	r8, [pc, #400]	; b54ac <_Z19detect_power_sourcev+0x420>
   b531c:	a806      	add	r0, sp, #24
   b531e:	f002 fef6 	bl	b810e <_ZN6StringC1EPK19__FlashStringHelper>
          success = Particle.publish("Power source: USB", String("Changed from "+String(initPowerSource)+" to: USB/Wall power."));
   b5322:	220a      	movs	r2, #10
   b5324:	6829      	ldr	r1, [r5, #0]
   b5326:	a802      	add	r0, sp, #8
   b5328:	f002 ff59 	bl	b81de <_ZN6StringC1Eih>
   b532c:	a902      	add	r1, sp, #8
   b532e:	a806      	add	r0, sp, #24
   b5330:	f002 ffb2 	bl	b8298 <_ZplRK15StringSumHelperRK6String>
   b5334:	495c      	ldr	r1, [pc, #368]	; (b54a8 <_Z19detect_power_sourcev+0x41c>)
   b5336:	f002 ffbb 	bl	b82b0 <_ZplRK15StringSumHelperPKc>
   b533a:	4601      	mov	r1, r0
   b533c:	a80a      	add	r0, sp, #40	; 0x28
   b533e:	f002 ff31 	bl	b81a4 <_ZN6StringC1ERKS_>
   b5342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5344:	4959      	ldr	r1, [pc, #356]	; (b54ac <_Z19detect_power_sourcev+0x420>)
   b5346:	4668      	mov	r0, sp
   b5348:	f7ff fd3c 	bl	b4dc4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b534c:	4668      	mov	r0, sp
   b534e:	f7ff fe7c 	bl	b504a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b5352:	4606      	mov	r6, r0
   b5354:	a801      	add	r0, sp, #4
   b5356:	f7ff fe4f 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b535a:	a80a      	add	r0, sp, #40	; 0x28
   b535c:	f002 fe8c 	bl	b8078 <_ZN6StringD1Ev>
   b5360:	a802      	add	r0, sp, #8
   b5362:	f002 fe89 	bl	b8078 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5366:	a806      	add	r0, sp, #24
   b5368:	f002 fe86 	bl	b8078 <_ZN6StringD1Ev>
          while(!success) {
   b536c:	2e00      	cmp	r6, #0
   b536e:	f040 808a 	bne.w	b5486 <_Z19detect_power_sourcev+0x3fa>
	StringSumHelper(const char *p) : String(p) {}
   b5372:	4651      	mov	r1, sl
   b5374:	a806      	add	r0, sp, #24
   b5376:	f002 feca 	bl	b810e <_ZN6StringC1EPK19__FlashStringHelper>
            success = Particle.publish("Power source: USB", String("Changed from "+String(initPowerSource)+" to: USB/Wall power."));
   b537a:	220a      	movs	r2, #10
   b537c:	6829      	ldr	r1, [r5, #0]
   b537e:	a802      	add	r0, sp, #8
   b5380:	f002 ff2d 	bl	b81de <_ZN6StringC1Eih>
   b5384:	a902      	add	r1, sp, #8
   b5386:	a806      	add	r0, sp, #24
   b5388:	f002 ff86 	bl	b8298 <_ZplRK15StringSumHelperRK6String>
   b538c:	4649      	mov	r1, r9
   b538e:	f002 ff8f 	bl	b82b0 <_ZplRK15StringSumHelperPKc>
   b5392:	4601      	mov	r1, r0
   b5394:	a80a      	add	r0, sp, #40	; 0x28
   b5396:	f002 ff05 	bl	b81a4 <_ZN6StringC1ERKS_>
   b539a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b539c:	4641      	mov	r1, r8
   b539e:	4668      	mov	r0, sp
   b53a0:	f7ff fd10 	bl	b4dc4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b53a4:	4668      	mov	r0, sp
   b53a6:	f7ff fe50 	bl	b504a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b53aa:	4606      	mov	r6, r0
   b53ac:	a801      	add	r0, sp, #4
   b53ae:	f7ff fe23 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b53b2:	a80a      	add	r0, sp, #40	; 0x28
   b53b4:	f002 fe60 	bl	b8078 <_ZN6StringD1Ev>
   b53b8:	a802      	add	r0, sp, #8
   b53ba:	f002 fe5d 	bl	b8078 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b53be:	a806      	add	r0, sp, #24
   b53c0:	f002 fe5a 	bl	b8078 <_ZN6StringD1Ev>
          while(!success) {
   b53c4:	e7d2      	b.n	b536c <_Z19detect_power_sourcev+0x2e0>
        if(powerSource == 2 || powerSource == 3 || powerSource == 4) {
   b53c6:	1ea3      	subs	r3, r4, #2
   b53c8:	2b02      	cmp	r3, #2
   b53ca:	f63f af75 	bhi.w	b52b8 <_Z19detect_power_sourcev+0x22c>
	StringSumHelper(const char *p) : String(p) {}
   b53ce:	4935      	ldr	r1, [pc, #212]	; (b54a4 <_Z19detect_power_sourcev+0x418>)
   b53d0:	f8df a0d0 	ldr.w	sl, [pc, #208]	; b54a4 <_Z19detect_power_sourcev+0x418>
            success = Particle.publish("Power source: USB", String("Changed from "+String(initPowerSource)+" to: USB/Wall power."));
   b53d4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b54a8 <_Z19detect_power_sourcev+0x41c>
   b53d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; b54ac <_Z19detect_power_sourcev+0x420>
   b53dc:	a806      	add	r0, sp, #24
   b53de:	f002 fe96 	bl	b810e <_ZN6StringC1EPK19__FlashStringHelper>
          success = Particle.publish("Power source: USB", String("Changed from "+String(initPowerSource)+" to: USB/Wall power."));
   b53e2:	220a      	movs	r2, #10
   b53e4:	6829      	ldr	r1, [r5, #0]
   b53e6:	a802      	add	r0, sp, #8
   b53e8:	f002 fef9 	bl	b81de <_ZN6StringC1Eih>
   b53ec:	a902      	add	r1, sp, #8
   b53ee:	a806      	add	r0, sp, #24
   b53f0:	f002 ff52 	bl	b8298 <_ZplRK15StringSumHelperRK6String>
   b53f4:	492c      	ldr	r1, [pc, #176]	; (b54a8 <_Z19detect_power_sourcev+0x41c>)
   b53f6:	f002 ff5b 	bl	b82b0 <_ZplRK15StringSumHelperPKc>
   b53fa:	4601      	mov	r1, r0
   b53fc:	a80a      	add	r0, sp, #40	; 0x28
   b53fe:	f002 fed1 	bl	b81a4 <_ZN6StringC1ERKS_>
   b5402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5404:	4929      	ldr	r1, [pc, #164]	; (b54ac <_Z19detect_power_sourcev+0x420>)
   b5406:	4668      	mov	r0, sp
   b5408:	f7ff fcdc 	bl	b4dc4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b540c:	4668      	mov	r0, sp
   b540e:	f7ff fe1c 	bl	b504a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b5412:	4606      	mov	r6, r0
   b5414:	a801      	add	r0, sp, #4
   b5416:	f7ff fdef 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b541a:	a80a      	add	r0, sp, #40	; 0x28
   b541c:	f002 fe2c 	bl	b8078 <_ZN6StringD1Ev>
   b5420:	a802      	add	r0, sp, #8
   b5422:	f002 fe29 	bl	b8078 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5426:	a806      	add	r0, sp, #24
   b5428:	f002 fe26 	bl	b8078 <_ZN6StringD1Ev>
          while(!success) {
   b542c:	bb4e      	cbnz	r6, b5482 <_Z19detect_power_sourcev+0x3f6>
	StringSumHelper(const char *p) : String(p) {}
   b542e:	4651      	mov	r1, sl
   b5430:	a806      	add	r0, sp, #24
   b5432:	f002 fe6c 	bl	b810e <_ZN6StringC1EPK19__FlashStringHelper>
            success = Particle.publish("Power source: USB", String("Changed from "+String(initPowerSource)+" to: USB/Wall power."));
   b5436:	220a      	movs	r2, #10
   b5438:	6829      	ldr	r1, [r5, #0]
   b543a:	a802      	add	r0, sp, #8
   b543c:	f002 fecf 	bl	b81de <_ZN6StringC1Eih>
   b5440:	a902      	add	r1, sp, #8
   b5442:	a806      	add	r0, sp, #24
   b5444:	f002 ff28 	bl	b8298 <_ZplRK15StringSumHelperRK6String>
   b5448:	4649      	mov	r1, r9
   b544a:	f002 ff31 	bl	b82b0 <_ZplRK15StringSumHelperPKc>
   b544e:	4601      	mov	r1, r0
   b5450:	a80a      	add	r0, sp, #40	; 0x28
   b5452:	f002 fea7 	bl	b81a4 <_ZN6StringC1ERKS_>
   b5456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5458:	4641      	mov	r1, r8
   b545a:	4668      	mov	r0, sp
   b545c:	f7ff fcb2 	bl	b4dc4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b5460:	4668      	mov	r0, sp
   b5462:	f7ff fdf2 	bl	b504a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b5466:	4606      	mov	r6, r0
   b5468:	a801      	add	r0, sp, #4
   b546a:	f7ff fdc5 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b546e:	a80a      	add	r0, sp, #40	; 0x28
   b5470:	f002 fe02 	bl	b8078 <_ZN6StringD1Ev>
   b5474:	a802      	add	r0, sp, #8
   b5476:	f002 fdff 	bl	b8078 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b547a:	a806      	add	r0, sp, #24
   b547c:	f002 fdfc 	bl	b8078 <_ZN6StringD1Ev>
          while(!success) {
   b5480:	e7d4      	b.n	b542c <_Z19detect_power_sourcev+0x3a0>
          lastPowerSource = powerSource;
   b5482:	603c      	str	r4, [r7, #0]
   b5484:	e718      	b.n	b52b8 <_Z19detect_power_sourcev+0x22c>
          lastPowerSource = powerSource;
   b5486:	603c      	str	r4, [r7, #0]
}
   b5488:	b00e      	add	sp, #56	; 0x38
   b548a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b548e:	bf00      	nop
   b5490:	2003e578 	.word	0x2003e578
   b5494:	2003e60c 	.word	0x2003e60c
   b5498:	000b8d94 	.word	0x000b8d94
   b549c:	2003e68c 	.word	0x2003e68c
   b54a0:	000b8db6 	.word	0x000b8db6
   b54a4:	000b8dd8 	.word	0x000b8dd8
   b54a8:	000b8e4d 	.word	0x000b8e4d
   b54ac:	000b8e62 	.word	0x000b8e62

000b54b0 <loop>:
void loop() {
   b54b0:	b530      	push	{r4, r5, lr}
  if(debug){
   b54b2:	4b21      	ldr	r3, [pc, #132]	; (b5538 <loop+0x88>)
   b54b4:	681b      	ldr	r3, [r3, #0]
void loop() {
   b54b6:	b08d      	sub	sp, #52	; 0x34
  if(debug){
   b54b8:	2b00      	cmp	r3, #0
   b54ba:	d03a      	beq.n	b5532 <loop+0x82>
    test_flash_led(LED1, 200);
   b54bc:	4b1f      	ldr	r3, [pc, #124]	; (b553c <loop+0x8c>)
   b54be:	4c20      	ldr	r4, [pc, #128]	; (b5540 <loop+0x90>)
   b54c0:	6818      	ldr	r0, [r3, #0]
   b54c2:	21c8      	movs	r1, #200	; 0xc8
   b54c4:	f7ff fd6c 	bl	b4fa0 <_Z14test_flash_ledii>
        return network_ready(*this, 0,  NULL);
   b54c8:	2200      	movs	r2, #0
   b54ca:	6860      	ldr	r0, [r4, #4]
   b54cc:	4611      	mov	r1, r2
   b54ce:	f000 fb63 	bl	b5b98 <network_ready>
    if (Cellular.ready()) {
   b54d2:	b328      	cbz	r0, b5520 <loop+0x70>
      CellularSignal sig = Cellular.RSSI();
   b54d4:	4621      	mov	r1, r4
   b54d6:	a804      	add	r0, sp, #16
   b54d8:	f000 fc82 	bl	b5de0 <_ZN5spark13CellularClass4RSSIEv>
      cell_sig_str = sig.getStrength();
   b54dc:	a804      	add	r0, sp, #16
   b54de:	f000 fcfb 	bl	b5ed8 <_ZNK14CellularSignal11getStrengthEv>
   b54e2:	4d18      	ldr	r5, [pc, #96]	; (b5544 <loop+0x94>)
      cell_sig_qual = sig.getQuality();
   b54e4:	a804      	add	r0, sp, #16
      cell_sig_str = sig.getStrength();
   b54e6:	ed85 0a00 	vstr	s0, [r5]
      cell_sig_qual = sig.getQuality();
   b54ea:	f000 fd25 	bl	b5f38 <_ZNK14CellularSignal10getQualityEv>
   b54ee:	4b16      	ldr	r3, [pc, #88]	; (b5548 <loop+0x98>)
      Log.info("Cellular ready at startup: %f strength and %f quality", cell_sig_str, cell_sig_qual);
   b54f0:	6828      	ldr	r0, [r5, #0]
      cell_sig_qual = sig.getQuality();
   b54f2:	ed83 0a00 	vstr	s0, [r3]
   b54f6:	ee10 4a10 	vmov	r4, s0
      Log.info("Cellular ready at startup: %f strength and %f quality", cell_sig_str, cell_sig_qual);
   b54fa:	f7fe fef3 	bl	b42e4 <__aeabi_f2d>
   b54fe:	4602      	mov	r2, r0
   b5500:	460b      	mov	r3, r1
   b5502:	4620      	mov	r0, r4
   b5504:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b5508:	f7fe feec 	bl	b42e4 <__aeabi_f2d>
   b550c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b5510:	e9cd 0100 	strd	r0, r1, [sp]
   b5514:	490d      	ldr	r1, [pc, #52]	; (b554c <loop+0x9c>)
   b5516:	480e      	ldr	r0, [pc, #56]	; (b5550 <loop+0xa0>)
   b5518:	f7ff fc86 	bl	b4e28 <_ZNK5spark6Logger4infoEPKcz>
      get_battery_voltage();
   b551c:	f7ff fd20 	bl	b4f60 <_Z19get_battery_voltagev>
    detect_power_source();
   b5520:	f7ff fdb4 	bl	b508c <_Z19detect_power_sourcev>
  delay(10000);
   b5524:	f242 7010 	movw	r0, #10000	; 0x2710
}
   b5528:	b00d      	add	sp, #52	; 0x34
   b552a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  delay(10000);
   b552e:	f000 bbc3 	b.w	b5cb8 <delay>
    check_day_time_sync();
   b5532:	f7ff fd49 	bl	b4fc8 <_Z19check_day_time_syncv>
   b5536:	e7f3      	b.n	b5520 <loop+0x70>
   b5538:	2003e60c 	.word	0x2003e60c
   b553c:	2003e574 	.word	0x2003e574
   b5540:	2003e648 	.word	0x2003e648
   b5544:	2003e608 	.word	0x2003e608
   b5548:	2003e604 	.word	0x2003e604
   b554c:	000b8d36 	.word	0x000b8d36
   b5550:	2003e68c 	.word	0x2003e68c

000b5554 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5554:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5558:	4604      	mov	r4, r0
   b555a:	460d      	mov	r5, r1
   b555c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b555e:	d916      	bls.n	b558e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5560:	4290      	cmp	r0, r2
   b5562:	d215      	bcs.n	b5590 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b5564:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5568:	1a75      	subs	r5, r6, r1
   b556a:	f1a1 0714 	sub.w	r7, r1, #20
   b556e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5570:	42b7      	cmp	r7, r6
   b5572:	d01c      	beq.n	b55ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5574:	b12c      	cbz	r4, b5582 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5576:	4631      	mov	r1, r6
   b5578:	4620      	mov	r0, r4
   b557a:	f002 fdf9 	bl	b8170 <_ZN6StringC1EOS_>
   b557e:	7c33      	ldrb	r3, [r6, #16]
   b5580:	7423      	strb	r3, [r4, #16]
   b5582:	4630      	mov	r0, r6
   b5584:	f002 fd78 	bl	b8078 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5588:	3e14      	subs	r6, #20
   b558a:	3c14      	subs	r4, #20
   b558c:	e7f0      	b.n	b5570 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b558e:	d00e      	beq.n	b55ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5590:	42b5      	cmp	r5, r6
   b5592:	d00c      	beq.n	b55ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b5594:	b12c      	cbz	r4, b55a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b5596:	4629      	mov	r1, r5
   b5598:	4620      	mov	r0, r4
   b559a:	f002 fde9 	bl	b8170 <_ZN6StringC1EOS_>
   b559e:	7c2b      	ldrb	r3, [r5, #16]
   b55a0:	7423      	strb	r3, [r4, #16]
   b55a2:	4628      	mov	r0, r5
   b55a4:	f002 fd68 	bl	b8078 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b55a8:	3514      	adds	r5, #20
   b55aa:	3414      	adds	r4, #20
   b55ac:	e7f0      	b.n	b5590 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b55ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b55b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b55b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b55b4:	2300      	movs	r3, #0
   b55b6:	e9c0 3300 	strd	r3, r3, [r0]
   b55ba:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b55bc:	684f      	ldr	r7, [r1, #4]
   b55be:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b55c0:	4604      	mov	r4, r0
   b55c2:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b55c4:	dd23      	ble.n	b560e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b55c6:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b55ca:	fb08 f007 	mul.w	r0, r8, r7
   b55ce:	f000 fb2b 	bl	b5c28 <malloc>
            if (!d) {
   b55d2:	4605      	mov	r5, r0
   b55d4:	b1d8      	cbz	r0, b560e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b55d6:	e9d4 1200 	ldrd	r1, r2, [r4]
   b55da:	fb08 1202 	mla	r2, r8, r2, r1
   b55de:	f7ff ffb9 	bl	b5554 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b55e2:	6820      	ldr	r0, [r4, #0]
   b55e4:	f000 fb28 	bl	b5c38 <free>
        data_ = d;
   b55e8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b55ea:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b55ec:	e9d6 7300 	ldrd	r7, r3, [r6]
   b55f0:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b55f4:	45b8      	cmp	r8, r7
   b55f6:	d008      	beq.n	b560a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b55f8:	4639      	mov	r1, r7
   b55fa:	4628      	mov	r0, r5
   b55fc:	f002 fdd2 	bl	b81a4 <_ZN6StringC1ERKS_>
   b5600:	7c3b      	ldrb	r3, [r7, #16]
   b5602:	742b      	strb	r3, [r5, #16]
   b5604:	3714      	adds	r7, #20
   b5606:	3514      	adds	r5, #20
   b5608:	e7f4      	b.n	b55f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b560a:	6873      	ldr	r3, [r6, #4]
   b560c:	6063      	str	r3, [r4, #4]
}
   b560e:	4620      	mov	r0, r4
   b5610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5614 <_GLOBAL__sub_I_SystemMode>:
   b5614:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5616:	4b29      	ldr	r3, [pc, #164]	; (b56bc <_GLOBAL__sub_I_SystemMode+0xa8>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b5618:	4a29      	ldr	r2, [pc, #164]	; (b56c0 <_GLOBAL__sub_I_SystemMode+0xac>)
   b561a:	2400      	movs	r4, #0
   b561c:	701c      	strb	r4, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b561e:	4b29      	ldr	r3, [pc, #164]	; (b56c4 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b5620:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b5622:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5624:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5628:	2001      	movs	r0, #1
   b562a:	f000 fa17 	bl	b5a5c <set_system_mode>
SYSTEM_THREAD(ENABLED); // handles data/ cloud messaging in a seperate thread from our setup() and loop()
   b562e:	4621      	mov	r1, r4
   b5630:	2001      	movs	r0, #1
   b5632:	f000 fa23 	bl	b5a7c <system_thread_set_state>
FuelGauge fuel; // fuel object used to access the battery monitoring circuit
   b5636:	4621      	mov	r1, r4
   b5638:	4823      	ldr	r0, [pc, #140]	; (b56c8 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b563a:	f000 ffcf 	bl	b65dc <_ZN9FuelGaugeC1Eb>
        capacity_(0) {
   b563e:	e9cd 4400 	strd	r4, r4, [sp]
   b5642:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b5644:	f002 ff5a 	bl	b84fc <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b5648:	4c20      	ldr	r4, [pc, #128]	; (b56cc <_GLOBAL__sub_I_SystemMode+0xb8>)
   b564a:	4605      	mov	r5, r0
   b564c:	4669      	mov	r1, sp
   b564e:	a803      	add	r0, sp, #12
   b5650:	f7ff ffae 	bl	b55b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5654:	4626      	mov	r6, r4
        stream_(&stream) {
   b5656:	a903      	add	r1, sp, #12
   b5658:	a806      	add	r0, sp, #24
   b565a:	f7ff ffa9 	bl	b55b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b565e:	4b1c      	ldr	r3, [pc, #112]	; (b56d0 <_GLOBAL__sub_I_SystemMode+0xbc>)
   b5660:	f846 3b04 	str.w	r3, [r6], #4
   b5664:	a906      	add	r1, sp, #24
   b5666:	a809      	add	r0, sp, #36	; 0x24
   b5668:	f7ff ffa2 	bl	b55b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b566c:	aa09      	add	r2, sp, #36	; 0x24
   b566e:	211e      	movs	r1, #30
   b5670:	4630      	mov	r0, r6
   b5672:	f001 ff9f 	bl	b75b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5676:	a809      	add	r0, sp, #36	; 0x24
   b5678:	f7ff fcd4 	bl	b5024 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b567c:	a806      	add	r0, sp, #24
   b567e:	f7ff fcd1 	bl	b5024 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5682:	4b14      	ldr	r3, [pc, #80]	; (b56d4 <_GLOBAL__sub_I_SystemMode+0xc0>)
   b5684:	6023      	str	r3, [r4, #0]
   b5686:	6225      	str	r5, [r4, #32]
   b5688:	a803      	add	r0, sp, #12
   b568a:	f7ff fccb 	bl	b5024 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b568e:	4b12      	ldr	r3, [pc, #72]	; (b56d8 <_GLOBAL__sub_I_SystemMode+0xc4>)
   b5690:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b5692:	f002 ff33 	bl	b84fc <_Z16_fetch_usbserialv>
   b5696:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b569a:	f002 ff1f 	bl	b84dc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b569e:	f001 fc6b 	bl	b6f78 <_ZN5spark10LogManager8instanceEv>
   b56a2:	4621      	mov	r1, r4
   b56a4:	f001 fe5c 	bl	b7360 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b56a8:	4668      	mov	r0, sp
   b56aa:	f7ff fcbb 	bl	b5024 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b56ae:	f000 f87d 	bl	b57ac <HAL_Timer_Get_Milli_Seconds>
unsigned long lastSync = millis();
   b56b2:	4b0a      	ldr	r3, [pc, #40]	; (b56dc <_GLOBAL__sub_I_SystemMode+0xc8>)
   b56b4:	6018      	str	r0, [r3, #0]
   b56b6:	b00c      	add	sp, #48	; 0x30
   b56b8:	bd70      	pop	{r4, r5, r6, pc}
   b56ba:	bf00      	nop
   b56bc:	2003e5fc 	.word	0x2003e5fc
   b56c0:	ffff0000 	.word	0xffff0000
   b56c4:	2003e5f0 	.word	0x2003e5f0
   b56c8:	2003e610 	.word	0x2003e610
   b56cc:	2003e620 	.word	0x2003e620
   b56d0:	000b8e7c 	.word	0x000b8e7c
   b56d4:	000b904c 	.word	0x000b904c
   b56d8:	000b8e94 	.word	0x000b8e94
   b56dc:	2003e61c 	.word	0x2003e61c

000b56e0 <_ZZN17DiagnosticsHelper8getValueEtENUt_8appenderEPvPKhj>:
	};
    Data data;
    data.offset = data.u.d.value = 0;

    struct {
        static bool appender(void* appender, const uint8_t* data, size_t size) {
   b56e0:	b538      	push	{r3, r4, r5, lr}
   b56e2:	4604      	mov	r4, r0
            Data *d = (Data *)appender;
            if ((d->offset + size) <= sizeof(Data::u)) {
   b56e4:	68c0      	ldr	r0, [r0, #12]
   b56e6:	1883      	adds	r3, r0, r2
   b56e8:	2b0a      	cmp	r3, #10
        static bool appender(void* appender, const uint8_t* data, size_t size) {
   b56ea:	4615      	mov	r5, r2
            if ((d->offset + size) <= sizeof(Data::u)) {
   b56ec:	d805      	bhi.n	b56fa <_ZZN17DiagnosticsHelper8getValueEtENUt_8appenderEPvPKhj+0x1a>
                memcpy(&d->u.b[d->offset], data, size);
   b56ee:	4420      	add	r0, r4
   b56f0:	f003 f94e 	bl	b8990 <memcpy>
                d->offset += size;
   b56f4:	68e2      	ldr	r2, [r4, #12]
   b56f6:	442a      	add	r2, r5
   b56f8:	60e2      	str	r2, [r4, #12]
            }
            return true;
        }
   b56fa:	2001      	movs	r0, #1
   b56fc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5700 <_ZN17DiagnosticsHelper8getValueEt>:
int32_t DiagnosticsHelper::getValue(uint16_t id) {
   b5700:	b510      	push	{r4, lr}
   b5702:	b088      	sub	sp, #32
    data.offset = data.u.d.value = 0;
   b5704:	2400      	movs	r4, #0
    } Callback;

    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   b5706:	ab04      	add	r3, sp, #16
   b5708:	2201      	movs	r2, #1
int32_t DiagnosticsHelper::getValue(uint16_t id) {
   b570a:	f8ad 000e 	strh.w	r0, [sp, #14]
    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   b570e:	9300      	str	r3, [sp, #0]
   b5710:	9401      	str	r4, [sp, #4]
   b5712:	4b09      	ldr	r3, [pc, #36]	; (b5738 <_ZN17DiagnosticsHelper8getValueEt+0x38>)
    data.offset = data.u.d.value = 0;
   b5714:	f8ad 4016 	strh.w	r4, [sp, #22]
    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   b5718:	4611      	mov	r1, r2
   b571a:	f10d 000e 	add.w	r0, sp, #14
    data.offset = data.u.d.value = 0;
   b571e:	f8ad 4018 	strh.w	r4, [sp, #24]
   b5722:	9407      	str	r4, [sp, #28]
    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   b5724:	f000 f9c2 	bl	b5aac <system_format_diag_data>

    // Log.info("idSize=%u valueSize=%u id=%u value=%ld", data.u.d.idSize, data.u.d.valueSize, data.u.d.id, data.u.d.value);

    if (data.offset == sizeof(Data::u)) {
   b5728:	9b07      	ldr	r3, [sp, #28]
   b572a:	2b0a      	cmp	r3, #10
    	return data.u.d.value;
   b572c:	bf0c      	ite	eq
   b572e:	f8dd 0016 	ldreq.w	r0, [sp, #22]
    }
    else {
        return 0;
   b5732:	4620      	movne	r0, r4
    }
}
   b5734:	b008      	add	sp, #32
   b5736:	bd10      	pop	{r4, pc}
   b5738:	000b56e1 	.word	0x000b56e1

000b573c <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b573c:	b508      	push	{r3, lr}
   b573e:	4b02      	ldr	r3, [pc, #8]	; (b5748 <cellular_signal+0xc>)
   b5740:	681b      	ldr	r3, [r3, #0]
   b5742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5744:	9301      	str	r3, [sp, #4]
   b5746:	bd08      	pop	{r3, pc}
   b5748:	00030274 	.word	0x00030274

000b574c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b574c:	b508      	push	{r3, lr}
   b574e:	4b02      	ldr	r3, [pc, #8]	; (b5758 <os_mutex_recursive_create+0xc>)
   b5750:	681b      	ldr	r3, [r3, #0]
   b5752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5754:	9301      	str	r3, [sp, #4]
   b5756:	bd08      	pop	{r3, pc}
   b5758:	00030248 	.word	0x00030248

000b575c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b575c:	b508      	push	{r3, lr}
   b575e:	4b02      	ldr	r3, [pc, #8]	; (b5768 <os_mutex_recursive_destroy+0xc>)
   b5760:	681b      	ldr	r3, [r3, #0]
   b5762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5764:	9301      	str	r3, [sp, #4]
   b5766:	bd08      	pop	{r3, pc}
   b5768:	00030248 	.word	0x00030248

000b576c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b576c:	b508      	push	{r3, lr}
   b576e:	4b02      	ldr	r3, [pc, #8]	; (b5778 <os_mutex_recursive_lock+0xc>)
   b5770:	681b      	ldr	r3, [r3, #0]
   b5772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5774:	9301      	str	r3, [sp, #4]
   b5776:	bd08      	pop	{r3, pc}
   b5778:	00030248 	.word	0x00030248

000b577c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b577c:	b508      	push	{r3, lr}
   b577e:	4b02      	ldr	r3, [pc, #8]	; (b5788 <os_mutex_recursive_unlock+0xc>)
   b5780:	681b      	ldr	r3, [r3, #0]
   b5782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5784:	9301      	str	r3, [sp, #4]
   b5786:	bd08      	pop	{r3, pc}
   b5788:	00030248 	.word	0x00030248

000b578c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b578c:	b508      	push	{r3, lr}
   b578e:	4b02      	ldr	r3, [pc, #8]	; (b5798 <HAL_RNG_GetRandomNumber+0xc>)
   b5790:	681b      	ldr	r3, [r3, #0]
   b5792:	685b      	ldr	r3, [r3, #4]
   b5794:	9301      	str	r3, [sp, #4]
   b5796:	bd08      	pop	{r3, pc}
   b5798:	00030218 	.word	0x00030218

000b579c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b579c:	b508      	push	{r3, lr}
   b579e:	4b02      	ldr	r3, [pc, #8]	; (b57a8 <HAL_Delay_Microseconds+0xc>)
   b57a0:	681b      	ldr	r3, [r3, #0]
   b57a2:	68db      	ldr	r3, [r3, #12]
   b57a4:	9301      	str	r3, [sp, #4]
   b57a6:	bd08      	pop	{r3, pc}
   b57a8:	00030218 	.word	0x00030218

000b57ac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b57ac:	b508      	push	{r3, lr}
   b57ae:	4b02      	ldr	r3, [pc, #8]	; (b57b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b57b0:	681b      	ldr	r3, [r3, #0]
   b57b2:	695b      	ldr	r3, [r3, #20]
   b57b4:	9301      	str	r3, [sp, #4]
   b57b6:	bd08      	pop	{r3, pc}
   b57b8:	00030218 	.word	0x00030218

000b57bc <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b57bc:	b508      	push	{r3, lr}
   b57be:	4b02      	ldr	r3, [pc, #8]	; (b57c8 <hal_gpio_mode+0xc>)
   b57c0:	681b      	ldr	r3, [r3, #0]
   b57c2:	689b      	ldr	r3, [r3, #8]
   b57c4:	9301      	str	r3, [sp, #4]
   b57c6:	bd08      	pop	{r3, pc}
   b57c8:	0003022c 	.word	0x0003022c

000b57cc <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b57cc:	b508      	push	{r3, lr}
   b57ce:	4b02      	ldr	r3, [pc, #8]	; (b57d8 <hal_gpio_get_mode+0xc>)
   b57d0:	681b      	ldr	r3, [r3, #0]
   b57d2:	68db      	ldr	r3, [r3, #12]
   b57d4:	9301      	str	r3, [sp, #4]
   b57d6:	bd08      	pop	{r3, pc}
   b57d8:	0003022c 	.word	0x0003022c

000b57dc <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b57dc:	b508      	push	{r3, lr}
   b57de:	4b02      	ldr	r3, [pc, #8]	; (b57e8 <hal_gpio_write+0xc>)
   b57e0:	681b      	ldr	r3, [r3, #0]
   b57e2:	691b      	ldr	r3, [r3, #16]
   b57e4:	9301      	str	r3, [sp, #4]
   b57e6:	bd08      	pop	{r3, pc}
   b57e8:	0003022c 	.word	0x0003022c

000b57ec <hal_i2c_begin_transmission>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b57ec:	b508      	push	{r3, lr}
   b57ee:	4b02      	ldr	r3, [pc, #8]	; (b57f8 <hal_i2c_begin_transmission+0xc>)
   b57f0:	681b      	ldr	r3, [r3, #0]
   b57f2:	699b      	ldr	r3, [r3, #24]
   b57f4:	9301      	str	r3, [sp, #4]
   b57f6:	bd08      	pop	{r3, pc}
   b57f8:	00030228 	.word	0x00030228

000b57fc <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b57fc:	b508      	push	{r3, lr}
   b57fe:	4b02      	ldr	r3, [pc, #8]	; (b5808 <hal_i2c_end_transmission+0xc>)
   b5800:	681b      	ldr	r3, [r3, #0]
   b5802:	69db      	ldr	r3, [r3, #28]
   b5804:	9301      	str	r3, [sp, #4]
   b5806:	bd08      	pop	{r3, pc}
   b5808:	00030228 	.word	0x00030228

000b580c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b580c:	b508      	push	{r3, lr}
   b580e:	4b02      	ldr	r3, [pc, #8]	; (b5818 <hal_i2c_write+0xc>)
   b5810:	681b      	ldr	r3, [r3, #0]
   b5812:	6a1b      	ldr	r3, [r3, #32]
   b5814:	9301      	str	r3, [sp, #4]
   b5816:	bd08      	pop	{r3, pc}
   b5818:	00030228 	.word	0x00030228

000b581c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b581c:	b508      	push	{r3, lr}
   b581e:	4b02      	ldr	r3, [pc, #8]	; (b5828 <hal_i2c_available+0xc>)
   b5820:	681b      	ldr	r3, [r3, #0]
   b5822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5824:	9301      	str	r3, [sp, #4]
   b5826:	bd08      	pop	{r3, pc}
   b5828:	00030228 	.word	0x00030228

000b582c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b582c:	b508      	push	{r3, lr}
   b582e:	4b02      	ldr	r3, [pc, #8]	; (b5838 <hal_i2c_read+0xc>)
   b5830:	681b      	ldr	r3, [r3, #0]
   b5832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5834:	9301      	str	r3, [sp, #4]
   b5836:	bd08      	pop	{r3, pc}
   b5838:	00030228 	.word	0x00030228

000b583c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b583c:	b508      	push	{r3, lr}
   b583e:	4b02      	ldr	r3, [pc, #8]	; (b5848 <hal_i2c_peek+0xc>)
   b5840:	681b      	ldr	r3, [r3, #0]
   b5842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5844:	9301      	str	r3, [sp, #4]
   b5846:	bd08      	pop	{r3, pc}
   b5848:	00030228 	.word	0x00030228

000b584c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b584c:	b508      	push	{r3, lr}
   b584e:	4b02      	ldr	r3, [pc, #8]	; (b5858 <hal_i2c_flush+0xc>)
   b5850:	681b      	ldr	r3, [r3, #0]
   b5852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5854:	9301      	str	r3, [sp, #4]
   b5856:	bd08      	pop	{r3, pc}
   b5858:	00030228 	.word	0x00030228

000b585c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b585c:	b508      	push	{r3, lr}
   b585e:	4b02      	ldr	r3, [pc, #8]	; (b5868 <hal_i2c_is_enabled+0xc>)
   b5860:	681b      	ldr	r3, [r3, #0]
   b5862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5864:	9301      	str	r3, [sp, #4]
   b5866:	bd08      	pop	{r3, pc}
   b5868:	00030228 	.word	0x00030228

000b586c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b586c:	b508      	push	{r3, lr}
   b586e:	4b02      	ldr	r3, [pc, #8]	; (b5878 <hal_i2c_init+0xc>)
   b5870:	681b      	ldr	r3, [r3, #0]
   b5872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5874:	9301      	str	r3, [sp, #4]
   b5876:	bd08      	pop	{r3, pc}
   b5878:	00030228 	.word	0x00030228

000b587c <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b587c:	b508      	push	{r3, lr}
   b587e:	4b02      	ldr	r3, [pc, #8]	; (b5888 <hal_i2c_lock+0xc>)
   b5880:	681b      	ldr	r3, [r3, #0]
   b5882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5884:	9301      	str	r3, [sp, #4]
   b5886:	bd08      	pop	{r3, pc}
   b5888:	00030228 	.word	0x00030228

000b588c <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b588c:	b508      	push	{r3, lr}
   b588e:	4b02      	ldr	r3, [pc, #8]	; (b5898 <hal_i2c_unlock+0xc>)
   b5890:	681b      	ldr	r3, [r3, #0]
   b5892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5894:	9301      	str	r3, [sp, #4]
   b5896:	bd08      	pop	{r3, pc}
   b5898:	00030228 	.word	0x00030228

000b589c <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b589c:	b508      	push	{r3, lr}
   b589e:	4b02      	ldr	r3, [pc, #8]	; (b58a8 <hal_i2c_request_ex+0xc>)
   b58a0:	681b      	ldr	r3, [r3, #0]
   b58a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b58a4:	9301      	str	r3, [sp, #4]
   b58a6:	bd08      	pop	{r3, pc}
   b58a8:	00030228 	.word	0x00030228

000b58ac <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b58ac:	b508      	push	{r3, lr}
   b58ae:	4b02      	ldr	r3, [pc, #8]	; (b58b8 <inet_inet_ntop+0xc>)
   b58b0:	681b      	ldr	r3, [r3, #0]
   b58b2:	695b      	ldr	r3, [r3, #20]
   b58b4:	9301      	str	r3, [sp, #4]
   b58b6:	bd08      	pop	{r3, pc}
   b58b8:	00030264 	.word	0x00030264

000b58bc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b58bc:	b508      	push	{r3, lr}
   b58be:	4b02      	ldr	r3, [pc, #8]	; (b58c8 <netdb_freeaddrinfo+0xc>)
   b58c0:	681b      	ldr	r3, [r3, #0]
   b58c2:	689b      	ldr	r3, [r3, #8]
   b58c4:	9301      	str	r3, [sp, #4]
   b58c6:	bd08      	pop	{r3, pc}
   b58c8:	00030268 	.word	0x00030268

000b58cc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b58cc:	b508      	push	{r3, lr}
   b58ce:	4b02      	ldr	r3, [pc, #8]	; (b58d8 <netdb_getaddrinfo+0xc>)
   b58d0:	681b      	ldr	r3, [r3, #0]
   b58d2:	68db      	ldr	r3, [r3, #12]
   b58d4:	9301      	str	r3, [sp, #4]
   b58d6:	bd08      	pop	{r3, pc}
   b58d8:	00030268 	.word	0x00030268

000b58dc <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b58dc:	b508      	push	{r3, lr}
   b58de:	4b02      	ldr	r3, [pc, #8]	; (b58e8 <hal_spi_init+0xc>)
   b58e0:	681b      	ldr	r3, [r3, #0]
   b58e2:	69db      	ldr	r3, [r3, #28]
   b58e4:	9301      	str	r3, [sp, #4]
   b58e6:	bd08      	pop	{r3, pc}
   b58e8:	00030230 	.word	0x00030230

000b58ec <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b58ec:	b508      	push	{r3, lr}
   b58ee:	4b02      	ldr	r3, [pc, #8]	; (b58f8 <hal_spi_is_enabled+0xc>)
   b58f0:	681b      	ldr	r3, [r3, #0]
   b58f2:	6a1b      	ldr	r3, [r3, #32]
   b58f4:	9301      	str	r3, [sp, #4]
   b58f6:	bd08      	pop	{r3, pc}
   b58f8:	00030230 	.word	0x00030230

000b58fc <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b58fc:	b508      	push	{r3, lr}
   b58fe:	4b02      	ldr	r3, [pc, #8]	; (b5908 <hal_usart_end+0xc>)
   b5900:	681b      	ldr	r3, [r3, #0]
   b5902:	689b      	ldr	r3, [r3, #8]
   b5904:	9301      	str	r3, [sp, #4]
   b5906:	bd08      	pop	{r3, pc}
   b5908:	0003023c 	.word	0x0003023c

000b590c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b590c:	b508      	push	{r3, lr}
   b590e:	4b02      	ldr	r3, [pc, #8]	; (b5918 <hal_usart_write+0xc>)
   b5910:	681b      	ldr	r3, [r3, #0]
   b5912:	68db      	ldr	r3, [r3, #12]
   b5914:	9301      	str	r3, [sp, #4]
   b5916:	bd08      	pop	{r3, pc}
   b5918:	0003023c 	.word	0x0003023c

000b591c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b591c:	b508      	push	{r3, lr}
   b591e:	4b02      	ldr	r3, [pc, #8]	; (b5928 <hal_usart_available+0xc>)
   b5920:	681b      	ldr	r3, [r3, #0]
   b5922:	691b      	ldr	r3, [r3, #16]
   b5924:	9301      	str	r3, [sp, #4]
   b5926:	bd08      	pop	{r3, pc}
   b5928:	0003023c 	.word	0x0003023c

000b592c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b592c:	b508      	push	{r3, lr}
   b592e:	4b02      	ldr	r3, [pc, #8]	; (b5938 <hal_usart_read+0xc>)
   b5930:	681b      	ldr	r3, [r3, #0]
   b5932:	695b      	ldr	r3, [r3, #20]
   b5934:	9301      	str	r3, [sp, #4]
   b5936:	bd08      	pop	{r3, pc}
   b5938:	0003023c 	.word	0x0003023c

000b593c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b593c:	b508      	push	{r3, lr}
   b593e:	4b02      	ldr	r3, [pc, #8]	; (b5948 <hal_usart_peek+0xc>)
   b5940:	681b      	ldr	r3, [r3, #0]
   b5942:	699b      	ldr	r3, [r3, #24]
   b5944:	9301      	str	r3, [sp, #4]
   b5946:	bd08      	pop	{r3, pc}
   b5948:	0003023c 	.word	0x0003023c

000b594c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b594c:	b508      	push	{r3, lr}
   b594e:	4b02      	ldr	r3, [pc, #8]	; (b5958 <hal_usart_flush+0xc>)
   b5950:	681b      	ldr	r3, [r3, #0]
   b5952:	69db      	ldr	r3, [r3, #28]
   b5954:	9301      	str	r3, [sp, #4]
   b5956:	bd08      	pop	{r3, pc}
   b5958:	0003023c 	.word	0x0003023c

000b595c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b595c:	b508      	push	{r3, lr}
   b595e:	4b02      	ldr	r3, [pc, #8]	; (b5968 <hal_usart_is_enabled+0xc>)
   b5960:	681b      	ldr	r3, [r3, #0]
   b5962:	6a1b      	ldr	r3, [r3, #32]
   b5964:	9301      	str	r3, [sp, #4]
   b5966:	bd08      	pop	{r3, pc}
   b5968:	0003023c 	.word	0x0003023c

000b596c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b596c:	b508      	push	{r3, lr}
   b596e:	4b02      	ldr	r3, [pc, #8]	; (b5978 <hal_usart_available_data_for_write+0xc>)
   b5970:	681b      	ldr	r3, [r3, #0]
   b5972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5974:	9301      	str	r3, [sp, #4]
   b5976:	bd08      	pop	{r3, pc}
   b5978:	0003023c 	.word	0x0003023c

000b597c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b597c:	b508      	push	{r3, lr}
   b597e:	4b02      	ldr	r3, [pc, #8]	; (b5988 <hal_usart_begin_config+0xc>)
   b5980:	681b      	ldr	r3, [r3, #0]
   b5982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5984:	9301      	str	r3, [sp, #4]
   b5986:	bd08      	pop	{r3, pc}
   b5988:	0003023c 	.word	0x0003023c

000b598c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b598c:	b508      	push	{r3, lr}
   b598e:	4b02      	ldr	r3, [pc, #8]	; (b5998 <hal_usart_init_ex+0xc>)
   b5990:	681b      	ldr	r3, [r3, #0]
   b5992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5994:	9301      	str	r3, [sp, #4]
   b5996:	bd08      	pop	{r3, pc}
   b5998:	0003023c 	.word	0x0003023c

000b599c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b599c:	b508      	push	{r3, lr}
   b599e:	4b02      	ldr	r3, [pc, #8]	; (b59a8 <HAL_USB_USART_Init+0xc>)
   b59a0:	681b      	ldr	r3, [r3, #0]
   b59a2:	681b      	ldr	r3, [r3, #0]
   b59a4:	9301      	str	r3, [sp, #4]
   b59a6:	bd08      	pop	{r3, pc}
   b59a8:	0003024c 	.word	0x0003024c

000b59ac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b59ac:	b508      	push	{r3, lr}
   b59ae:	4b02      	ldr	r3, [pc, #8]	; (b59b8 <HAL_USB_USART_Begin+0xc>)
   b59b0:	681b      	ldr	r3, [r3, #0]
   b59b2:	685b      	ldr	r3, [r3, #4]
   b59b4:	9301      	str	r3, [sp, #4]
   b59b6:	bd08      	pop	{r3, pc}
   b59b8:	0003024c 	.word	0x0003024c

000b59bc <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b59bc:	b508      	push	{r3, lr}
   b59be:	4b02      	ldr	r3, [pc, #8]	; (b59c8 <HAL_USB_USART_End+0xc>)
   b59c0:	681b      	ldr	r3, [r3, #0]
   b59c2:	689b      	ldr	r3, [r3, #8]
   b59c4:	9301      	str	r3, [sp, #4]
   b59c6:	bd08      	pop	{r3, pc}
   b59c8:	0003024c 	.word	0x0003024c

000b59cc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b59cc:	b508      	push	{r3, lr}
   b59ce:	4b02      	ldr	r3, [pc, #8]	; (b59d8 <HAL_USB_USART_Available_Data+0xc>)
   b59d0:	681b      	ldr	r3, [r3, #0]
   b59d2:	691b      	ldr	r3, [r3, #16]
   b59d4:	9301      	str	r3, [sp, #4]
   b59d6:	bd08      	pop	{r3, pc}
   b59d8:	0003024c 	.word	0x0003024c

000b59dc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b59dc:	b508      	push	{r3, lr}
   b59de:	4b02      	ldr	r3, [pc, #8]	; (b59e8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b59e0:	681b      	ldr	r3, [r3, #0]
   b59e2:	695b      	ldr	r3, [r3, #20]
   b59e4:	9301      	str	r3, [sp, #4]
   b59e6:	bd08      	pop	{r3, pc}
   b59e8:	0003024c 	.word	0x0003024c

000b59ec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b59ec:	b508      	push	{r3, lr}
   b59ee:	4b02      	ldr	r3, [pc, #8]	; (b59f8 <HAL_USB_USART_Receive_Data+0xc>)
   b59f0:	681b      	ldr	r3, [r3, #0]
   b59f2:	699b      	ldr	r3, [r3, #24]
   b59f4:	9301      	str	r3, [sp, #4]
   b59f6:	bd08      	pop	{r3, pc}
   b59f8:	0003024c 	.word	0x0003024c

000b59fc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b59fc:	b508      	push	{r3, lr}
   b59fe:	4b02      	ldr	r3, [pc, #8]	; (b5a08 <HAL_USB_USART_Send_Data+0xc>)
   b5a00:	681b      	ldr	r3, [r3, #0]
   b5a02:	69db      	ldr	r3, [r3, #28]
   b5a04:	9301      	str	r3, [sp, #4]
   b5a06:	bd08      	pop	{r3, pc}
   b5a08:	0003024c 	.word	0x0003024c

000b5a0c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5a0c:	b508      	push	{r3, lr}
   b5a0e:	4b02      	ldr	r3, [pc, #8]	; (b5a18 <HAL_USB_USART_Flush_Data+0xc>)
   b5a10:	681b      	ldr	r3, [r3, #0]
   b5a12:	6a1b      	ldr	r3, [r3, #32]
   b5a14:	9301      	str	r3, [sp, #4]
   b5a16:	bd08      	pop	{r3, pc}
   b5a18:	0003024c 	.word	0x0003024c

000b5a1c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5a1c:	b508      	push	{r3, lr}
   b5a1e:	4b02      	ldr	r3, [pc, #8]	; (b5a28 <panic_+0xc>)
   b5a20:	681b      	ldr	r3, [r3, #0]
   b5a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5a24:	9301      	str	r3, [sp, #4]
   b5a26:	bd08      	pop	{r3, pc}
   b5a28:	00030260 	.word	0x00030260

000b5a2c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b5a2c:	b508      	push	{r3, lr}
   b5a2e:	4b02      	ldr	r3, [pc, #8]	; (b5a38 <log_message_v+0xc>)
   b5a30:	681b      	ldr	r3, [r3, #0]
   b5a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5a34:	9301      	str	r3, [sp, #4]
   b5a36:	bd08      	pop	{r3, pc}
   b5a38:	00030260 	.word	0x00030260

000b5a3c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b5a3c:	b508      	push	{r3, lr}
   b5a3e:	4b02      	ldr	r3, [pc, #8]	; (b5a48 <log_level_name+0xc>)
   b5a40:	681b      	ldr	r3, [r3, #0]
   b5a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b5a44:	9301      	str	r3, [sp, #4]
   b5a46:	bd08      	pop	{r3, pc}
   b5a48:	00030260 	.word	0x00030260

000b5a4c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b5a4c:	b508      	push	{r3, lr}
   b5a4e:	4b02      	ldr	r3, [pc, #8]	; (b5a58 <log_set_callbacks+0xc>)
   b5a50:	681b      	ldr	r3, [r3, #0]
   b5a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b5a54:	9301      	str	r3, [sp, #4]
   b5a56:	bd08      	pop	{r3, pc}
   b5a58:	00030260 	.word	0x00030260

000b5a5c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5a5c:	b508      	push	{r3, lr}
   b5a5e:	4b02      	ldr	r3, [pc, #8]	; (b5a68 <set_system_mode+0xc>)
   b5a60:	681b      	ldr	r3, [r3, #0]
   b5a62:	685b      	ldr	r3, [r3, #4]
   b5a64:	9301      	str	r3, [sp, #4]
   b5a66:	bd08      	pop	{r3, pc}
   b5a68:	00030220 	.word	0x00030220

000b5a6c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5a6c:	b508      	push	{r3, lr}
   b5a6e:	4b02      	ldr	r3, [pc, #8]	; (b5a78 <system_delay_ms+0xc>)
   b5a70:	681b      	ldr	r3, [r3, #0]
   b5a72:	695b      	ldr	r3, [r3, #20]
   b5a74:	9301      	str	r3, [sp, #4]
   b5a76:	bd08      	pop	{r3, pc}
   b5a78:	00030220 	.word	0x00030220

000b5a7c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5a7c:	b508      	push	{r3, lr}
   b5a7e:	4b02      	ldr	r3, [pc, #8]	; (b5a88 <system_thread_set_state+0xc>)
   b5a80:	681b      	ldr	r3, [r3, #0]
   b5a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5a84:	9301      	str	r3, [sp, #4]
   b5a86:	bd08      	pop	{r3, pc}
   b5a88:	00030220 	.word	0x00030220

000b5a8c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b5a8c:	b508      	push	{r3, lr}
   b5a8e:	4b02      	ldr	r3, [pc, #8]	; (b5a98 <application_thread_current+0xc>)
   b5a90:	681b      	ldr	r3, [r3, #0]
   b5a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5a94:	9301      	str	r3, [sp, #4]
   b5a96:	bd08      	pop	{r3, pc}
   b5a98:	00030220 	.word	0x00030220

000b5a9c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5a9c:	b508      	push	{r3, lr}
   b5a9e:	4b02      	ldr	r3, [pc, #8]	; (b5aa8 <application_thread_invoke+0xc>)
   b5aa0:	681b      	ldr	r3, [r3, #0]
   b5aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5aa4:	9301      	str	r3, [sp, #4]
   b5aa6:	bd08      	pop	{r3, pc}
   b5aa8:	00030220 	.word	0x00030220

000b5aac <system_format_diag_data>:
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))
   b5aac:	b508      	push	{r3, lr}
   b5aae:	4b03      	ldr	r3, [pc, #12]	; (b5abc <system_format_diag_data+0x10>)
   b5ab0:	681b      	ldr	r3, [r3, #0]
   b5ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b5ab6:	9301      	str	r3, [sp, #4]
   b5ab8:	bd08      	pop	{r3, pc}
   b5aba:	0000      	.short	0x0000
   b5abc:	00030220 	.word	0x00030220

000b5ac0 <system_ctrl_set_app_request_handler>:

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5ac0:	b508      	push	{r3, lr}
   b5ac2:	4b03      	ldr	r3, [pc, #12]	; (b5ad0 <system_ctrl_set_app_request_handler+0x10>)
   b5ac4:	681b      	ldr	r3, [r3, #0]
   b5ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5aca:	9301      	str	r3, [sp, #4]
   b5acc:	bd08      	pop	{r3, pc}
   b5ace:	0000      	.short	0x0000
   b5ad0:	00030220 	.word	0x00030220

000b5ad4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5ad4:	b508      	push	{r3, lr}
   b5ad6:	4b03      	ldr	r3, [pc, #12]	; (b5ae4 <system_ctrl_set_result+0x10>)
   b5ad8:	681b      	ldr	r3, [r3, #0]
   b5ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5ade:	9301      	str	r3, [sp, #4]
   b5ae0:	bd08      	pop	{r3, pc}
   b5ae2:	0000      	.short	0x0000
   b5ae4:	00030220 	.word	0x00030220

000b5ae8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b5ae8:	b508      	push	{r3, lr}
   b5aea:	4b02      	ldr	r3, [pc, #8]	; (b5af4 <spark_variable+0xc>)
   b5aec:	681b      	ldr	r3, [r3, #0]
   b5aee:	681b      	ldr	r3, [r3, #0]
   b5af0:	9301      	str	r3, [sp, #4]
   b5af2:	bd08      	pop	{r3, pc}
   b5af4:	00030244 	.word	0x00030244

000b5af8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b5af8:	b508      	push	{r3, lr}
   b5afa:	4b02      	ldr	r3, [pc, #8]	; (b5b04 <spark_function+0xc>)
   b5afc:	681b      	ldr	r3, [r3, #0]
   b5afe:	685b      	ldr	r3, [r3, #4]
   b5b00:	9301      	str	r3, [sp, #4]
   b5b02:	bd08      	pop	{r3, pc}
   b5b04:	00030244 	.word	0x00030244

000b5b08 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5b08:	b508      	push	{r3, lr}
   b5b0a:	4b02      	ldr	r3, [pc, #8]	; (b5b14 <spark_process+0xc>)
   b5b0c:	681b      	ldr	r3, [r3, #0]
   b5b0e:	689b      	ldr	r3, [r3, #8]
   b5b10:	9301      	str	r3, [sp, #4]
   b5b12:	bd08      	pop	{r3, pc}
   b5b14:	00030244 	.word	0x00030244

000b5b18 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5b18:	b508      	push	{r3, lr}
   b5b1a:	4b02      	ldr	r3, [pc, #8]	; (b5b24 <spark_cloud_flag_connected+0xc>)
   b5b1c:	681b      	ldr	r3, [r3, #0]
   b5b1e:	695b      	ldr	r3, [r3, #20]
   b5b20:	9301      	str	r3, [sp, #4]
   b5b22:	bd08      	pop	{r3, pc}
   b5b24:	00030244 	.word	0x00030244

000b5b28 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5b28:	b508      	push	{r3, lr}
   b5b2a:	4b02      	ldr	r3, [pc, #8]	; (b5b34 <spark_send_event+0xc>)
   b5b2c:	681b      	ldr	r3, [r3, #0]
   b5b2e:	6a1b      	ldr	r3, [r3, #32]
   b5b30:	9301      	str	r3, [sp, #4]
   b5b32:	bd08      	pop	{r3, pc}
   b5b34:	00030244 	.word	0x00030244

000b5b38 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b5b38:	b508      	push	{r3, lr}
   b5b3a:	4b02      	ldr	r3, [pc, #8]	; (b5b44 <spark_sync_time+0xc>)
   b5b3c:	681b      	ldr	r3, [r3, #0]
   b5b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b40:	9301      	str	r3, [sp, #4]
   b5b42:	bd08      	pop	{r3, pc}
   b5b44:	00030244 	.word	0x00030244

000b5b48 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5b48:	b508      	push	{r3, lr}
   b5b4a:	4b02      	ldr	r3, [pc, #8]	; (b5b54 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5b4c:	681b      	ldr	r3, [r3, #0]
   b5b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5b50:	9301      	str	r3, [sp, #4]
   b5b52:	bd08      	pop	{r3, pc}
   b5b54:	00030244 	.word	0x00030244

000b5b58 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   b5b58:	b508      	push	{r3, lr}
   b5b5a:	4b02      	ldr	r3, [pc, #8]	; (b5b64 <network_config+0xc>)
   b5b5c:	681b      	ldr	r3, [r3, #0]
   b5b5e:	681b      	ldr	r3, [r3, #0]
   b5b60:	9301      	str	r3, [sp, #4]
   b5b62:	bd08      	pop	{r3, pc}
   b5b64:	00030240 	.word	0x00030240

000b5b68 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5b68:	b508      	push	{r3, lr}
   b5b6a:	4b02      	ldr	r3, [pc, #8]	; (b5b74 <network_connect+0xc>)
   b5b6c:	681b      	ldr	r3, [r3, #0]
   b5b6e:	685b      	ldr	r3, [r3, #4]
   b5b70:	9301      	str	r3, [sp, #4]
   b5b72:	bd08      	pop	{r3, pc}
   b5b74:	00030240 	.word	0x00030240

000b5b78 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5b78:	b508      	push	{r3, lr}
   b5b7a:	4b02      	ldr	r3, [pc, #8]	; (b5b84 <network_connecting+0xc>)
   b5b7c:	681b      	ldr	r3, [r3, #0]
   b5b7e:	689b      	ldr	r3, [r3, #8]
   b5b80:	9301      	str	r3, [sp, #4]
   b5b82:	bd08      	pop	{r3, pc}
   b5b84:	00030240 	.word	0x00030240

000b5b88 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5b88:	b508      	push	{r3, lr}
   b5b8a:	4b02      	ldr	r3, [pc, #8]	; (b5b94 <network_disconnect+0xc>)
   b5b8c:	681b      	ldr	r3, [r3, #0]
   b5b8e:	68db      	ldr	r3, [r3, #12]
   b5b90:	9301      	str	r3, [sp, #4]
   b5b92:	bd08      	pop	{r3, pc}
   b5b94:	00030240 	.word	0x00030240

000b5b98 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5b98:	b508      	push	{r3, lr}
   b5b9a:	4b02      	ldr	r3, [pc, #8]	; (b5ba4 <network_ready+0xc>)
   b5b9c:	681b      	ldr	r3, [r3, #0]
   b5b9e:	691b      	ldr	r3, [r3, #16]
   b5ba0:	9301      	str	r3, [sp, #4]
   b5ba2:	bd08      	pop	{r3, pc}
   b5ba4:	00030240 	.word	0x00030240

000b5ba8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5ba8:	b508      	push	{r3, lr}
   b5baa:	4b02      	ldr	r3, [pc, #8]	; (b5bb4 <network_on+0xc>)
   b5bac:	681b      	ldr	r3, [r3, #0]
   b5bae:	695b      	ldr	r3, [r3, #20]
   b5bb0:	9301      	str	r3, [sp, #4]
   b5bb2:	bd08      	pop	{r3, pc}
   b5bb4:	00030240 	.word	0x00030240

000b5bb8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5bb8:	b508      	push	{r3, lr}
   b5bba:	4b02      	ldr	r3, [pc, #8]	; (b5bc4 <network_off+0xc>)
   b5bbc:	681b      	ldr	r3, [r3, #0]
   b5bbe:	699b      	ldr	r3, [r3, #24]
   b5bc0:	9301      	str	r3, [sp, #4]
   b5bc2:	bd08      	pop	{r3, pc}
   b5bc4:	00030240 	.word	0x00030240

000b5bc8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5bc8:	b508      	push	{r3, lr}
   b5bca:	4b02      	ldr	r3, [pc, #8]	; (b5bd4 <network_listen+0xc>)
   b5bcc:	681b      	ldr	r3, [r3, #0]
   b5bce:	69db      	ldr	r3, [r3, #28]
   b5bd0:	9301      	str	r3, [sp, #4]
   b5bd2:	bd08      	pop	{r3, pc}
   b5bd4:	00030240 	.word	0x00030240

000b5bd8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5bd8:	b508      	push	{r3, lr}
   b5bda:	4b02      	ldr	r3, [pc, #8]	; (b5be4 <network_listening+0xc>)
   b5bdc:	681b      	ldr	r3, [r3, #0]
   b5bde:	6a1b      	ldr	r3, [r3, #32]
   b5be0:	9301      	str	r3, [sp, #4]
   b5be2:	bd08      	pop	{r3, pc}
   b5be4:	00030240 	.word	0x00030240

000b5be8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5be8:	b508      	push	{r3, lr}
   b5bea:	4b02      	ldr	r3, [pc, #8]	; (b5bf4 <network_set_listen_timeout+0xc>)
   b5bec:	681b      	ldr	r3, [r3, #0]
   b5bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5bf0:	9301      	str	r3, [sp, #4]
   b5bf2:	bd08      	pop	{r3, pc}
   b5bf4:	00030240 	.word	0x00030240

000b5bf8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5bf8:	b508      	push	{r3, lr}
   b5bfa:	4b02      	ldr	r3, [pc, #8]	; (b5c04 <network_get_listen_timeout+0xc>)
   b5bfc:	681b      	ldr	r3, [r3, #0]
   b5bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5c00:	9301      	str	r3, [sp, #4]
   b5c02:	bd08      	pop	{r3, pc}
   b5c04:	00030240 	.word	0x00030240

000b5c08 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5c08:	b508      	push	{r3, lr}
   b5c0a:	4b02      	ldr	r3, [pc, #8]	; (b5c14 <network_is_on+0xc>)
   b5c0c:	681b      	ldr	r3, [r3, #0]
   b5c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5c10:	9301      	str	r3, [sp, #4]
   b5c12:	bd08      	pop	{r3, pc}
   b5c14:	00030240 	.word	0x00030240

000b5c18 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5c18:	b508      	push	{r3, lr}
   b5c1a:	4b02      	ldr	r3, [pc, #8]	; (b5c24 <network_is_off+0xc>)
   b5c1c:	681b      	ldr	r3, [r3, #0]
   b5c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5c20:	9301      	str	r3, [sp, #4]
   b5c22:	bd08      	pop	{r3, pc}
   b5c24:	00030240 	.word	0x00030240

000b5c28 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5c28:	b508      	push	{r3, lr}
   b5c2a:	4b02      	ldr	r3, [pc, #8]	; (b5c34 <malloc+0xc>)
   b5c2c:	681b      	ldr	r3, [r3, #0]
   b5c2e:	681b      	ldr	r3, [r3, #0]
   b5c30:	9301      	str	r3, [sp, #4]
   b5c32:	bd08      	pop	{r3, pc}
   b5c34:	0003021c 	.word	0x0003021c

000b5c38 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5c38:	b508      	push	{r3, lr}
   b5c3a:	4b02      	ldr	r3, [pc, #8]	; (b5c44 <free+0xc>)
   b5c3c:	681b      	ldr	r3, [r3, #0]
   b5c3e:	685b      	ldr	r3, [r3, #4]
   b5c40:	9301      	str	r3, [sp, #4]
   b5c42:	bd08      	pop	{r3, pc}
   b5c44:	0003021c 	.word	0x0003021c

000b5c48 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5c48:	b508      	push	{r3, lr}
   b5c4a:	4b02      	ldr	r3, [pc, #8]	; (b5c54 <realloc+0xc>)
   b5c4c:	681b      	ldr	r3, [r3, #0]
   b5c4e:	689b      	ldr	r3, [r3, #8]
   b5c50:	9301      	str	r3, [sp, #4]
   b5c52:	bd08      	pop	{r3, pc}
   b5c54:	0003021c 	.word	0x0003021c

000b5c58 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5c58:	b508      	push	{r3, lr}
   b5c5a:	4b02      	ldr	r3, [pc, #8]	; (b5c64 <vsnprintf+0xc>)
   b5c5c:	681b      	ldr	r3, [r3, #0]
   b5c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5c60:	9301      	str	r3, [sp, #4]
   b5c62:	bd08      	pop	{r3, pc}
   b5c64:	0003021c 	.word	0x0003021c

000b5c68 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5c68:	b508      	push	{r3, lr}
   b5c6a:	4b02      	ldr	r3, [pc, #8]	; (b5c74 <abort+0xc>)
   b5c6c:	681b      	ldr	r3, [r3, #0]
   b5c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c70:	9301      	str	r3, [sp, #4]
   b5c72:	bd08      	pop	{r3, pc}
   b5c74:	0003021c 	.word	0x0003021c

000b5c78 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5c78:	b508      	push	{r3, lr}
   b5c7a:	4b02      	ldr	r3, [pc, #8]	; (b5c84 <_malloc_r+0xc>)
   b5c7c:	681b      	ldr	r3, [r3, #0]
   b5c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5c80:	9301      	str	r3, [sp, #4]
   b5c82:	bd08      	pop	{r3, pc}
   b5c84:	0003021c 	.word	0x0003021c

000b5c88 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5c88:	b508      	push	{r3, lr}
   b5c8a:	4b02      	ldr	r3, [pc, #8]	; (b5c94 <__errno+0xc>)
   b5c8c:	681b      	ldr	r3, [r3, #0]
   b5c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5c90:	9301      	str	r3, [sp, #4]
   b5c92:	bd08      	pop	{r3, pc}
   b5c94:	0003021c 	.word	0x0003021c

000b5c98 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5c98:	b508      	push	{r3, lr}
   b5c9a:	4b02      	ldr	r3, [pc, #8]	; (b5ca4 <__assert_func+0xc>)
   b5c9c:	681b      	ldr	r3, [r3, #0]
   b5c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ca0:	9301      	str	r3, [sp, #4]
   b5ca2:	bd08      	pop	{r3, pc}
   b5ca4:	0003021c 	.word	0x0003021c

000b5ca8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5ca8:	b508      	push	{r3, lr}
   b5caa:	4b02      	ldr	r3, [pc, #8]	; (b5cb4 <newlib_impure_ptr_callback+0xc>)
   b5cac:	681b      	ldr	r3, [r3, #0]
   b5cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5cb0:	9301      	str	r3, [sp, #4]
   b5cb2:	bd08      	pop	{r3, pc}
   b5cb4:	0003021c 	.word	0x0003021c

000b5cb8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5cb8:	2100      	movs	r1, #0
   b5cba:	f7ff bed7 	b.w	b5a6c <system_delay_ms>

000b5cbe <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b5cbe:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5cc0:	6883      	ldr	r3, [r0, #8]
   b5cc2:	4604      	mov	r4, r0
   b5cc4:	b90b      	cbnz	r3, b5cca <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5cc6:	f002 fe51 	bl	b896c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5cca:	68c3      	ldr	r3, [r0, #12]
   b5ccc:	4798      	blx	r3
      if (_M_manager)
   b5cce:	68a3      	ldr	r3, [r4, #8]
   b5cd0:	b11b      	cbz	r3, b5cda <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5cd2:	2203      	movs	r2, #3
   b5cd4:	4621      	mov	r1, r4
   b5cd6:	4620      	mov	r0, r4
   b5cd8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b5cda:	4620      	mov	r0, r4
   b5cdc:	2110      	movs	r1, #16
}
   b5cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5ce2:	f7ff b840 	b.w	b4d66 <_ZdlPvj>

000b5ce6 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5ce6:	b510      	push	{r4, lr}
      if (_M_manager)
   b5ce8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5cea:	4604      	mov	r4, r0
      if (_M_manager)
   b5cec:	b113      	cbz	r3, b5cf4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5cee:	2203      	movs	r2, #3
   b5cf0:	4601      	mov	r1, r0
   b5cf2:	4798      	blx	r3
    }
   b5cf4:	4620      	mov	r0, r4
   b5cf6:	bd10      	pop	{r4, pc}

000b5cf8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5cf8:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5cfa:	6843      	ldr	r3, [r0, #4]
   b5cfc:	3b01      	subs	r3, #1
    {
   b5cfe:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5d00:	6043      	str	r3, [r0, #4]
   b5d02:	b963      	cbnz	r3, b5d1e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5d04:	6803      	ldr	r3, [r0, #0]
   b5d06:	689b      	ldr	r3, [r3, #8]
   b5d08:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5d0a:	68a3      	ldr	r3, [r4, #8]
   b5d0c:	3b01      	subs	r3, #1
   b5d0e:	60a3      	str	r3, [r4, #8]
   b5d10:	b92b      	cbnz	r3, b5d1e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5d12:	6823      	ldr	r3, [r4, #0]
   b5d14:	4620      	mov	r0, r4
   b5d16:	68db      	ldr	r3, [r3, #12]
    }
   b5d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5d1c:	4718      	bx	r3
    }
   b5d1e:	bd10      	pop	{r4, pc}

000b5d20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5d20:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5d22:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5d26:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5d28:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b5d2c:	42ae      	cmp	r6, r5
   b5d2e:	d004      	beq.n	b5d3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b5d30:	4628      	mov	r0, r5
   b5d32:	f002 f9a1 	bl	b8078 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5d36:	3510      	adds	r5, #16
   b5d38:	e7f8      	b.n	b5d2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5d3a:	6820      	ldr	r0, [r4, #0]
   b5d3c:	f7ff ff7c 	bl	b5c38 <free>
    AllocatorT::free(data_);
}
   b5d40:	4620      	mov	r0, r4
   b5d42:	bd70      	pop	{r4, r5, r6, pc}

000b5d44 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5d44:	b513      	push	{r0, r1, r4, lr}
   b5d46:	460b      	mov	r3, r1
   b5d48:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d4a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5d4e:	466c      	mov	r4, sp
   b5d50:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5d54:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5d58:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5d5c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5d60:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5d64:	b002      	add	sp, #8
   b5d66:	bd10      	pop	{r4, pc}

000b5d68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5d68:	4802      	ldr	r0, [pc, #8]	; (b5d74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5d6a:	2300      	movs	r3, #0
   b5d6c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5d6e:	f7ff bced 	b.w	b574c <os_mutex_recursive_create>
   b5d72:	bf00      	nop
   b5d74:	2003e644 	.word	0x2003e644

000b5d78 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b5d78:	2200      	movs	r2, #0
   b5d7a:	6840      	ldr	r0, [r0, #4]
   b5d7c:	4611      	mov	r1, r2
   b5d7e:	f7ff bf0b 	b.w	b5b98 <network_ready>

000b5d82 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b5d82:	2200      	movs	r2, #0
   b5d84:	6840      	ldr	r0, [r0, #4]
   b5d86:	4611      	mov	r1, r2
   b5d88:	f7ff bf26 	b.w	b5bd8 <network_listening>

000b5d8c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5d8c:	2200      	movs	r2, #0
   b5d8e:	6840      	ldr	r0, [r0, #4]
   b5d90:	4611      	mov	r1, r2
   b5d92:	f7ff bf31 	b.w	b5bf8 <network_get_listen_timeout>

000b5d96 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5d96:	6840      	ldr	r0, [r0, #4]
   b5d98:	2200      	movs	r2, #0
   b5d9a:	f7ff bf25 	b.w	b5be8 <network_set_listen_timeout>

000b5d9e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5d9e:	6840      	ldr	r0, [r0, #4]
   b5da0:	2200      	movs	r2, #0
   b5da2:	f081 0101 	eor.w	r1, r1, #1
   b5da6:	f7ff bf0f 	b.w	b5bc8 <network_listen>

000b5daa <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5daa:	2300      	movs	r3, #0
   b5dac:	6840      	ldr	r0, [r0, #4]
   b5dae:	461a      	mov	r2, r3
   b5db0:	4619      	mov	r1, r3
   b5db2:	f7ff bf01 	b.w	b5bb8 <network_off>

000b5db6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5db6:	2300      	movs	r3, #0
   b5db8:	6840      	ldr	r0, [r0, #4]
   b5dba:	461a      	mov	r2, r3
   b5dbc:	4619      	mov	r1, r3
   b5dbe:	f7ff bef3 	b.w	b5ba8 <network_on>

000b5dc2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5dc2:	2200      	movs	r2, #0
   b5dc4:	6840      	ldr	r0, [r0, #4]
   b5dc6:	4611      	mov	r1, r2
   b5dc8:	f7ff bed6 	b.w	b5b78 <network_connecting>

000b5dcc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5dcc:	6840      	ldr	r0, [r0, #4]
   b5dce:	2200      	movs	r2, #0
   b5dd0:	2102      	movs	r1, #2
   b5dd2:	f7ff bed9 	b.w	b5b88 <network_disconnect>

000b5dd6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5dd6:	2300      	movs	r3, #0
   b5dd8:	6840      	ldr	r0, [r0, #4]
   b5dda:	461a      	mov	r2, r3
   b5ddc:	f7ff bec4 	b.w	b5b68 <network_connect>

000b5de0 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b5de0:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b5de2:	4b13      	ldr	r3, [pc, #76]	; (b5e30 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b5de4:	6003      	str	r3, [r0, #0]
   b5de6:	2518      	movs	r5, #24
   b5de8:	3330      	adds	r3, #48	; 0x30
   b5dea:	b086      	sub	sp, #24
   b5dec:	460e      	mov	r6, r1
   b5dee:	6043      	str	r3, [r0, #4]
   b5df0:	462a      	mov	r2, r5
   b5df2:	2100      	movs	r1, #0
   b5df4:	4604      	mov	r4, r0
   b5df6:	3008      	adds	r0, #8
   b5df8:	f002 fdf2 	bl	b89e0 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b5dfc:	2200      	movs	r2, #0
   b5dfe:	6870      	ldr	r0, [r6, #4]
   b5e00:	4611      	mov	r1, r2
   b5e02:	f7ff fec9 	bl	b5b98 <network_ready>
   b5e06:	b178      	cbz	r0, b5e28 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b5e08:	2100      	movs	r1, #0
   b5e0a:	462a      	mov	r2, r5
   b5e0c:	4668      	mov	r0, sp
   b5e0e:	f002 fde7 	bl	b89e0 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b5e12:	4669      	mov	r1, sp
   b5e14:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b5e16:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b5e1a:	f7ff fc8f 	bl	b573c <cellular_signal>
   b5e1e:	b918      	cbnz	r0, b5e28 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b5e20:	4669      	mov	r1, sp
   b5e22:	4620      	mov	r0, r4
   b5e24:	f000 f8b8 	bl	b5f98 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b5e28:	4620      	mov	r0, r4
   b5e2a:	b006      	add	sp, #24
   b5e2c:	bd70      	pop	{r4, r5, r6, pc}
   b5e2e:	bf00      	nop
   b5e30:	000b8ee8 	.word	0x000b8ee8

000b5e34 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b5e34:	4b08      	ldr	r3, [pc, #32]	; (b5e58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b5e36:	b510      	push	{r4, lr}
   b5e38:	2428      	movs	r4, #40	; 0x28
   b5e3a:	4622      	mov	r2, r4
   b5e3c:	4618      	mov	r0, r3
   b5e3e:	2100      	movs	r1, #0
   b5e40:	f002 fdce 	bl	b89e0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5e44:	4b05      	ldr	r3, [pc, #20]	; (b5e5c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b5e46:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b5e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5e4c:	6042      	str	r2, [r0, #4]
   b5e4e:	2204      	movs	r2, #4
   b5e50:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b5e52:	4a03      	ldr	r2, [pc, #12]	; (b5e60 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b5e54:	601a      	str	r2, [r3, #0]
   b5e56:	bd10      	pop	{r4, pc}
   b5e58:	2003e650 	.word	0x2003e650
   b5e5c:	2003e648 	.word	0x2003e648
   b5e60:	000b8eac 	.word	0x000b8eac

000b5e64 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b5e64:	4770      	bx	lr

000b5e66 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b5e66:	7b00      	ldrb	r0, [r0, #12]
   b5e68:	4770      	bx	lr

000b5e6a <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b5e6a:	7b03      	ldrb	r3, [r0, #12]
   b5e6c:	b14b      	cbz	r3, b5e82 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b5e6e:	6903      	ldr	r3, [r0, #16]
   b5e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b5e74:	d005      	beq.n	b5e82 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b5e76:	6980      	ldr	r0, [r0, #24]
   b5e78:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b5e7c:	bf18      	it	ne
   b5e7e:	2001      	movne	r0, #1
   b5e80:	4770      	bx	lr
   b5e82:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b5e84:	4770      	bx	lr

000b5e86 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b5e86:	6803      	ldr	r3, [r0, #0]
   b5e88:	6a1b      	ldr	r3, [r3, #32]
   b5e8a:	4718      	bx	r3

000b5e8c <_ZNK14CellularSignal7printToER5Print>:
{
   b5e8c:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b5e8e:	6803      	ldr	r3, [r0, #0]
{
   b5e90:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b5e92:	691b      	ldr	r3, [r3, #16]
{
   b5e94:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b5e96:	4798      	blx	r3
   b5e98:	2102      	movs	r1, #2
   b5e9a:	4628      	mov	r0, r5
   b5e9c:	f002 f864 	bl	b7f68 <_ZN5Print5printEfi>
    n += p.print(',');
   b5ea0:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b5ea2:	4604      	mov	r4, r0
    n += p.print(',');
   b5ea4:	4628      	mov	r0, r5
   b5ea6:	f001 ff75 	bl	b7d94 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b5eaa:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b5eac:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b5eae:	699b      	ldr	r3, [r3, #24]
   b5eb0:	4630      	mov	r0, r6
   b5eb2:	4798      	blx	r3
   b5eb4:	2102      	movs	r1, #2
   b5eb6:	4628      	mov	r0, r5
   b5eb8:	f002 f856 	bl	b7f68 <_ZN5Print5printEfi>
}
   b5ebc:	4420      	add	r0, r4
   b5ebe:	bd70      	pop	{r4, r5, r6, pc}

000b5ec0 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b5ec0:	f1a0 0004 	sub.w	r0, r0, #4
   b5ec4:	f7ff bfe2 	b.w	b5e8c <_ZNK14CellularSignal7printToER5Print>

000b5ec8 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b5ec8:	b510      	push	{r4, lr}
   b5eca:	2120      	movs	r1, #32
   b5ecc:	4604      	mov	r4, r0
   b5ece:	f7fe ff4a 	bl	b4d66 <_ZdlPvj>
   b5ed2:	4620      	mov	r0, r4
   b5ed4:	bd10      	pop	{r4, pc}
	...

000b5ed8 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b5ed8:	7b03      	ldrb	r3, [r0, #12]
   b5eda:	b17b      	cbz	r3, b5efc <_ZNK14CellularSignal11getStrengthEv+0x24>
   b5edc:	6943      	ldr	r3, [r0, #20]
   b5ede:	2b00      	cmp	r3, #0
   b5ee0:	db0c      	blt.n	b5efc <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b5ee2:	ee07 3a90 	vmov	s15, r3
   b5ee6:	ed9f 7a07 	vldr	s14, [pc, #28]	; b5f04 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b5eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5eee:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b5ef2:	eddf 7a05 	vldr	s15, [pc, #20]	; b5f08 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b5ef6:	ee20 0a27 	vmul.f32	s0, s0, s15
   b5efa:	4770      	bx	lr
    return -1.0f;
   b5efc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b5f00:	4770      	bx	lr
   b5f02:	bf00      	nop
   b5f04:	477fff00 	.word	0x477fff00
   b5f08:	42c80000 	.word	0x42c80000

000b5f0c <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b5f0c:	7b03      	ldrb	r3, [r0, #12]
   b5f0e:	b163      	cbz	r3, b5f2a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b5f10:	6903      	ldr	r3, [r0, #16]
   b5f12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b5f16:	d008      	beq.n	b5f2a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b5f18:	ee07 3a90 	vmov	s15, r3
   b5f1c:	ed9f 7a04 	vldr	s14, [pc, #16]	; b5f30 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b5f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5f24:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b5f28:	4770      	bx	lr
    return 0.0f;
   b5f2a:	ed9f 0a02 	vldr	s0, [pc, #8]	; b5f34 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b5f2e:	4770      	bx	lr
   b5f30:	42c80000 	.word	0x42c80000
   b5f34:	00000000 	.word	0x00000000

000b5f38 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b5f38:	7b03      	ldrb	r3, [r0, #12]
   b5f3a:	b17b      	cbz	r3, b5f5c <_ZNK14CellularSignal10getQualityEv+0x24>
   b5f3c:	69c3      	ldr	r3, [r0, #28]
   b5f3e:	2b00      	cmp	r3, #0
   b5f40:	db0c      	blt.n	b5f5c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b5f42:	ee07 3a90 	vmov	s15, r3
   b5f46:	ed9f 7a07 	vldr	s14, [pc, #28]	; b5f64 <_ZNK14CellularSignal10getQualityEv+0x2c>
   b5f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5f4e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b5f52:	eddf 7a05 	vldr	s15, [pc, #20]	; b5f68 <_ZNK14CellularSignal10getQualityEv+0x30>
   b5f56:	ee20 0a27 	vmul.f32	s0, s0, s15
   b5f5a:	4770      	bx	lr
    return -1.0f;
   b5f5c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b5f60:	4770      	bx	lr
   b5f62:	bf00      	nop
   b5f64:	477fff00 	.word	0x477fff00
   b5f68:	42c80000 	.word	0x42c80000

000b5f6c <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b5f6c:	7b03      	ldrb	r3, [r0, #12]
   b5f6e:	b163      	cbz	r3, b5f8a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b5f70:	6983      	ldr	r3, [r0, #24]
   b5f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b5f76:	d008      	beq.n	b5f8a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b5f78:	ee07 3a90 	vmov	s15, r3
   b5f7c:	ed9f 7a04 	vldr	s14, [pc, #16]	; b5f90 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b5f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5f84:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b5f88:	4770      	bx	lr
    return 0.0f;
   b5f8a:	ed9f 0a02 	vldr	s0, [pc, #8]	; b5f94 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b5f8e:	4770      	bx	lr
   b5f90:	42c80000 	.word	0x42c80000
   b5f94:	00000000 	.word	0x00000000

000b5f98 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b5f98:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b5f9a:	460d      	mov	r5, r1
   b5f9c:	f100 0408 	add.w	r4, r0, #8
   b5fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5fa4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5fa8:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b5fac:	2001      	movs	r0, #1
   b5fae:	bd30      	pop	{r4, r5, pc}

000b5fb0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5fb0:	4770      	bx	lr

000b5fb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5fb2:	2000      	movs	r0, #0
   b5fb4:	4770      	bx	lr

000b5fb6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5fb6:	b510      	push	{r4, lr}
   b5fb8:	2110      	movs	r1, #16
   b5fba:	4604      	mov	r4, r0
   b5fbc:	f7fe fed3 	bl	b4d66 <_ZdlPvj>
   b5fc0:	4620      	mov	r0, r4
   b5fc2:	bd10      	pop	{r4, pc}

000b5fc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5fc4:	b508      	push	{r3, lr}
      { delete this; }
   b5fc6:	f7ff fff6 	bl	b5fb6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b5fca:	bd08      	pop	{r3, pc}

000b5fcc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5fcc:	b530      	push	{r4, r5, lr}
        type_(type) {
   b5fce:	2200      	movs	r2, #0
   b5fd0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5fd4:	6002      	str	r2, [r0, #0]
   b5fd6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5fd8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b5fda:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5fdc:	680c      	ldr	r4, [r1, #0]
   b5fde:	8085      	strh	r5, [r0, #4]
   b5fe0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5fe2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5fe4:	bd30      	pop	{r4, r5, pc}

000b5fe6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5fe6:	b510      	push	{r4, lr}
   b5fe8:	4604      	mov	r4, r0
    free((void*)msg_);
   b5fea:	6800      	ldr	r0, [r0, #0]
   b5fec:	f7ff fe24 	bl	b5c38 <free>
}
   b5ff0:	4620      	mov	r0, r4
   b5ff2:	bd10      	pop	{r4, pc}

000b5ff4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5ff4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5ff6:	68c4      	ldr	r4, [r0, #12]
   b5ff8:	b1f4      	cbz	r4, b6038 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b5ffa:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5ffc:	2b02      	cmp	r3, #2
   b5ffe:	d103      	bne.n	b6008 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6000:	f104 000c 	add.w	r0, r4, #12
   b6004:	f7ff ffef 	bl	b5fe6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6008:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b600a:	b135      	cbz	r5, b601a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b600c:	4628      	mov	r0, r5
   b600e:	f7ff fe6a 	bl	b5ce6 <_ZNSt14_Function_baseD1Ev>
   b6012:	2110      	movs	r1, #16
   b6014:	4628      	mov	r0, r5
   b6016:	f7fe fea6 	bl	b4d66 <_ZdlPvj>
   b601a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b601c:	b135      	cbz	r5, b602c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b601e:	4628      	mov	r0, r5
   b6020:	f7ff fe61 	bl	b5ce6 <_ZNSt14_Function_baseD1Ev>
   b6024:	2110      	movs	r1, #16
   b6026:	4628      	mov	r0, r5
   b6028:	f7fe fe9d 	bl	b4d66 <_ZdlPvj>
   b602c:	4620      	mov	r0, r4
   b602e:	2114      	movs	r1, #20
   b6030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6034:	f7fe be97 	b.w	b4d66 <_ZdlPvj>
   b6038:	bd38      	pop	{r3, r4, r5, pc}

000b603a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b603a:	b510      	push	{r4, lr}
   b603c:	b088      	sub	sp, #32
   b603e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b6040:	4668      	mov	r0, sp
   b6042:	f002 f864 	bl	b810e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b6046:	4669      	mov	r1, sp
   b6048:	a804      	add	r0, sp, #16
   b604a:	f002 f8ab 	bl	b81a4 <_ZN6StringC1ERKS_>
   b604e:	a804      	add	r0, sp, #16
   b6050:	47a0      	blx	r4
   b6052:	4604      	mov	r4, r0
   b6054:	a804      	add	r0, sp, #16
   b6056:	f002 f80f 	bl	b8078 <_ZN6StringD1Ev>
    String p(param);
   b605a:	4668      	mov	r0, sp
   b605c:	f002 f80c 	bl	b8078 <_ZN6StringD1Ev>
}
   b6060:	4620      	mov	r0, r4
   b6062:	b008      	add	sp, #32
   b6064:	bd10      	pop	{r4, pc}

000b6066 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b6066:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b6068:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b606a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b606e:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b6070:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b6072:	461a      	mov	r2, r3
   b6074:	4669      	mov	r1, sp
   b6076:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b6078:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b607c:	f8ad 4000 	strh.w	r4, [sp]
   b6080:	f7ff fd3a 	bl	b5af8 <spark_function>
}
   b6084:	b004      	add	sp, #16
   b6086:	bd10      	pop	{r4, pc}

000b6088 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6088:	680b      	ldr	r3, [r1, #0]
   b608a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b608c:	684b      	ldr	r3, [r1, #4]
   b608e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6090:	b113      	cbz	r3, b6098 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6092:	685a      	ldr	r2, [r3, #4]
   b6094:	3201      	adds	r2, #1
   b6096:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6098:	4770      	bx	lr

000b609a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b609a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b609c:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b609e:	4668      	mov	r0, sp
   b60a0:	460d      	mov	r5, r1
   b60a2:	f7ff fff1 	bl	b6088 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b60a6:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b60a8:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b60aa:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b60ac:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b60ae:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b60b0:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b60b2:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b60b4:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b60b6:	f7fe ff9f 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b60ba:	b135      	cbz	r5, b60ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b60bc:	1d28      	adds	r0, r5, #4
   b60be:	f7fe ff9b 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b60c2:	2108      	movs	r1, #8
   b60c4:	4628      	mov	r0, r5
   b60c6:	f7fe fe4e 	bl	b4d66 <_ZdlPvj>
        return p;
    }
   b60ca:	4620      	mov	r0, r4
   b60cc:	b003      	add	sp, #12
   b60ce:	bd30      	pop	{r4, r5, pc}

000b60d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b60d0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b60d2:	b510      	push	{r4, lr}
      if (_M_empty())
   b60d4:	b90a      	cbnz	r2, b60da <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b60d6:	f002 fc49 	bl	b896c <_ZSt25__throw_bad_function_callv>
    }
   b60da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b60de:	68c3      	ldr	r3, [r0, #12]
   b60e0:	4718      	bx	r3

000b60e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b60e2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b60e4:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b60e6:	f100 0110 	add.w	r1, r0, #16
   b60ea:	f7ff fff1 	bl	b60d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b60ee:	bd08      	pop	{r3, pc}

000b60f0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b60f0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b60f2:	b510      	push	{r4, lr}
      if (_M_empty())
   b60f4:	b90a      	cbnz	r2, b60fa <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b60f6:	f002 fc39 	bl	b896c <_ZSt25__throw_bad_function_callv>
    }
   b60fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b60fe:	68c3      	ldr	r3, [r0, #12]
   b6100:	4718      	bx	r3

000b6102 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6102:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6104:	6800      	ldr	r0, [r0, #0]
   b6106:	f100 0110 	add.w	r1, r0, #16
   b610a:	f7ff fff1 	bl	b60f0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b610e:	bd08      	pop	{r3, pc}

000b6110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6110:	b538      	push	{r3, r4, r5, lr}
   b6112:	2300      	movs	r3, #0
   b6114:	4604      	mov	r4, r0
   b6116:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6118:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b611a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b611c:	f7fe fe1f 	bl	b4d5e <_Znwj>
   b6120:	b128      	cbz	r0, b612e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b6122:	2301      	movs	r3, #1
   b6124:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6128:	4b02      	ldr	r3, [pc, #8]	; (b6134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b612a:	6003      	str	r3, [r0, #0]
   b612c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b612e:	6020      	str	r0, [r4, #0]
	}
   b6130:	4620      	mov	r0, r4
   b6132:	bd38      	pop	{r3, r4, r5, pc}
   b6134:	000b8f24 	.word	0x000b8f24

000b6138 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6138:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b613a:	2300      	movs	r3, #0
   b613c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b613e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6140:	4604      	mov	r4, r0
   b6142:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6144:	b12b      	cbz	r3, b6152 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6146:	2202      	movs	r2, #2
   b6148:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b614a:	68eb      	ldr	r3, [r5, #12]
   b614c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b614e:	68ab      	ldr	r3, [r5, #8]
   b6150:	60a3      	str	r3, [r4, #8]
    }
   b6152:	4620      	mov	r0, r4
   b6154:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6158 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6158:	b5f0      	push	{r4, r5, r6, r7, lr}
   b615a:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b615c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b615e:	4668      	mov	r0, sp
   b6160:	f7ff ff34 	bl	b5fcc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6164:	f04f 0302 	mov.w	r3, #2
   b6168:	e8d4 2f4f 	ldrexb	r2, [r4]
   b616c:	2a00      	cmp	r2, #0
   b616e:	d103      	bne.n	b6178 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b6170:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6174:	2900      	cmp	r1, #0
   b6176:	d1f7      	bne.n	b6168 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b6178:	d125      	bne.n	b61c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b617a:	f104 050c 	add.w	r5, r4, #12
   b617e:	4669      	mov	r1, sp
   b6180:	4628      	mov	r0, r5
   b6182:	f7ff ff23 	bl	b5fcc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b6186:	f3bf 8f5b 	dmb	ish
   b618a:	2301      	movs	r3, #1
   b618c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b618e:	2000      	movs	r0, #0
   b6190:	f104 0308 	add.w	r3, r4, #8
   b6194:	f3bf 8f5b 	dmb	ish
   b6198:	e853 6f00 	ldrex	r6, [r3]
   b619c:	e843 0200 	strex	r2, r0, [r3]
   b61a0:	2a00      	cmp	r2, #0
   b61a2:	d1f9      	bne.n	b6198 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b61a4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b61a8:	b16e      	cbz	r6, b61c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b61aa:	f7ff fc6f 	bl	b5a8c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b61ae:	b178      	cbz	r0, b61d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b61b0:	4629      	mov	r1, r5
   b61b2:	4630      	mov	r0, r6
   b61b4:	f7ff ff8c 	bl	b60d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b61b8:	4630      	mov	r0, r6
   b61ba:	f7ff fd94 	bl	b5ce6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b61be:	2110      	movs	r1, #16
   b61c0:	4630      	mov	r0, r6
   b61c2:	f7fe fdd0 	bl	b4d66 <_ZdlPvj>
        p_->setError(std::move(error));
   b61c6:	4668      	mov	r0, sp
   b61c8:	f7ff ff0d 	bl	b5fe6 <_ZN8particle5ErrorD1Ev>
    }
   b61cc:	b009      	add	sp, #36	; 0x24
   b61ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b61d0:	4631      	mov	r1, r6
   b61d2:	a802      	add	r0, sp, #8
   b61d4:	f7ff ffb0 	bl	b6138 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b61d8:	68e0      	ldr	r0, [r4, #12]
   b61da:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b61de:	b108      	cbz	r0, b61e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b61e0:	f002 fc54 	bl	b8a8c <strdup>
        type_(type) {
   b61e4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b61e6:	2010      	movs	r0, #16
   b61e8:	f8ad 501c 	strh.w	r5, [sp, #28]
   b61ec:	f7fe fdb7 	bl	b4d5e <_Znwj>
   b61f0:	4605      	mov	r5, r0
   b61f2:	b1e8      	cbz	r0, b6230 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b61f4:	2700      	movs	r7, #0
   b61f6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b61f8:	2018      	movs	r0, #24
   b61fa:	f7fe fdb0 	bl	b4d5e <_Znwj>
   b61fe:	4604      	mov	r4, r0
   b6200:	b188      	cbz	r0, b6226 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b6202:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6204:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6206:	a802      	add	r0, sp, #8
   b6208:	f7ff fd9c 	bl	b5d44 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b620c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b620e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6210:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6212:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6214:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6216:	a906      	add	r1, sp, #24
   b6218:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b621a:	60e3      	str	r3, [r4, #12]
   b621c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b6220:	9205      	str	r2, [sp, #20]
   b6222:	f7ff fed3 	bl	b5fcc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6226:	4b08      	ldr	r3, [pc, #32]	; (b6248 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6228:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b622a:	4b08      	ldr	r3, [pc, #32]	; (b624c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b622c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b622e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b6230:	a806      	add	r0, sp, #24
   b6232:	f7ff fed8 	bl	b5fe6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6236:	a802      	add	r0, sp, #8
   b6238:	f7ff fd55 	bl	b5ce6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b623c:	2200      	movs	r2, #0
   b623e:	4629      	mov	r1, r5
   b6240:	4803      	ldr	r0, [pc, #12]	; (b6250 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b6242:	f7ff fc2b 	bl	b5a9c <application_thread_invoke>
   b6246:	e7b7      	b.n	b61b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6248:	000b60e3 	.word	0x000b60e3
   b624c:	000b6365 	.word	0x000b6365
   b6250:	000b5cbf 	.word	0x000b5cbf

000b6254 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6258:	b08b      	sub	sp, #44	; 0x2c
   b625a:	4605      	mov	r5, r0
   b625c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6260:	460f      	mov	r7, r1
   b6262:	4690      	mov	r8, r2
   b6264:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6266:	f7ff fc57 	bl	b5b18 <spark_cloud_flag_connected>
   b626a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b626c:	4683      	mov	fp, r0
   b626e:	bb38      	cbnz	r0, b62c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b6270:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6274:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6276:	a905      	add	r1, sp, #20
   b6278:	4630      	mov	r0, r6
   b627a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b627e:	f7ff fea5 	bl	b5fcc <_ZN8particle5ErrorC1EOS0_>
   b6282:	2014      	movs	r0, #20
   b6284:	f7fe fd6b 	bl	b4d5e <_Znwj>
   b6288:	4604      	mov	r4, r0
   b628a:	b148      	cbz	r0, b62a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b628c:	2302      	movs	r3, #2
   b628e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6290:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6292:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6296:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6298:	4631      	mov	r1, r6
   b629a:	300c      	adds	r0, #12
   b629c:	f7ff fe96 	bl	b5fcc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b62a0:	4628      	mov	r0, r5
	: __shared_count(__p)
   b62a2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b62a4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b62a8:	f7ff ff32 	bl	b6110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b62ac:	4630      	mov	r0, r6
   b62ae:	f7ff fe9a 	bl	b5fe6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b62b2:	a805      	add	r0, sp, #20
   b62b4:	f7ff fe97 	bl	b5fe6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b62b8:	4628      	mov	r0, r5
   b62ba:	b00b      	add	sp, #44	; 0x2c
   b62bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b62c0:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b62c2:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b62c4:	2014      	movs	r0, #20
   b62c6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b62ca:	9307      	str	r3, [sp, #28]
   b62cc:	f7fe fd47 	bl	b4d5e <_Znwj>
   b62d0:	4601      	mov	r1, r0
   b62d2:	b118      	cbz	r0, b62dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b62d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b62d8:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b62da:	7044      	strb	r4, [r0, #1]
   b62dc:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b62de:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b62e0:	f7ff ff16 	bl	b6110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b62e4:	4b1e      	ldr	r3, [pc, #120]	; (b6360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b62e6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b62e8:	2008      	movs	r0, #8
   b62ea:	f7fe fd38 	bl	b4d5e <_Znwj>
   b62ee:	4604      	mov	r4, r0
   b62f0:	b110      	cbz	r0, b62f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b62f2:	a903      	add	r1, sp, #12
   b62f4:	f7ff fec8 	bl	b6088 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b62f8:	9600      	str	r6, [sp, #0]
   b62fa:	fa5f f38a 	uxtb.w	r3, sl
   b62fe:	464a      	mov	r2, r9
   b6300:	4641      	mov	r1, r8
   b6302:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6304:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6306:	f7ff fc0f 	bl	b5b28 <spark_send_event>
   b630a:	b9b8      	cbnz	r0, b633c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b630c:	9b03      	ldr	r3, [sp, #12]
   b630e:	785b      	ldrb	r3, [r3, #1]
   b6310:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6314:	b993      	cbnz	r3, b633c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6316:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b631a:	a905      	add	r1, sp, #20
   b631c:	a803      	add	r0, sp, #12
   b631e:	9205      	str	r2, [sp, #20]
   b6320:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6324:	f7ff ff18 	bl	b6158 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6328:	a805      	add	r0, sp, #20
   b632a:	f7ff fe5c 	bl	b5fe6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b632e:	a805      	add	r0, sp, #20
   b6330:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6332:	f7ff feb2 	bl	b609a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6336:	a806      	add	r0, sp, #24
   b6338:	f7fe fe5e 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b633c:	a903      	add	r1, sp, #12
   b633e:	a805      	add	r0, sp, #20
   b6340:	f7ff fea2 	bl	b6088 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6344:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6346:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6348:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b634a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b634c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b634e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6350:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b6352:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6354:	f7fe fe50 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6358:	a804      	add	r0, sp, #16
   b635a:	f7fe fe4d 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b635e:	e7ab      	b.n	b62b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6360:	000b63e1 	.word	0x000b63e1

000b6364 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6364:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6368:	4605      	mov	r5, r0
	switch (__op)
   b636a:	d103      	bne.n	b6374 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b636c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b636e:	6003      	str	r3, [r0, #0]
      }
   b6370:	2000      	movs	r0, #0
   b6372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6374:	2a02      	cmp	r2, #2
   b6376:	d010      	beq.n	b639a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6378:	2a03      	cmp	r2, #3
   b637a:	d1f9      	bne.n	b6370 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b637c:	6804      	ldr	r4, [r0, #0]
   b637e:	2c00      	cmp	r4, #0
   b6380:	d0f6      	beq.n	b6370 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6382:	f104 0010 	add.w	r0, r4, #16
   b6386:	f7ff fe2e 	bl	b5fe6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b638a:	4620      	mov	r0, r4
   b638c:	f7ff fcab 	bl	b5ce6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6390:	2118      	movs	r1, #24
   b6392:	4620      	mov	r0, r4
   b6394:	f7fe fce7 	bl	b4d66 <_ZdlPvj>
   b6398:	e7ea      	b.n	b6370 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b639a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b639c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b639e:	f7fe fcde 	bl	b4d5e <_Znwj>
   b63a2:	4604      	mov	r4, r0
   b63a4:	b150      	cbz	r0, b63bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b63a6:	4631      	mov	r1, r6
   b63a8:	f7ff fec6 	bl	b6138 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b63ac:	6930      	ldr	r0, [r6, #16]
   b63ae:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b63b2:	b108      	cbz	r0, b63b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b63b4:	f002 fb6a 	bl	b8a8c <strdup>
        type_(type) {
   b63b8:	6120      	str	r0, [r4, #16]
   b63ba:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b63bc:	602c      	str	r4, [r5, #0]
	}
   b63be:	e7d7      	b.n	b6370 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b63c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b63c0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b63c2:	2300      	movs	r3, #0
   b63c4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b63c6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b63c8:	4604      	mov	r4, r0
   b63ca:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b63cc:	b12b      	cbz	r3, b63da <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b63ce:	2202      	movs	r2, #2
   b63d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b63d2:	68eb      	ldr	r3, [r5, #12]
   b63d4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b63d6:	68ab      	ldr	r3, [r5, #8]
   b63d8:	60a3      	str	r3, [r4, #8]
    }
   b63da:	4620      	mov	r0, r4
   b63dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b63e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b63e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b63e2:	b089      	sub	sp, #36	; 0x24
   b63e4:	4604      	mov	r4, r0
   b63e6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b63e8:	a801      	add	r0, sp, #4
   b63ea:	4611      	mov	r1, r2
   b63ec:	f7ff fe55 	bl	b609a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b63f0:	b1a4      	cbz	r4, b641c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b63f2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b63f4:	b11d      	cbz	r5, b63fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b63f6:	4628      	mov	r0, r5
   b63f8:	f002 fb48 	bl	b8a8c <strdup>
   b63fc:	4605      	mov	r5, r0
   b63fe:	a801      	add	r0, sp, #4
   b6400:	a903      	add	r1, sp, #12
        type_(type) {
   b6402:	9503      	str	r5, [sp, #12]
   b6404:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6408:	f7ff fea6 	bl	b6158 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b640c:	a803      	add	r0, sp, #12
   b640e:	f7ff fdea 	bl	b5fe6 <_ZN8particle5ErrorD1Ev>
   b6412:	a802      	add	r0, sp, #8
   b6414:	f7fe fdf0 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6418:	b009      	add	sp, #36	; 0x24
   b641a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b641c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b641e:	2301      	movs	r3, #1
   b6420:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6424:	2a00      	cmp	r2, #0
   b6426:	d103      	bne.n	b6430 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6428:	e8c5 3f41 	strexb	r1, r3, [r5]
   b642c:	2900      	cmp	r1, #0
   b642e:	d1f7      	bne.n	b6420 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6430:	d1ef      	bne.n	b6412 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6432:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6434:	f3bf 8f5b 	dmb	ish
   b6438:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b643a:	1d2b      	adds	r3, r5, #4
   b643c:	f3bf 8f5b 	dmb	ish
   b6440:	e853 6f00 	ldrex	r6, [r3]
   b6444:	e843 4200 	strex	r2, r4, [r3]
   b6448:	2a00      	cmp	r2, #0
   b644a:	d1f9      	bne.n	b6440 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b644c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6450:	2e00      	cmp	r6, #0
   b6452:	d0de      	beq.n	b6412 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6454:	4620      	mov	r0, r4
   b6456:	f7ff fb19 	bl	b5a8c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b645a:	4607      	mov	r7, r0
   b645c:	b160      	cbz	r0, b6478 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b645e:	f105 010c 	add.w	r1, r5, #12
   b6462:	4630      	mov	r0, r6
   b6464:	f7ff fe44 	bl	b60f0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6468:	4630      	mov	r0, r6
   b646a:	f7ff fc3c 	bl	b5ce6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b646e:	2110      	movs	r1, #16
   b6470:	4630      	mov	r0, r6
   b6472:	f7fe fc78 	bl	b4d66 <_ZdlPvj>
   b6476:	e7cc      	b.n	b6412 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6478:	4631      	mov	r1, r6
   b647a:	a803      	add	r0, sp, #12
   b647c:	f7ff ffa0 	bl	b63c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6480:	7b2b      	ldrb	r3, [r5, #12]
   b6482:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6486:	2010      	movs	r0, #16
   b6488:	f7fe fc69 	bl	b4d5e <_Znwj>
   b648c:	4605      	mov	r5, r0
   b648e:	b1d0      	cbz	r0, b64c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6490:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6492:	2014      	movs	r0, #20
   b6494:	f7fe fc63 	bl	b4d5e <_Znwj>
   b6498:	4604      	mov	r4, r0
   b649a:	b178      	cbz	r0, b64bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b649c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b649e:	4601      	mov	r1, r0
   b64a0:	a803      	add	r0, sp, #12
   b64a2:	f7ff fc4f 	bl	b5d44 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b64a6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b64a8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b64aa:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b64ac:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b64ae:	9205      	str	r2, [sp, #20]
   b64b0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b64b2:	60e3      	str	r3, [r4, #12]
   b64b4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b64b8:	9206      	str	r2, [sp, #24]
   b64ba:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b64bc:	4b06      	ldr	r3, [pc, #24]	; (b64d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b64be:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b64c0:	4b06      	ldr	r3, [pc, #24]	; (b64dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b64c2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b64c4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b64c6:	a803      	add	r0, sp, #12
   b64c8:	f7ff fc0d 	bl	b5ce6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b64cc:	2200      	movs	r2, #0
   b64ce:	4629      	mov	r1, r5
   b64d0:	4803      	ldr	r0, [pc, #12]	; (b64e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b64d2:	f7ff fae3 	bl	b5a9c <application_thread_invoke>
   b64d6:	e7c7      	b.n	b6468 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b64d8:	000b6103 	.word	0x000b6103
   b64dc:	000b64e5 	.word	0x000b64e5
   b64e0:	000b5cbf 	.word	0x000b5cbf

000b64e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b64e4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b64e6:	b570      	push	{r4, r5, r6, lr}
   b64e8:	4604      	mov	r4, r0
	switch (__op)
   b64ea:	d103      	bne.n	b64f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b64ec:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b64ee:	6003      	str	r3, [r0, #0]
      }
   b64f0:	2000      	movs	r0, #0
   b64f2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b64f4:	2a02      	cmp	r2, #2
   b64f6:	d00c      	beq.n	b6512 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b64f8:	2a03      	cmp	r2, #3
   b64fa:	d1f9      	bne.n	b64f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b64fc:	6804      	ldr	r4, [r0, #0]
   b64fe:	2c00      	cmp	r4, #0
   b6500:	d0f6      	beq.n	b64f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6502:	4620      	mov	r0, r4
   b6504:	f7ff fbef 	bl	b5ce6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6508:	2114      	movs	r1, #20
   b650a:	4620      	mov	r0, r4
   b650c:	f7fe fc2b 	bl	b4d66 <_ZdlPvj>
   b6510:	e7ee      	b.n	b64f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6512:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6514:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6516:	f7fe fc22 	bl	b4d5e <_Znwj>
   b651a:	4605      	mov	r5, r0
   b651c:	b120      	cbz	r0, b6528 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b651e:	4631      	mov	r1, r6
   b6520:	f7ff ff4e 	bl	b63c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6524:	7c33      	ldrb	r3, [r6, #16]
   b6526:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6528:	6025      	str	r5, [r4, #0]
	}
   b652a:	e7e1      	b.n	b64f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b652c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b652c:	2200      	movs	r2, #0
   b652e:	6840      	ldr	r0, [r0, #4]
   b6530:	4611      	mov	r1, r2
   b6532:	f7ff bb51 	b.w	b5bd8 <network_listening>

000b6536 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6536:	2200      	movs	r2, #0
   b6538:	6840      	ldr	r0, [r0, #4]
   b653a:	4611      	mov	r1, r2
   b653c:	f7ff bb5c 	b.w	b5bf8 <network_get_listen_timeout>

000b6540 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6540:	6840      	ldr	r0, [r0, #4]
   b6542:	2200      	movs	r2, #0
   b6544:	f7ff bb50 	b.w	b5be8 <network_set_listen_timeout>

000b6548 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6548:	6840      	ldr	r0, [r0, #4]
   b654a:	2200      	movs	r2, #0
   b654c:	f081 0101 	eor.w	r1, r1, #1
   b6550:	f7ff bb3a 	b.w	b5bc8 <network_listen>

000b6554 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6554:	2300      	movs	r3, #0
   b6556:	6840      	ldr	r0, [r0, #4]
   b6558:	461a      	mov	r2, r3
   b655a:	4619      	mov	r1, r3
   b655c:	f7ff bb2c 	b.w	b5bb8 <network_off>

000b6560 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6560:	2300      	movs	r3, #0
   b6562:	6840      	ldr	r0, [r0, #4]
   b6564:	461a      	mov	r2, r3
   b6566:	4619      	mov	r1, r3
   b6568:	f7ff bb1e 	b.w	b5ba8 <network_on>

000b656c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b656c:	2200      	movs	r2, #0
   b656e:	6840      	ldr	r0, [r0, #4]
   b6570:	4611      	mov	r1, r2
   b6572:	f7ff bb11 	b.w	b5b98 <network_ready>

000b6576 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6576:	2200      	movs	r2, #0
   b6578:	6840      	ldr	r0, [r0, #4]
   b657a:	4611      	mov	r1, r2
   b657c:	f7ff bafc 	b.w	b5b78 <network_connecting>

000b6580 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6580:	6840      	ldr	r0, [r0, #4]
   b6582:	2200      	movs	r2, #0
   b6584:	2102      	movs	r1, #2
   b6586:	f7ff baff 	b.w	b5b88 <network_disconnect>

000b658a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b658a:	2300      	movs	r3, #0
   b658c:	6840      	ldr	r0, [r0, #4]
   b658e:	461a      	mov	r2, r3
   b6590:	f7ff baea 	b.w	b5b68 <network_connect>

000b6594 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b6594:	4b02      	ldr	r3, [pc, #8]	; (b65a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6596:	2203      	movs	r2, #3
   b6598:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b659a:	4a02      	ldr	r2, [pc, #8]	; (b65a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b659c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b659e:	4770      	bx	lr
   b65a0:	2003e678 	.word	0x2003e678
   b65a4:	000b8f40 	.word	0x000b8f40

000b65a8 <_ZN8particle6detail9_getVCellEhh>:
namespace particle {
namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   b65a8:	0909      	lsrs	r1, r1, #4
   b65aa:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   b65ae:	ee07 1a90 	vmov	s15, r1
        return value / 800.0;
    }
   b65b2:	ed9f 0a03 	vldr	s0, [pc, #12]	; b65c0 <_ZN8particle6detail9_getVCellEhh+0x18>
        float value = (float)((MSB << 4) | (LSB >> 4));
   b65b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
   b65ba:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b65be:	4770      	bx	lr
   b65c0:	44480000 	.word	0x44480000

000b65c4 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b65c4:	6800      	ldr	r0, [r0, #0]
   b65c6:	f000 b8ee 	b.w	b67a6 <_ZN7TwoWire4lockEv>

000b65ca <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b65ca:	b510      	push	{r4, lr}
   b65cc:	4604      	mov	r4, r0
      lock_(_lock) {
   b65ce:	6001      	str	r1, [r0, #0]
   b65d0:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b65d2:	b10a      	cbz	r2, b65d8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b65d4:	f7ff fff6 	bl	b65c4 <_ZN9FuelGauge4lockEv>
}
   b65d8:	4620      	mov	r0, r4
   b65da:	bd10      	pop	{r4, pc}

000b65dc <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b65dc:	b513      	push	{r0, r1, r4, lr}
   b65de:	4604      	mov	r4, r0
   b65e0:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b65e2:	f002 f95b 	bl	b889c <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b65e6:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b65e8:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b65ea:	4620      	mov	r0, r4
   b65ec:	f7ff ffed 	bl	b65ca <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b65f0:	4620      	mov	r0, r4
   b65f2:	b002      	add	sp, #8
   b65f4:	bd10      	pop	{r4, pc}

000b65f6 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b65f6:	6800      	ldr	r0, [r0, #0]
   b65f8:	f000 b8de 	b.w	b67b8 <_ZN7TwoWire6unlockEv>

000b65fc <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   b65fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6600:	4604      	mov	r4, r0
   b6602:	460d      	mov	r5, r1
   b6604:	4617      	mov	r7, r2
   b6606:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b6608:	f7ff ffdc 	bl	b65c4 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b660c:	2236      	movs	r2, #54	; 0x36
   b660e:	2300      	movs	r3, #0
   b6610:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b6614:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b6616:	230a      	movs	r3, #10
   b6618:	f04f 0801 	mov.w	r8, #1
   b661c:	4669      	mov	r1, sp
   b661e:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b6622:	f000 f8a4 	bl	b676e <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   b6626:	6820      	ldr	r0, [r4, #0]
   b6628:	6803      	ldr	r3, [r0, #0]
   b662a:	4629      	mov	r1, r5
   b662c:	689b      	ldr	r3, [r3, #8]
   b662e:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b6630:	6820      	ldr	r0, [r4, #0]
   b6632:	4641      	mov	r1, r8
   b6634:	f000 f8b3 	bl	b679e <_ZN7TwoWire15endTransmissionEh>
   b6638:	4605      	mov	r5, r0
   b663a:	b140      	cbz	r0, b664e <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   b663c:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   b6640:	4620      	mov	r0, r4
   b6642:	f7ff ffd8 	bl	b65f6 <_ZN9FuelGauge6unlockEv>
}
   b6646:	4628      	mov	r0, r5
   b6648:	b004      	add	sp, #16
   b664a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   b664e:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   b6650:	6820      	ldr	r0, [r4, #0]
   b6652:	9301      	str	r3, [sp, #4]
   b6654:	4669      	mov	r1, sp
   b6656:	f000 f873 	bl	b6740 <_ZN7TwoWire11requestFromERK16WireTransmission>
   b665a:	2802      	cmp	r0, #2
   b665c:	d1ee      	bne.n	b663c <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   b665e:	6820      	ldr	r0, [r4, #0]
   b6660:	6803      	ldr	r3, [r0, #0]
   b6662:	695b      	ldr	r3, [r3, #20]
   b6664:	4798      	blx	r3
   b6666:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   b6668:	6820      	ldr	r0, [r4, #0]
   b666a:	6803      	ldr	r3, [r0, #0]
   b666c:	695b      	ldr	r3, [r3, #20]
   b666e:	4798      	blx	r3
   b6670:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   b6672:	e7e5      	b.n	b6640 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000b6674 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   b6674:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   b6676:	2300      	movs	r3, #0
   b6678:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   b667c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b6680:	f10d 0206 	add.w	r2, sp, #6
   b6684:	f10d 0307 	add.w	r3, sp, #7
   b6688:	2102      	movs	r1, #2
   b668a:	f7ff ffb7 	bl	b65fc <_ZN9FuelGauge12readRegisterEhRhS0_>
   b668e:	b940      	cbnz	r0, b66a2 <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   b6690:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b6694:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   b6698:	b003      	add	sp, #12
   b669a:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   b669e:	f7ff bf83 	b.w	b65a8 <_ZN8particle6detail9_getVCellEhh>
}
   b66a2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b66a6:	b003      	add	sp, #12
   b66a8:	f85d fb04 	ldr.w	pc, [sp], #4

000b66ac <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b66ac:	4770      	bx	lr

000b66ae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b66ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66b0:	4606      	mov	r6, r0
   b66b2:	4615      	mov	r5, r2
   b66b4:	460c      	mov	r4, r1
   b66b6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b66b8:	42bc      	cmp	r4, r7
   b66ba:	d006      	beq.n	b66ca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b66bc:	6833      	ldr	r3, [r6, #0]
   b66be:	f814 1b01 	ldrb.w	r1, [r4], #1
   b66c2:	689b      	ldr	r3, [r3, #8]
   b66c4:	4630      	mov	r0, r6
   b66c6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b66c8:	e7f6      	b.n	b66b8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b66ca:	4628      	mov	r0, r5
   b66cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b66ce <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b66ce:	7c00      	ldrb	r0, [r0, #16]
   b66d0:	2200      	movs	r2, #0
   b66d2:	f7ff b89b 	b.w	b580c <hal_i2c_write>

000b66d6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b66d6:	7c00      	ldrb	r0, [r0, #16]
   b66d8:	2100      	movs	r1, #0
   b66da:	f7ff b89f 	b.w	b581c <hal_i2c_available>

000b66de <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b66de:	7c00      	ldrb	r0, [r0, #16]
   b66e0:	2100      	movs	r1, #0
   b66e2:	f7ff b8a3 	b.w	b582c <hal_i2c_read>

000b66e6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b66e6:	7c00      	ldrb	r0, [r0, #16]
   b66e8:	2100      	movs	r1, #0
   b66ea:	f7ff b8a7 	b.w	b583c <hal_i2c_peek>

000b66ee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b66ee:	7c00      	ldrb	r0, [r0, #16]
   b66f0:	2100      	movs	r1, #0
   b66f2:	f7ff b8ab 	b.w	b584c <hal_i2c_flush>

000b66f6 <_ZN7TwoWireD0Ev>:
   b66f6:	b510      	push	{r4, lr}
   b66f8:	2114      	movs	r1, #20
   b66fa:	4604      	mov	r4, r0
   b66fc:	f7fe fb33 	bl	b4d66 <_ZdlPvj>
   b6700:	4620      	mov	r0, r4
   b6702:	bd10      	pop	{r4, pc}

000b6704 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6704:	b538      	push	{r3, r4, r5, lr}
   b6706:	4604      	mov	r4, r0
   b6708:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b670a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b670e:	2200      	movs	r2, #0
   b6710:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6714:	4b09      	ldr	r3, [pc, #36]	; (b673c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6716:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6718:	4608      	mov	r0, r1
   b671a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b671c:	4629      	mov	r1, r5
   b671e:	f7ff f8a5 	bl	b586c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6722:	30bf      	adds	r0, #191	; 0xbf
   b6724:	d108      	bne.n	b6738 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6726:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6728:	07db      	lsls	r3, r3, #31
   b672a:	d505      	bpl.n	b6738 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b672c:	6868      	ldr	r0, [r5, #4]
   b672e:	f7ff fa83 	bl	b5c38 <free>
    free(conf.tx_buffer);
   b6732:	68e8      	ldr	r0, [r5, #12]
   b6734:	f7ff fa80 	bl	b5c38 <free>
}
   b6738:	4620      	mov	r0, r4
   b673a:	bd38      	pop	{r3, r4, r5, pc}
   b673c:	000b8f7c 	.word	0x000b8f7c

000b6740 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6740:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6742:	2200      	movs	r2, #0
   b6744:	2314      	movs	r3, #20
   b6746:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b674a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b674e:	780b      	ldrb	r3, [r1, #0]
   b6750:	f88d 3008 	strb.w	r3, [sp, #8]
   b6754:	684b      	ldr	r3, [r1, #4]
   b6756:	9303      	str	r3, [sp, #12]
   b6758:	68cb      	ldr	r3, [r1, #12]
   b675a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b675c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b675e:	7a0b      	ldrb	r3, [r1, #8]
   b6760:	9305      	str	r3, [sp, #20]
   b6762:	a901      	add	r1, sp, #4
   b6764:	f7ff f89a 	bl	b589c <hal_i2c_request_ex>
}
   b6768:	b007      	add	sp, #28
   b676a:	f85d fb04 	ldr.w	pc, [sp], #4

000b676e <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b676e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6770:	2300      	movs	r3, #0
   b6772:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b6776:	684a      	ldr	r2, [r1, #4]
   b6778:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b677a:	2314      	movs	r3, #20
    };
   b677c:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b677e:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b6782:	780b      	ldrb	r3, [r1, #0]
    };
   b6784:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6786:	7a0a      	ldrb	r2, [r1, #8]
   b6788:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b678a:	7c00      	ldrb	r0, [r0, #16]
    };
   b678c:	f88d 3008 	strb.w	r3, [sp, #8]
   b6790:	aa01      	add	r2, sp, #4
   b6792:	4619      	mov	r1, r3
   b6794:	f7ff f82a 	bl	b57ec <hal_i2c_begin_transmission>
}
   b6798:	b007      	add	sp, #28
   b679a:	f85d fb04 	ldr.w	pc, [sp], #4

000b679e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b679e:	7c00      	ldrb	r0, [r0, #16]
   b67a0:	2200      	movs	r2, #0
   b67a2:	f7ff b82b 	b.w	b57fc <hal_i2c_end_transmission>

000b67a6 <_ZN7TwoWire4lockEv>:
{
  return hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b67a6:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b67a8:	2100      	movs	r1, #0
   b67aa:	7c00      	ldrb	r0, [r0, #16]
   b67ac:	f7ff f866 	bl	b587c <hal_i2c_lock>
}
   b67b0:	fab0 f080 	clz	r0, r0
   b67b4:	0940      	lsrs	r0, r0, #5
   b67b6:	bd08      	pop	{r3, pc}

000b67b8 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b67b8:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b67ba:	2100      	movs	r1, #0
   b67bc:	7c00      	ldrb	r0, [r0, #16]
   b67be:	f7ff f865 	bl	b588c <hal_i2c_unlock>
}
   b67c2:	fab0 f080 	clz	r0, r0
   b67c6:	0940      	lsrs	r0, r0, #5
   b67c8:	bd08      	pop	{r3, pc}

000b67ca <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b67ca:	4770      	bx	lr

000b67cc <_ZN9IPAddressD0Ev>:
   b67cc:	b510      	push	{r4, lr}
   b67ce:	2118      	movs	r1, #24
   b67d0:	4604      	mov	r4, r0
   b67d2:	f7fe fac8 	bl	b4d66 <_ZdlPvj>
   b67d6:	4620      	mov	r0, r4
   b67d8:	bd10      	pop	{r4, pc}

000b67da <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b67da:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b67dc:	7d03      	ldrb	r3, [r0, #20]
   b67de:	2b06      	cmp	r3, #6
{
   b67e0:	b08d      	sub	sp, #52	; 0x34
   b67e2:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b67e4:	f100 0704 	add.w	r7, r0, #4
   b67e8:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b67ec:	d012      	beq.n	b6814 <_ZNK9IPAddress7printToER5Print+0x3a>
   b67ee:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b67f2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b67f6:	220a      	movs	r2, #10
   b67f8:	4630      	mov	r0, r6
   b67fa:	f001 face 	bl	b7d9a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b67fe:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6800:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6802:	d019      	beq.n	b6838 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6804:	2c00      	cmp	r4, #0
   b6806:	d0f4      	beq.n	b67f2 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6808:	212e      	movs	r1, #46	; 0x2e
   b680a:	4630      	mov	r0, r6
   b680c:	f001 fac2 	bl	b7d94 <_ZN5Print5printEc>
   b6810:	4404      	add	r4, r0
   b6812:	e7ee      	b.n	b67f2 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6814:	232f      	movs	r3, #47	; 0x2f
   b6816:	466a      	mov	r2, sp
   b6818:	4639      	mov	r1, r7
   b681a:	200a      	movs	r0, #10
		buf[0] = 0;
   b681c:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6820:	f7ff f844 	bl	b58ac <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6824:	4668      	mov	r0, sp
   b6826:	f7fe fa57 	bl	b4cd8 <strlen>
   b682a:	6833      	ldr	r3, [r6, #0]
   b682c:	4602      	mov	r2, r0
   b682e:	68db      	ldr	r3, [r3, #12]
   b6830:	4669      	mov	r1, sp
   b6832:	4630      	mov	r0, r6
   b6834:	4798      	blx	r3
   b6836:	4604      	mov	r4, r0
    }
    return n;
}
   b6838:	4620      	mov	r0, r4
   b683a:	b00d      	add	sp, #52	; 0x34
   b683c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b6840 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6840:	b510      	push	{r4, lr}
   b6842:	4b05      	ldr	r3, [pc, #20]	; (b6858 <_ZN9IPAddressC1Ev+0x18>)
   b6844:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6846:	2211      	movs	r2, #17
   b6848:	f840 3b04 	str.w	r3, [r0], #4
   b684c:	2100      	movs	r1, #0
   b684e:	f002 f8c7 	bl	b89e0 <memset>
}
   b6852:	4620      	mov	r0, r4
   b6854:	bd10      	pop	{r4, pc}
   b6856:	bf00      	nop
   b6858:	000b8fa4 	.word	0x000b8fa4

000b685c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b685c:	4603      	mov	r3, r0
   b685e:	4a07      	ldr	r2, [pc, #28]	; (b687c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6860:	b510      	push	{r4, lr}
   b6862:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6866:	f101 0210 	add.w	r2, r1, #16
   b686a:	f851 4b04 	ldr.w	r4, [r1], #4
   b686e:	f843 4b04 	str.w	r4, [r3], #4
   b6872:	4291      	cmp	r1, r2
   b6874:	d1f9      	bne.n	b686a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6876:	780a      	ldrb	r2, [r1, #0]
   b6878:	701a      	strb	r2, [r3, #0]
}
   b687a:	bd10      	pop	{r4, pc}
   b687c:	000b8fa4 	.word	0x000b8fa4

000b6880 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6880:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6882:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6886:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b688a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b688e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6892:	2304      	movs	r3, #4
   b6894:	6041      	str	r1, [r0, #4]
   b6896:	7503      	strb	r3, [r0, #20]
}
   b6898:	bd10      	pop	{r4, pc}
	...

000b689c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b689c:	b507      	push	{r0, r1, r2, lr}
   b689e:	4b06      	ldr	r3, [pc, #24]	; (b68b8 <_ZN9IPAddressC1EPKh+0x1c>)
   b68a0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b68a2:	78cb      	ldrb	r3, [r1, #3]
   b68a4:	9300      	str	r3, [sp, #0]
   b68a6:	788b      	ldrb	r3, [r1, #2]
   b68a8:	784a      	ldrb	r2, [r1, #1]
   b68aa:	7809      	ldrb	r1, [r1, #0]
   b68ac:	f7ff ffe8 	bl	b6880 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b68b0:	b003      	add	sp, #12
   b68b2:	f85d fb04 	ldr.w	pc, [sp], #4
   b68b6:	bf00      	nop
   b68b8:	000b8fa4 	.word	0x000b8fa4

000b68bc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b68bc:	f100 0310 	add.w	r3, r0, #16
   b68c0:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b68c2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b68c6:	2901      	cmp	r1, #1
   b68c8:	4618      	mov	r0, r3
   b68ca:	d108      	bne.n	b68de <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b68cc:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b68d0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b68d4:	3a01      	subs	r2, #1
   b68d6:	f103 0310 	add.w	r3, r3, #16
   b68da:	d1f2      	bne.n	b68c2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b68dc:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b68de:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b68e0:	bf04      	itt	eq
   b68e2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b68e6:	1852      	addeq	r2, r2, r1
   b68e8:	e7f4      	b.n	b68d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b68ea <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b68ea:	b40e      	push	{r1, r2, r3}
   b68ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   b68ee:	b088      	sub	sp, #32
   b68f0:	af00      	add	r7, sp, #0
   b68f2:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b68f6:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b68f8:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b68fc:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b68fe:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6900:	462b      	mov	r3, r5
   b6902:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b6904:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6906:	f7ff f9a7 	bl	b5c58 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b690a:	280f      	cmp	r0, #15
   b690c:	687a      	ldr	r2, [r7, #4]
   b690e:	d91a      	bls.n	b6946 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b6910:	f100 0308 	add.w	r3, r0, #8
   b6914:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b6918:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b691a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b691e:	1c41      	adds	r1, r0, #1
   b6920:	462b      	mov	r3, r5
   b6922:	4668      	mov	r0, sp
        va_start(args, fmt);
   b6924:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6926:	f7ff f997 	bl	b5c58 <vsnprintf>
        if (n > 0) {
   b692a:	1e02      	subs	r2, r0, #0
   b692c:	dd04      	ble.n	b6938 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b692e:	6823      	ldr	r3, [r4, #0]
   b6930:	4669      	mov	r1, sp
   b6932:	689b      	ldr	r3, [r3, #8]
   b6934:	4620      	mov	r0, r4
   b6936:	4798      	blx	r3
   b6938:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b693a:	3720      	adds	r7, #32
   b693c:	46bd      	mov	sp, r7
   b693e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6942:	b003      	add	sp, #12
   b6944:	4770      	bx	lr
    } else if (n > 0) {
   b6946:	2800      	cmp	r0, #0
   b6948:	d0f7      	beq.n	b693a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b694a:	6823      	ldr	r3, [r4, #0]
   b694c:	4602      	mov	r2, r0
   b694e:	689b      	ldr	r3, [r3, #8]
   b6950:	f107 0110 	add.w	r1, r7, #16
   b6954:	4620      	mov	r0, r4
   b6956:	4798      	blx	r3
}
   b6958:	e7ef      	b.n	b693a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b695a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b695a:	b538      	push	{r3, r4, r5, lr}
   b695c:	680b      	ldr	r3, [r1, #0]
   b695e:	6003      	str	r3, [r0, #0]
   b6960:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b6962:	6843      	ldr	r3, [r0, #4]
   b6964:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6966:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b6968:	d008      	beq.n	b697c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b696a:	b115      	cbz	r5, b6972 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b696c:	686b      	ldr	r3, [r5, #4]
   b696e:	3301      	adds	r3, #1
   b6970:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b6972:	6860      	ldr	r0, [r4, #4]
   b6974:	b108      	cbz	r0, b697a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b6976:	f7ff f9bf 	bl	b5cf8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b697a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b697c:	bd38      	pop	{r3, r4, r5, pc}

000b697e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b697e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6980:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b6982:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6986:	689b      	ldr	r3, [r3, #8]
   b6988:	2201      	movs	r2, #1
   b698a:	f10d 0107 	add.w	r1, sp, #7
   b698e:	4798      	blx	r3
}
   b6990:	b003      	add	sp, #12
   b6992:	f85d fb04 	ldr.w	pc, [sp], #4

000b6996 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6996:	460b      	mov	r3, r1
   b6998:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b699a:	2200      	movs	r2, #0
   b699c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b699e:	e9c0 2200 	strd	r2, r2, [r0]
   b69a2:	4604      	mov	r4, r0
        t_ = t;
   b69a4:	6083      	str	r3, [r0, #8]
    if (t) {
   b69a6:	b90b      	cbnz	r3, b69ac <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b69a8:	4620      	mov	r0, r4
   b69aa:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b69ac:	f7ff ffd5 	bl	b695a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b69b0:	e7fa      	b.n	b69a8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b69b2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b69b2:	6883      	ldr	r3, [r0, #8]
   b69b4:	b1eb      	cbz	r3, b69f2 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b69b6:	781a      	ldrb	r2, [r3, #0]
   b69b8:	2a03      	cmp	r2, #3
   b69ba:	d81a      	bhi.n	b69f2 <_ZNK5spark9JSONValue4typeEv+0x40>
   b69bc:	e8df f002 	tbb	[pc, r2]
   b69c0:	1b021704 	.word	0x1b021704
   b69c4:	2005      	movs	r0, #5
   b69c6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b69c8:	6802      	ldr	r2, [r0, #0]
   b69ca:	685b      	ldr	r3, [r3, #4]
   b69cc:	6852      	ldr	r2, [r2, #4]
   b69ce:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b69d0:	282d      	cmp	r0, #45	; 0x2d
   b69d2:	d012      	beq.n	b69fa <_ZNK5spark9JSONValue4typeEv+0x48>
   b69d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b69d8:	2b09      	cmp	r3, #9
   b69da:	d90e      	bls.n	b69fa <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b69dc:	2874      	cmp	r0, #116	; 0x74
   b69de:	d00e      	beq.n	b69fe <_ZNK5spark9JSONValue4typeEv+0x4c>
   b69e0:	2866      	cmp	r0, #102	; 0x66
   b69e2:	d00c      	beq.n	b69fe <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b69e4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b69e8:	4258      	negs	r0, r3
   b69ea:	4158      	adcs	r0, r3
   b69ec:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b69ee:	2006      	movs	r0, #6
   b69f0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b69f2:	2000      	movs	r0, #0
   b69f4:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b69f6:	2004      	movs	r0, #4
   b69f8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b69fa:	2003      	movs	r0, #3
   b69fc:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b69fe:	2002      	movs	r0, #2
}
   b6a00:	4770      	bx	lr

000b6a02 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b6a02:	b510      	push	{r4, lr}
   b6a04:	4604      	mov	r4, r0
    switch (type()) {
   b6a06:	f7ff ffd4 	bl	b69b2 <_ZNK5spark9JSONValue4typeEv>
   b6a0a:	2802      	cmp	r0, #2
   b6a0c:	d00e      	beq.n	b6a2c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b6a0e:	1ec3      	subs	r3, r0, #3
   b6a10:	b2db      	uxtb	r3, r3
   b6a12:	2b01      	cmp	r3, #1
   b6a14:	d814      	bhi.n	b6a40 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b6a16:	6822      	ldr	r2, [r4, #0]
   b6a18:	68a3      	ldr	r3, [r4, #8]
   b6a1a:	6850      	ldr	r0, [r2, #4]
   b6a1c:	685b      	ldr	r3, [r3, #4]
}
   b6a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b6a22:	220a      	movs	r2, #10
   b6a24:	2100      	movs	r1, #0
   b6a26:	4418      	add	r0, r3
   b6a28:	f002 b8f8 	b.w	b8c1c <strtol>
        const char* const s = d_->json + t_->start;
   b6a2c:	6822      	ldr	r2, [r4, #0]
   b6a2e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b6a30:	6852      	ldr	r2, [r2, #4]
   b6a32:	685b      	ldr	r3, [r3, #4]
   b6a34:	5cd0      	ldrb	r0, [r2, r3]
   b6a36:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b6a3a:	4258      	negs	r0, r3
   b6a3c:	4158      	adcs	r0, r3
}
   b6a3e:	bd10      	pop	{r4, pc}
    switch (type()) {
   b6a40:	2000      	movs	r0, #0
   b6a42:	e7fc      	b.n	b6a3e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b6a44 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6a44:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6a46:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b6a48:	e9c0 3300 	strd	r3, r3, [r0]
   b6a4c:	4604      	mov	r4, r0
        n_(0) {
   b6a4e:	480e      	ldr	r0, [pc, #56]	; (b6a88 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b6a50:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b6a54:	b1a9      	cbz	r1, b6a82 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b6a56:	780b      	ldrb	r3, [r1, #0]
   b6a58:	2b03      	cmp	r3, #3
   b6a5a:	d006      	beq.n	b6a6a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b6a5c:	b98b      	cbnz	r3, b6a82 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b6a5e:	6813      	ldr	r3, [r2, #0]
   b6a60:	6858      	ldr	r0, [r3, #4]
   b6a62:	684b      	ldr	r3, [r1, #4]
   b6a64:	5cc3      	ldrb	r3, [r0, r3]
   b6a66:	2b6e      	cmp	r3, #110	; 0x6e
   b6a68:	d007      	beq.n	b6a7a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b6a6a:	6813      	ldr	r3, [r2, #0]
   b6a6c:	684d      	ldr	r5, [r1, #4]
   b6a6e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b6a70:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b6a72:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b6a74:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b6a76:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b6a78:	60e3      	str	r3, [r4, #12]
   b6a7a:	4611      	mov	r1, r2
   b6a7c:	4620      	mov	r0, r4
   b6a7e:	f7ff ff6c 	bl	b695a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6a82:	4620      	mov	r0, r4
   b6a84:	bd38      	pop	{r3, r4, r5, pc}
   b6a86:	bf00      	nop
   b6a88:	000b9013 	.word	0x000b9013

000b6a8c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6a8c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6a8e:	2500      	movs	r5, #0
   b6a90:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b6a92:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b6a96:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b6a9a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b6a9e:	4604      	mov	r4, r0
   b6aa0:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b6aa2:	b14b      	cbz	r3, b6ab8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b6aa4:	781a      	ldrb	r2, [r3, #0]
   b6aa6:	2a01      	cmp	r2, #1
   b6aa8:	d106      	bne.n	b6ab8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b6aaa:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b6aae:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b6ab0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b6ab2:	6143      	str	r3, [r0, #20]
   b6ab4:	f7ff ff51 	bl	b695a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6ab8:	4620      	mov	r0, r4
   b6aba:	bd38      	pop	{r3, r4, r5, pc}

000b6abc <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b6abc:	b510      	push	{r4, lr}
    if (!n_) {
   b6abe:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b6ac0:	4604      	mov	r4, r0
    if (!n_) {
   b6ac2:	b163      	cbz	r3, b6ade <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b6ac4:	6880      	ldr	r0, [r0, #8]
   b6ac6:	60e0      	str	r0, [r4, #12]
    --n_;
   b6ac8:	3b01      	subs	r3, #1
    ++t_;
   b6aca:	3010      	adds	r0, #16
   b6acc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b6ace:	6120      	str	r0, [r4, #16]
    --n_;
   b6ad0:	6163      	str	r3, [r4, #20]
    if (n_) {
   b6ad2:	b113      	cbz	r3, b6ada <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b6ad4:	f7ff fef2 	bl	b68bc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b6ad8:	60a0      	str	r0, [r4, #8]
    return true;
   b6ada:	2001      	movs	r0, #1
   b6adc:	e000      	b.n	b6ae0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b6ade:	4618      	mov	r0, r3
}
   b6ae0:	bd10      	pop	{r4, pc}

000b6ae2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6ae2:	b510      	push	{r4, lr}
    write('}');
   b6ae4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6ae6:	4604      	mov	r4, r0
    write('}');
   b6ae8:	f7ff ff49 	bl	b697e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b6aec:	2301      	movs	r3, #1
   b6aee:	7123      	strb	r3, [r4, #4]
}
   b6af0:	4620      	mov	r0, r4
   b6af2:	bd10      	pop	{r4, pc}

000b6af4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b6af4:	b508      	push	{r3, lr}
    switch (state_) {
   b6af6:	7903      	ldrb	r3, [r0, #4]
   b6af8:	2b01      	cmp	r3, #1
   b6afa:	d002      	beq.n	b6b02 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b6afc:	2b02      	cmp	r3, #2
   b6afe:	d004      	beq.n	b6b0a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b6b00:	bd08      	pop	{r3, pc}
        write(',');
   b6b02:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b6b04:	f7ff ff3b 	bl	b697e <_ZN5spark10JSONWriter5writeEc>
}
   b6b08:	e7fa      	b.n	b6b00 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b6b0a:	213a      	movs	r1, #58	; 0x3a
   b6b0c:	e7fa      	b.n	b6b04 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b6b0e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b6b0e:	b510      	push	{r4, lr}
   b6b10:	4604      	mov	r4, r0
    writeSeparator();
   b6b12:	f7ff ffef 	bl	b6af4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b6b16:	4620      	mov	r0, r4
   b6b18:	217b      	movs	r1, #123	; 0x7b
   b6b1a:	f7ff ff30 	bl	b697e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b6b1e:	2300      	movs	r3, #0
   b6b20:	7123      	strb	r3, [r4, #4]
}
   b6b22:	4620      	mov	r0, r4
   b6b24:	bd10      	pop	{r4, pc}
	...

000b6b28 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b6b28:	b513      	push	{r0, r1, r4, lr}
   b6b2a:	4604      	mov	r4, r0
   b6b2c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6b2e:	f7ff ffe1 	bl	b6af4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b6b32:	6823      	ldr	r3, [r4, #0]
   b6b34:	9a01      	ldr	r2, [sp, #4]
   b6b36:	68db      	ldr	r3, [r3, #12]
   b6b38:	4903      	ldr	r1, [pc, #12]	; (b6b48 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b6b3a:	4620      	mov	r0, r4
   b6b3c:	4798      	blx	r3
    state_ = NEXT;
   b6b3e:	2301      	movs	r3, #1
}
   b6b40:	4620      	mov	r0, r4
    state_ = NEXT;
   b6b42:	7123      	strb	r3, [r4, #4]
}
   b6b44:	b002      	add	sp, #8
   b6b46:	bd10      	pop	{r4, pc}
   b6b48:	000b8dd5 	.word	0x000b8dd5

000b6b4c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b6b4c:	b513      	push	{r0, r1, r4, lr}
   b6b4e:	4604      	mov	r4, r0
   b6b50:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6b52:	f7ff ffcf 	bl	b6af4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b6b56:	6823      	ldr	r3, [r4, #0]
   b6b58:	9a01      	ldr	r2, [sp, #4]
   b6b5a:	68db      	ldr	r3, [r3, #12]
   b6b5c:	4903      	ldr	r1, [pc, #12]	; (b6b6c <_ZN5spark10JSONWriter5valueEj+0x20>)
   b6b5e:	4620      	mov	r0, r4
   b6b60:	4798      	blx	r3
    state_ = NEXT;
   b6b62:	2301      	movs	r3, #1
}
   b6b64:	4620      	mov	r0, r4
    state_ = NEXT;
   b6b66:	7123      	strb	r3, [r4, #4]
}
   b6b68:	b002      	add	sp, #8
   b6b6a:	bd10      	pop	{r4, pc}
   b6b6c:	000b8fb0 	.word	0x000b8fb0

000b6b70 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6b74:	460d      	mov	r5, r1
    write('"');
   b6b76:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6b78:	4690      	mov	r8, r2
   b6b7a:	4604      	mov	r4, r0
    write('"');
   b6b7c:	f7ff feff 	bl	b697e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b6b80:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b6c28 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b6b84:	44a8      	add	r8, r5
    const char *s = str;
   b6b86:	462f      	mov	r7, r5
    while (s != end) {
   b6b88:	4547      	cmp	r7, r8
   b6b8a:	46ba      	mov	sl, r7
   b6b8c:	d03d      	beq.n	b6c0a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b6b8e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b6b92:	2e22      	cmp	r6, #34	; 0x22
   b6b94:	d006      	beq.n	b6ba4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6b96:	2e5c      	cmp	r6, #92	; 0x5c
   b6b98:	d004      	beq.n	b6ba4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6b9a:	4630      	mov	r0, r6
   b6b9c:	f001 fef0 	bl	b8980 <isprint>
   b6ba0:	2800      	cmp	r0, #0
   b6ba2:	d1f1      	bne.n	b6b88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b6ba4:	6823      	ldr	r3, [r4, #0]
   b6ba6:	ebaa 0205 	sub.w	r2, sl, r5
   b6baa:	689b      	ldr	r3, [r3, #8]
   b6bac:	4629      	mov	r1, r5
   b6bae:	4620      	mov	r0, r4
   b6bb0:	4798      	blx	r3
            write('\\');
   b6bb2:	215c      	movs	r1, #92	; 0x5c
   b6bb4:	4620      	mov	r0, r4
   b6bb6:	f7ff fee2 	bl	b697e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b6bba:	2e0d      	cmp	r6, #13
   b6bbc:	d80a      	bhi.n	b6bd4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b6bbe:	2e07      	cmp	r6, #7
   b6bc0:	d91c      	bls.n	b6bfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6bc2:	f1a6 0308 	sub.w	r3, r6, #8
   b6bc6:	2b05      	cmp	r3, #5
   b6bc8:	d818      	bhi.n	b6bfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6bca:	e8df f003 	tbb	[pc, r3]
   b6bce:	0f0d      	.short	0x0f0d
   b6bd0:	15131711 	.word	0x15131711
   b6bd4:	2e22      	cmp	r6, #34	; 0x22
   b6bd6:	d001      	beq.n	b6bdc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b6bd8:	2e5c      	cmp	r6, #92	; 0x5c
   b6bda:	d10f      	bne.n	b6bfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b6bdc:	4631      	mov	r1, r6
                write('b');
   b6bde:	4620      	mov	r0, r4
   b6be0:	f7ff fecd 	bl	b697e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b6be4:	463d      	mov	r5, r7
    while (s != end) {
   b6be6:	e7cf      	b.n	b6b88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b6be8:	2162      	movs	r1, #98	; 0x62
   b6bea:	e7f8      	b.n	b6bde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b6bec:	2174      	movs	r1, #116	; 0x74
   b6bee:	e7f6      	b.n	b6bde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b6bf0:	216e      	movs	r1, #110	; 0x6e
   b6bf2:	e7f4      	b.n	b6bde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b6bf4:	2166      	movs	r1, #102	; 0x66
   b6bf6:	e7f2      	b.n	b6bde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b6bf8:	2172      	movs	r1, #114	; 0x72
   b6bfa:	e7f0      	b.n	b6bde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b6bfc:	6823      	ldr	r3, [r4, #0]
   b6bfe:	4632      	mov	r2, r6
   b6c00:	68db      	ldr	r3, [r3, #12]
   b6c02:	4649      	mov	r1, r9
   b6c04:	4620      	mov	r0, r4
   b6c06:	4798      	blx	r3
                break;
   b6c08:	e7ec      	b.n	b6be4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b6c0a:	42bd      	cmp	r5, r7
   b6c0c:	d005      	beq.n	b6c1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b6c0e:	6823      	ldr	r3, [r4, #0]
   b6c10:	1b7a      	subs	r2, r7, r5
   b6c12:	689b      	ldr	r3, [r3, #8]
   b6c14:	4629      	mov	r1, r5
   b6c16:	4620      	mov	r0, r4
   b6c18:	4798      	blx	r3
    }
    write('"');
   b6c1a:	2122      	movs	r1, #34	; 0x22
   b6c1c:	4620      	mov	r0, r4
   b6c1e:	f7ff feae 	bl	b697e <_ZN5spark10JSONWriter5writeEc>
}
   b6c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6c26:	bf00      	nop
   b6c28:	000b8fb3 	.word	0x000b8fb3

000b6c2c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b6c2c:	b513      	push	{r0, r1, r4, lr}
   b6c2e:	4604      	mov	r4, r0
   b6c30:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b6c34:	f7ff ff5e 	bl	b6af4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b6c38:	4620      	mov	r0, r4
   b6c3a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b6c3e:	f7ff ff97 	bl	b6b70 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b6c42:	2302      	movs	r3, #2
}
   b6c44:	4620      	mov	r0, r4
    state_ = VALUE;
   b6c46:	7123      	strb	r3, [r4, #4]
}
   b6c48:	b002      	add	sp, #8
   b6c4a:	bd10      	pop	{r4, pc}

000b6c4c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b6c4c:	b513      	push	{r0, r1, r4, lr}
   b6c4e:	4604      	mov	r4, r0
   b6c50:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b6c54:	f7ff ff4e 	bl	b6af4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b6c58:	4620      	mov	r0, r4
   b6c5a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b6c5e:	f7ff ff87 	bl	b6b70 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b6c62:	2301      	movs	r3, #1
}
   b6c64:	4620      	mov	r0, r4
    state_ = NEXT;
   b6c66:	7123      	strb	r3, [r4, #4]
}
   b6c68:	b002      	add	sp, #8
   b6c6a:	bd10      	pop	{r4, pc}

000b6c6c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b6c6c:	6880      	ldr	r0, [r0, #8]
   b6c6e:	6803      	ldr	r3, [r0, #0]
   b6c70:	68db      	ldr	r3, [r3, #12]
   b6c72:	4718      	bx	r3

000b6c74 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b6c74:	4770      	bx	lr

000b6c76 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b6c76:	4608      	mov	r0, r1
   b6c78:	b111      	cbz	r1, b6c80 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b6c7a:	680b      	ldr	r3, [r1, #0]
   b6c7c:	685b      	ldr	r3, [r3, #4]
   b6c7e:	4718      	bx	r3
}
   b6c80:	4770      	bx	lr

000b6c82 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b6c82:	4770      	bx	lr

000b6c84 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b6c84:	4770      	bx	lr

000b6c86 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b6c86:	4770      	bx	lr

000b6c88 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b6c88:	4770      	bx	lr

000b6c8a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b6c8a:	b538      	push	{r3, r4, r5, lr}
   b6c8c:	4604      	mov	r4, r0
   b6c8e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b6c90:	6800      	ldr	r0, [r0, #0]
   b6c92:	212e      	movs	r1, #46	; 0x2e
   b6c94:	f001 fee7 	bl	b8a66 <strchrnul>
    size = s - category;
   b6c98:	6823      	ldr	r3, [r4, #0]
   b6c9a:	1ac3      	subs	r3, r0, r3
   b6c9c:	602b      	str	r3, [r5, #0]
    if (size) {
   b6c9e:	b123      	cbz	r3, b6caa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b6ca0:	7803      	ldrb	r3, [r0, #0]
   b6ca2:	b103      	cbz	r3, b6ca6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b6ca4:	3001      	adds	r0, #1
   b6ca6:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6ca8:	6020      	str	r0, [r4, #0]
}
   b6caa:	4618      	mov	r0, r3
   b6cac:	bd38      	pop	{r3, r4, r5, pc}

000b6cae <_ZN5spark16JSONStreamWriterD0Ev>:
   b6cae:	b510      	push	{r4, lr}
   b6cb0:	210c      	movs	r1, #12
   b6cb2:	4604      	mov	r4, r0
   b6cb4:	f7fe f857 	bl	b4d66 <_ZdlPvj>
   b6cb8:	4620      	mov	r0, r4
   b6cba:	bd10      	pop	{r4, pc}

000b6cbc <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b6cbc:	b510      	push	{r4, lr}
   b6cbe:	2104      	movs	r1, #4
   b6cc0:	4604      	mov	r4, r0
   b6cc2:	f7fe f850 	bl	b4d66 <_ZdlPvj>
   b6cc6:	4620      	mov	r0, r4
   b6cc8:	bd10      	pop	{r4, pc}

000b6cca <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b6cca:	b510      	push	{r4, lr}
   b6ccc:	2104      	movs	r1, #4
   b6cce:	4604      	mov	r4, r0
   b6cd0:	f7fe f849 	bl	b4d66 <_ZdlPvj>
   b6cd4:	4620      	mov	r0, r4
   b6cd6:	bd10      	pop	{r4, pc}

000b6cd8 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6cd8:	f7fe bd48 	b.w	b576c <os_mutex_recursive_lock>

000b6cdc <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b6cdc:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b6cde:	f7fd fff1 	bl	b4cc4 <strcmp>
}
   b6ce2:	fab0 f080 	clz	r0, r0
   b6ce6:	0940      	lsrs	r0, r0, #5
   b6ce8:	bd08      	pop	{r3, pc}

000b6cea <__tcf_1>:
   b6cea:	4770      	bx	lr

000b6cec <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b6cec:	b510      	push	{r4, lr}
   b6cee:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b6cf0:	f001 fc04 	bl	b84fc <_Z16_fetch_usbserialv>
   b6cf4:	4284      	cmp	r4, r0
   b6cf6:	d010      	beq.n	b6d1a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b6cf8:	f001 fe10 	bl	b891c <_Z22__fetch_global_Serial1v>
   b6cfc:	4284      	cmp	r4, r0
   b6cfe:	d105      	bne.n	b6d0c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b6d00:	f001 fe0c 	bl	b891c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b6d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b6d08:	f001 bb93 	b.w	b8432 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b6d0c:	b12c      	cbz	r4, b6d1a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b6d0e:	6823      	ldr	r3, [r4, #0]
   b6d10:	4620      	mov	r0, r4
   b6d12:	685b      	ldr	r3, [r3, #4]
}
   b6d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6d18:	4718      	bx	r3
   b6d1a:	bd10      	pop	{r4, pc}

000b6d1c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6d1c:	680b      	ldr	r3, [r1, #0]
   b6d1e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6d20:	684b      	ldr	r3, [r1, #4]
   b6d22:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6d24:	b113      	cbz	r3, b6d2c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b6d26:	685a      	ldr	r2, [r3, #4]
   b6d28:	3201      	adds	r2, #1
   b6d2a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6d2c:	4770      	bx	lr

000b6d2e <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b6d2e:	b513      	push	{r0, r1, r4, lr}
   b6d30:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b6d32:	4608      	mov	r0, r1
   b6d34:	9101      	str	r1, [sp, #4]
   b6d36:	f7fd ffcf 	bl	b4cd8 <strlen>
   b6d3a:	9901      	ldr	r1, [sp, #4]
   b6d3c:	4602      	mov	r2, r0
   b6d3e:	4620      	mov	r0, r4
}
   b6d40:	b002      	add	sp, #8
   b6d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b6d46:	f7ff bf81 	b.w	b6c4c <_ZN5spark10JSONWriter5valueEPKcj>

000b6d4a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b6d4a:	b513      	push	{r0, r1, r4, lr}
   b6d4c:	4604      	mov	r4, r0
    write(str, strlen(str));
   b6d4e:	4608      	mov	r0, r1
   b6d50:	9101      	str	r1, [sp, #4]
   b6d52:	f7fd ffc1 	bl	b4cd8 <strlen>
   b6d56:	6823      	ldr	r3, [r4, #0]
   b6d58:	9901      	ldr	r1, [sp, #4]
   b6d5a:	68db      	ldr	r3, [r3, #12]
   b6d5c:	4602      	mov	r2, r0
   b6d5e:	4620      	mov	r0, r4
}
   b6d60:	b002      	add	sp, #8
   b6d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b6d66:	4718      	bx	r3

000b6d68 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b6d68:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6d6a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b6d6c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6d70:	68db      	ldr	r3, [r3, #12]
   b6d72:	2201      	movs	r2, #1
   b6d74:	f10d 0107 	add.w	r1, sp, #7
   b6d78:	4798      	blx	r3
}
   b6d7a:	b003      	add	sp, #12
   b6d7c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6d80 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b6d80:	680a      	ldr	r2, [r1, #0]
   b6d82:	6002      	str	r2, [r0, #0]
   b6d84:	684a      	ldr	r2, [r1, #4]
   b6d86:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b6d88:	2200      	movs	r2, #0
   b6d8a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b6d8e:	b510      	push	{r4, lr}
   b6d90:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6d92:	688c      	ldr	r4, [r1, #8]
   b6d94:	6084      	str	r4, [r0, #8]
   b6d96:	68cc      	ldr	r4, [r1, #12]
   b6d98:	60c4      	str	r4, [r0, #12]
   b6d9a:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b6d9c:	608a      	str	r2, [r1, #8]
   b6d9e:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6da0:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b6da2:	610a      	str	r2, [r1, #16]
   b6da4:	bd10      	pop	{r4, pc}
	...

000b6da8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b6dac:	e9d0 8400 	ldrd	r8, r4, [r0]
   b6db0:	f04f 0a14 	mov.w	sl, #20
   b6db4:	9300      	str	r3, [sp, #0]
   b6db6:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b6dba:	4b18      	ldr	r3, [pc, #96]	; (b6e1c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b6dbc:	10a4      	asrs	r4, r4, #2
   b6dbe:	4617      	mov	r7, r2
   b6dc0:	435c      	muls	r4, r3
   b6dc2:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b6dc4:	2c00      	cmp	r4, #0
   b6dc6:	dd21      	ble.n	b6e0c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b6dc8:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b6dca:	fb0a f006 	mul.w	r0, sl, r6
   b6dce:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b6dd2:	463a      	mov	r2, r7
   b6dd4:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b6dd8:	5828      	ldr	r0, [r5, r0]
   b6dda:	9101      	str	r1, [sp, #4]
   b6ddc:	455f      	cmp	r7, fp
   b6dde:	bf28      	it	cs
   b6de0:	465a      	movcs	r2, fp
   b6de2:	f001 fe70 	bl	b8ac6 <strncmp>
                if (cmp == 0) {
   b6de6:	2800      	cmp	r0, #0
   b6de8:	9901      	ldr	r1, [sp, #4]
   b6dea:	f04f 0301 	mov.w	r3, #1
   b6dee:	d10b      	bne.n	b6e08 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b6df0:	455f      	cmp	r7, fp
   b6df2:	d103      	bne.n	b6dfc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b6df4:	9a00      	ldr	r2, [sp, #0]
   b6df6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6df8:	4634      	mov	r4, r6
   b6dfa:	e7e3      	b.n	b6dc4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b6dfc:	d9fc      	bls.n	b6df8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b6dfe:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b6e00:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b6e04:	3e01      	subs	r6, #1
   b6e06:	e7f7      	b.n	b6df8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b6e08:	dbf9      	blt.n	b6dfe <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b6e0a:	e7f5      	b.n	b6df8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b6e0c:	eba5 0508 	sub.w	r5, r5, r8
}
   b6e10:	4802      	ldr	r0, [pc, #8]	; (b6e1c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b6e12:	10ad      	asrs	r5, r5, #2
   b6e14:	4368      	muls	r0, r5
   b6e16:	b003      	add	sp, #12
   b6e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6e1c:	cccccccd 	.word	0xcccccccd

000b6e20 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b6e20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b6e22:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b6e24:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b6e26:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b6e28:	b303      	cbz	r3, b6e6c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b6e2a:	b1f9      	cbz	r1, b6e6c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b6e2c:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b6e2e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b6e32:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b6e34:	a903      	add	r1, sp, #12
   b6e36:	a801      	add	r0, sp, #4
   b6e38:	f7ff ff27 	bl	b6c8a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6e3c:	4601      	mov	r1, r0
   b6e3e:	b1a8      	cbz	r0, b6e6c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b6e40:	f10d 030b 	add.w	r3, sp, #11
   b6e44:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b6e46:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6e4a:	4620      	mov	r0, r4
   b6e4c:	f7ff ffac 	bl	b6da8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b6e50:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b6e54:	b153      	cbz	r3, b6e6c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b6e56:	6823      	ldr	r3, [r4, #0]
   b6e58:	2414      	movs	r4, #20
   b6e5a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b6e5e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b6e60:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b6e64:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b6e66:	bfa8      	it	ge
   b6e68:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b6e6a:	e7e3      	b.n	b6e34 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b6e6c:	4628      	mov	r0, r5
   b6e6e:	b004      	add	sp, #16
   b6e70:	bd70      	pop	{r4, r5, r6, pc}

000b6e72 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b6e72:	b40e      	push	{r1, r2, r3}
   b6e74:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6e76:	b08c      	sub	sp, #48	; 0x30
   b6e78:	af00      	add	r7, sp, #0
   b6e7a:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b6e7e:	4604      	mov	r4, r0
   b6e80:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6e84:	607a      	str	r2, [r7, #4]
   b6e86:	462b      	mov	r3, r5
   b6e88:	2120      	movs	r1, #32
   b6e8a:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b6e8e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6e90:	f7fe fee2 	bl	b5c58 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b6e94:	281f      	cmp	r0, #31
   b6e96:	687a      	ldr	r2, [r7, #4]
   b6e98:	d91a      	bls.n	b6ed0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b6e9a:	f100 0308 	add.w	r3, r0, #8
   b6e9e:	f023 0307 	bic.w	r3, r3, #7
        }
   b6ea2:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b6ea4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6ea8:	1c41      	adds	r1, r0, #1
   b6eaa:	462b      	mov	r3, r5
   b6eac:	4668      	mov	r0, sp
        va_start(args, fmt);
   b6eae:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6eb0:	f7fe fed2 	bl	b5c58 <vsnprintf>
        if (n > 0) {
   b6eb4:	1e02      	subs	r2, r0, #0
   b6eb6:	dd04      	ble.n	b6ec2 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b6eb8:	6823      	ldr	r3, [r4, #0]
   b6eba:	4669      	mov	r1, sp
   b6ebc:	68db      	ldr	r3, [r3, #12]
   b6ebe:	4620      	mov	r0, r4
   b6ec0:	4798      	blx	r3
   b6ec2:	46b5      	mov	sp, r6
}
   b6ec4:	3730      	adds	r7, #48	; 0x30
   b6ec6:	46bd      	mov	sp, r7
   b6ec8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6ecc:	b003      	add	sp, #12
   b6ece:	4770      	bx	lr
    } else if (n > 0) {
   b6ed0:	2800      	cmp	r0, #0
   b6ed2:	d0f7      	beq.n	b6ec4 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b6ed4:	6823      	ldr	r3, [r4, #0]
   b6ed6:	4602      	mov	r2, r0
   b6ed8:	68db      	ldr	r3, [r3, #12]
   b6eda:	f107 0110 	add.w	r1, r7, #16
   b6ede:	4620      	mov	r0, r4
   b6ee0:	4798      	blx	r3
}
   b6ee2:	e7ef      	b.n	b6ec4 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b6ee4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b6ee4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b6ee6:	4c09      	ldr	r4, [pc, #36]	; (b6f0c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b6ee8:	7823      	ldrb	r3, [r4, #0]
   b6eea:	f3bf 8f5b 	dmb	ish
   b6eee:	07db      	lsls	r3, r3, #31
   b6ef0:	d409      	bmi.n	b6f06 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b6ef2:	4620      	mov	r0, r4
   b6ef4:	f7fd ff46 	bl	b4d84 <__cxa_guard_acquire>
   b6ef8:	b128      	cbz	r0, b6f06 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b6efa:	4620      	mov	r0, r4
   b6efc:	f7fd ff47 	bl	b4d8e <__cxa_guard_release>
   b6f00:	4803      	ldr	r0, [pc, #12]	; (b6f10 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b6f02:	f001 fd36 	bl	b8972 <atexit>
}
   b6f06:	4803      	ldr	r0, [pc, #12]	; (b6f14 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b6f08:	bd10      	pop	{r4, pc}
   b6f0a:	bf00      	nop
   b6f0c:	2003e684 	.word	0x2003e684
   b6f10:	000b6c83 	.word	0x000b6c83
   b6f14:	2003e57c 	.word	0x2003e57c

000b6f18 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b6f18:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b6f1a:	4c09      	ldr	r4, [pc, #36]	; (b6f40 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b6f1c:	7823      	ldrb	r3, [r4, #0]
   b6f1e:	f3bf 8f5b 	dmb	ish
   b6f22:	07db      	lsls	r3, r3, #31
   b6f24:	d409      	bmi.n	b6f3a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b6f26:	4620      	mov	r0, r4
   b6f28:	f7fd ff2c 	bl	b4d84 <__cxa_guard_acquire>
   b6f2c:	b128      	cbz	r0, b6f3a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b6f2e:	4620      	mov	r0, r4
   b6f30:	f7fd ff2d 	bl	b4d8e <__cxa_guard_release>
   b6f34:	4803      	ldr	r0, [pc, #12]	; (b6f44 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b6f36:	f001 fd1c 	bl	b8972 <atexit>
    return &factory;
}
   b6f3a:	4803      	ldr	r0, [pc, #12]	; (b6f48 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b6f3c:	bd10      	pop	{r4, pc}
   b6f3e:	bf00      	nop
   b6f40:	2003e688 	.word	0x2003e688
   b6f44:	000b6ceb 	.word	0x000b6ceb
   b6f48:	2003e580 	.word	0x2003e580

000b6f4c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b6f4c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b6f4e:	2500      	movs	r5, #0
   b6f50:	4604      	mov	r4, r0
   b6f52:	e9c0 5500 	strd	r5, r5, [r0]
   b6f56:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b6f5a:	6085      	str	r5, [r0, #8]
   b6f5c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b6f5e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b6f62:	f7fe fbf3 	bl	b574c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b6f66:	f7ff ffbd 	bl	b6ee4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b6f6a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b6f6c:	f7ff ffd4 	bl	b6f18 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b6f70:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b6f72:	6220      	str	r0, [r4, #32]
}
   b6f74:	4620      	mov	r0, r4
   b6f76:	bd38      	pop	{r3, r4, r5, pc}

000b6f78 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b6f78:	b510      	push	{r4, lr}
    static LogManager mgr;
   b6f7a:	4c0a      	ldr	r4, [pc, #40]	; (b6fa4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b6f7c:	7823      	ldrb	r3, [r4, #0]
   b6f7e:	f3bf 8f5b 	dmb	ish
   b6f82:	07db      	lsls	r3, r3, #31
   b6f84:	d40c      	bmi.n	b6fa0 <_ZN5spark10LogManager8instanceEv+0x28>
   b6f86:	4620      	mov	r0, r4
   b6f88:	f7fd fefc 	bl	b4d84 <__cxa_guard_acquire>
   b6f8c:	b140      	cbz	r0, b6fa0 <_ZN5spark10LogManager8instanceEv+0x28>
   b6f8e:	4806      	ldr	r0, [pc, #24]	; (b6fa8 <_ZN5spark10LogManager8instanceEv+0x30>)
   b6f90:	f7ff ffdc 	bl	b6f4c <_ZN5spark10LogManagerC1Ev>
   b6f94:	4620      	mov	r0, r4
   b6f96:	f7fd fefa 	bl	b4d8e <__cxa_guard_release>
   b6f9a:	4804      	ldr	r0, [pc, #16]	; (b6fac <_ZN5spark10LogManager8instanceEv+0x34>)
   b6f9c:	f001 fce9 	bl	b8972 <atexit>
    return &mgr;
}
   b6fa0:	4801      	ldr	r0, [pc, #4]	; (b6fa8 <_ZN5spark10LogManager8instanceEv+0x30>)
   b6fa2:	bd10      	pop	{r4, pc}
   b6fa4:	2003e680 	.word	0x2003e680
   b6fa8:	2003e690 	.word	0x2003e690
   b6fac:	000b74cd 	.word	0x000b74cd

000b6fb0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b6fb0:	4a02      	ldr	r2, [pc, #8]	; (b6fbc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b6fb2:	4903      	ldr	r1, [pc, #12]	; (b6fc0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b6fb4:	4803      	ldr	r0, [pc, #12]	; (b6fc4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b6fb6:	2300      	movs	r3, #0
   b6fb8:	f7fe bd48 	b.w	b5a4c <log_set_callbacks>
   b6fbc:	000b72b1 	.word	0x000b72b1
   b6fc0:	000b723d 	.word	0x000b723d
   b6fc4:	000b71bd 	.word	0x000b71bd

000b6fc8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b6fc8:	2300      	movs	r3, #0
   b6fca:	461a      	mov	r2, r3
   b6fcc:	4619      	mov	r1, r3
   b6fce:	4618      	mov	r0, r3
   b6fd0:	f7fe bd3c 	b.w	b5a4c <log_set_callbacks>

000b6fd4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b6fd6:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6fd8:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6fda:	4668      	mov	r0, sp
   b6fdc:	f7ff fe9e 	bl	b6d1c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b6fe0:	466a      	mov	r2, sp
   b6fe2:	4629      	mov	r1, r5
   b6fe4:	4620      	mov	r0, r4
   b6fe6:	f7ff fd51 	bl	b6a8c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b6fea:	a801      	add	r0, sp, #4
   b6fec:	f7fe f804 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6ff0:	4620      	mov	r0, r4
   b6ff2:	b003      	add	sp, #12
   b6ff4:	bd30      	pop	{r4, r5, pc}

000b6ff6 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6ff6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b6ff8:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6ffa:	4604      	mov	r4, r0
   b6ffc:	4668      	mov	r0, sp
   b6ffe:	f7ff fe8d 	bl	b6d1c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b7002:	466a      	mov	r2, sp
   b7004:	4629      	mov	r1, r5
   b7006:	4620      	mov	r0, r4
   b7008:	f7ff fd1c 	bl	b6a44 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b700c:	a801      	add	r0, sp, #4
   b700e:	f7fd fff3 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7012:	4620      	mov	r0, r4
   b7014:	b003      	add	sp, #12
   b7016:	bd30      	pop	{r4, r5, pc}

000b7018 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b7018:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b701a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b701c:	4604      	mov	r4, r0
   b701e:	4668      	mov	r0, sp
   b7020:	f7ff fe7c 	bl	b6d1c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b7024:	466a      	mov	r2, sp
   b7026:	4629      	mov	r1, r5
   b7028:	4620      	mov	r0, r4
   b702a:	f7ff fcb4 	bl	b6996 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b702e:	a801      	add	r0, sp, #4
   b7030:	f7fd ffe2 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7034:	4620      	mov	r0, r4
   b7036:	b003      	add	sp, #12
   b7038:	bd30      	pop	{r4, r5, pc}
	...

000b703c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b703c:	b570      	push	{r4, r5, r6, lr}
   b703e:	b08a      	sub	sp, #40	; 0x28
   b7040:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b7042:	4601      	mov	r1, r0
   b7044:	a804      	add	r0, sp, #16
   b7046:	f7ff ffc5 	bl	b6fd4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b704a:	4e14      	ldr	r6, [pc, #80]	; (b709c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b704c:	a804      	add	r0, sp, #16
   b704e:	f7ff fd35 	bl	b6abc <_ZN5spark18JSONObjectIterator4nextEv>
   b7052:	b1e8      	cbz	r0, b7090 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b7054:	a904      	add	r1, sp, #16
   b7056:	4668      	mov	r0, sp
   b7058:	f7ff ffcd 	bl	b6ff6 <_ZNK5spark18JSONObjectIterator4nameEv>
   b705c:	9802      	ldr	r0, [sp, #8]
   b705e:	4631      	mov	r1, r6
   b7060:	f7ff fe3c 	bl	b6cdc <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b7064:	4604      	mov	r4, r0
   b7066:	b110      	cbz	r0, b706e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b7068:	1e2c      	subs	r4, r5, #0
   b706a:	bf18      	it	ne
   b706c:	2401      	movne	r4, #1
   b706e:	a801      	add	r0, sp, #4
   b7070:	f7fd ffc2 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7074:	2c00      	cmp	r4, #0
   b7076:	d0e9      	beq.n	b704c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b7078:	a904      	add	r1, sp, #16
   b707a:	4668      	mov	r0, sp
   b707c:	f7ff ffcc 	bl	b7018 <_ZNK5spark18JSONObjectIterator5valueEv>
   b7080:	4668      	mov	r0, sp
   b7082:	f7ff fcbe 	bl	b6a02 <_ZNK5spark9JSONValue5toIntEv>
   b7086:	6028      	str	r0, [r5, #0]
   b7088:	a801      	add	r0, sp, #4
   b708a:	f7fd ffb5 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b708e:	e7dd      	b.n	b704c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b7090:	a805      	add	r0, sp, #20
   b7092:	f7fd ffb1 	bl	b4ff8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7096:	b00a      	add	sp, #40	; 0x28
   b7098:	bd70      	pop	{r4, r5, r6, pc}
   b709a:	bf00      	nop
   b709c:	000b8fb9 	.word	0x000b8fb9

000b70a0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b70a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b70a2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b70a4:	4620      	mov	r0, r4
   b70a6:	4913      	ldr	r1, [pc, #76]	; (b70f4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b70a8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b70aa:	f7fd fe0b 	bl	b4cc4 <strcmp>
   b70ae:	b950      	cbnz	r0, b70c6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b70b0:	f001 fa24 	bl	b84fc <_Z16_fetch_usbserialv>
   b70b4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b70b8:	f001 fa10 	bl	b84dc <_ZN9USBSerial5beginEl>
}
   b70bc:	b003      	add	sp, #12
   b70be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b70c2:	f001 ba1b 	b.w	b84fc <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b70c6:	490c      	ldr	r1, [pc, #48]	; (b70f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b70c8:	4620      	mov	r0, r4
   b70ca:	f7fd fdfb 	bl	b4cc4 <strcmp>
   b70ce:	b978      	cbnz	r0, b70f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b70d0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b70d4:	a901      	add	r1, sp, #4
   b70d6:	4628      	mov	r0, r5
        int baud = 9600;
   b70d8:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b70da:	f7ff ffaf 	bl	b703c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b70de:	f001 fc1d 	bl	b891c <_Z22__fetch_global_Serial1v>
   b70e2:	9901      	ldr	r1, [sp, #4]
   b70e4:	f001 f9a2 	bl	b842c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b70e8:	f001 fc18 	bl	b891c <_Z22__fetch_global_Serial1v>
}
   b70ec:	b003      	add	sp, #12
   b70ee:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b70f0:	2000      	movs	r0, #0
   b70f2:	e7fb      	b.n	b70ec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b70f4:	000b8fbe 	.word	0x000b8fbe
   b70f8:	000b8fc5 	.word	0x000b8fc5

000b70fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b70fc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b70fe:	e9d0 5300 	ldrd	r5, r3, [r0]
   b7102:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7104:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7106:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b710a:	42ae      	cmp	r6, r5
   b710c:	d005      	beq.n	b711a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b710e:	f105 0008 	add.w	r0, r5, #8
   b7112:	f7ff fff3 	bl	b70fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b7116:	3514      	adds	r5, #20
   b7118:	e7f7      	b.n	b710a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b711a:	6820      	ldr	r0, [r4, #0]
   b711c:	f7fe fd8c 	bl	b5c38 <free>
}
   b7120:	4620      	mov	r0, r4
   b7122:	bd70      	pop	{r4, r5, r6, pc}

000b7124 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b7124:	b510      	push	{r4, lr}
   b7126:	4604      	mov	r4, r0
   b7128:	300c      	adds	r0, #12
   b712a:	f7ff ffe7 	bl	b70fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b712e:	4620      	mov	r0, r4
   b7130:	f7fe fdf6 	bl	b5d20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b7134:	4620      	mov	r0, r4
   b7136:	bd10      	pop	{r4, pc}

000b7138 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b7138:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b713a:	4b04      	ldr	r3, [pc, #16]	; (b714c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b713c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b713e:	f840 3b04 	str.w	r3, [r0], #4
   b7142:	f7ff ffef 	bl	b7124 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b7146:	4620      	mov	r0, r4
   b7148:	bd10      	pop	{r4, pc}
   b714a:	bf00      	nop
   b714c:	000b8e7c 	.word	0x000b8e7c

000b7150 <_ZN5spark16StreamLogHandlerD0Ev>:
   b7150:	b510      	push	{r4, lr}
   b7152:	4604      	mov	r4, r0
   b7154:	f7ff fff0 	bl	b7138 <_ZN5spark16StreamLogHandlerD1Ev>
   b7158:	4620      	mov	r0, r4
   b715a:	2124      	movs	r1, #36	; 0x24
   b715c:	f7fd fe03 	bl	b4d66 <_ZdlPvj>
   b7160:	4620      	mov	r0, r4
   b7162:	bd10      	pop	{r4, pc}

000b7164 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b7164:	b510      	push	{r4, lr}
   b7166:	4b03      	ldr	r3, [pc, #12]	; (b7174 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b7168:	6003      	str	r3, [r0, #0]
   b716a:	4604      	mov	r4, r0
   b716c:	f7ff ffe4 	bl	b7138 <_ZN5spark16StreamLogHandlerD1Ev>
   b7170:	4620      	mov	r0, r4
   b7172:	bd10      	pop	{r4, pc}
   b7174:	000b9064 	.word	0x000b9064

000b7178 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b7178:	b510      	push	{r4, lr}
   b717a:	4604      	mov	r4, r0
   b717c:	f7ff fff2 	bl	b7164 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b7180:	4620      	mov	r0, r4
   b7182:	2124      	movs	r1, #36	; 0x24
   b7184:	f7fd fdef 	bl	b4d66 <_ZdlPvj>
   b7188:	4620      	mov	r0, r4
   b718a:	bd10      	pop	{r4, pc}

000b718c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b718c:	2200      	movs	r2, #0
   b718e:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b7192:	b510      	push	{r4, lr}
        capacity_(0) {
   b7194:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7196:	680c      	ldr	r4, [r1, #0]
   b7198:	6004      	str	r4, [r0, #0]
   b719a:	684c      	ldr	r4, [r1, #4]
   b719c:	6044      	str	r4, [r0, #4]
   b719e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b71a0:	600a      	str	r2, [r1, #0]
   b71a2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b71a4:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b71a6:	608a      	str	r2, [r1, #8]
}
   b71a8:	bd10      	pop	{r4, pc}

000b71aa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b71aa:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b71ac:	6803      	ldr	r3, [r0, #0]
   b71ae:	4604      	mov	r4, r0
   b71b0:	6818      	ldr	r0, [r3, #0]
   b71b2:	f7fe fae3 	bl	b577c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b71b6:	4620      	mov	r0, r4
   b71b8:	bd10      	pop	{r4, pc}
	...

000b71bc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b71bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b71c0:	b087      	sub	sp, #28
   b71c2:	4680      	mov	r8, r0
   b71c4:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b71c6:	4b1c      	ldr	r3, [pc, #112]	; (b7238 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b71c8:	685b      	ldr	r3, [r3, #4]
   b71ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b71ce:	4689      	mov	r9, r1
   b71d0:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b71d2:	b96b      	cbnz	r3, b71f0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b71d4:	f7ff fed0 	bl	b6f78 <_ZN5spark10LogManager8instanceEv>
   b71d8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b71da:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b71de:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b71e0:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b71e2:	f7ff fd79 	bl	b6cd8 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b71e6:	7b23      	ldrb	r3, [r4, #12]
   b71e8:	b12b      	cbz	r3, b71f6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b71ea:	a805      	add	r0, sp, #20
   b71ec:	f7ff ffdd 	bl	b71aa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b71f0:	b007      	add	sp, #28
   b71f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b71f6:	2301      	movs	r3, #1
   b71f8:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b71fa:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b71fe:	fa5f f989 	uxtb.w	r9, r9
   b7202:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b7206:	45aa      	cmp	sl, r5
   b7208:	d012      	beq.n	b7230 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b720a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b720e:	4631      	mov	r1, r6
   b7210:	1d38      	adds	r0, r7, #4
   b7212:	f7ff fe05 	bl	b6e20 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b7216:	4581      	cmp	r9, r0
   b7218:	d3f5      	bcc.n	b7206 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b721a:	683b      	ldr	r3, [r7, #0]
   b721c:	9a03      	ldr	r2, [sp, #12]
   b721e:	9200      	str	r2, [sp, #0]
   b7220:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b7224:	464a      	mov	r2, r9
   b7226:	4633      	mov	r3, r6
   b7228:	4641      	mov	r1, r8
   b722a:	4638      	mov	r0, r7
   b722c:	47d8      	blx	fp
   b722e:	e7ea      	b.n	b7206 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b7230:	2300      	movs	r3, #0
   b7232:	7323      	strb	r3, [r4, #12]
   b7234:	e7d9      	b.n	b71ea <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b7236:	bf00      	nop
   b7238:	e000ed00 	.word	0xe000ed00

000b723c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b723c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7240:	469b      	mov	fp, r3
   b7242:	4b1a      	ldr	r3, [pc, #104]	; (b72ac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b7244:	685b      	ldr	r3, [r3, #4]
   b7246:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b724a:	4680      	mov	r8, r0
   b724c:	4689      	mov	r9, r1
   b724e:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b7250:	b96b      	cbnz	r3, b726e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b7252:	f7ff fe91 	bl	b6f78 <_ZN5spark10LogManager8instanceEv>
   b7256:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b7258:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b725c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b725e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7260:	f7ff fd3a 	bl	b6cd8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b7264:	7b23      	ldrb	r3, [r4, #12]
   b7266:	b12b      	cbz	r3, b7274 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b7268:	a801      	add	r0, sp, #4
   b726a:	f7ff ff9e 	bl	b71aa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b726e:	b003      	add	sp, #12
   b7270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b7274:	2301      	movs	r3, #1
   b7276:	7323      	strb	r3, [r4, #12]
   b7278:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b727c:	b2f6      	uxtb	r6, r6
   b727e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b7282:	4555      	cmp	r5, sl
   b7284:	d00e      	beq.n	b72a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b7286:	f855 7b04 	ldr.w	r7, [r5], #4
   b728a:	4659      	mov	r1, fp
   b728c:	1d38      	adds	r0, r7, #4
   b728e:	f7ff fdc7 	bl	b6e20 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b7292:	4286      	cmp	r6, r0
   b7294:	d3f5      	bcc.n	b7282 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b7296:	683b      	ldr	r3, [r7, #0]
   b7298:	464a      	mov	r2, r9
   b729a:	68db      	ldr	r3, [r3, #12]
   b729c:	4641      	mov	r1, r8
   b729e:	4638      	mov	r0, r7
   b72a0:	4798      	blx	r3
   b72a2:	e7ee      	b.n	b7282 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b72a4:	2300      	movs	r3, #0
   b72a6:	7323      	strb	r3, [r4, #12]
   b72a8:	e7de      	b.n	b7268 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b72aa:	bf00      	nop
   b72ac:	e000ed00 	.word	0xe000ed00

000b72b0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b72b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b72b4:	4b16      	ldr	r3, [pc, #88]	; (b7310 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b72b6:	685b      	ldr	r3, [r3, #4]
   b72b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b72bc:	4605      	mov	r5, r0
   b72be:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b72c0:	bb1b      	cbnz	r3, b730a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b72c2:	f7ff fe59 	bl	b6f78 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b72c6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b72ca:	4604      	mov	r4, r0
   b72cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b72ce:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b72d0:	f7ff fd02 	bl	b6cd8 <_ZN14RecursiveMutex4lockEv.isra.0>
   b72d4:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b72d8:	2446      	movs	r4, #70	; 0x46
   b72da:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b72de:	45b0      	cmp	r8, r6
   b72e0:	d109      	bne.n	b72f6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b72e2:	a801      	add	r0, sp, #4
   b72e4:	f7ff ff61 	bl	b71aa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b72e8:	42a5      	cmp	r5, r4
   b72ea:	bfb4      	ite	lt
   b72ec:	2000      	movlt	r0, #0
   b72ee:	2001      	movge	r0, #1
}
   b72f0:	b002      	add	sp, #8
   b72f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b72f6:	f856 0b04 	ldr.w	r0, [r6], #4
   b72fa:	4639      	mov	r1, r7
   b72fc:	3004      	adds	r0, #4
   b72fe:	f7ff fd8f 	bl	b6e20 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b7302:	4284      	cmp	r4, r0
   b7304:	bfa8      	it	ge
   b7306:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b7308:	e7e9      	b.n	b72de <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b730a:	2000      	movs	r0, #0
   b730c:	e7f0      	b.n	b72f0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b730e:	bf00      	nop
   b7310:	e000ed00 	.word	0xe000ed00

000b7314 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7316:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b731a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b731c:	4604      	mov	r4, r0
   b731e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7320:	db0d      	blt.n	b733e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b7322:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b7324:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7326:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7328:	dd04      	ble.n	b7334 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b732a:	00b9      	lsls	r1, r7, #2
   b732c:	f7fe fc8c 	bl	b5c48 <realloc>
            if (!d) {
   b7330:	b918      	cbnz	r0, b733a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b7332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b7334:	f7fe fc80 	bl	b5c38 <free>
        T* d = nullptr;
   b7338:	2000      	movs	r0, #0
        data_ = d;
   b733a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b733c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b733e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7340:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7342:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b7346:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7348:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b734c:	1d08      	adds	r0, r1, #4
   b734e:	f001 fb2d 	bl	b89ac <memmove>
    new(p) T(std::move(value));
   b7352:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b7356:	6863      	ldr	r3, [r4, #4]
   b7358:	3301      	adds	r3, #1
   b735a:	6063      	str	r3, [r4, #4]
    return true;
   b735c:	2001      	movs	r0, #1
   b735e:	e7e8      	b.n	b7332 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b7360 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b7360:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b7362:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b7366:	4604      	mov	r4, r0
   b7368:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b736a:	9301      	str	r3, [sp, #4]
   b736c:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b736e:	f7ff fcb3 	bl	b6cd8 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b7372:	e9d4 3200 	ldrd	r3, r2, [r4]
   b7376:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b737a:	4293      	cmp	r3, r2
   b737c:	4619      	mov	r1, r3
   b737e:	d00b      	beq.n	b7398 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b7380:	6809      	ldr	r1, [r1, #0]
   b7382:	42a9      	cmp	r1, r5
   b7384:	f103 0304 	add.w	r3, r3, #4
   b7388:	d1f7      	bne.n	b737a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b738a:	a801      	add	r0, sp, #4
   b738c:	f7ff ff0d 	bl	b71aa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b7390:	2500      	movs	r5, #0
}
   b7392:	4628      	mov	r0, r5
   b7394:	b003      	add	sp, #12
   b7396:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b7398:	4629      	mov	r1, r5
   b739a:	4620      	mov	r0, r4
   b739c:	f7ff ffba 	bl	b7314 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b73a0:	4605      	mov	r5, r0
   b73a2:	2800      	cmp	r0, #0
   b73a4:	d0f1      	beq.n	b738a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b73a6:	6863      	ldr	r3, [r4, #4]
   b73a8:	2b01      	cmp	r3, #1
   b73aa:	d101      	bne.n	b73b0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b73ac:	f7ff fe00 	bl	b6fb0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b73b0:	a801      	add	r0, sp, #4
   b73b2:	f7ff fefa 	bl	b71aa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b73b6:	e7ec      	b.n	b7392 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b73b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b73b8:	b570      	push	{r4, r5, r6, lr}
   b73ba:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b73bc:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b73c0:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b73c2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b73c6:	4282      	cmp	r2, r0
   b73c8:	d00f      	beq.n	b73ea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b73ca:	4601      	mov	r1, r0
            if (*p == value) {
   b73cc:	681d      	ldr	r5, [r3, #0]
   b73ce:	f851 6b04 	ldr.w	r6, [r1], #4
   b73d2:	42ae      	cmp	r6, r5
   b73d4:	d107      	bne.n	b73e6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b73d6:	1a52      	subs	r2, r2, r1
   b73d8:	f001 fae8 	bl	b89ac <memmove>
    --size_;
   b73dc:	6863      	ldr	r3, [r4, #4]
   b73de:	3b01      	subs	r3, #1
   b73e0:	6063      	str	r3, [r4, #4]
    return true;
   b73e2:	2001      	movs	r0, #1
}
   b73e4:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b73e6:	4608      	mov	r0, r1
   b73e8:	e7ed      	b.n	b73c6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b73ea:	2000      	movs	r0, #0
   b73ec:	e7fa      	b.n	b73e4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b73ee <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b73ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b73f0:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b73f4:	4604      	mov	r4, r0
   b73f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b73f8:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b73fa:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b73fc:	f7ff fc6c 	bl	b6cd8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b7400:	a901      	add	r1, sp, #4
   b7402:	4620      	mov	r0, r4
   b7404:	f7ff ffd8 	bl	b73b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b7408:	b118      	cbz	r0, b7412 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b740a:	6863      	ldr	r3, [r4, #4]
   b740c:	b90b      	cbnz	r3, b7412 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b740e:	f7ff fddb 	bl	b6fc8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7412:	a803      	add	r0, sp, #12
   b7414:	f7ff fec9 	bl	b71aa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b7418:	b004      	add	sp, #16
   b741a:	bd10      	pop	{r4, pc}

000b741c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b741c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b741e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b7422:	2318      	movs	r3, #24
   b7424:	4604      	mov	r4, r0
   b7426:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b742a:	42ae      	cmp	r6, r5
   b742c:	d015      	beq.n	b745a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b742e:	f105 0110 	add.w	r1, r5, #16
   b7432:	4620      	mov	r0, r4
   b7434:	f7ff ffc0 	bl	b73b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b7438:	6863      	ldr	r3, [r4, #4]
   b743a:	b90b      	cbnz	r3, b7440 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b743c:	f7ff fdc4 	bl	b6fc8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b7440:	69e0      	ldr	r0, [r4, #28]
   b7442:	6929      	ldr	r1, [r5, #16]
   b7444:	6803      	ldr	r3, [r0, #0]
   b7446:	68db      	ldr	r3, [r3, #12]
   b7448:	4798      	blx	r3
        if (h.stream) {
   b744a:	6969      	ldr	r1, [r5, #20]
   b744c:	b119      	cbz	r1, b7456 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b744e:	6a20      	ldr	r0, [r4, #32]
   b7450:	6803      	ldr	r3, [r0, #0]
   b7452:	68db      	ldr	r3, [r3, #12]
   b7454:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b7456:	3518      	adds	r5, #24
   b7458:	e7e7      	b.n	b742a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b745a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b745e:	2618      	movs	r6, #24
   b7460:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7464:	42ae      	cmp	r6, r5
   b7466:	d004      	beq.n	b7472 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b7468:	4628      	mov	r0, r5
   b746a:	f000 fe05 	bl	b8078 <_ZN6StringD1Ev>
   b746e:	3518      	adds	r5, #24
   b7470:	e7f8      	b.n	b7464 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b7472:	2300      	movs	r3, #0
   b7474:	6163      	str	r3, [r4, #20]
}
   b7476:	bd70      	pop	{r4, r5, r6, pc}

000b7478 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b7478:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b747a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b747c:	f7ff fda4 	bl	b6fc8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7480:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b7484:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7486:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7488:	f7ff fc26 	bl	b6cd8 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b748c:	4620      	mov	r0, r4
   b748e:	f7ff ffc5 	bl	b741c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b7492:	a801      	add	r0, sp, #4
   b7494:	f7ff fe89 	bl	b71aa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b7498:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b749a:	b108      	cbz	r0, b74a0 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b749c:	f7fe f95e 	bl	b575c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b74a0:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b74a4:	2618      	movs	r6, #24
   b74a6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b74aa:	42ae      	cmp	r6, r5
   b74ac:	d004      	beq.n	b74b8 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b74ae:	4628      	mov	r0, r5
   b74b0:	f000 fde2 	bl	b8078 <_ZN6StringD1Ev>
   b74b4:	3518      	adds	r5, #24
   b74b6:	e7f8      	b.n	b74aa <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b74b8:	6920      	ldr	r0, [r4, #16]
   b74ba:	f7fe fbbd 	bl	b5c38 <free>
   b74be:	6820      	ldr	r0, [r4, #0]
   b74c0:	f7fe fbba 	bl	b5c38 <free>
}
   b74c4:	4620      	mov	r0, r4
   b74c6:	b002      	add	sp, #8
   b74c8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b74cc <__tcf_2>:
    static LogManager mgr;
   b74cc:	4801      	ldr	r0, [pc, #4]	; (b74d4 <__tcf_2+0x8>)
   b74ce:	f7ff bfd3 	b.w	b7478 <_ZN5spark10LogManagerD1Ev>
   b74d2:	bf00      	nop
   b74d4:	2003e690 	.word	0x2003e690

000b74d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b74d8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b74da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b74dc:	4604      	mov	r4, r0
   b74de:	460d      	mov	r5, r1
   b74e0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b74e2:	d915      	bls.n	b7510 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b74e4:	4290      	cmp	r0, r2
   b74e6:	d214      	bcs.n	b7512 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b74e8:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b74ec:	1a75      	subs	r5, r6, r1
   b74ee:	f1a1 0714 	sub.w	r7, r1, #20
   b74f2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b74f4:	42b7      	cmp	r7, r6
   b74f6:	d01a      	beq.n	b752e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b74f8:	b11c      	cbz	r4, b7502 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b74fa:	4631      	mov	r1, r6
   b74fc:	4620      	mov	r0, r4
   b74fe:	f7ff fc3f 	bl	b6d80 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b7502:	f106 0008 	add.w	r0, r6, #8
   b7506:	f7ff fdf9 	bl	b70fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b750a:	3e14      	subs	r6, #20
   b750c:	3c14      	subs	r4, #20
   b750e:	e7f1      	b.n	b74f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b7510:	d00d      	beq.n	b752e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b7512:	42b5      	cmp	r5, r6
   b7514:	d00b      	beq.n	b752e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b7516:	b11c      	cbz	r4, b7520 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b7518:	4629      	mov	r1, r5
   b751a:	4620      	mov	r0, r4
   b751c:	f7ff fc30 	bl	b6d80 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b7520:	f105 0008 	add.w	r0, r5, #8
   b7524:	f7ff fdea 	bl	b70fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b7528:	3514      	adds	r5, #20
   b752a:	3414      	adds	r4, #20
   b752c:	e7f1      	b.n	b7512 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b752e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7530 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b7530:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7534:	4604      	mov	r4, r0
   b7536:	460d      	mov	r5, r1
   b7538:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b753a:	d914      	bls.n	b7566 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b753c:	4290      	cmp	r0, r2
   b753e:	d213      	bcs.n	b7568 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b7540:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b7544:	1a75      	subs	r5, r6, r1
   b7546:	f1a1 0710 	sub.w	r7, r1, #16
   b754a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b754c:	42b7      	cmp	r7, r6
   b754e:	d018      	beq.n	b7582 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b7550:	b11c      	cbz	r4, b755a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b7552:	4631      	mov	r1, r6
   b7554:	4620      	mov	r0, r4
   b7556:	f000 fe0b 	bl	b8170 <_ZN6StringC1EOS_>
                end->~T();
   b755a:	4630      	mov	r0, r6
   b755c:	f000 fd8c 	bl	b8078 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b7560:	3e10      	subs	r6, #16
   b7562:	3c10      	subs	r4, #16
   b7564:	e7f2      	b.n	b754c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b7566:	d00c      	beq.n	b7582 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b7568:	42b5      	cmp	r5, r6
   b756a:	d00a      	beq.n	b7582 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b756c:	b11c      	cbz	r4, b7576 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b756e:	4629      	mov	r1, r5
   b7570:	4620      	mov	r0, r4
   b7572:	f000 fdfd 	bl	b8170 <_ZN6StringC1EOS_>
                p->~T();
   b7576:	4628      	mov	r0, r5
   b7578:	f000 fd7e 	bl	b8078 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b757c:	3510      	adds	r5, #16
   b757e:	3410      	adds	r4, #16
   b7580:	e7f2      	b.n	b7568 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b7582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7584 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b7584:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7586:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7588:	4605      	mov	r5, r0
        if (n > 0) {
   b758a:	dd11      	ble.n	b75b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b758c:	0130      	lsls	r0, r6, #4
   b758e:	f7fe fb4b 	bl	b5c28 <malloc>
            if (!d) {
   b7592:	4604      	mov	r4, r0
   b7594:	b158      	cbz	r0, b75ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7596:	e9d5 1200 	ldrd	r1, r2, [r5]
   b759a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b759e:	f7ff ffc7 	bl	b7530 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b75a2:	6828      	ldr	r0, [r5, #0]
   b75a4:	f7fe fb48 	bl	b5c38 <free>
        data_ = d;
   b75a8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b75aa:	60ae      	str	r6, [r5, #8]
        return true;
   b75ac:	2001      	movs	r0, #1
    }
   b75ae:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b75b0:	2400      	movs	r4, #0
   b75b2:	e7f6      	b.n	b75a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b75b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b75b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b75b8:	4690      	mov	r8, r2
   b75ba:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b75bc:	2300      	movs	r3, #0
   b75be:	9103      	str	r1, [sp, #12]
    return size_;
   b75c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b75c4:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b75c6:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b75c8:	4299      	cmp	r1, r3
        capacity_(0) {
   b75ca:	e9c0 3300 	strd	r3, r3, [r0]
   b75ce:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b75d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b75d6:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b75da:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b75dc:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b75de:	dc23      	bgt.n	b7628 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b75e0:	e9d8 5700 	ldrd	r5, r7, [r8]
   b75e4:	2314      	movs	r3, #20
   b75e6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b75ea:	42af      	cmp	r7, r5
   b75ec:	d03b      	beq.n	b7666 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b75ee:	4629      	mov	r1, r5
   b75f0:	a80b      	add	r0, sp, #44	; 0x2c
   b75f2:	f000 fdbd 	bl	b8170 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b75f6:	a90b      	add	r1, sp, #44	; 0x2c
   b75f8:	a80f      	add	r0, sp, #60	; 0x3c
   b75fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b75fc:	f000 fdb8 	bl	b8170 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7600:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b7604:	4299      	cmp	r1, r3
   b7606:	da1b      	bge.n	b7640 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b7608:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b760a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b760c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b7610:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b7614:	4631      	mov	r1, r6
   b7616:	f106 0010 	add.w	r0, r6, #16
   b761a:	f7ff ff89 	bl	b7530 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b761e:	b9ee      	cbnz	r6, b765c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b7620:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7622:	3301      	adds	r3, #1
   b7624:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b7626:	e011      	b.n	b764c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b7628:	a808      	add	r0, sp, #32
   b762a:	f7ff ffab 	bl	b7584 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b762e:	2800      	cmp	r0, #0
   b7630:	d1d6      	bne.n	b75e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b7632:	a808      	add	r0, sp, #32
   b7634:	f7fe fb74 	bl	b5d20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b7638:	4620      	mov	r0, r4
   b763a:	b015      	add	sp, #84	; 0x54
   b763c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7640:	3101      	adds	r1, #1
   b7642:	a808      	add	r0, sp, #32
   b7644:	f7ff ff9e 	bl	b7584 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b7648:	2800      	cmp	r0, #0
   b764a:	d1dd      	bne.n	b7608 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b764c:	a80f      	add	r0, sp, #60	; 0x3c
   b764e:	f000 fd13 	bl	b8078 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b7652:	a80b      	add	r0, sp, #44	; 0x2c
   b7654:	f000 fd10 	bl	b8078 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b7658:	3514      	adds	r5, #20
   b765a:	e7c6      	b.n	b75ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b765c:	a90f      	add	r1, sp, #60	; 0x3c
   b765e:	4630      	mov	r0, r6
   b7660:	f000 fd86 	bl	b8170 <_ZN6StringC1EOS_>
   b7664:	e7dc      	b.n	b7620 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b7666:	2600      	movs	r6, #0
   b7668:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b766c:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b766e:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b7672:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b7676:	429e      	cmp	r6, r3
   b7678:	da7c      	bge.n	b7774 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b767a:	0133      	lsls	r3, r6, #4
   b767c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b767e:	9306      	str	r3, [sp, #24]
        if (!category) {
   b7680:	b90b      	cbnz	r3, b7686 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b7682:	3601      	adds	r6, #1
   b7684:	e7f5      	b.n	b7672 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b7686:	2300      	movs	r3, #0
   b7688:	9307      	str	r3, [sp, #28]
   b768a:	fb09 f306 	mul.w	r3, r9, r6
   b768e:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b7690:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b7692:	a907      	add	r1, sp, #28
   b7694:	a806      	add	r0, sp, #24
   b7696:	f7ff faf8 	bl	b6c8a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b769a:	4682      	mov	sl, r0
   b769c:	2800      	cmp	r0, #0
   b769e:	d0f0      	beq.n	b7682 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b76a0:	f04f 0300 	mov.w	r3, #0
   b76a4:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b76a8:	4601      	mov	r1, r0
   b76aa:	9a07      	ldr	r2, [sp, #28]
   b76ac:	f10d 0317 	add.w	r3, sp, #23
   b76b0:	4628      	mov	r0, r5
   b76b2:	f7ff fb79 	bl	b6da8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b76b6:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b76ba:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b76bc:	2f00      	cmp	r7, #0
   b76be:	d14a      	bne.n	b7756 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b76c0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b76c4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b76c8:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b76cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b76d0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b76d4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b76d8:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b76da:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b76de:	4293      	cmp	r3, r2
   b76e0:	db17      	blt.n	b7712 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b76e2:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b76e6:	f1ba 0f00 	cmp.w	sl, #0
   b76ea:	dd30      	ble.n	b774e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b76ec:	fb09 f00a 	mul.w	r0, r9, sl
   b76f0:	f7fe fa9a 	bl	b5c28 <malloc>
            if (!d) {
   b76f4:	4683      	mov	fp, r0
   b76f6:	b360      	cbz	r0, b7752 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b76f8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b76fc:	fb09 1202 	mla	r2, r9, r2, r1
   b7700:	f7ff feea 	bl	b74d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b7704:	6828      	ldr	r0, [r5, #0]
   b7706:	f7fe fa97 	bl	b5c38 <free>
        data_ = d;
   b770a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b770e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b7712:	682b      	ldr	r3, [r5, #0]
   b7714:	9a01      	ldr	r2, [sp, #4]
   b7716:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b771a:	686a      	ldr	r2, [r5, #4]
   b771c:	4651      	mov	r1, sl
   b771e:	fb09 3202 	mla	r2, r9, r2, r3
   b7722:	f10a 0014 	add.w	r0, sl, #20
   b7726:	f7ff fed7 	bl	b74d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b772a:	f1ba 0f00 	cmp.w	sl, #0
   b772e:	d003      	beq.n	b7738 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b7730:	a90f      	add	r1, sp, #60	; 0x3c
   b7732:	4650      	mov	r0, sl
   b7734:	f7ff fb24 	bl	b6d80 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b7738:	686b      	ldr	r3, [r5, #4]
   b773a:	3301      	adds	r3, #1
   b773c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b773e:	a811      	add	r0, sp, #68	; 0x44
   b7740:	f7ff fcdc 	bl	b70fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7744:	b13f      	cbz	r7, b7756 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b7746:	a80b      	add	r0, sp, #44	; 0x2c
   b7748:	f7ff fcd8 	bl	b70fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b774c:	e771      	b.n	b7632 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b774e:	46bb      	mov	fp, r7
   b7750:	e7d8      	b.n	b7704 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7752:	2701      	movs	r7, #1
   b7754:	e7f3      	b.n	b773e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b7756:	9b01      	ldr	r3, [sp, #4]
   b7758:	682d      	ldr	r5, [r5, #0]
   b775a:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b775e:	9b06      	ldr	r3, [sp, #24]
   b7760:	781b      	ldrb	r3, [r3, #0]
   b7762:	b92b      	cbnz	r3, b7770 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b7764:	f8d8 3000 	ldr.w	r3, [r8]
   b7768:	9a02      	ldr	r2, [sp, #8]
   b776a:	4413      	add	r3, r2
   b776c:	7c1b      	ldrb	r3, [r3, #16]
   b776e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b7770:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b7772:	e78e      	b.n	b7692 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7774:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b7776:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7778:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b777a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b777c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b777e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b7780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b7782:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7784:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7786:	60a2      	str	r2, [r4, #8]
   b7788:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b778a:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b778c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b778e:	60e2      	str	r2, [r4, #12]
   b7790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b7792:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7794:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7796:	6122      	str	r2, [r4, #16]
   b7798:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b779a:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b779c:	9b03      	ldr	r3, [sp, #12]
   b779e:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b77a0:	6162      	str	r2, [r4, #20]
   b77a2:	7623      	strb	r3, [r4, #24]
   b77a4:	e7cf      	b.n	b7746 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b77a8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b77a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b77aa:	4604      	mov	r4, r0
   b77ac:	b087      	sub	sp, #28
   b77ae:	460d      	mov	r5, r1
        filter_(level, filters) {
   b77b0:	4626      	mov	r6, r4
        stream_(&stream) {
   b77b2:	4619      	mov	r1, r3
   b77b4:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b77b6:	4617      	mov	r7, r2
        stream_(&stream) {
   b77b8:	f7fd fefa 	bl	b55b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b77bc:	4b0b      	ldr	r3, [pc, #44]	; (b77ec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b77be:	f846 3b04 	str.w	r3, [r6], #4
   b77c2:	4669      	mov	r1, sp
   b77c4:	a803      	add	r0, sp, #12
   b77c6:	f7fd fef3 	bl	b55b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b77ca:	aa03      	add	r2, sp, #12
   b77cc:	4639      	mov	r1, r7
   b77ce:	4630      	mov	r0, r6
   b77d0:	f7ff fef0 	bl	b75b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b77d4:	a803      	add	r0, sp, #12
   b77d6:	f7fd fc25 	bl	b5024 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b77da:	4668      	mov	r0, sp
   b77dc:	f7fd fc22 	bl	b5024 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b77e0:	4b03      	ldr	r3, [pc, #12]	; (b77f0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b77e2:	6023      	str	r3, [r4, #0]
}
   b77e4:	4620      	mov	r0, r4
        stream_(&stream) {
   b77e6:	6225      	str	r5, [r4, #32]
}
   b77e8:	b007      	add	sp, #28
   b77ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b77ec:	000b8e7c 	.word	0x000b8e7c
   b77f0:	000b904c 	.word	0x000b904c

000b77f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b77f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b77f6:	460f      	mov	r7, r1
   b77f8:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b77fa:	491d      	ldr	r1, [pc, #116]	; (b7870 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b77fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b77fe:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b7800:	4616      	mov	r6, r2
   b7802:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b7804:	f7fd fa5e 	bl	b4cc4 <strcmp>
   b7808:	b9c0      	cbnz	r0, b783c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b780a:	b1a4      	cbz	r4, b7836 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b780c:	4629      	mov	r1, r5
   b780e:	a801      	add	r0, sp, #4
   b7810:	f7ff fcbc 	bl	b718c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b7814:	4917      	ldr	r1, [pc, #92]	; (b7874 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b7816:	2024      	movs	r0, #36	; 0x24
   b7818:	f001 f8a4 	bl	b8964 <_ZnwjRKSt9nothrow_t>
   b781c:	4605      	mov	r5, r0
   b781e:	b130      	cbz	r0, b782e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b7820:	ab01      	add	r3, sp, #4
   b7822:	4632      	mov	r2, r6
   b7824:	4621      	mov	r1, r4
   b7826:	f7ff ffbf 	bl	b77a8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b782a:	4b13      	ldr	r3, [pc, #76]	; (b7878 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b782c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b782e:	a801      	add	r0, sp, #4
   b7830:	f7fd fbf8 	bl	b5024 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b7834:	462c      	mov	r4, r5
}
   b7836:	4620      	mov	r0, r4
   b7838:	b005      	add	sp, #20
   b783a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b783c:	490f      	ldr	r1, [pc, #60]	; (b787c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b783e:	4638      	mov	r0, r7
   b7840:	f7fd fa40 	bl	b4cc4 <strcmp>
   b7844:	b990      	cbnz	r0, b786c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b7846:	2c00      	cmp	r4, #0
   b7848:	d0f5      	beq.n	b7836 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b784a:	4629      	mov	r1, r5
   b784c:	a801      	add	r0, sp, #4
   b784e:	f7ff fc9d 	bl	b718c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b7852:	4908      	ldr	r1, [pc, #32]	; (b7874 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b7854:	2024      	movs	r0, #36	; 0x24
   b7856:	f001 f885 	bl	b8964 <_ZnwjRKSt9nothrow_t>
   b785a:	4605      	mov	r5, r0
   b785c:	2800      	cmp	r0, #0
   b785e:	d0e6      	beq.n	b782e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b7860:	ab01      	add	r3, sp, #4
   b7862:	4632      	mov	r2, r6
   b7864:	4621      	mov	r1, r4
   b7866:	f7ff ff9f 	bl	b77a8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b786a:	e7e0      	b.n	b782e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b786c:	2400      	movs	r4, #0
   b786e:	e7e2      	b.n	b7836 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b7870:	000b8fcd 	.word	0x000b8fcd
   b7874:	000b9180 	.word	0x000b9180
   b7878:	000b9064 	.word	0x000b9064
   b787c:	000b8fd1 	.word	0x000b8fd1

000b7880 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b7880:	4b01      	ldr	r3, [pc, #4]	; (b7888 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7882:	4a02      	ldr	r2, [pc, #8]	; (b788c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7884:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7886:	4770      	bx	lr
   b7888:	2003e68c 	.word	0x2003e68c
   b788c:	000b8fe2 	.word	0x000b8fe2

000b7890 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b7890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7894:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b7896:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b789a:	4604      	mov	r4, r0
   b789c:	460e      	mov	r6, r1
   b789e:	4617      	mov	r7, r2
   b78a0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b78a2:	f000 fe2b 	bl	b84fc <_Z16_fetch_usbserialv>
   b78a6:	4581      	cmp	r9, r0
   b78a8:	d04c      	beq.n	b7944 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b78aa:	792b      	ldrb	r3, [r5, #4]
   b78ac:	0719      	lsls	r1, r3, #28
   b78ae:	d504      	bpl.n	b78ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b78b0:	696a      	ldr	r2, [r5, #20]
   b78b2:	4954      	ldr	r1, [pc, #336]	; (b7a04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b78b4:	4620      	mov	r0, r4
   b78b6:	f7ff fadc 	bl	b6e72 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b78ba:	f1b8 0f00 	cmp.w	r8, #0
   b78be:	d00d      	beq.n	b78dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b78c0:	215b      	movs	r1, #91	; 0x5b
   b78c2:	4620      	mov	r0, r4
   b78c4:	f7ff fa50 	bl	b6d68 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b78c8:	4641      	mov	r1, r8
   b78ca:	4620      	mov	r0, r4
   b78cc:	f7ff fa3d 	bl	b6d4a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b78d0:	6823      	ldr	r3, [r4, #0]
   b78d2:	494d      	ldr	r1, [pc, #308]	; (b7a08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b78d4:	68db      	ldr	r3, [r3, #12]
   b78d6:	2202      	movs	r2, #2
   b78d8:	4620      	mov	r0, r4
   b78da:	4798      	blx	r3
    if (attr.has_file) {
   b78dc:	792b      	ldrb	r3, [r5, #4]
   b78de:	07da      	lsls	r2, r3, #31
   b78e0:	d523      	bpl.n	b792a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b78e2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b78e6:	212f      	movs	r1, #47	; 0x2f
   b78e8:	4640      	mov	r0, r8
   b78ea:	f001 f900 	bl	b8aee <strrchr>
    if (s1) {
   b78ee:	b108      	cbz	r0, b78f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b78f0:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b78f4:	4641      	mov	r1, r8
   b78f6:	4620      	mov	r0, r4
   b78f8:	f7ff fa27 	bl	b6d4a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b78fc:	792b      	ldrb	r3, [r5, #4]
   b78fe:	079b      	lsls	r3, r3, #30
   b7900:	d508      	bpl.n	b7914 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b7902:	213a      	movs	r1, #58	; 0x3a
   b7904:	4620      	mov	r0, r4
   b7906:	f7ff fa2f 	bl	b6d68 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b790a:	68ea      	ldr	r2, [r5, #12]
   b790c:	493f      	ldr	r1, [pc, #252]	; (b7a0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b790e:	4620      	mov	r0, r4
   b7910:	f7ff faaf 	bl	b6e72 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b7914:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b7916:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b7918:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b791c:	68db      	ldr	r3, [r3, #12]
   b791e:	bf14      	ite	ne
   b7920:	493b      	ldrne	r1, [pc, #236]	; (b7a10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b7922:	493c      	ldreq	r1, [pc, #240]	; (b7a14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b7924:	2202      	movs	r2, #2
            write(": ", 2);
   b7926:	4620      	mov	r0, r4
   b7928:	4798      	blx	r3
    if (attr.has_function) {
   b792a:	792b      	ldrb	r3, [r5, #4]
   b792c:	0758      	lsls	r0, r3, #29
   b792e:	d51d      	bpl.n	b796c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b7930:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b7932:	460b      	mov	r3, r1
   b7934:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b7936:	f813 0b01 	ldrb.w	r0, [r3], #1
   b793a:	b160      	cbz	r0, b7956 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b793c:	2820      	cmp	r0, #32
   b793e:	d108      	bne.n	b7952 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b7940:	4619      	mov	r1, r3
   b7942:	e7f7      	b.n	b7934 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b7944:	4834      	ldr	r0, [pc, #208]	; (b7a18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b7946:	f000 f982 	bl	b7c4e <_ZN5spark12NetworkClass9listeningEv>
   b794a:	2800      	cmp	r0, #0
   b794c:	d0ad      	beq.n	b78aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b794e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b7952:	2828      	cmp	r0, #40	; 0x28
   b7954:	d1ee      	bne.n	b7934 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b7956:	6823      	ldr	r3, [r4, #0]
   b7958:	1a52      	subs	r2, r2, r1
   b795a:	68db      	ldr	r3, [r3, #12]
   b795c:	4620      	mov	r0, r4
   b795e:	4798      	blx	r3
        write("(): ", 4);
   b7960:	6823      	ldr	r3, [r4, #0]
   b7962:	492e      	ldr	r1, [pc, #184]	; (b7a1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b7964:	68db      	ldr	r3, [r3, #12]
   b7966:	2204      	movs	r2, #4
   b7968:	4620      	mov	r0, r4
   b796a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b796c:	2100      	movs	r1, #0
   b796e:	4638      	mov	r0, r7
   b7970:	f7fe f864 	bl	b5a3c <log_level_name>
   b7974:	4601      	mov	r1, r0
    write(s);
   b7976:	4620      	mov	r0, r4
   b7978:	f7ff f9e7 	bl	b6d4a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b797c:	6823      	ldr	r3, [r4, #0]
   b797e:	4925      	ldr	r1, [pc, #148]	; (b7a14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b7980:	68db      	ldr	r3, [r3, #12]
   b7982:	2202      	movs	r2, #2
   b7984:	4620      	mov	r0, r4
   b7986:	4798      	blx	r3
    if (msg) {
   b7988:	b11e      	cbz	r6, b7992 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b798a:	4631      	mov	r1, r6
   b798c:	4620      	mov	r0, r4
   b798e:	f7ff f9dc 	bl	b6d4a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b7992:	792b      	ldrb	r3, [r5, #4]
   b7994:	f013 0f30 	tst.w	r3, #48	; 0x30
   b7998:	d02c      	beq.n	b79f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b799a:	6823      	ldr	r3, [r4, #0]
   b799c:	4920      	ldr	r1, [pc, #128]	; (b7a20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b799e:	68db      	ldr	r3, [r3, #12]
   b79a0:	2202      	movs	r2, #2
   b79a2:	4620      	mov	r0, r4
   b79a4:	4798      	blx	r3
        if (attr.has_code) {
   b79a6:	792b      	ldrb	r3, [r5, #4]
   b79a8:	06d9      	lsls	r1, r3, #27
   b79aa:	d50a      	bpl.n	b79c2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b79ac:	6823      	ldr	r3, [r4, #0]
   b79ae:	491d      	ldr	r1, [pc, #116]	; (b7a24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b79b0:	68db      	ldr	r3, [r3, #12]
   b79b2:	2207      	movs	r2, #7
   b79b4:	4620      	mov	r0, r4
   b79b6:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b79b8:	69aa      	ldr	r2, [r5, #24]
   b79ba:	491b      	ldr	r1, [pc, #108]	; (b7a28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b79bc:	4620      	mov	r0, r4
   b79be:	f7ff fa58 	bl	b6e72 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b79c2:	792b      	ldrb	r3, [r5, #4]
   b79c4:	069a      	lsls	r2, r3, #26
   b79c6:	d511      	bpl.n	b79ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b79c8:	06db      	lsls	r3, r3, #27
   b79ca:	d505      	bpl.n	b79d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b79cc:	6823      	ldr	r3, [r4, #0]
   b79ce:	4910      	ldr	r1, [pc, #64]	; (b7a10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b79d0:	68db      	ldr	r3, [r3, #12]
   b79d2:	2202      	movs	r2, #2
   b79d4:	4620      	mov	r0, r4
   b79d6:	4798      	blx	r3
            write("details = ", 10);
   b79d8:	6823      	ldr	r3, [r4, #0]
   b79da:	4914      	ldr	r1, [pc, #80]	; (b7a2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b79dc:	68db      	ldr	r3, [r3, #12]
   b79de:	4620      	mov	r0, r4
   b79e0:	220a      	movs	r2, #10
   b79e2:	4798      	blx	r3
            write(attr.details);
   b79e4:	69e9      	ldr	r1, [r5, #28]
   b79e6:	4620      	mov	r0, r4
   b79e8:	f7ff f9af 	bl	b6d4a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b79ec:	215d      	movs	r1, #93	; 0x5d
   b79ee:	4620      	mov	r0, r4
   b79f0:	f7ff f9ba 	bl	b6d68 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b79f4:	6823      	ldr	r3, [r4, #0]
   b79f6:	490e      	ldr	r1, [pc, #56]	; (b7a30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b79f8:	68db      	ldr	r3, [r3, #12]
   b79fa:	4620      	mov	r0, r4
   b79fc:	2202      	movs	r2, #2
}
   b79fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b7a02:	4718      	bx	r3
   b7a04:	000b8fe6 	.word	0x000b8fe6
   b7a08:	000b8fed 	.word	0x000b8fed
   b7a0c:	000b8dd5 	.word	0x000b8dd5
   b7a10:	000b8ff0 	.word	0x000b8ff0
   b7a14:	000b8ff5 	.word	0x000b8ff5
   b7a18:	2003e6b8 	.word	0x2003e6b8
   b7a1c:	000b8ff3 	.word	0x000b8ff3
   b7a20:	000b8ff8 	.word	0x000b8ff8
   b7a24:	000b8ffb 	.word	0x000b8ffb
   b7a28:	000b9003 	.word	0x000b9003
   b7a2c:	000b9006 	.word	0x000b9006
   b7a30:	000b9011 	.word	0x000b9011

000b7a34 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b7a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a38:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b7a3a:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b7a3c:	460d      	mov	r5, r1
   b7a3e:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b7a40:	f000 fd5c 	bl	b84fc <_Z16_fetch_usbserialv>
   b7a44:	4287      	cmp	r7, r0
   b7a46:	d007      	beq.n	b7a58 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b7a48:	6a20      	ldr	r0, [r4, #32]
   b7a4a:	6803      	ldr	r3, [r0, #0]
   b7a4c:	4632      	mov	r2, r6
   b7a4e:	4629      	mov	r1, r5
   b7a50:	68db      	ldr	r3, [r3, #12]
}
   b7a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b7a56:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b7a58:	4803      	ldr	r0, [pc, #12]	; (b7a68 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b7a5a:	f000 f8f8 	bl	b7c4e <_ZN5spark12NetworkClass9listeningEv>
   b7a5e:	2800      	cmp	r0, #0
   b7a60:	d0f2      	beq.n	b7a48 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b7a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7a66:	bf00      	nop
   b7a68:	2003e6b8 	.word	0x2003e6b8

000b7a6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b7a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7a70:	b085      	sub	sp, #20
    return stream_;
   b7a72:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b7a76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b7a78:	4605      	mov	r5, r0
   b7a7a:	460f      	mov	r7, r1
   b7a7c:	4690      	mov	r8, r2
   b7a7e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b7a80:	f000 fd3c 	bl	b84fc <_Z16_fetch_usbserialv>
   b7a84:	4581      	cmp	r9, r0
   b7a86:	d105      	bne.n	b7a94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b7a88:	4849      	ldr	r0, [pc, #292]	; (b7bb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b7a8a:	f000 f8e0 	bl	b7c4e <_ZN5spark12NetworkClass9listeningEv>
   b7a8e:	2800      	cmp	r0, #0
   b7a90:	f040 808a 	bne.w	b7ba8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b7a94:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b7a96:	4a47      	ldr	r2, [pc, #284]	; (b7bb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b7a98:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b7a9a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b7a9e:	a801      	add	r0, sp, #4
        strm_(stream) {
   b7aa0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b7aa2:	f88d 9008 	strb.w	r9, [sp, #8]
   b7aa6:	f7ff f832 	bl	b6b0e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b7aaa:	4649      	mov	r1, r9
   b7aac:	4640      	mov	r0, r8
   b7aae:	f7fd ffc5 	bl	b5a3c <log_level_name>
    json.name("l", 1).value(s);
   b7ab2:	4941      	ldr	r1, [pc, #260]	; (b7bb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b7ab4:	4680      	mov	r8, r0
   b7ab6:	2201      	movs	r2, #1
   b7ab8:	a801      	add	r0, sp, #4
   b7aba:	f7ff f8b7 	bl	b6c2c <_ZN5spark10JSONWriter4nameEPKcj>
   b7abe:	4641      	mov	r1, r8
   b7ac0:	f7ff f935 	bl	b6d2e <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b7ac4:	b13f      	cbz	r7, b7ad6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b7ac6:	493d      	ldr	r1, [pc, #244]	; (b7bbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b7ac8:	2201      	movs	r2, #1
   b7aca:	a801      	add	r0, sp, #4
   b7acc:	f7ff f8ae 	bl	b6c2c <_ZN5spark10JSONWriter4nameEPKcj>
   b7ad0:	4639      	mov	r1, r7
   b7ad2:	f7ff f92c 	bl	b6d2e <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b7ad6:	b13e      	cbz	r6, b7ae8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b7ad8:	4939      	ldr	r1, [pc, #228]	; (b7bc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b7ada:	2201      	movs	r2, #1
   b7adc:	a801      	add	r0, sp, #4
   b7ade:	f7ff f8a5 	bl	b6c2c <_ZN5spark10JSONWriter4nameEPKcj>
   b7ae2:	4631      	mov	r1, r6
   b7ae4:	f7ff f923 	bl	b6d2e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b7ae8:	7923      	ldrb	r3, [r4, #4]
   b7aea:	07df      	lsls	r7, r3, #31
   b7aec:	d50e      	bpl.n	b7b0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b7aee:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b7af0:	212f      	movs	r1, #47	; 0x2f
   b7af2:	4630      	mov	r0, r6
   b7af4:	f000 fffb 	bl	b8aee <strrchr>
    if (s1) {
   b7af8:	b100      	cbz	r0, b7afc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b7afa:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b7afc:	4931      	ldr	r1, [pc, #196]	; (b7bc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b7afe:	2201      	movs	r2, #1
   b7b00:	a801      	add	r0, sp, #4
   b7b02:	f7ff f893 	bl	b6c2c <_ZN5spark10JSONWriter4nameEPKcj>
   b7b06:	4631      	mov	r1, r6
   b7b08:	f7ff f911 	bl	b6d2e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b7b0c:	7923      	ldrb	r3, [r4, #4]
   b7b0e:	079e      	lsls	r6, r3, #30
   b7b10:	d507      	bpl.n	b7b22 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b7b12:	492d      	ldr	r1, [pc, #180]	; (b7bc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b7b14:	2202      	movs	r2, #2
   b7b16:	a801      	add	r0, sp, #4
   b7b18:	f7ff f888 	bl	b6c2c <_ZN5spark10JSONWriter4nameEPKcj>
   b7b1c:	68e1      	ldr	r1, [r4, #12]
   b7b1e:	f7ff f803 	bl	b6b28 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b7b22:	7923      	ldrb	r3, [r4, #4]
   b7b24:	0758      	lsls	r0, r3, #29
   b7b26:	d514      	bpl.n	b7b52 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b7b28:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b7b2a:	4633      	mov	r3, r6
   b7b2c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b7b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7b32:	b12a      	cbz	r2, b7b40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b7b34:	2a20      	cmp	r2, #32
   b7b36:	d101      	bne.n	b7b3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b7b38:	461e      	mov	r6, r3
   b7b3a:	e7f7      	b.n	b7b2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b7b3c:	2a28      	cmp	r2, #40	; 0x28
   b7b3e:	d1f5      	bne.n	b7b2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b7b40:	4922      	ldr	r1, [pc, #136]	; (b7bcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b7b42:	2202      	movs	r2, #2
   b7b44:	a801      	add	r0, sp, #4
   b7b46:	f7ff f871 	bl	b6c2c <_ZN5spark10JSONWriter4nameEPKcj>
   b7b4a:	1bba      	subs	r2, r7, r6
   b7b4c:	4631      	mov	r1, r6
   b7b4e:	f7ff f87d 	bl	b6c4c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b7b52:	7923      	ldrb	r3, [r4, #4]
   b7b54:	0719      	lsls	r1, r3, #28
   b7b56:	d507      	bpl.n	b7b68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b7b58:	491d      	ldr	r1, [pc, #116]	; (b7bd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b7b5a:	2201      	movs	r2, #1
   b7b5c:	a801      	add	r0, sp, #4
   b7b5e:	f7ff f865 	bl	b6c2c <_ZN5spark10JSONWriter4nameEPKcj>
   b7b62:	6961      	ldr	r1, [r4, #20]
   b7b64:	f7fe fff2 	bl	b6b4c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b7b68:	7923      	ldrb	r3, [r4, #4]
   b7b6a:	06da      	lsls	r2, r3, #27
   b7b6c:	d508      	bpl.n	b7b80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b7b6e:	2204      	movs	r2, #4
   b7b70:	4918      	ldr	r1, [pc, #96]	; (b7bd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b7b72:	eb0d 0002 	add.w	r0, sp, r2
   b7b76:	f7ff f859 	bl	b6c2c <_ZN5spark10JSONWriter4nameEPKcj>
   b7b7a:	69a1      	ldr	r1, [r4, #24]
   b7b7c:	f7fe ffd4 	bl	b6b28 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b7b80:	7923      	ldrb	r3, [r4, #4]
   b7b82:	069b      	lsls	r3, r3, #26
   b7b84:	d507      	bpl.n	b7b96 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b7b86:	4914      	ldr	r1, [pc, #80]	; (b7bd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b7b88:	2206      	movs	r2, #6
   b7b8a:	a801      	add	r0, sp, #4
   b7b8c:	f7ff f84e 	bl	b6c2c <_ZN5spark10JSONWriter4nameEPKcj>
   b7b90:	69e1      	ldr	r1, [r4, #28]
   b7b92:	f7ff f8cc 	bl	b6d2e <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b7b96:	a801      	add	r0, sp, #4
   b7b98:	f7fe ffa3 	bl	b6ae2 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b7b9c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b7b9e:	490f      	ldr	r1, [pc, #60]	; (b7bdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b7ba0:	6803      	ldr	r3, [r0, #0]
   b7ba2:	2202      	movs	r2, #2
   b7ba4:	68db      	ldr	r3, [r3, #12]
   b7ba6:	4798      	blx	r3
}
   b7ba8:	b005      	add	sp, #20
   b7baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7bae:	bf00      	nop
   b7bb0:	2003e6b8 	.word	0x2003e6b8
   b7bb4:	000b9034 	.word	0x000b9034
   b7bb8:	000b8fc3 	.word	0x000b8fc3
   b7bbc:	000b9014 	.word	0x000b9014
   b7bc0:	000b91ef 	.word	0x000b91ef
   b7bc4:	000b8d92 	.word	0x000b8d92
   b7bc8:	000b9016 	.word	0x000b9016
   b7bcc:	000b9019 	.word	0x000b9019
   b7bd0:	000b901c 	.word	0x000b901c
   b7bd4:	000b901e 	.word	0x000b901e
   b7bd8:	000b9023 	.word	0x000b9023
   b7bdc:	000b9011 	.word	0x000b9011

000b7be0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7be0:	2300      	movs	r3, #0
   b7be2:	6840      	ldr	r0, [r0, #4]
   b7be4:	461a      	mov	r2, r3
   b7be6:	f7fd bfbf 	b.w	b5b68 <network_connect>

000b7bea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7bea:	6840      	ldr	r0, [r0, #4]
   b7bec:	2200      	movs	r2, #0
   b7bee:	2102      	movs	r1, #2
   b7bf0:	f7fd bfca 	b.w	b5b88 <network_disconnect>

000b7bf4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7bf4:	2200      	movs	r2, #0
   b7bf6:	6840      	ldr	r0, [r0, #4]
   b7bf8:	4611      	mov	r1, r2
   b7bfa:	f7fd bfbd 	b.w	b5b78 <network_connecting>

000b7bfe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7bfe:	2200      	movs	r2, #0
   b7c00:	6840      	ldr	r0, [r0, #4]
   b7c02:	4611      	mov	r1, r2
   b7c04:	f7fd bfc8 	b.w	b5b98 <network_ready>

000b7c08 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7c08:	2300      	movs	r3, #0
   b7c0a:	6840      	ldr	r0, [r0, #4]
   b7c0c:	461a      	mov	r2, r3
   b7c0e:	4619      	mov	r1, r3
   b7c10:	f7fd bfca 	b.w	b5ba8 <network_on>

000b7c14 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7c14:	2300      	movs	r3, #0
   b7c16:	6840      	ldr	r0, [r0, #4]
   b7c18:	461a      	mov	r2, r3
   b7c1a:	4619      	mov	r1, r3
   b7c1c:	f7fd bfcc 	b.w	b5bb8 <network_off>

000b7c20 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7c20:	6840      	ldr	r0, [r0, #4]
   b7c22:	2100      	movs	r1, #0
   b7c24:	f7fd bff0 	b.w	b5c08 <network_is_on>

000b7c28 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7c28:	6840      	ldr	r0, [r0, #4]
   b7c2a:	2100      	movs	r1, #0
   b7c2c:	f7fd bff4 	b.w	b5c18 <network_is_off>

000b7c30 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7c30:	6840      	ldr	r0, [r0, #4]
   b7c32:	2200      	movs	r2, #0
   b7c34:	f081 0101 	eor.w	r1, r1, #1
   b7c38:	f7fd bfc6 	b.w	b5bc8 <network_listen>

000b7c3c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7c3c:	6840      	ldr	r0, [r0, #4]
   b7c3e:	2200      	movs	r2, #0
   b7c40:	f7fd bfd2 	b.w	b5be8 <network_set_listen_timeout>

000b7c44 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7c44:	2200      	movs	r2, #0
   b7c46:	6840      	ldr	r0, [r0, #4]
   b7c48:	4611      	mov	r1, r2
   b7c4a:	f7fd bfd5 	b.w	b5bf8 <network_get_listen_timeout>

000b7c4e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7c4e:	2200      	movs	r2, #0
   b7c50:	6840      	ldr	r0, [r0, #4]
   b7c52:	4611      	mov	r1, r2
   b7c54:	f7fd bfc0 	b.w	b5bd8 <network_listening>

000b7c58 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7c58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7c5c:	b095      	sub	sp, #84	; 0x54
   b7c5e:	4614      	mov	r4, r2
   b7c60:	460d      	mov	r5, r1
   b7c62:	4607      	mov	r7, r0
    IPAddress addr;
   b7c64:	f7fe fdec 	bl	b6840 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7c68:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7c6a:	221c      	movs	r2, #28
   b7c6c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7c6e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7c70:	f000 feb6 	bl	b89e0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7c74:	2340      	movs	r3, #64	; 0x40
   b7c76:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7c78:	4620      	mov	r0, r4
   b7c7a:	466b      	mov	r3, sp
   b7c7c:	aa0c      	add	r2, sp, #48	; 0x30
   b7c7e:	2100      	movs	r1, #0
   b7c80:	f7fd fe24 	bl	b58cc <netdb_getaddrinfo>
    if (!r) {
   b7c84:	4604      	mov	r4, r0
   b7c86:	2800      	cmp	r0, #0
   b7c88:	d14b      	bne.n	b7d22 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7c8a:	4602      	mov	r2, r0
   b7c8c:	2101      	movs	r1, #1
   b7c8e:	6868      	ldr	r0, [r5, #4]
   b7c90:	f7fd ff82 	bl	b5b98 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7c94:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7c96:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7c98:	4622      	mov	r2, r4
   b7c9a:	6868      	ldr	r0, [r5, #4]
   b7c9c:	f7fd ff7c 	bl	b5b98 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7ca0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7ca2:	4681      	mov	r9, r0
        bool ok = false;
   b7ca4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7ca6:	2e00      	cmp	r6, #0
   b7ca8:	d03b      	beq.n	b7d22 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7caa:	2900      	cmp	r1, #0
   b7cac:	d139      	bne.n	b7d22 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7cae:	6873      	ldr	r3, [r6, #4]
   b7cb0:	2b02      	cmp	r3, #2
   b7cb2:	d003      	beq.n	b7cbc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7cb4:	2b0a      	cmp	r3, #10
   b7cb6:	d011      	beq.n	b7cdc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7cb8:	69f6      	ldr	r6, [r6, #28]
   b7cba:	e7f4      	b.n	b7ca6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7cbc:	f1b8 0f00 	cmp.w	r8, #0
   b7cc0:	d0fa      	beq.n	b7cb8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7cc2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7cc4:	a806      	add	r0, sp, #24
   b7cc6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7cc8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7cca:	f7fe fde7 	bl	b689c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7cd0:	1d3c      	adds	r4, r7, #4
   b7cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7cd4:	682b      	ldr	r3, [r5, #0]
   b7cd6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7cd8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7cda:	e7ed      	b.n	b7cb8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7cdc:	f1b9 0f00 	cmp.w	r9, #0
   b7ce0:	d0ea      	beq.n	b7cb8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7ce2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7ce4:	2210      	movs	r2, #16
   b7ce6:	a801      	add	r0, sp, #4
   b7ce8:	f000 fe7a 	bl	b89e0 <memset>
                    a.v = 6;
   b7cec:	2306      	movs	r3, #6
   b7cee:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7cf2:	ad01      	add	r5, sp, #4
   b7cf4:	f104 0308 	add.w	r3, r4, #8
   b7cf8:	3418      	adds	r4, #24
   b7cfa:	6818      	ldr	r0, [r3, #0]
   b7cfc:	6859      	ldr	r1, [r3, #4]
   b7cfe:	462a      	mov	r2, r5
   b7d00:	c203      	stmia	r2!, {r0, r1}
   b7d02:	3308      	adds	r3, #8
   b7d04:	42a3      	cmp	r3, r4
   b7d06:	4615      	mov	r5, r2
   b7d08:	d1f7      	bne.n	b7cfa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7d0a:	a901      	add	r1, sp, #4
   b7d0c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7d0e:	ad07      	add	r5, sp, #28
   b7d10:	f7fe fda4 	bl	b685c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7d16:	1d3c      	adds	r4, r7, #4
   b7d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7d1a:	682b      	ldr	r3, [r5, #0]
   b7d1c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7d1e:	4649      	mov	r1, r9
   b7d20:	e7ca      	b.n	b7cb8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7d22:	9800      	ldr	r0, [sp, #0]
   b7d24:	f7fd fdca 	bl	b58bc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7d28:	4638      	mov	r0, r7
   b7d2a:	b015      	add	sp, #84	; 0x54
   b7d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7d30 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7d30:	4b02      	ldr	r3, [pc, #8]	; (b7d3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7d32:	4a03      	ldr	r2, [pc, #12]	; (b7d40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7d34:	601a      	str	r2, [r3, #0]
   b7d36:	2200      	movs	r2, #0
   b7d38:	605a      	str	r2, [r3, #4]

} // spark
   b7d3a:	4770      	bx	lr
   b7d3c:	2003e6b8 	.word	0x2003e6b8
   b7d40:	000b90ac 	.word	0x000b90ac

000b7d44 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d46:	4606      	mov	r6, r0
   b7d48:	460d      	mov	r5, r1
  size_t n = 0;
   b7d4a:	188f      	adds	r7, r1, r2
   b7d4c:	2400      	movs	r4, #0
  while (size--) {
   b7d4e:	42bd      	cmp	r5, r7
   b7d50:	d00c      	beq.n	b7d6c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7d52:	6833      	ldr	r3, [r6, #0]
   b7d54:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7d58:	689b      	ldr	r3, [r3, #8]
   b7d5a:	4630      	mov	r0, r6
   b7d5c:	4798      	blx	r3
     if (chunk>=0)
   b7d5e:	1e03      	subs	r3, r0, #0
   b7d60:	db01      	blt.n	b7d66 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7d62:	441c      	add	r4, r3
  while (size--) {
   b7d64:	e7f3      	b.n	b7d4e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7d66:	2c00      	cmp	r4, #0
   b7d68:	bf08      	it	eq
   b7d6a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7d6c:	4620      	mov	r0, r4
   b7d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7d70 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7d70:	b513      	push	{r0, r1, r4, lr}
   b7d72:	4604      	mov	r4, r0
    }
   b7d74:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7d76:	b159      	cbz	r1, b7d90 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7d78:	9101      	str	r1, [sp, #4]
   b7d7a:	f7fc ffad 	bl	b4cd8 <strlen>
   b7d7e:	6823      	ldr	r3, [r4, #0]
   b7d80:	9901      	ldr	r1, [sp, #4]
   b7d82:	68db      	ldr	r3, [r3, #12]
   b7d84:	4602      	mov	r2, r0
   b7d86:	4620      	mov	r0, r4
    }
   b7d88:	b002      	add	sp, #8
   b7d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7d8e:	4718      	bx	r3
    }
   b7d90:	b002      	add	sp, #8
   b7d92:	bd10      	pop	{r4, pc}

000b7d94 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b7d94:	6803      	ldr	r3, [r0, #0]
   b7d96:	689b      	ldr	r3, [r3, #8]
   b7d98:	4718      	bx	r3

000b7d9a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7d9a:	b530      	push	{r4, r5, lr}
   b7d9c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7d9e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7da0:	2a01      	cmp	r2, #1
  *str = '\0';
   b7da2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7da6:	bf98      	it	ls
   b7da8:	220a      	movls	r2, #10
   b7daa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7dac:	460d      	mov	r5, r1
   b7dae:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7db2:	fb01 5312 	mls	r3, r1, r2, r5
   b7db6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7dba:	2b09      	cmp	r3, #9
   b7dbc:	bf94      	ite	ls
   b7dbe:	3330      	addls	r3, #48	; 0x30
   b7dc0:	3337      	addhi	r3, #55	; 0x37
   b7dc2:	b2db      	uxtb	r3, r3
  } while(n);
   b7dc4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7dc6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7dca:	d9ef      	bls.n	b7dac <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7dcc:	4621      	mov	r1, r4
   b7dce:	f7ff ffcf 	bl	b7d70 <_ZN5Print5writeEPKc>
}
   b7dd2:	b00b      	add	sp, #44	; 0x2c
   b7dd4:	bd30      	pop	{r4, r5, pc}
	...

000b7dd8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b7dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7ddc:	ec55 4b10 	vmov	r4, r5, d0
   b7de0:	4606      	mov	r6, r0
   b7de2:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b7de4:	ee10 2a10 	vmov	r2, s0
   b7de8:	ee10 0a10 	vmov	r0, s0
   b7dec:	462b      	mov	r3, r5
   b7dee:	4629      	mov	r1, r5
   b7df0:	f7fc fd6a 	bl	b48c8 <__aeabi_dcmpun>
   b7df4:	b140      	cbz	r0, b7e08 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b7df6:	4953      	ldr	r1, [pc, #332]	; (b7f44 <_ZN5Print10printFloatEdh+0x16c>)
   b7df8:	4630      	mov	r0, r6
   b7dfa:	f7ff ffb9 	bl	b7d70 <_ZN5Print5writeEPKc>
   b7dfe:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b7e00:	4650      	mov	r0, sl
   b7e02:	b003      	add	sp, #12
   b7e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b7e08:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b7e0c:	4b4e      	ldr	r3, [pc, #312]	; (b7f48 <_ZN5Print10printFloatEdh+0x170>)
   b7e0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7e12:	4620      	mov	r0, r4
   b7e14:	4649      	mov	r1, r9
   b7e16:	f7fc fd57 	bl	b48c8 <__aeabi_dcmpun>
   b7e1a:	b948      	cbnz	r0, b7e30 <_ZN5Print10printFloatEdh+0x58>
   b7e1c:	4b4a      	ldr	r3, [pc, #296]	; (b7f48 <_ZN5Print10printFloatEdh+0x170>)
   b7e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7e22:	4620      	mov	r0, r4
   b7e24:	4649      	mov	r1, r9
   b7e26:	f7fc fd31 	bl	b488c <__aeabi_dcmple>
   b7e2a:	b908      	cbnz	r0, b7e30 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b7e2c:	4947      	ldr	r1, [pc, #284]	; (b7f4c <_ZN5Print10printFloatEdh+0x174>)
   b7e2e:	e7e3      	b.n	b7df8 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b7e30:	4b47      	ldr	r3, [pc, #284]	; (b7f50 <_ZN5Print10printFloatEdh+0x178>)
   b7e32:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b7e36:	4620      	mov	r0, r4
   b7e38:	4629      	mov	r1, r5
   b7e3a:	f7fc fd3b 	bl	b48b4 <__aeabi_dcmpgt>
   b7e3e:	b108      	cbz	r0, b7e44 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b7e40:	4944      	ldr	r1, [pc, #272]	; (b7f54 <_ZN5Print10printFloatEdh+0x17c>)
   b7e42:	e7d9      	b.n	b7df8 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b7e44:	4b44      	ldr	r3, [pc, #272]	; (b7f58 <_ZN5Print10printFloatEdh+0x180>)
   b7e46:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b7e4a:	4620      	mov	r0, r4
   b7e4c:	4629      	mov	r1, r5
   b7e4e:	f7fc fd13 	bl	b4878 <__aeabi_dcmplt>
   b7e52:	2800      	cmp	r0, #0
   b7e54:	d1f4      	bne.n	b7e40 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b7e56:	2200      	movs	r2, #0
   b7e58:	2300      	movs	r3, #0
   b7e5a:	4620      	mov	r0, r4
   b7e5c:	4629      	mov	r1, r5
   b7e5e:	f7fc fd0b 	bl	b4878 <__aeabi_dcmplt>
   b7e62:	b1d0      	cbz	r0, b7e9a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b7e64:	212d      	movs	r1, #45	; 0x2d
   b7e66:	4630      	mov	r0, r6
   b7e68:	f7ff ff94 	bl	b7d94 <_ZN5Print5printEc>
     number = -number;
   b7e6c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b7e70:	4682      	mov	sl, r0
     number = -number;
   b7e72:	461d      	mov	r5, r3
  double rounding = 0.5;
   b7e74:	4939      	ldr	r1, [pc, #228]	; (b7f5c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b7e76:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b7f64 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b7e7a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b7e7e:	2000      	movs	r0, #0
    rounding /= 10.0;
   b7e80:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b7e84:	fa5f f38b 	uxtb.w	r3, fp
   b7e88:	429f      	cmp	r7, r3
   b7e8a:	d908      	bls.n	b7e9e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b7e8c:	4642      	mov	r2, r8
   b7e8e:	464b      	mov	r3, r9
   b7e90:	f7fc fbaa 	bl	b45e8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b7e94:	f10b 0b01 	add.w	fp, fp, #1
   b7e98:	e7f4      	b.n	b7e84 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b7e9a:	4682      	mov	sl, r0
   b7e9c:	e7ea      	b.n	b7e74 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b7e9e:	4622      	mov	r2, r4
   b7ea0:	462b      	mov	r3, r5
   b7ea2:	f7fc f8c1 	bl	b4028 <__adddf3>
   b7ea6:	460d      	mov	r5, r1
   b7ea8:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b7eaa:	f7fc fd4b 	bl	b4944 <__aeabi_d2uiz>
   b7eae:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b7eb0:	f7fc f9f6 	bl	b42a0 <__aeabi_ui2d>
   b7eb4:	4602      	mov	r2, r0
   b7eb6:	460b      	mov	r3, r1
   b7eb8:	4620      	mov	r0, r4
   b7eba:	4629      	mov	r1, r5
   b7ebc:	f7fc f8b2 	bl	b4024 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b7ec0:	220a      	movs	r2, #10
   b7ec2:	4604      	mov	r4, r0
   b7ec4:	460d      	mov	r5, r1
   b7ec6:	4630      	mov	r0, r6
   b7ec8:	4641      	mov	r1, r8
   b7eca:	f7ff ff66 	bl	b7d9a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b7ece:	4482      	add	sl, r0
  if (digits > 0) {
   b7ed0:	2f00      	cmp	r7, #0
   b7ed2:	d095      	beq.n	b7e00 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b7ed4:	4922      	ldr	r1, [pc, #136]	; (b7f60 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b7ed6:	f8df 908c 	ldr.w	r9, [pc, #140]	; b7f64 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b7eda:	4630      	mov	r0, r6
   b7edc:	f7ff ff48 	bl	b7d70 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b7ee0:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b7ee4:	4482      	add	sl, r0
  while (digits-- > 0)
   b7ee6:	2f00      	cmp	r7, #0
   b7ee8:	d08a      	beq.n	b7e00 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b7eea:	4642      	mov	r2, r8
   b7eec:	464b      	mov	r3, r9
   b7eee:	4620      	mov	r0, r4
   b7ef0:	4629      	mov	r1, r5
   b7ef2:	f7fc fa4f 	bl	b4394 <__aeabi_dmul>
   b7ef6:	4604      	mov	r4, r0
   b7ef8:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b7efa:	f7fc fcfb 	bl	b48f4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b7efe:	f1b0 0b00 	subs.w	fp, r0, #0
   b7f02:	da1c      	bge.n	b7f3e <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b7f04:	212d      	movs	r1, #45	; 0x2d
   b7f06:	4630      	mov	r0, r6
   b7f08:	f7ff ff44 	bl	b7d94 <_ZN5Print5printEc>
            val = -n;
   b7f0c:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b7f10:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b7f12:	220a      	movs	r2, #10
   b7f14:	4630      	mov	r0, r6
   b7f16:	9301      	str	r3, [sp, #4]
   b7f18:	f7ff ff3f 	bl	b7d9a <_ZN5Print11printNumberEmh>
   b7f1c:	9b01      	ldr	r3, [sp, #4]
   b7f1e:	4418      	add	r0, r3
    n += print(toPrint);
   b7f20:	4482      	add	sl, r0
    remainder -= toPrint;
   b7f22:	4658      	mov	r0, fp
   b7f24:	f7fc f9cc 	bl	b42c0 <__aeabi_i2d>
   b7f28:	4602      	mov	r2, r0
   b7f2a:	460b      	mov	r3, r1
   b7f2c:	4620      	mov	r0, r4
   b7f2e:	4629      	mov	r1, r5
   b7f30:	f7fc f878 	bl	b4024 <__aeabi_dsub>
   b7f34:	3f01      	subs	r7, #1
   b7f36:	4604      	mov	r4, r0
   b7f38:	460d      	mov	r5, r1
   b7f3a:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b7f3c:	e7d3      	b.n	b7ee6 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b7f3e:	4659      	mov	r1, fp
        size_t t = 0;
   b7f40:	2300      	movs	r3, #0
   b7f42:	e7e6      	b.n	b7f12 <_ZN5Print10printFloatEdh+0x13a>
   b7f44:	000b90e0 	.word	0x000b90e0
   b7f48:	7fefffff 	.word	0x7fefffff
   b7f4c:	000b90e4 	.word	0x000b90e4
   b7f50:	41efffff 	.word	0x41efffff
   b7f54:	000b90e8 	.word	0x000b90e8
   b7f58:	c1efffff 	.word	0xc1efffff
   b7f5c:	3fe00000 	.word	0x3fe00000
   b7f60:	000b8e28 	.word	0x000b8e28
   b7f64:	40240000 	.word	0x40240000

000b7f68 <_ZN5Print5printEfi>:
{
   b7f68:	b538      	push	{r3, r4, r5, lr}
   b7f6a:	4604      	mov	r4, r0
   b7f6c:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b7f70:	b2cd      	uxtb	r5, r1
   b7f72:	f7fc f9b7 	bl	b42e4 <__aeabi_f2d>
   b7f76:	ec41 0b10 	vmov	d0, r0, r1
   b7f7a:	4629      	mov	r1, r5
   b7f7c:	4620      	mov	r0, r4
}
   b7f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b7f82:	f7ff bf29 	b.w	b7dd8 <_ZN5Print10printFloatEdh>
	...

000b7f88 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7f88:	4b01      	ldr	r3, [pc, #4]	; (b7f90 <_GLOBAL__sub_I_RGB+0x8>)
   b7f8a:	2200      	movs	r2, #0
   b7f8c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7f8e:	4770      	bx	lr
   b7f90:	2003e6c0 	.word	0x2003e6c0

000b7f94 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7f94:	b510      	push	{r4, lr}
   b7f96:	4604      	mov	r4, r0
   b7f98:	4608      	mov	r0, r1
{
    _spi = spi;
   b7f9a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7f9c:	f7fd fc9e 	bl	b58dc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7fa0:	2300      	movs	r3, #0
   b7fa2:	6063      	str	r3, [r4, #4]
}
   b7fa4:	4620      	mov	r0, r4
   b7fa6:	bd10      	pop	{r4, pc}

000b7fa8 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   b7fa8:	4770      	bx	lr

000b7faa <_ZN21StringPrintableHelperD0Ev>:
   b7faa:	b510      	push	{r4, lr}
   b7fac:	210c      	movs	r1, #12
   b7fae:	4604      	mov	r4, r0
   b7fb0:	f7fc fed9 	bl	b4d66 <_ZdlPvj>
   b7fb4:	4620      	mov	r0, r4
   b7fb6:	bd10      	pop	{r4, pc}

000b7fb8 <_Z4dtoadhPc>:
void dtoa (double val, unsigned char prec, char *sout) {
   b7fb8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7fbc:	ec57 6b10 	vmov	r6, r7, d0
   b7fc0:	4680      	mov	r8, r0
   b7fc2:	460c      	mov	r4, r1
    if (negative) {
   b7fc4:	ee10 0a10 	vmov	r0, s0
   b7fc8:	2200      	movs	r2, #0
   b7fca:	2300      	movs	r3, #0
   b7fcc:	4639      	mov	r1, r7
   b7fce:	f7fc fc53 	bl	b4878 <__aeabi_dcmplt>
   b7fd2:	b128      	cbz	r0, b7fe0 <_Z4dtoadhPc+0x28>
        val = -val;
   b7fd4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b7fd8:	461f      	mov	r7, r3
        *sout++ = '-';
   b7fda:	232d      	movs	r3, #45	; 0x2d
   b7fdc:	f804 3b01 	strb.w	r3, [r4], #1
   b7fe0:	2300      	movs	r3, #0
    long scale = 1;
   b7fe2:	f04f 0901 	mov.w	r9, #1
        scale *= 10;
   b7fe6:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   b7fe8:	b2d9      	uxtb	r1, r3
   b7fea:	4588      	cmp	r8, r1
   b7fec:	d903      	bls.n	b7ff6 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   b7fee:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   b7ff2:	3301      	adds	r3, #1
   b7ff4:	e7f8      	b.n	b7fe8 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   b7ff6:	4648      	mov	r0, r9
   b7ff8:	f7fc f962 	bl	b42c0 <__aeabi_i2d>
   b7ffc:	4632      	mov	r2, r6
   b7ffe:	463b      	mov	r3, r7
   b8000:	f7fc f9c8 	bl	b4394 <__aeabi_dmul>
   b8004:	4606      	mov	r6, r0
   b8006:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   b8008:	f7fc fcd4 	bl	b49b4 <__aeabi_d2ulz>
   b800c:	468a      	mov	sl, r1
   b800e:	4605      	mov	r5, r0
   b8010:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
   b8012:	f7fc f989 	bl	b4328 <__aeabi_ul2d>
   b8016:	4602      	mov	r2, r0
   b8018:	460b      	mov	r3, r1
   b801a:	4630      	mov	r0, r6
   b801c:	4639      	mov	r1, r7
   b801e:	f7fc f801 	bl	b4024 <__aeabi_dsub>
   b8022:	4b14      	ldr	r3, [pc, #80]	; (b8074 <_Z4dtoadhPc+0xbc>)
   b8024:	2200      	movs	r2, #0
   b8026:	f7fc fc3b 	bl	b48a0 <__aeabi_dcmpge>
   b802a:	b110      	cbz	r0, b8032 <_Z4dtoadhPc+0x7a>
        fixed++;
   b802c:	3501      	adds	r5, #1
   b802e:	f14a 0b00 	adc.w	fp, sl, #0
    unsigned long first = (unsigned long)(fixed / scale);
   b8032:	464a      	mov	r2, r9
   b8034:	4628      	mov	r0, r5
   b8036:	17d3      	asrs	r3, r2, #31
   b8038:	4659      	mov	r1, fp
   b803a:	f7fc fca3 	bl	b4984 <__aeabi_uldivmod>
    ultoa(first, sout, 10, 1);
   b803e:	2301      	movs	r3, #1
   b8040:	4615      	mov	r5, r2
   b8042:	4621      	mov	r1, r4
   b8044:	220a      	movs	r2, #10
   b8046:	f000 fa90 	bl	b856a <ultoa>
    if (prec) {
   b804a:	f1b8 0f00 	cmp.w	r8, #0
   b804e:	d00e      	beq.n	b806e <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
   b8050:	4620      	mov	r0, r4
   b8052:	f7fc fe41 	bl	b4cd8 <strlen>
        *sout++ = '.';
   b8056:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   b8058:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   b805a:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   b805c:	220a      	movs	r2, #10
   b805e:	4643      	mov	r3, r8
   b8060:	3101      	adds	r1, #1
   b8062:	4628      	mov	r0, r5
}
   b8064:	b001      	add	sp, #4
   b8066:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
   b806a:	f000 ba7e 	b.w	b856a <ultoa>
}
   b806e:	b001      	add	sp, #4
   b8070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8074:	3fe00000 	.word	0x3fe00000

000b8078 <_ZN6StringD1Ev>:
String::~String()
   b8078:	b510      	push	{r4, lr}
   b807a:	4604      	mov	r4, r0
	free(buffer);
   b807c:	6800      	ldr	r0, [r0, #0]
   b807e:	f7fd fddb 	bl	b5c38 <free>
}
   b8082:	4620      	mov	r0, r4
   b8084:	bd10      	pop	{r4, pc}

000b8086 <_ZN6String10invalidateEv>:
{
   b8086:	b510      	push	{r4, lr}
   b8088:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b808a:	6800      	ldr	r0, [r0, #0]
   b808c:	b108      	cbz	r0, b8092 <_ZN6String10invalidateEv+0xc>
   b808e:	f7fd fdd3 	bl	b5c38 <free>
	buffer = NULL;
   b8092:	2300      	movs	r3, #0
	capacity = len = 0;
   b8094:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8098:	6023      	str	r3, [r4, #0]
}
   b809a:	bd10      	pop	{r4, pc}

000b809c <_ZN6String12changeBufferEj>:
{
   b809c:	b538      	push	{r3, r4, r5, lr}
   b809e:	4604      	mov	r4, r0
   b80a0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b80a2:	6800      	ldr	r0, [r0, #0]
   b80a4:	3101      	adds	r1, #1
   b80a6:	f7fd fdcf 	bl	b5c48 <realloc>
	if (newbuffer) {
   b80aa:	b110      	cbz	r0, b80b2 <_ZN6String12changeBufferEj+0x16>
		capacity = maxStrLen;
   b80ac:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b80b0:	2001      	movs	r0, #1
}
   b80b2:	bd38      	pop	{r3, r4, r5, pc}

000b80b4 <_ZN6String7reserveEj>:
{
   b80b4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b80b6:	6803      	ldr	r3, [r0, #0]
{
   b80b8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b80ba:	b123      	cbz	r3, b80c6 <_ZN6String7reserveEj+0x12>
   b80bc:	6843      	ldr	r3, [r0, #4]
   b80be:	428b      	cmp	r3, r1
   b80c0:	d301      	bcc.n	b80c6 <_ZN6String7reserveEj+0x12>
   b80c2:	2001      	movs	r0, #1
}
   b80c4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b80c6:	4620      	mov	r0, r4
   b80c8:	f7ff ffe8 	bl	b809c <_ZN6String12changeBufferEj>
   b80cc:	2800      	cmp	r0, #0
   b80ce:	d0f9      	beq.n	b80c4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b80d0:	68a3      	ldr	r3, [r4, #8]
   b80d2:	2b00      	cmp	r3, #0
   b80d4:	d1f5      	bne.n	b80c2 <_ZN6String7reserveEj+0xe>
   b80d6:	6822      	ldr	r2, [r4, #0]
   b80d8:	7013      	strb	r3, [r2, #0]
   b80da:	e7f2      	b.n	b80c2 <_ZN6String7reserveEj+0xe>

000b80dc <_ZN6String4copyEPKcj>:
{
   b80dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b80de:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b80e0:	4611      	mov	r1, r2
   b80e2:	9201      	str	r2, [sp, #4]
{
   b80e4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b80e6:	f7ff ffe5 	bl	b80b4 <_ZN6String7reserveEj>
   b80ea:	9a01      	ldr	r2, [sp, #4]
   b80ec:	b928      	cbnz	r0, b80fa <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b80ee:	4620      	mov	r0, r4
   b80f0:	f7ff ffc9 	bl	b8086 <_ZN6String10invalidateEv>
}
   b80f4:	4620      	mov	r0, r4
   b80f6:	b003      	add	sp, #12
   b80f8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b80fa:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b80fc:	4629      	mov	r1, r5
   b80fe:	6820      	ldr	r0, [r4, #0]
   b8100:	f000 fc46 	bl	b8990 <memcpy>
	buffer[len] = 0;
   b8104:	6822      	ldr	r2, [r4, #0]
   b8106:	68a3      	ldr	r3, [r4, #8]
   b8108:	2100      	movs	r1, #0
   b810a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b810c:	e7f2      	b.n	b80f4 <_ZN6String4copyEPKcj+0x18>

000b810e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b810e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8110:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8112:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8116:	4604      	mov	r4, r0
	len = 0;
   b8118:	6083      	str	r3, [r0, #8]
	flags = 0;
   b811a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b811c:	b141      	cbz	r1, b8130 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b811e:	4608      	mov	r0, r1
   b8120:	9101      	str	r1, [sp, #4]
   b8122:	f7fc fdd9 	bl	b4cd8 <strlen>
   b8126:	9901      	ldr	r1, [sp, #4]
   b8128:	4602      	mov	r2, r0
   b812a:	4620      	mov	r0, r4
   b812c:	f7ff ffd6 	bl	b80dc <_ZN6String4copyEPKcj>
}
   b8130:	4620      	mov	r0, r4
   b8132:	b002      	add	sp, #8
   b8134:	bd10      	pop	{r4, pc}

000b8136 <_ZN6String4moveERS_>:
{
   b8136:	b538      	push	{r3, r4, r5, lr}
   b8138:	4605      	mov	r5, r0
	if (buffer) {
   b813a:	6800      	ldr	r0, [r0, #0]
{
   b813c:	460c      	mov	r4, r1
	if (buffer) {
   b813e:	b168      	cbz	r0, b815c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b8140:	686a      	ldr	r2, [r5, #4]
   b8142:	688b      	ldr	r3, [r1, #8]
   b8144:	429a      	cmp	r2, r3
   b8146:	d307      	bcc.n	b8158 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b8148:	6809      	ldr	r1, [r1, #0]
   b814a:	f000 fc96 	bl	b8a7a <strcpy>
			len = rhs.len;
   b814e:	68a3      	ldr	r3, [r4, #8]
   b8150:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b8152:	2300      	movs	r3, #0
	rhs.len = 0;
   b8154:	60a3      	str	r3, [r4, #8]
}
   b8156:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b8158:	f7fd fd6e 	bl	b5c38 <free>
	buffer = rhs.buffer;
   b815c:	6823      	ldr	r3, [r4, #0]
   b815e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b8160:	6863      	ldr	r3, [r4, #4]
   b8162:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8164:	68a3      	ldr	r3, [r4, #8]
   b8166:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b8168:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b816a:	e9c4 3300 	strd	r3, r3, [r4]
   b816e:	e7f1      	b.n	b8154 <_ZN6String4moveERS_+0x1e>

000b8170 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b8170:	b510      	push	{r4, lr}
	buffer = NULL;
   b8172:	2300      	movs	r3, #0
	capacity = 0;
   b8174:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b8178:	4604      	mov	r4, r0
	len = 0;
   b817a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b817c:	7303      	strb	r3, [r0, #12]
	move(rval);
   b817e:	f7ff ffda 	bl	b8136 <_ZN6String4moveERS_>
}
   b8182:	4620      	mov	r0, r4
   b8184:	bd10      	pop	{r4, pc}

000b8186 <_ZN6StringaSERKS_>:
	if (this == &rhs) return *this;
   b8186:	4288      	cmp	r0, r1
{
   b8188:	b510      	push	{r4, lr}
   b818a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b818c:	d005      	beq.n	b819a <_ZN6StringaSERKS_+0x14>
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b818e:	680b      	ldr	r3, [r1, #0]
   b8190:	b12b      	cbz	r3, b819e <_ZN6StringaSERKS_+0x18>
   b8192:	688a      	ldr	r2, [r1, #8]
   b8194:	4619      	mov	r1, r3
   b8196:	f7ff ffa1 	bl	b80dc <_ZN6String4copyEPKcj>
}
   b819a:	4620      	mov	r0, r4
   b819c:	bd10      	pop	{r4, pc}
	else invalidate();
   b819e:	f7ff ff72 	bl	b8086 <_ZN6String10invalidateEv>
   b81a2:	e7fa      	b.n	b819a <_ZN6StringaSERKS_+0x14>

000b81a4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b81a4:	b510      	push	{r4, lr}
	buffer = NULL;
   b81a6:	2300      	movs	r3, #0
String::String(const String &value)
   b81a8:	4604      	mov	r4, r0
	capacity = 0;
   b81aa:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b81ae:	6083      	str	r3, [r0, #8]
	flags = 0;
   b81b0:	7303      	strb	r3, [r0, #12]
	*this = value;
   b81b2:	f7ff ffe8 	bl	b8186 <_ZN6StringaSERKS_>
}
   b81b6:	4620      	mov	r0, r4
   b81b8:	bd10      	pop	{r4, pc}

000b81ba <_ZN6StringaSEPKc>:
{
   b81ba:	b513      	push	{r0, r1, r4, lr}
   b81bc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b81be:	b159      	cbz	r1, b81d8 <_ZN6StringaSEPKc+0x1e>
   b81c0:	4608      	mov	r0, r1
   b81c2:	9101      	str	r1, [sp, #4]
   b81c4:	f7fc fd88 	bl	b4cd8 <strlen>
   b81c8:	9901      	ldr	r1, [sp, #4]
   b81ca:	4602      	mov	r2, r0
   b81cc:	4620      	mov	r0, r4
   b81ce:	f7ff ff85 	bl	b80dc <_ZN6String4copyEPKcj>
}
   b81d2:	4620      	mov	r0, r4
   b81d4:	b002      	add	sp, #8
   b81d6:	bd10      	pop	{r4, pc}
	else invalidate();
   b81d8:	f7ff ff55 	bl	b8086 <_ZN6String10invalidateEv>
   b81dc:	e7f9      	b.n	b81d2 <_ZN6StringaSEPKc+0x18>

000b81de <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b81de:	b510      	push	{r4, lr}
   b81e0:	4604      	mov	r4, r0
   b81e2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b81e4:	2300      	movs	r3, #0
	capacity = 0;
   b81e6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b81ea:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b81ec:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b81ee:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b81f0:	a901      	add	r1, sp, #4
   b81f2:	f000 f9df 	bl	b85b4 <itoa>
	*this = buf;
   b81f6:	a901      	add	r1, sp, #4
   b81f8:	4620      	mov	r0, r4
   b81fa:	f7ff ffde 	bl	b81ba <_ZN6StringaSEPKc>
}
   b81fe:	4620      	mov	r0, r4
   b8200:	b00a      	add	sp, #40	; 0x28
   b8202:	bd10      	pop	{r4, pc}

000b8204 <_ZN6String6concatEPKcj>:
{
   b8204:	b570      	push	{r4, r5, r6, lr}
   b8206:	4605      	mov	r5, r0
	if (!cstr) return 0;
   b8208:	460e      	mov	r6, r1
   b820a:	b909      	cbnz	r1, b8210 <_ZN6String6concatEPKcj+0xc>
   b820c:	2000      	movs	r0, #0
}
   b820e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8210:	b16a      	cbz	r2, b822e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8212:	6884      	ldr	r4, [r0, #8]
   b8214:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8216:	4621      	mov	r1, r4
   b8218:	f7ff ff4c 	bl	b80b4 <_ZN6String7reserveEj>
   b821c:	2800      	cmp	r0, #0
   b821e:	d0f5      	beq.n	b820c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8220:	6828      	ldr	r0, [r5, #0]
   b8222:	68ab      	ldr	r3, [r5, #8]
   b8224:	4631      	mov	r1, r6
   b8226:	4418      	add	r0, r3
   b8228:	f000 fc27 	bl	b8a7a <strcpy>
	len = newlen;
   b822c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b822e:	2001      	movs	r0, #1
   b8230:	e7ed      	b.n	b820e <_ZN6String6concatEPKcj+0xa>

000b8232 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   b8232:	b538      	push	{r3, r4, r5, lr}
   b8234:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   b8236:	6880      	ldr	r0, [r0, #8]
	inline unsigned int length(void) const {return len;}
   b8238:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   b823a:	f7ff ffe3 	bl	b8204 <_ZN6String6concatEPKcj>
   b823e:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   b8240:	6898      	ldr	r0, [r3, #8]
    }
   b8242:	1b40      	subs	r0, r0, r5
   b8244:	bd38      	pop	{r3, r4, r5, pc}

000b8246 <_ZN6String6concatEc>:
{
   b8246:	b507      	push	{r0, r1, r2, lr}
	buf[1] = 0;
   b8248:	2300      	movs	r3, #0
	buf[0] = c;
   b824a:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b824e:	2201      	movs	r2, #1
   b8250:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b8252:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b8256:	f7ff ffd5 	bl	b8204 <_ZN6String6concatEPKcj>
}
   b825a:	b003      	add	sp, #12
   b825c:	f85d fb04 	ldr.w	pc, [sp], #4

000b8260 <_ZN21StringPrintableHelper5writeEh>:

    virtual size_t write(uint8_t c) override
   b8260:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   b8262:	6880      	ldr	r0, [r0, #8]
   b8264:	f7ff ffef 	bl	b8246 <_ZN6String6concatEc>
    }
   b8268:	bd08      	pop	{r3, pc}

000b826a <_ZN6String6concatEf>:
{
   b826a:	b510      	push	{r4, lr}
   b826c:	4604      	mov	r4, r0
   b826e:	b086      	sub	sp, #24
   b8270:	ee10 0a10 	vmov	r0, s0
	dtoa(num, 6, buf);
   b8274:	f7fc f836 	bl	b42e4 <__aeabi_f2d>
   b8278:	ec41 0b10 	vmov	d0, r0, r1
   b827c:	a901      	add	r1, sp, #4
   b827e:	2006      	movs	r0, #6
   b8280:	f7ff fe9a 	bl	b7fb8 <_Z4dtoadhPc>
	return concat(buf, strlen(buf));
   b8284:	a801      	add	r0, sp, #4
   b8286:	f7fc fd27 	bl	b4cd8 <strlen>
   b828a:	a901      	add	r1, sp, #4
   b828c:	4602      	mov	r2, r0
   b828e:	4620      	mov	r0, r4
   b8290:	f7ff ffb8 	bl	b8204 <_ZN6String6concatEPKcj>
}
   b8294:	b006      	add	sp, #24
   b8296:	bd10      	pop	{r4, pc}

000b8298 <_ZplRK15StringSumHelperRK6String>:
{
   b8298:	b510      	push	{r4, lr}
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b829a:	688a      	ldr	r2, [r1, #8]
   b829c:	6809      	ldr	r1, [r1, #0]
{
   b829e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b82a0:	f7ff ffb0 	bl	b8204 <_ZN6String6concatEPKcj>
   b82a4:	b910      	cbnz	r0, b82ac <_ZplRK15StringSumHelperRK6String+0x14>
   b82a6:	4620      	mov	r0, r4
   b82a8:	f7ff feed 	bl	b8086 <_ZN6String10invalidateEv>
}
   b82ac:	4620      	mov	r0, r4
   b82ae:	bd10      	pop	{r4, pc}

000b82b0 <_ZplRK15StringSumHelperPKc>:
{
   b82b0:	b513      	push	{r0, r1, r4, lr}
   b82b2:	4604      	mov	r4, r0
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b82b4:	b929      	cbnz	r1, b82c2 <_ZplRK15StringSumHelperPKc+0x12>
   b82b6:	4620      	mov	r0, r4
   b82b8:	f7ff fee5 	bl	b8086 <_ZN6String10invalidateEv>
}
   b82bc:	4620      	mov	r0, r4
   b82be:	b002      	add	sp, #8
   b82c0:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b82c2:	4608      	mov	r0, r1
   b82c4:	9101      	str	r1, [sp, #4]
   b82c6:	f7fc fd07 	bl	b4cd8 <strlen>
   b82ca:	9901      	ldr	r1, [sp, #4]
   b82cc:	4602      	mov	r2, r0
   b82ce:	4620      	mov	r0, r4
   b82d0:	f7ff ff98 	bl	b8204 <_ZN6String6concatEPKcj>
   b82d4:	2800      	cmp	r0, #0
   b82d6:	d0ee      	beq.n	b82b6 <_ZplRK15StringSumHelperPKc+0x6>
   b82d8:	e7f0      	b.n	b82bc <_ZplRK15StringSumHelperPKc+0xc>

000b82da <_ZplRK15StringSumHelperf>:
{
   b82da:	b510      	push	{r4, lr}
   b82dc:	4604      	mov	r4, r0
	if (!a.concat(num)) a.invalidate();
   b82de:	f7ff ffc4 	bl	b826a <_ZN6String6concatEf>
   b82e2:	b910      	cbnz	r0, b82ea <_ZplRK15StringSumHelperf+0x10>
   b82e4:	4620      	mov	r0, r4
   b82e6:	f7ff fece 	bl	b8086 <_ZN6String10invalidateEv>
}
   b82ea:	4620      	mov	r0, r4
   b82ec:	bd10      	pop	{r4, pc}

000b82ee <_ZNK6String6equalsEPKc>:
{
   b82ee:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b82f0:	6882      	ldr	r2, [r0, #8]
   b82f2:	b93a      	cbnz	r2, b8304 <_ZNK6String6equalsEPKc+0x16>
   b82f4:	b121      	cbz	r1, b8300 <_ZNK6String6equalsEPKc+0x12>
   b82f6:	7808      	ldrb	r0, [r1, #0]
	return strcmp(buffer, cstr) == 0;
   b82f8:	fab0 f080 	clz	r0, r0
   b82fc:	0940      	lsrs	r0, r0, #5
   b82fe:	e000      	b.n	b8302 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8300:	2001      	movs	r0, #1
}
   b8302:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b8304:	6800      	ldr	r0, [r0, #0]
   b8306:	b909      	cbnz	r1, b830c <_ZNK6String6equalsEPKc+0x1e>
   b8308:	7800      	ldrb	r0, [r0, #0]
   b830a:	e7f5      	b.n	b82f8 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b830c:	f7fc fcda 	bl	b4cc4 <strcmp>
   b8310:	e7f2      	b.n	b82f8 <_ZNK6String6equalsEPKc+0xa>
	...

000b8314 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   b8314:	b530      	push	{r4, r5, lr}
   b8316:	b085      	sub	sp, #20
	buffer = NULL;
   b8318:	2300      	movs	r3, #0
String::String(const Printable& printable)
   b831a:	460d      	mov	r5, r1
    Print() : write_error(0) {}
   b831c:	9302      	str	r3, [sp, #8]
	capacity = 0;
   b831e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8322:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8324:	7303      	strb	r3, [r0, #12]
        s.reserve(20);
   b8326:	2114      	movs	r1, #20
    StringPrintableHelper(String& s_) : s(s_) {
   b8328:	4b06      	ldr	r3, [pc, #24]	; (b8344 <_ZN6StringC1ERK9Printable+0x30>)
   b832a:	9301      	str	r3, [sp, #4]
String::String(const Printable& printable)
   b832c:	4604      	mov	r4, r0
    StringPrintableHelper(String& s_) : s(s_) {
   b832e:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   b8330:	f7ff fec0 	bl	b80b4 <_ZN6String7reserveEj>
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   b8334:	682b      	ldr	r3, [r5, #0]
   b8336:	a901      	add	r1, sp, #4
   b8338:	681b      	ldr	r3, [r3, #0]
   b833a:	4628      	mov	r0, r5
   b833c:	4798      	blx	r3
}
   b833e:	4620      	mov	r0, r4
   b8340:	b005      	add	sp, #20
   b8342:	bd30      	pop	{r4, r5, pc}
   b8344:	000b90f4 	.word	0x000b90f4

000b8348 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8348:	4b05      	ldr	r3, [pc, #20]	; (b8360 <_GLOBAL__sub_I_System+0x18>)
   b834a:	2202      	movs	r2, #2
   b834c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b834e:	4b05      	ldr	r3, [pc, #20]	; (b8364 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8350:	4a05      	ldr	r2, [pc, #20]	; (b8368 <_GLOBAL__sub_I_System+0x20>)
   b8352:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8354:	2000      	movs	r0, #0
   b8356:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b835a:	f7fd bb7f 	b.w	b5a5c <set_system_mode>
   b835e:	bf00      	nop
   b8360:	2003e6dc 	.word	0x2003e6dc
   b8364:	2003e6d0 	.word	0x2003e6d0
   b8368:	ffff0000 	.word	0xffff0000

000b836c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b836c:	4b02      	ldr	r3, [pc, #8]	; (b8378 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b836e:	681a      	ldr	r2, [r3, #0]
   b8370:	4b02      	ldr	r3, [pc, #8]	; (b837c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8372:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8374:	4770      	bx	lr
   b8376:	bf00      	nop
   b8378:	2003e584 	.word	0x2003e584
   b837c:	2003e6e0 	.word	0x2003e6e0

000b8380 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8380:	4770      	bx	lr

000b8382 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8382:	7441      	strb	r1, [r0, #17]
}
   b8384:	4770      	bx	lr

000b8386 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8386:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8388:	7c00      	ldrb	r0, [r0, #16]
   b838a:	f7fd faef 	bl	b596c <hal_usart_available_data_for_write>
}
   b838e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8392:	bd08      	pop	{r3, pc}

000b8394 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8394:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8396:	7c00      	ldrb	r0, [r0, #16]
   b8398:	f7fd fac0 	bl	b591c <hal_usart_available>
}
   b839c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b83a0:	bd08      	pop	{r3, pc}

000b83a2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b83a2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b83a4:	7c00      	ldrb	r0, [r0, #16]
   b83a6:	f7fd fac9 	bl	b593c <hal_usart_peek>
}
   b83aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b83ae:	bd08      	pop	{r3, pc}

000b83b0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b83b0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b83b2:	7c00      	ldrb	r0, [r0, #16]
   b83b4:	f7fd faba 	bl	b592c <hal_usart_read>
}
   b83b8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b83bc:	bd08      	pop	{r3, pc}

000b83be <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b83be:	7c00      	ldrb	r0, [r0, #16]
   b83c0:	f7fd bac4 	b.w	b594c <hal_usart_flush>

000b83c4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b83c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b83c6:	7c45      	ldrb	r5, [r0, #17]
{
   b83c8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b83ca:	b12d      	cbz	r5, b83d8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b83cc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b83ce:	b003      	add	sp, #12
   b83d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b83d4:	f7fd ba9a 	b.w	b590c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b83d8:	7c00      	ldrb	r0, [r0, #16]
   b83da:	9101      	str	r1, [sp, #4]
   b83dc:	f7fd fac6 	bl	b596c <hal_usart_available_data_for_write>
   b83e0:	2800      	cmp	r0, #0
   b83e2:	9901      	ldr	r1, [sp, #4]
   b83e4:	dcf2      	bgt.n	b83cc <_ZN11USARTSerial5writeEh+0x8>
}
   b83e6:	4628      	mov	r0, r5
   b83e8:	b003      	add	sp, #12
   b83ea:	bd30      	pop	{r4, r5, pc}

000b83ec <_ZN11USARTSerialD0Ev>:
   b83ec:	b510      	push	{r4, lr}
   b83ee:	2114      	movs	r1, #20
   b83f0:	4604      	mov	r4, r0
   b83f2:	f7fc fcb8 	bl	b4d66 <_ZdlPvj>
   b83f6:	4620      	mov	r0, r4
   b83f8:	bd10      	pop	{r4, pc}
	...

000b83fc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b83fc:	b510      	push	{r4, lr}
   b83fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8402:	4604      	mov	r4, r0
   b8404:	4608      	mov	r0, r1
   b8406:	4611      	mov	r1, r2
   b8408:	2200      	movs	r2, #0
   b840a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b840e:	4b04      	ldr	r3, [pc, #16]	; (b8420 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8410:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8412:	2301      	movs	r3, #1
  _serial = serial;
   b8414:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8416:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8418:	f7fd fab8 	bl	b598c <hal_usart_init_ex>
}
   b841c:	4620      	mov	r0, r4
   b841e:	bd10      	pop	{r4, pc}
   b8420:	000b9128 	.word	0x000b9128

000b8424 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b8424:	7c00      	ldrb	r0, [r0, #16]
   b8426:	2300      	movs	r3, #0
   b8428:	f7fd baa8 	b.w	b597c <hal_usart_begin_config>

000b842c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b842c:	2200      	movs	r2, #0
   b842e:	f7ff bff9 	b.w	b8424 <_ZN11USARTSerial5beginEmm>

000b8432 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b8432:	7c00      	ldrb	r0, [r0, #16]
   b8434:	f7fd ba62 	b.w	b58fc <hal_usart_end>

000b8438 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8438:	7441      	strb	r1, [r0, #17]
}
   b843a:	4770      	bx	lr

000b843c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b843c:	4770      	bx	lr

000b843e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b843e:	4770      	bx	lr

000b8440 <_ZN9USBSerial4readEv>:
{
   b8440:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8442:	2100      	movs	r1, #0
   b8444:	7c00      	ldrb	r0, [r0, #16]
   b8446:	f7fd fad1 	bl	b59ec <HAL_USB_USART_Receive_Data>
}
   b844a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b844e:	bd08      	pop	{r3, pc}

000b8450 <_ZN9USBSerial4peekEv>:
{
   b8450:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8452:	2101      	movs	r1, #1
   b8454:	7c00      	ldrb	r0, [r0, #16]
   b8456:	f7fd fac9 	bl	b59ec <HAL_USB_USART_Receive_Data>
}
   b845a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b845e:	bd08      	pop	{r3, pc}

000b8460 <_ZN9USBSerial17availableForWriteEv>:
{
   b8460:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8462:	7c00      	ldrb	r0, [r0, #16]
   b8464:	f7fd faba 	bl	b59dc <HAL_USB_USART_Available_Data_For_Write>
}
   b8468:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b846c:	bd08      	pop	{r3, pc}

000b846e <_ZN9USBSerial9availableEv>:
{
   b846e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8470:	7c00      	ldrb	r0, [r0, #16]
   b8472:	f7fd faab 	bl	b59cc <HAL_USB_USART_Available_Data>
}
   b8476:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b847a:	bd08      	pop	{r3, pc}

000b847c <_ZN9USBSerial5writeEh>:
{
   b847c:	b513      	push	{r0, r1, r4, lr}
   b847e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8480:	7c00      	ldrb	r0, [r0, #16]
{
   b8482:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8484:	f7fd faaa 	bl	b59dc <HAL_USB_USART_Available_Data_For_Write>
   b8488:	2800      	cmp	r0, #0
   b848a:	9901      	ldr	r1, [sp, #4]
   b848c:	dc01      	bgt.n	b8492 <_ZN9USBSerial5writeEh+0x16>
   b848e:	7c60      	ldrb	r0, [r4, #17]
   b8490:	b120      	cbz	r0, b849c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8492:	7c20      	ldrb	r0, [r4, #16]
   b8494:	f7fd fab2 	bl	b59fc <HAL_USB_USART_Send_Data>
   b8498:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b849c:	b002      	add	sp, #8
   b849e:	bd10      	pop	{r4, pc}

000b84a0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b84a0:	7c00      	ldrb	r0, [r0, #16]
   b84a2:	f7fd bab3 	b.w	b5a0c <HAL_USB_USART_Flush_Data>

000b84a6 <_ZN9USBSerialD0Ev>:
   b84a6:	b510      	push	{r4, lr}
   b84a8:	2114      	movs	r1, #20
   b84aa:	4604      	mov	r4, r0
   b84ac:	f7fc fc5b 	bl	b4d66 <_ZdlPvj>
   b84b0:	4620      	mov	r0, r4
   b84b2:	bd10      	pop	{r4, pc}

000b84b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b84b4:	b510      	push	{r4, lr}
   b84b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b84ba:	4604      	mov	r4, r0
   b84bc:	4608      	mov	r0, r1
   b84be:	2100      	movs	r1, #0
   b84c0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b84c4:	4b04      	ldr	r3, [pc, #16]	; (b84d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b84c6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b84c8:	2301      	movs	r3, #1
  _serial = serial;
   b84ca:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b84cc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b84ce:	4611      	mov	r1, r2
   b84d0:	f7fd fa64 	bl	b599c <HAL_USB_USART_Init>
}
   b84d4:	4620      	mov	r0, r4
   b84d6:	bd10      	pop	{r4, pc}
   b84d8:	000b9158 	.word	0x000b9158

000b84dc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b84dc:	7c00      	ldrb	r0, [r0, #16]
   b84de:	2200      	movs	r2, #0
   b84e0:	f7fd ba64 	b.w	b59ac <HAL_USB_USART_Begin>

000b84e4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b84e4:	7c00      	ldrb	r0, [r0, #16]
   b84e6:	f7fd ba69 	b.w	b59bc <HAL_USB_USART_End>

000b84ea <_Z19acquireSerialBufferv>:
{
   b84ea:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b84ec:	2214      	movs	r2, #20
{
   b84ee:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b84f0:	2100      	movs	r1, #0
   b84f2:	f000 fa75 	bl	b89e0 <memset>
}
   b84f6:	4620      	mov	r0, r4
   b84f8:	bd10      	pop	{r4, pc}
	...

000b84fc <_Z16_fetch_usbserialv>:
{
   b84fc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b84fe:	4c0f      	ldr	r4, [pc, #60]	; (b853c <_Z16_fetch_usbserialv+0x40>)
{
   b8500:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8502:	a803      	add	r0, sp, #12
   b8504:	f7ff fff1 	bl	b84ea <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8508:	7821      	ldrb	r1, [r4, #0]
   b850a:	f3bf 8f5b 	dmb	ish
   b850e:	f011 0101 	ands.w	r1, r1, #1
   b8512:	d10f      	bne.n	b8534 <_Z16_fetch_usbserialv+0x38>
   b8514:	4620      	mov	r0, r4
   b8516:	9101      	str	r1, [sp, #4]
   b8518:	f7fc fc34 	bl	b4d84 <__cxa_guard_acquire>
   b851c:	9901      	ldr	r1, [sp, #4]
   b851e:	b148      	cbz	r0, b8534 <_Z16_fetch_usbserialv+0x38>
   b8520:	aa03      	add	r2, sp, #12
   b8522:	4807      	ldr	r0, [pc, #28]	; (b8540 <_Z16_fetch_usbserialv+0x44>)
   b8524:	f7ff ffc6 	bl	b84b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8528:	4620      	mov	r0, r4
   b852a:	f7fc fc30 	bl	b4d8e <__cxa_guard_release>
   b852e:	4805      	ldr	r0, [pc, #20]	; (b8544 <_Z16_fetch_usbserialv+0x48>)
   b8530:	f000 fa1f 	bl	b8972 <atexit>
	return _usbserial;
}
   b8534:	4802      	ldr	r0, [pc, #8]	; (b8540 <_Z16_fetch_usbserialv+0x44>)
   b8536:	b008      	add	sp, #32
   b8538:	bd10      	pop	{r4, pc}
   b853a:	bf00      	nop
   b853c:	2003e6e4 	.word	0x2003e6e4
   b8540:	2003e6e8 	.word	0x2003e6e8
   b8544:	000b843d 	.word	0x000b843d

000b8548 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b8548:	b510      	push	{r4, lr}
   b854a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b854c:	f7fc fbc4 	bl	b4cd8 <strlen>
   b8550:	3801      	subs	r0, #1
   b8552:	1823      	adds	r3, r4, r0
   b8554:	4620      	mov	r0, r4
	while(i<j){
   b8556:	4283      	cmp	r3, r0
   b8558:	d906      	bls.n	b8568 <_Z11str_reversePc+0x20>
		c = *i;
   b855a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b855c:	7819      	ldrb	r1, [r3, #0]
   b855e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b8562:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b8566:	e7f6      	b.n	b8556 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b8568:	bd10      	pop	{r4, pc}

000b856a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b856a:	b570      	push	{r4, r5, r6, lr}
   b856c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b856e:	1e91      	subs	r1, r2, #2
   b8570:	2922      	cmp	r1, #34	; 0x22
   b8572:	d81d      	bhi.n	b85b0 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b8574:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b8576:	b930      	cbnz	r0, b8586 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b8578:	4423      	add	r3, r4
            *ptr++ = '0';
   b857a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b857c:	429d      	cmp	r5, r3
   b857e:	d210      	bcs.n	b85a2 <ultoa+0x38>
            *ptr++ = '0';
   b8580:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b8584:	e7fa      	b.n	b857c <ultoa+0x12>
            result.quot = a/radix;
   b8586:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b858a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b858e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b8590:	2809      	cmp	r0, #9
                *ptr += '0';
   b8592:	bf94      	ite	ls
   b8594:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b8596:	3157      	addhi	r1, #87	; 0x57
   b8598:	b2c9      	uxtb	r1, r1
   b859a:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b859e:	4630      	mov	r0, r6
	while(a){
   b85a0:	e7e9      	b.n	b8576 <ultoa+0xc>

	*ptr = '\0';
   b85a2:	2300      	movs	r3, #0
	str_reverse(buffer);
   b85a4:	4620      	mov	r0, r4
	*ptr = '\0';
   b85a6:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b85a8:	f7ff ffce 	bl	b8548 <_Z11str_reversePc>
	return buffer;
   b85ac:	4620      	mov	r0, r4
}
   b85ae:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b85b0:	2000      	movs	r0, #0
   b85b2:	e7fc      	b.n	b85ae <ultoa+0x44>

000b85b4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b85b4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b85b6:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b85b8:	460c      	mov	r4, r1
   b85ba:	4615      	mov	r5, r2
	if(a<0){
   b85bc:	da0e      	bge.n	b85dc <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b85be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b85c2:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b85c6:	bf14      	ite	ne
   b85c8:	4258      	negne	r0, r3
   b85ca:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b85cc:	2301      	movs	r3, #1
		*buffer = '-';
   b85ce:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b85d0:	462a      	mov	r2, r5
   b85d2:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b85d4:	f7ff ffc9 	bl	b856a <ultoa>
	}
	return buffer;
}
   b85d8:	4620      	mov	r0, r4
   b85da:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b85dc:	2301      	movs	r3, #1
   b85de:	e7f9      	b.n	b85d4 <itoa+0x20>

000b85e0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b85e0:	4b01      	ldr	r3, [pc, #4]	; (b85e8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b85e2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b85e4:	4770      	bx	lr
   b85e6:	bf00      	nop
   b85e8:	2003e588 	.word	0x2003e588

000b85ec <serialEventRun>:
{
   b85ec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b85ee:	4b0b      	ldr	r3, [pc, #44]	; (b861c <serialEventRun+0x30>)
   b85f0:	b143      	cbz	r3, b8604 <serialEventRun+0x18>
   b85f2:	f7ff ff83 	bl	b84fc <_Z16_fetch_usbserialv>
   b85f6:	6803      	ldr	r3, [r0, #0]
   b85f8:	691b      	ldr	r3, [r3, #16]
   b85fa:	4798      	blx	r3
   b85fc:	2800      	cmp	r0, #0
   b85fe:	dd01      	ble.n	b8604 <serialEventRun+0x18>
        serialEvent();
   b8600:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8604:	4b06      	ldr	r3, [pc, #24]	; (b8620 <serialEventRun+0x34>)
   b8606:	b143      	cbz	r3, b861a <serialEventRun+0x2e>
   b8608:	f000 f988 	bl	b891c <_Z22__fetch_global_Serial1v>
   b860c:	6803      	ldr	r3, [r0, #0]
   b860e:	691b      	ldr	r3, [r3, #16]
   b8610:	4798      	blx	r3
   b8612:	2800      	cmp	r0, #0
   b8614:	dd01      	ble.n	b861a <serialEventRun+0x2e>
        serialEvent1();
   b8616:	f3af 8000 	nop.w
}
   b861a:	bd08      	pop	{r3, pc}
	...

000b8624 <_post_loop>:
{
   b8624:	b508      	push	{r3, lr}
	serialEventRun();
   b8626:	f7ff ffe1 	bl	b85ec <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b862a:	f7fd f8bf 	bl	b57ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b862e:	4b01      	ldr	r3, [pc, #4]	; (b8634 <_post_loop+0x10>)
   b8630:	6018      	str	r0, [r3, #0]
}
   b8632:	bd08      	pop	{r3, pc}
   b8634:	2003e710 	.word	0x2003e710

000b8638 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8638:	4805      	ldr	r0, [pc, #20]	; (b8650 <_Z33system_initialize_user_backup_ramv+0x18>)
   b863a:	4a06      	ldr	r2, [pc, #24]	; (b8654 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b863c:	4906      	ldr	r1, [pc, #24]	; (b8658 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b863e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8640:	1a12      	subs	r2, r2, r0
   b8642:	f000 f9a5 	bl	b8990 <memcpy>
    __backup_sram_signature = signature;
   b8646:	4b05      	ldr	r3, [pc, #20]	; (b865c <_Z33system_initialize_user_backup_ramv+0x24>)
   b8648:	4a05      	ldr	r2, [pc, #20]	; (b8660 <_Z33system_initialize_user_backup_ramv+0x28>)
   b864a:	601a      	str	r2, [r3, #0]
}
   b864c:	bd08      	pop	{r3, pc}
   b864e:	bf00      	nop
   b8650:	2003f400 	.word	0x2003f400
   b8654:	2003f404 	.word	0x2003f404
   b8658:	000b93c0 	.word	0x000b93c0
   b865c:	2003f400 	.word	0x2003f400
   b8660:	9a271c1e 	.word	0x9a271c1e

000b8664 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8664:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8666:	2300      	movs	r3, #0
   b8668:	9300      	str	r3, [sp, #0]
   b866a:	461a      	mov	r2, r3
   b866c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8670:	f7fd fa30 	bl	b5ad4 <system_ctrl_set_result>
}
   b8674:	b003      	add	sp, #12
   b8676:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b867c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b867c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b867e:	8843      	ldrh	r3, [r0, #2]
   b8680:	2b0a      	cmp	r3, #10
   b8682:	d008      	beq.n	b8696 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8684:	2b50      	cmp	r3, #80	; 0x50
   b8686:	d10b      	bne.n	b86a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8688:	4b09      	ldr	r3, [pc, #36]	; (b86b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b868a:	681b      	ldr	r3, [r3, #0]
   b868c:	b14b      	cbz	r3, b86a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b868e:	b003      	add	sp, #12
   b8690:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8694:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8696:	f7ff ffe5 	bl	b8664 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b869a:	b003      	add	sp, #12
   b869c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b86a0:	2300      	movs	r3, #0
   b86a2:	9300      	str	r3, [sp, #0]
   b86a4:	461a      	mov	r2, r3
   b86a6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b86aa:	f7fd fa13 	bl	b5ad4 <system_ctrl_set_result>
}
   b86ae:	e7f4      	b.n	b869a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b86b0:	2003e700 	.word	0x2003e700

000b86b4 <module_user_init_hook>:
{
   b86b4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b86b6:	4812      	ldr	r0, [pc, #72]	; (b8700 <module_user_init_hook+0x4c>)
   b86b8:	2100      	movs	r1, #0
   b86ba:	f7fd faf5 	bl	b5ca8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b86be:	4b11      	ldr	r3, [pc, #68]	; (b8704 <module_user_init_hook+0x50>)
   b86c0:	681a      	ldr	r2, [r3, #0]
   b86c2:	4b11      	ldr	r3, [pc, #68]	; (b8708 <module_user_init_hook+0x54>)
   b86c4:	429a      	cmp	r2, r3
   b86c6:	4b11      	ldr	r3, [pc, #68]	; (b870c <module_user_init_hook+0x58>)
   b86c8:	bf0c      	ite	eq
   b86ca:	2201      	moveq	r2, #1
   b86cc:	2200      	movne	r2, #0
   b86ce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b86d0:	d001      	beq.n	b86d6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b86d2:	f7ff ffb1 	bl	b8638 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b86d6:	f7fd f859 	bl	b578c <HAL_RNG_GetRandomNumber>
   b86da:	4604      	mov	r4, r0
    srand(seed);
   b86dc:	f000 f988 	bl	b89f0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b86e0:	4b0b      	ldr	r3, [pc, #44]	; (b8710 <module_user_init_hook+0x5c>)
   b86e2:	b113      	cbz	r3, b86ea <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b86e4:	4620      	mov	r0, r4
   b86e6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b86ea:	2100      	movs	r1, #0
   b86ec:	4808      	ldr	r0, [pc, #32]	; (b8710 <module_user_init_hook+0x5c>)
   b86ee:	f7fd fa2b 	bl	b5b48 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b86f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b86f6:	4807      	ldr	r0, [pc, #28]	; (b8714 <module_user_init_hook+0x60>)
   b86f8:	2100      	movs	r1, #0
   b86fa:	f7fd b9e1 	b.w	b5ac0 <system_ctrl_set_app_request_handler>
   b86fe:	bf00      	nop
   b8700:	000b85e1 	.word	0x000b85e1
   b8704:	2003f400 	.word	0x2003f400
   b8708:	9a271c1e 	.word	0x9a271c1e
   b870c:	2003e6fc 	.word	0x2003e6fc
   b8710:	00000000 	.word	0x00000000
   b8714:	000b867d 	.word	0x000b867d

000b8718 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8718:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b871a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b871c:	d902      	bls.n	b8724 <pinAvailable+0xc>
    return false;
   b871e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8720:	b002      	add	sp, #8
   b8722:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8724:	f1a0 030b 	sub.w	r3, r0, #11
   b8728:	2b02      	cmp	r3, #2
   b872a:	d81a      	bhi.n	b8762 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b872c:	4c17      	ldr	r4, [pc, #92]	; (b878c <pinAvailable+0x74>)
   b872e:	7821      	ldrb	r1, [r4, #0]
   b8730:	f3bf 8f5b 	dmb	ish
   b8734:	f011 0101 	ands.w	r1, r1, #1
   b8738:	d10b      	bne.n	b8752 <pinAvailable+0x3a>
   b873a:	4620      	mov	r0, r4
   b873c:	9101      	str	r1, [sp, #4]
   b873e:	f7fc fb21 	bl	b4d84 <__cxa_guard_acquire>
   b8742:	9901      	ldr	r1, [sp, #4]
   b8744:	b128      	cbz	r0, b8752 <pinAvailable+0x3a>
   b8746:	4812      	ldr	r0, [pc, #72]	; (b8790 <pinAvailable+0x78>)
   b8748:	f7ff fc24 	bl	b7f94 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b874c:	4620      	mov	r0, r4
   b874e:	f7fc fb1e 	bl	b4d8e <__cxa_guard_release>
   b8752:	4b0f      	ldr	r3, [pc, #60]	; (b8790 <pinAvailable+0x78>)
   b8754:	7818      	ldrb	r0, [r3, #0]
   b8756:	f7fd f8c9 	bl	b58ec <hal_spi_is_enabled>
   b875a:	2800      	cmp	r0, #0
   b875c:	d1df      	bne.n	b871e <pinAvailable+0x6>
  return true; // 'pin' is available
   b875e:	2001      	movs	r0, #1
   b8760:	e7de      	b.n	b8720 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b8762:	2801      	cmp	r0, #1
   b8764:	d809      	bhi.n	b877a <pinAvailable+0x62>
   b8766:	f000 f875 	bl	b8854 <_Z19__fetch_global_Wirev>
   b876a:	2100      	movs	r1, #0
   b876c:	7c00      	ldrb	r0, [r0, #16]
   b876e:	f7fd f875 	bl	b585c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b8772:	f080 0001 	eor.w	r0, r0, #1
   b8776:	b2c0      	uxtb	r0, r0
   b8778:	e7d2      	b.n	b8720 <pinAvailable+0x8>
   b877a:	3809      	subs	r0, #9
   b877c:	2801      	cmp	r0, #1
   b877e:	d8ee      	bhi.n	b875e <pinAvailable+0x46>
   b8780:	f000 f8cc 	bl	b891c <_Z22__fetch_global_Serial1v>
   b8784:	7c00      	ldrb	r0, [r0, #16]
   b8786:	f7fd f8e9 	bl	b595c <hal_usart_is_enabled>
   b878a:	e7f2      	b.n	b8772 <pinAvailable+0x5a>
   b878c:	2003e704 	.word	0x2003e704
   b8790:	2003e708 	.word	0x2003e708

000b8794 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8794:	2823      	cmp	r0, #35	; 0x23
{
   b8796:	b538      	push	{r3, r4, r5, lr}
   b8798:	4604      	mov	r4, r0
   b879a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b879c:	d80a      	bhi.n	b87b4 <pinMode+0x20>
   b879e:	29ff      	cmp	r1, #255	; 0xff
   b87a0:	d008      	beq.n	b87b4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b87a2:	f7ff ffb9 	bl	b8718 <pinAvailable>
   b87a6:	b128      	cbz	r0, b87b4 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b87a8:	4629      	mov	r1, r5
   b87aa:	4620      	mov	r0, r4
}
   b87ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b87b0:	f7fd b804 	b.w	b57bc <hal_gpio_mode>
}
   b87b4:	bd38      	pop	{r3, r4, r5, pc}

000b87b6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b87b6:	b538      	push	{r3, r4, r5, lr}
   b87b8:	4604      	mov	r4, r0
   b87ba:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b87bc:	f7fd f806 	bl	b57cc <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b87c0:	28ff      	cmp	r0, #255	; 0xff
   b87c2:	d010      	beq.n	b87e6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b87c4:	2806      	cmp	r0, #6
   b87c6:	d804      	bhi.n	b87d2 <digitalWrite+0x1c>
   b87c8:	234d      	movs	r3, #77	; 0x4d
   b87ca:	fa23 f000 	lsr.w	r0, r3, r0
   b87ce:	07c3      	lsls	r3, r0, #31
   b87d0:	d409      	bmi.n	b87e6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b87d2:	4620      	mov	r0, r4
   b87d4:	f7ff ffa0 	bl	b8718 <pinAvailable>
   b87d8:	b128      	cbz	r0, b87e6 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b87da:	4629      	mov	r1, r5
   b87dc:	4620      	mov	r0, r4
}
   b87de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b87e2:	f7fc bffb 	b.w	b57dc <hal_gpio_write>
}
   b87e6:	bd38      	pop	{r3, r4, r5, pc}

000b87e8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b87e8:	4770      	bx	lr

000b87ea <__tcf_1>:
   b87ea:	4770      	bx	lr

000b87ec <_Z17acquireWireBufferv>:
{
   b87ec:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b87ee:	4b0a      	ldr	r3, [pc, #40]	; (b8818 <_Z17acquireWireBufferv+0x2c>)
   b87f0:	6003      	str	r3, [r0, #0]
   b87f2:	2301      	movs	r3, #1
{
   b87f4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b87f6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b87f8:	4908      	ldr	r1, [pc, #32]	; (b881c <_Z17acquireWireBufferv+0x30>)
   b87fa:	2020      	movs	r0, #32
   b87fc:	f000 f8b4 	bl	b8968 <_ZnajRKSt9nothrow_t>
	};
   b8800:	2520      	movs	r5, #32
   b8802:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8804:	4905      	ldr	r1, [pc, #20]	; (b881c <_Z17acquireWireBufferv+0x30>)
	};
   b8806:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8808:	4628      	mov	r0, r5
   b880a:	f000 f8ad 	bl	b8968 <_ZnajRKSt9nothrow_t>
	};
   b880e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b8812:	4620      	mov	r0, r4
   b8814:	bd38      	pop	{r3, r4, r5, pc}
   b8816:	bf00      	nop
   b8818:	00010018 	.word	0x00010018
   b881c:	000b9180 	.word	0x000b9180

000b8820 <_Z18acquireWire1Bufferv>:
{
   b8820:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8822:	4b0a      	ldr	r3, [pc, #40]	; (b884c <_Z18acquireWire1Bufferv+0x2c>)
   b8824:	6003      	str	r3, [r0, #0]
   b8826:	2301      	movs	r3, #1
{
   b8828:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b882a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b882c:	4908      	ldr	r1, [pc, #32]	; (b8850 <_Z18acquireWire1Bufferv+0x30>)
   b882e:	2020      	movs	r0, #32
   b8830:	f000 f89a 	bl	b8968 <_ZnajRKSt9nothrow_t>
	};
   b8834:	2520      	movs	r5, #32
   b8836:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8838:	4905      	ldr	r1, [pc, #20]	; (b8850 <_Z18acquireWire1Bufferv+0x30>)
	};
   b883a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b883c:	4628      	mov	r0, r5
   b883e:	f000 f893 	bl	b8968 <_ZnajRKSt9nothrow_t>
	};
   b8842:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b8846:	4620      	mov	r0, r4
   b8848:	bd38      	pop	{r3, r4, r5, pc}
   b884a:	bf00      	nop
   b884c:	00010018 	.word	0x00010018
   b8850:	000b9180 	.word	0x000b9180

000b8854 <_Z19__fetch_global_Wirev>:
{
   b8854:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8856:	4d0e      	ldr	r5, [pc, #56]	; (b8890 <_Z19__fetch_global_Wirev+0x3c>)
   b8858:	7829      	ldrb	r1, [r5, #0]
   b885a:	f3bf 8f5b 	dmb	ish
   b885e:	f011 0401 	ands.w	r4, r1, #1
{
   b8862:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8864:	d111      	bne.n	b888a <_Z19__fetch_global_Wirev+0x36>
   b8866:	4628      	mov	r0, r5
   b8868:	f7fc fa8c 	bl	b4d84 <__cxa_guard_acquire>
   b886c:	b168      	cbz	r0, b888a <_Z19__fetch_global_Wirev+0x36>
   b886e:	4668      	mov	r0, sp
   b8870:	f7ff ffbc 	bl	b87ec <_Z17acquireWireBufferv>
   b8874:	466a      	mov	r2, sp
   b8876:	4621      	mov	r1, r4
   b8878:	4806      	ldr	r0, [pc, #24]	; (b8894 <_Z19__fetch_global_Wirev+0x40>)
   b887a:	f7fd ff43 	bl	b6704 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b887e:	4628      	mov	r0, r5
   b8880:	f7fc fa85 	bl	b4d8e <__cxa_guard_release>
   b8884:	4804      	ldr	r0, [pc, #16]	; (b8898 <_Z19__fetch_global_Wirev+0x44>)
   b8886:	f000 f874 	bl	b8972 <atexit>
	return wire;
}
   b888a:	4802      	ldr	r0, [pc, #8]	; (b8894 <_Z19__fetch_global_Wirev+0x40>)
   b888c:	b007      	add	sp, #28
   b888e:	bd30      	pop	{r4, r5, pc}
   b8890:	2003e714 	.word	0x2003e714
   b8894:	2003e71c 	.word	0x2003e71c
   b8898:	000b87e9 	.word	0x000b87e9

000b889c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b889c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b889e:	4c0e      	ldr	r4, [pc, #56]	; (b88d8 <_Z20__fetch_global_Wire1v+0x3c>)
   b88a0:	7823      	ldrb	r3, [r4, #0]
   b88a2:	f3bf 8f5b 	dmb	ish
   b88a6:	07db      	lsls	r3, r3, #31
{
   b88a8:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b88aa:	d411      	bmi.n	b88d0 <_Z20__fetch_global_Wire1v+0x34>
   b88ac:	4620      	mov	r0, r4
   b88ae:	f7fc fa69 	bl	b4d84 <__cxa_guard_acquire>
   b88b2:	b168      	cbz	r0, b88d0 <_Z20__fetch_global_Wire1v+0x34>
   b88b4:	4668      	mov	r0, sp
   b88b6:	f7ff ffb3 	bl	b8820 <_Z18acquireWire1Bufferv>
   b88ba:	466a      	mov	r2, sp
   b88bc:	2101      	movs	r1, #1
   b88be:	4807      	ldr	r0, [pc, #28]	; (b88dc <_Z20__fetch_global_Wire1v+0x40>)
   b88c0:	f7fd ff20 	bl	b6704 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b88c4:	4620      	mov	r0, r4
   b88c6:	f7fc fa62 	bl	b4d8e <__cxa_guard_release>
   b88ca:	4805      	ldr	r0, [pc, #20]	; (b88e0 <_Z20__fetch_global_Wire1v+0x44>)
   b88cc:	f000 f851 	bl	b8972 <atexit>
	return wire;
}
   b88d0:	4802      	ldr	r0, [pc, #8]	; (b88dc <_Z20__fetch_global_Wire1v+0x40>)
   b88d2:	b006      	add	sp, #24
   b88d4:	bd10      	pop	{r4, pc}
   b88d6:	bf00      	nop
   b88d8:	2003e718 	.word	0x2003e718
   b88dc:	2003e730 	.word	0x2003e730
   b88e0:	000b87eb 	.word	0x000b87eb

000b88e4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b88e4:	4770      	bx	lr
	...

000b88e8 <_Z20acquireSerial1Bufferv>:
{
   b88e8:	b538      	push	{r3, r4, r5, lr}
   b88ea:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b88ec:	2514      	movs	r5, #20
   b88ee:	462a      	mov	r2, r5
   b88f0:	2100      	movs	r1, #0
   b88f2:	f000 f875 	bl	b89e0 <memset>
   b88f6:	8025      	strh	r5, [r4, #0]
   b88f8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b88fa:	4907      	ldr	r1, [pc, #28]	; (b8918 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b88fc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b88fe:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8900:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8902:	f000 f831 	bl	b8968 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8906:	4904      	ldr	r1, [pc, #16]	; (b8918 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8908:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b890a:	4628      	mov	r0, r5
   b890c:	f000 f82c 	bl	b8968 <_ZnajRKSt9nothrow_t>
    };
   b8910:	60e0      	str	r0, [r4, #12]
}
   b8912:	4620      	mov	r0, r4
   b8914:	bd38      	pop	{r3, r4, r5, pc}
   b8916:	bf00      	nop
   b8918:	000b9180 	.word	0x000b9180

000b891c <_Z22__fetch_global_Serial1v>:
{
   b891c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b891e:	4d0e      	ldr	r5, [pc, #56]	; (b8958 <_Z22__fetch_global_Serial1v+0x3c>)
   b8920:	7829      	ldrb	r1, [r5, #0]
   b8922:	f3bf 8f5b 	dmb	ish
   b8926:	f011 0401 	ands.w	r4, r1, #1
{
   b892a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b892c:	d111      	bne.n	b8952 <_Z22__fetch_global_Serial1v+0x36>
   b892e:	4628      	mov	r0, r5
   b8930:	f7fc fa28 	bl	b4d84 <__cxa_guard_acquire>
   b8934:	b168      	cbz	r0, b8952 <_Z22__fetch_global_Serial1v+0x36>
   b8936:	a801      	add	r0, sp, #4
   b8938:	f7ff ffd6 	bl	b88e8 <_Z20acquireSerial1Bufferv>
   b893c:	aa01      	add	r2, sp, #4
   b893e:	4621      	mov	r1, r4
   b8940:	4806      	ldr	r0, [pc, #24]	; (b895c <_Z22__fetch_global_Serial1v+0x40>)
   b8942:	f7ff fd5b 	bl	b83fc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8946:	4628      	mov	r0, r5
   b8948:	f7fc fa21 	bl	b4d8e <__cxa_guard_release>
   b894c:	4804      	ldr	r0, [pc, #16]	; (b8960 <_Z22__fetch_global_Serial1v+0x44>)
   b894e:	f000 f810 	bl	b8972 <atexit>
    return serial1;
}
   b8952:	4802      	ldr	r0, [pc, #8]	; (b895c <_Z22__fetch_global_Serial1v+0x40>)
   b8954:	b007      	add	sp, #28
   b8956:	bd30      	pop	{r4, r5, pc}
   b8958:	2003e744 	.word	0x2003e744
   b895c:	2003e748 	.word	0x2003e748
   b8960:	000b88e5 	.word	0x000b88e5

000b8964 <_ZnwjRKSt9nothrow_t>:
   b8964:	f7fc b9fb 	b.w	b4d5e <_Znwj>

000b8968 <_ZnajRKSt9nothrow_t>:
   b8968:	f7fc b9fb 	b.w	b4d62 <_Znaj>

000b896c <_ZSt25__throw_bad_function_callv>:
   b896c:	b508      	push	{r3, lr}
   b896e:	f7fd f97b 	bl	b5c68 <abort>

000b8972 <atexit>:
   b8972:	2300      	movs	r3, #0
   b8974:	4601      	mov	r1, r0
   b8976:	461a      	mov	r2, r3
   b8978:	4618      	mov	r0, r3
   b897a:	f000 b959 	b.w	b8c30 <__register_exitproc>
	...

000b8980 <isprint>:
   b8980:	4b02      	ldr	r3, [pc, #8]	; (b898c <isprint+0xc>)
   b8982:	4418      	add	r0, r3
   b8984:	7840      	ldrb	r0, [r0, #1]
   b8986:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b898a:	4770      	bx	lr
   b898c:	000b91f1 	.word	0x000b91f1

000b8990 <memcpy>:
   b8990:	440a      	add	r2, r1
   b8992:	4291      	cmp	r1, r2
   b8994:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8998:	d100      	bne.n	b899c <memcpy+0xc>
   b899a:	4770      	bx	lr
   b899c:	b510      	push	{r4, lr}
   b899e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b89a2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b89a6:	4291      	cmp	r1, r2
   b89a8:	d1f9      	bne.n	b899e <memcpy+0xe>
   b89aa:	bd10      	pop	{r4, pc}

000b89ac <memmove>:
   b89ac:	4288      	cmp	r0, r1
   b89ae:	b510      	push	{r4, lr}
   b89b0:	eb01 0402 	add.w	r4, r1, r2
   b89b4:	d902      	bls.n	b89bc <memmove+0x10>
   b89b6:	4284      	cmp	r4, r0
   b89b8:	4623      	mov	r3, r4
   b89ba:	d807      	bhi.n	b89cc <memmove+0x20>
   b89bc:	1e43      	subs	r3, r0, #1
   b89be:	42a1      	cmp	r1, r4
   b89c0:	d008      	beq.n	b89d4 <memmove+0x28>
   b89c2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b89c6:	f803 2f01 	strb.w	r2, [r3, #1]!
   b89ca:	e7f8      	b.n	b89be <memmove+0x12>
   b89cc:	4402      	add	r2, r0
   b89ce:	4601      	mov	r1, r0
   b89d0:	428a      	cmp	r2, r1
   b89d2:	d100      	bne.n	b89d6 <memmove+0x2a>
   b89d4:	bd10      	pop	{r4, pc}
   b89d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b89da:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b89de:	e7f7      	b.n	b89d0 <memmove+0x24>

000b89e0 <memset>:
   b89e0:	4402      	add	r2, r0
   b89e2:	4603      	mov	r3, r0
   b89e4:	4293      	cmp	r3, r2
   b89e6:	d100      	bne.n	b89ea <memset+0xa>
   b89e8:	4770      	bx	lr
   b89ea:	f803 1b01 	strb.w	r1, [r3], #1
   b89ee:	e7f9      	b.n	b89e4 <memset+0x4>

000b89f0 <srand>:
   b89f0:	b538      	push	{r3, r4, r5, lr}
   b89f2:	4b10      	ldr	r3, [pc, #64]	; (b8a34 <srand+0x44>)
   b89f4:	681d      	ldr	r5, [r3, #0]
   b89f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b89f8:	4604      	mov	r4, r0
   b89fa:	b9b3      	cbnz	r3, b8a2a <srand+0x3a>
   b89fc:	2018      	movs	r0, #24
   b89fe:	f7fd f913 	bl	b5c28 <malloc>
   b8a02:	4602      	mov	r2, r0
   b8a04:	63a8      	str	r0, [r5, #56]	; 0x38
   b8a06:	b920      	cbnz	r0, b8a12 <srand+0x22>
   b8a08:	4b0b      	ldr	r3, [pc, #44]	; (b8a38 <srand+0x48>)
   b8a0a:	480c      	ldr	r0, [pc, #48]	; (b8a3c <srand+0x4c>)
   b8a0c:	2142      	movs	r1, #66	; 0x42
   b8a0e:	f7fd f943 	bl	b5c98 <__assert_func>
   b8a12:	490b      	ldr	r1, [pc, #44]	; (b8a40 <srand+0x50>)
   b8a14:	4b0b      	ldr	r3, [pc, #44]	; (b8a44 <srand+0x54>)
   b8a16:	e9c0 1300 	strd	r1, r3, [r0]
   b8a1a:	4b0b      	ldr	r3, [pc, #44]	; (b8a48 <srand+0x58>)
   b8a1c:	6083      	str	r3, [r0, #8]
   b8a1e:	230b      	movs	r3, #11
   b8a20:	8183      	strh	r3, [r0, #12]
   b8a22:	2100      	movs	r1, #0
   b8a24:	2001      	movs	r0, #1
   b8a26:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8a2a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8a2c:	2200      	movs	r2, #0
   b8a2e:	611c      	str	r4, [r3, #16]
   b8a30:	615a      	str	r2, [r3, #20]
   b8a32:	bd38      	pop	{r3, r4, r5, pc}
   b8a34:	2003e588 	.word	0x2003e588
   b8a38:	000b9181 	.word	0x000b9181
   b8a3c:	000b9198 	.word	0x000b9198
   b8a40:	abcd330e 	.word	0xabcd330e
   b8a44:	e66d1234 	.word	0xe66d1234
   b8a48:	0005deec 	.word	0x0005deec

000b8a4c <strchr>:
   b8a4c:	b2c9      	uxtb	r1, r1
   b8a4e:	4603      	mov	r3, r0
   b8a50:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8a54:	b11a      	cbz	r2, b8a5e <strchr+0x12>
   b8a56:	428a      	cmp	r2, r1
   b8a58:	d1f9      	bne.n	b8a4e <strchr+0x2>
   b8a5a:	4618      	mov	r0, r3
   b8a5c:	4770      	bx	lr
   b8a5e:	2900      	cmp	r1, #0
   b8a60:	bf18      	it	ne
   b8a62:	2300      	movne	r3, #0
   b8a64:	e7f9      	b.n	b8a5a <strchr+0xe>

000b8a66 <strchrnul>:
   b8a66:	b510      	push	{r4, lr}
   b8a68:	4604      	mov	r4, r0
   b8a6a:	f7ff ffef 	bl	b8a4c <strchr>
   b8a6e:	b918      	cbnz	r0, b8a78 <strchrnul+0x12>
   b8a70:	4620      	mov	r0, r4
   b8a72:	f7fc f931 	bl	b4cd8 <strlen>
   b8a76:	4420      	add	r0, r4
   b8a78:	bd10      	pop	{r4, pc}

000b8a7a <strcpy>:
   b8a7a:	4603      	mov	r3, r0
   b8a7c:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8a80:	f803 2b01 	strb.w	r2, [r3], #1
   b8a84:	2a00      	cmp	r2, #0
   b8a86:	d1f9      	bne.n	b8a7c <strcpy+0x2>
   b8a88:	4770      	bx	lr
	...

000b8a8c <strdup>:
   b8a8c:	4b02      	ldr	r3, [pc, #8]	; (b8a98 <strdup+0xc>)
   b8a8e:	4601      	mov	r1, r0
   b8a90:	6818      	ldr	r0, [r3, #0]
   b8a92:	f000 b803 	b.w	b8a9c <_strdup_r>
   b8a96:	bf00      	nop
   b8a98:	2003e588 	.word	0x2003e588

000b8a9c <_strdup_r>:
   b8a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8a9e:	4604      	mov	r4, r0
   b8aa0:	4608      	mov	r0, r1
   b8aa2:	460d      	mov	r5, r1
   b8aa4:	f7fc f918 	bl	b4cd8 <strlen>
   b8aa8:	1c42      	adds	r2, r0, #1
   b8aaa:	4611      	mov	r1, r2
   b8aac:	4620      	mov	r0, r4
   b8aae:	9201      	str	r2, [sp, #4]
   b8ab0:	f7fd f8e2 	bl	b5c78 <_malloc_r>
   b8ab4:	4604      	mov	r4, r0
   b8ab6:	b118      	cbz	r0, b8ac0 <_strdup_r+0x24>
   b8ab8:	9a01      	ldr	r2, [sp, #4]
   b8aba:	4629      	mov	r1, r5
   b8abc:	f7ff ff68 	bl	b8990 <memcpy>
   b8ac0:	4620      	mov	r0, r4
   b8ac2:	b003      	add	sp, #12
   b8ac4:	bd30      	pop	{r4, r5, pc}

000b8ac6 <strncmp>:
   b8ac6:	b510      	push	{r4, lr}
   b8ac8:	b17a      	cbz	r2, b8aea <strncmp+0x24>
   b8aca:	4603      	mov	r3, r0
   b8acc:	3901      	subs	r1, #1
   b8ace:	1884      	adds	r4, r0, r2
   b8ad0:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8ad4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8ad8:	4290      	cmp	r0, r2
   b8ada:	d101      	bne.n	b8ae0 <strncmp+0x1a>
   b8adc:	42a3      	cmp	r3, r4
   b8ade:	d101      	bne.n	b8ae4 <strncmp+0x1e>
   b8ae0:	1a80      	subs	r0, r0, r2
   b8ae2:	bd10      	pop	{r4, pc}
   b8ae4:	2800      	cmp	r0, #0
   b8ae6:	d1f3      	bne.n	b8ad0 <strncmp+0xa>
   b8ae8:	e7fa      	b.n	b8ae0 <strncmp+0x1a>
   b8aea:	4610      	mov	r0, r2
   b8aec:	e7f9      	b.n	b8ae2 <strncmp+0x1c>

000b8aee <strrchr>:
   b8aee:	b538      	push	{r3, r4, r5, lr}
   b8af0:	4603      	mov	r3, r0
   b8af2:	460c      	mov	r4, r1
   b8af4:	b969      	cbnz	r1, b8b12 <strrchr+0x24>
   b8af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8afa:	f7ff bfa7 	b.w	b8a4c <strchr>
   b8afe:	1c43      	adds	r3, r0, #1
   b8b00:	4605      	mov	r5, r0
   b8b02:	4621      	mov	r1, r4
   b8b04:	4618      	mov	r0, r3
   b8b06:	f7ff ffa1 	bl	b8a4c <strchr>
   b8b0a:	2800      	cmp	r0, #0
   b8b0c:	d1f7      	bne.n	b8afe <strrchr+0x10>
   b8b0e:	4628      	mov	r0, r5
   b8b10:	bd38      	pop	{r3, r4, r5, pc}
   b8b12:	2500      	movs	r5, #0
   b8b14:	e7f5      	b.n	b8b02 <strrchr+0x14>
	...

000b8b18 <_strtol_l.constprop.0>:
   b8b18:	2b01      	cmp	r3, #1
   b8b1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8b1e:	d001      	beq.n	b8b24 <_strtol_l.constprop.0+0xc>
   b8b20:	2b24      	cmp	r3, #36	; 0x24
   b8b22:	d906      	bls.n	b8b32 <_strtol_l.constprop.0+0x1a>
   b8b24:	f7fd f8b0 	bl	b5c88 <__errno>
   b8b28:	2316      	movs	r3, #22
   b8b2a:	6003      	str	r3, [r0, #0]
   b8b2c:	2000      	movs	r0, #0
   b8b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8b32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8c18 <_strtol_l.constprop.0+0x100>
   b8b36:	460d      	mov	r5, r1
   b8b38:	462e      	mov	r6, r5
   b8b3a:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8b3e:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8b42:	f017 0708 	ands.w	r7, r7, #8
   b8b46:	d1f7      	bne.n	b8b38 <_strtol_l.constprop.0+0x20>
   b8b48:	2c2d      	cmp	r4, #45	; 0x2d
   b8b4a:	d132      	bne.n	b8bb2 <_strtol_l.constprop.0+0x9a>
   b8b4c:	782c      	ldrb	r4, [r5, #0]
   b8b4e:	2701      	movs	r7, #1
   b8b50:	1cb5      	adds	r5, r6, #2
   b8b52:	2b00      	cmp	r3, #0
   b8b54:	d05b      	beq.n	b8c0e <_strtol_l.constprop.0+0xf6>
   b8b56:	2b10      	cmp	r3, #16
   b8b58:	d109      	bne.n	b8b6e <_strtol_l.constprop.0+0x56>
   b8b5a:	2c30      	cmp	r4, #48	; 0x30
   b8b5c:	d107      	bne.n	b8b6e <_strtol_l.constprop.0+0x56>
   b8b5e:	782c      	ldrb	r4, [r5, #0]
   b8b60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8b64:	2c58      	cmp	r4, #88	; 0x58
   b8b66:	d14d      	bne.n	b8c04 <_strtol_l.constprop.0+0xec>
   b8b68:	786c      	ldrb	r4, [r5, #1]
   b8b6a:	2310      	movs	r3, #16
   b8b6c:	3502      	adds	r5, #2
   b8b6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8b72:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8b76:	f04f 0c00 	mov.w	ip, #0
   b8b7a:	fbb8 f9f3 	udiv	r9, r8, r3
   b8b7e:	4666      	mov	r6, ip
   b8b80:	fb03 8a19 	mls	sl, r3, r9, r8
   b8b84:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8b88:	f1be 0f09 	cmp.w	lr, #9
   b8b8c:	d816      	bhi.n	b8bbc <_strtol_l.constprop.0+0xa4>
   b8b8e:	4674      	mov	r4, lr
   b8b90:	42a3      	cmp	r3, r4
   b8b92:	dd24      	ble.n	b8bde <_strtol_l.constprop.0+0xc6>
   b8b94:	f1bc 0f00 	cmp.w	ip, #0
   b8b98:	db1e      	blt.n	b8bd8 <_strtol_l.constprop.0+0xc0>
   b8b9a:	45b1      	cmp	r9, r6
   b8b9c:	d31c      	bcc.n	b8bd8 <_strtol_l.constprop.0+0xc0>
   b8b9e:	d101      	bne.n	b8ba4 <_strtol_l.constprop.0+0x8c>
   b8ba0:	45a2      	cmp	sl, r4
   b8ba2:	db19      	blt.n	b8bd8 <_strtol_l.constprop.0+0xc0>
   b8ba4:	fb06 4603 	mla	r6, r6, r3, r4
   b8ba8:	f04f 0c01 	mov.w	ip, #1
   b8bac:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8bb0:	e7e8      	b.n	b8b84 <_strtol_l.constprop.0+0x6c>
   b8bb2:	2c2b      	cmp	r4, #43	; 0x2b
   b8bb4:	bf04      	itt	eq
   b8bb6:	782c      	ldrbeq	r4, [r5, #0]
   b8bb8:	1cb5      	addeq	r5, r6, #2
   b8bba:	e7ca      	b.n	b8b52 <_strtol_l.constprop.0+0x3a>
   b8bbc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8bc0:	f1be 0f19 	cmp.w	lr, #25
   b8bc4:	d801      	bhi.n	b8bca <_strtol_l.constprop.0+0xb2>
   b8bc6:	3c37      	subs	r4, #55	; 0x37
   b8bc8:	e7e2      	b.n	b8b90 <_strtol_l.constprop.0+0x78>
   b8bca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8bce:	f1be 0f19 	cmp.w	lr, #25
   b8bd2:	d804      	bhi.n	b8bde <_strtol_l.constprop.0+0xc6>
   b8bd4:	3c57      	subs	r4, #87	; 0x57
   b8bd6:	e7db      	b.n	b8b90 <_strtol_l.constprop.0+0x78>
   b8bd8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8bdc:	e7e6      	b.n	b8bac <_strtol_l.constprop.0+0x94>
   b8bde:	f1bc 0f00 	cmp.w	ip, #0
   b8be2:	da05      	bge.n	b8bf0 <_strtol_l.constprop.0+0xd8>
   b8be4:	2322      	movs	r3, #34	; 0x22
   b8be6:	6003      	str	r3, [r0, #0]
   b8be8:	4646      	mov	r6, r8
   b8bea:	b942      	cbnz	r2, b8bfe <_strtol_l.constprop.0+0xe6>
   b8bec:	4630      	mov	r0, r6
   b8bee:	e79e      	b.n	b8b2e <_strtol_l.constprop.0+0x16>
   b8bf0:	b107      	cbz	r7, b8bf4 <_strtol_l.constprop.0+0xdc>
   b8bf2:	4276      	negs	r6, r6
   b8bf4:	2a00      	cmp	r2, #0
   b8bf6:	d0f9      	beq.n	b8bec <_strtol_l.constprop.0+0xd4>
   b8bf8:	f1bc 0f00 	cmp.w	ip, #0
   b8bfc:	d000      	beq.n	b8c00 <_strtol_l.constprop.0+0xe8>
   b8bfe:	1e69      	subs	r1, r5, #1
   b8c00:	6011      	str	r1, [r2, #0]
   b8c02:	e7f3      	b.n	b8bec <_strtol_l.constprop.0+0xd4>
   b8c04:	2430      	movs	r4, #48	; 0x30
   b8c06:	2b00      	cmp	r3, #0
   b8c08:	d1b1      	bne.n	b8b6e <_strtol_l.constprop.0+0x56>
   b8c0a:	2308      	movs	r3, #8
   b8c0c:	e7af      	b.n	b8b6e <_strtol_l.constprop.0+0x56>
   b8c0e:	2c30      	cmp	r4, #48	; 0x30
   b8c10:	d0a5      	beq.n	b8b5e <_strtol_l.constprop.0+0x46>
   b8c12:	230a      	movs	r3, #10
   b8c14:	e7ab      	b.n	b8b6e <_strtol_l.constprop.0+0x56>
   b8c16:	bf00      	nop
   b8c18:	000b91f2 	.word	0x000b91f2

000b8c1c <strtol>:
   b8c1c:	4613      	mov	r3, r2
   b8c1e:	460a      	mov	r2, r1
   b8c20:	4601      	mov	r1, r0
   b8c22:	4802      	ldr	r0, [pc, #8]	; (b8c2c <strtol+0x10>)
   b8c24:	6800      	ldr	r0, [r0, #0]
   b8c26:	f7ff bf77 	b.w	b8b18 <_strtol_l.constprop.0>
   b8c2a:	bf00      	nop
   b8c2c:	2003e588 	.word	0x2003e588

000b8c30 <__register_exitproc>:
   b8c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8c34:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8cf0 <__register_exitproc+0xc0>
   b8c38:	4606      	mov	r6, r0
   b8c3a:	f8d8 0000 	ldr.w	r0, [r8]
   b8c3e:	461f      	mov	r7, r3
   b8c40:	460d      	mov	r5, r1
   b8c42:	4691      	mov	r9, r2
   b8c44:	f000 f856 	bl	b8cf4 <__retarget_lock_acquire_recursive>
   b8c48:	4b25      	ldr	r3, [pc, #148]	; (b8ce0 <__register_exitproc+0xb0>)
   b8c4a:	681c      	ldr	r4, [r3, #0]
   b8c4c:	b934      	cbnz	r4, b8c5c <__register_exitproc+0x2c>
   b8c4e:	4c25      	ldr	r4, [pc, #148]	; (b8ce4 <__register_exitproc+0xb4>)
   b8c50:	601c      	str	r4, [r3, #0]
   b8c52:	4b25      	ldr	r3, [pc, #148]	; (b8ce8 <__register_exitproc+0xb8>)
   b8c54:	b113      	cbz	r3, b8c5c <__register_exitproc+0x2c>
   b8c56:	681b      	ldr	r3, [r3, #0]
   b8c58:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8c5c:	6863      	ldr	r3, [r4, #4]
   b8c5e:	2b1f      	cmp	r3, #31
   b8c60:	dd07      	ble.n	b8c72 <__register_exitproc+0x42>
   b8c62:	f8d8 0000 	ldr.w	r0, [r8]
   b8c66:	f000 f847 	bl	b8cf8 <__retarget_lock_release_recursive>
   b8c6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8c72:	b34e      	cbz	r6, b8cc8 <__register_exitproc+0x98>
   b8c74:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8c78:	b988      	cbnz	r0, b8c9e <__register_exitproc+0x6e>
   b8c7a:	4b1c      	ldr	r3, [pc, #112]	; (b8cec <__register_exitproc+0xbc>)
   b8c7c:	b923      	cbnz	r3, b8c88 <__register_exitproc+0x58>
   b8c7e:	f8d8 0000 	ldr.w	r0, [r8]
   b8c82:	f000 f838 	bl	b8cf6 <__retarget_lock_release>
   b8c86:	e7f0      	b.n	b8c6a <__register_exitproc+0x3a>
   b8c88:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8c8c:	f7fc ffcc 	bl	b5c28 <malloc>
   b8c90:	2800      	cmp	r0, #0
   b8c92:	d0f4      	beq.n	b8c7e <__register_exitproc+0x4e>
   b8c94:	2300      	movs	r3, #0
   b8c96:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8c9a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8c9e:	6863      	ldr	r3, [r4, #4]
   b8ca0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8ca4:	2201      	movs	r2, #1
   b8ca6:	409a      	lsls	r2, r3
   b8ca8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8cac:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8cb0:	4313      	orrs	r3, r2
   b8cb2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8cb6:	2e02      	cmp	r6, #2
   b8cb8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8cbc:	bf02      	ittt	eq
   b8cbe:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8cc2:	4313      	orreq	r3, r2
   b8cc4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8cc8:	6863      	ldr	r3, [r4, #4]
   b8cca:	f8d8 0000 	ldr.w	r0, [r8]
   b8cce:	1c5a      	adds	r2, r3, #1
   b8cd0:	3302      	adds	r3, #2
   b8cd2:	6062      	str	r2, [r4, #4]
   b8cd4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8cd8:	f000 f80e 	bl	b8cf8 <__retarget_lock_release_recursive>
   b8cdc:	2000      	movs	r0, #0
   b8cde:	e7c6      	b.n	b8c6e <__register_exitproc+0x3e>
   b8ce0:	2003e7e8 	.word	0x2003e7e8
   b8ce4:	2003e75c 	.word	0x2003e75c
   b8ce8:	00000000 	.word	0x00000000
   b8cec:	000b5c29 	.word	0x000b5c29
   b8cf0:	2003e5ec 	.word	0x2003e5ec

000b8cf4 <__retarget_lock_acquire_recursive>:
   b8cf4:	4770      	bx	lr

000b8cf6 <__retarget_lock_release>:
   b8cf6:	4770      	bx	lr

000b8cf8 <__retarget_lock_release_recursive>:
   b8cf8:	4770      	bx	lr

000b8cfa <link_code_end>:
	...

000b8cfc <dynalib_user>:
   b8cfc:	4ce9 000b 4d25 000b 4d4d 000b 4d51 000b     .L..%M..MM..QM..
   b8d0c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8d1c:	7620 7269 7574 6c61 6f00 006e 666f 0066      virtual.on.off.
   b8d2c:	6564 7562 0067 656c 0064 6543 6c6c 6c75     debug.led.Cellul
   b8d3c:	7261 7220 6165 7964 6120 2074 7473 7261     ar ready at star
   b8d4c:	7574 3a70 2520 2066 7473 6572 676e 6874     tup: %f strength
   b8d5c:	6120 646e 2520 2066 7571 6c61 7469 0079      and %f quality.
   b8d6c:	6f6c 6163 496c 3a50 2520 0073 7543 7272     localIP: %s.Curr
   b8d7c:	6e65 2074 6162 7474 7265 2079 6f76 746c     ent battery volt
   b8d8c:	6761 3a65 2520 0066 6f50 6574 746e 6169     age: %f.Potentia
   b8d9c:	206c 6f50 6577 2072 6f73 7275 6563 6320     l Power source c
   b8dac:	6168 676e 3a65 2520 0064 6f43 666e 7269     hange: %d.Confir
   b8dbc:	656d 2064 6f50 6577 2072 6f73 7275 6563     med Power source
   b8dcc:	6320 6168 676e 3a65 2520 0064 6843 6e61      change: %d.Chan
   b8ddc:	6567 2064 7266 6d6f 0020 7420 3a6f 6220     ged from . to: b
   b8dec:	7461 6574 7972 4020 2000 2e56 4600 6f72     attery @. V..Fro
   b8dfc:	206d 6157 6c6c 7020 776f 7265 7420 206f     m Wall power to 
   b8e0c:	6142 7474 7265 3a79 5020 776f 7265 4c20     Battery: Power L
   b8e1c:	736f 0073 7420 3a6f 5620 4e49 002e 7246     oss. to: VIN..Fr
   b8e2c:	6d6f 5720 6c61 206c 6f70 6577 2072 6f74     om Wall power to
   b8e3c:	5620 4e49 203a 6f50 6577 2072 6f4c 7373      VIN: Power Loss
   b8e4c:	2000 6f74 203a 5355 2f42 6157 6c6c 7020     . to: USB/Wall p
   b8e5c:	776f 7265 002e 6f50 6577 2072 6f73 7275     ower..Power sour
   b8e6c:	6563 203a 5355 0042                         ce: USB.

000b8e74 <_ZTVN5spark10LogHandlerE>:
	...
   b8e84:	4d6d 000b 4d95 000b                         mM...M..

000b8e8c <_ZTVN5spark16SerialLogHandlerE>:
	...
   b8e94:	4de1 000b 4e15 000b 7891 000b 7a35 000b     .M...N...x..5z..

000b8ea4 <_ZTVN5spark13CellularClassE>:
	...
   b8eac:	5dd7 000b 5dcd 000b 5dc3 000b 5d79 000b     .]...]...]..y]..
   b8ebc:	5db7 000b 5dab 000b 7c21 000b 7c29 000b     .]...]..!|..)|..
   b8ecc:	5d9f 000b 5d97 000b 5d8d 000b 5d83 000b     .]...]...]...]..
   b8edc:	7c59 000b                                   Y|..

000b8ee0 <_ZTV14CellularSignal>:
	...
   b8ee8:	5e65 000b 5ec9 000b 5e67 000b 5ed9 000b     e^...^..g^...^..
   b8ef8:	5f0d 000b 5f39 000b 5f6d 000b 5e8d 000b     ._..9_..m_...^..
   b8f08:	5e6b 000b 5e87 000b fffc ffff 0000 0000     k^...^..........
   b8f18:	5ec1 000b                                   .^..

000b8f1c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8f24:	5fb1 000b 5fb7 000b 5ff5 000b 5fc5 000b     ._..._..._..._..
   b8f34:	5fb3 000b                                   ._..

000b8f38 <_ZTVN5spark13EthernetClassE>:
	...
   b8f40:	658b 000b 6581 000b 6577 000b 656d 000b     .e...e..we..me..
   b8f50:	6561 000b 6555 000b 7c21 000b 7c29 000b     ae..Ue..!|..)|..
   b8f60:	6549 000b 6541 000b 6537 000b 652d 000b     Ie..Ae..7e..-e..
   b8f70:	7c59 000b                                   Y|..

000b8f74 <_ZTV7TwoWire>:
	...
   b8f7c:	66ad 000b 66f7 000b 66cf 000b 66af 000b     .f...f...f...f..
   b8f8c:	66d7 000b 66df 000b 66e7 000b 66ef 000b     .f...f...f...f..

000b8f9c <_ZTV9IPAddress>:
	...
   b8fa4:	67db 000b 67cb 000b 67cd 000b 7525 7500     .g...g...g..%u.u
   b8fb4:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   b8fc4:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   b8fd4:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   b8fe4:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   b8ff4:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   b9004:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   b9014:	006d 6e6c 6600 006e 0074 6f63 6564 6400     m.ln.fn.t.code.d
   b9024:	7465 6961 006c 0000                         etail...

000b902c <_ZTVN5spark16JSONStreamWriterE>:
	...
   b9034:	6c89 000b 6caf 000b 6c6d 000b 68eb 000b     .l...l..ml...h..

000b9044 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b904c:	7139 000b 7151 000b 7891 000b 7a35 000b     9q..Qq...x..5z..

000b905c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b9064:	7165 000b 7179 000b 7a6d 000b 6c75 000b     eq..yq..mz..ul..

000b9074 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b907c:	6c87 000b 6cbd 000b 77f5 000b 6c77 000b     .l...l...w..wl..

000b908c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b9094:	6c85 000b 6ccb 000b 70a1 000b 6ced 000b     .l...l...p...l..

000b90a4 <_ZTVN5spark12NetworkClassE>:
	...
   b90ac:	7be1 000b 7beb 000b 7bf5 000b 7bff 000b     .{...{...{...{..
   b90bc:	7c09 000b 7c15 000b 7c21 000b 7c29 000b     .|...|..!|..)|..
   b90cc:	7c31 000b 7c3d 000b 7c45 000b 7c4f 000b     1|..=|..E|..O|..
   b90dc:	7c59 000b 616e 006e 6e69 0066 766f 0066     Y|..nan.inf.ovf.

000b90ec <_ZTV21StringPrintableHelper>:
	...
   b90f4:	7fa9 000b 7fab 000b 8261 000b 8233 000b     ........a...3...
   b9104:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b9114:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b9120 <_ZTV11USARTSerial>:
	...
   b9128:	8381 000b 83ed 000b 83c5 000b 7d45 000b     ............E}..
   b9138:	8395 000b 83b1 000b 83a3 000b 83bf 000b     ................
   b9148:	8383 000b 8387 000b                         ........

000b9150 <_ZTV9USBSerial>:
	...
   b9158:	843f 000b 84a7 000b 847d 000b 7d45 000b     ?.......}...E}..
   b9168:	846f 000b 8441 000b 8451 000b 84a1 000b     o...A...Q.......
   b9178:	8461 000b 8439 000b                         a...9...

000b9180 <_ZSt7nothrow>:
   b9180:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b9190:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b91a0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b91b0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b91c0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b91d0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b91e0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b91f1 <_ctype_>:
   b91f1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b9201:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b9211:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b9221:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b9231:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b9241:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b9251:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b9261:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b9271:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b92f2 <link_const_data_end>:
	...

000b92f4 <link_constructors_location>:
   b92f4:	000b5615 	.word	0x000b5615
   b92f8:	000b5d69 	.word	0x000b5d69
   b92fc:	000b5e35 	.word	0x000b5e35
   b9300:	000b6595 	.word	0x000b6595
   b9304:	000b7881 	.word	0x000b7881
   b9308:	000b7d31 	.word	0x000b7d31
   b930c:	000b7f89 	.word	0x000b7f89
   b9310:	000b8349 	.word	0x000b8349
   b9314:	000b836d 	.word	0x000b836d
