
/Users/christopherkosik/Documents/particle_deviceos/705-power-loss-detection/target/5.2.0/boron/705-power-loss-detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004138  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8154  000b8154  00008154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000078  2003e580  000b8178  0000e580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001f8  2003e5f8  2003e5f8  0001e5f8  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b81f0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b81f4  000b81f4  000181f4  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b81fa  000b81fa  000181fa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b821e  000b821e  0001821e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00129230  00000000  00000000  00018222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00013bde  00000000  00000000  00141452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003cb9f  00000000  00000000  00155030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003038  00000000  00000000  00191bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000adc0  00000000  00000000  00194c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037e4a  00000000  00000000  0019f9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003ff08  00000000  00000000  001d7811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013a8fd  00000000  00000000  00217719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008960  00000000  00000000  00352018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <__aeabi_drsub>:
   b401c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4020:	e002      	b.n	b4028 <__adddf3>
   b4022:	bf00      	nop

000b4024 <__aeabi_dsub>:
   b4024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b4028 <__adddf3>:
   b4028:	b530      	push	{r4, r5, lr}
   b402a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b402e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4032:	ea94 0f05 	teq	r4, r5
   b4036:	bf08      	it	eq
   b4038:	ea90 0f02 	teqeq	r0, r2
   b403c:	bf1f      	itttt	ne
   b403e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4042:	ea55 0c02 	orrsne.w	ip, r5, r2
   b4046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b404e:	f000 80e2 	beq.w	b4216 <__adddf3+0x1ee>
   b4052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b4056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405a:	bfb8      	it	lt
   b405c:	426d      	neglt	r5, r5
   b405e:	dd0c      	ble.n	b407a <__adddf3+0x52>
   b4060:	442c      	add	r4, r5
   b4062:	ea80 0202 	eor.w	r2, r0, r2
   b4066:	ea81 0303 	eor.w	r3, r1, r3
   b406a:	ea82 0000 	eor.w	r0, r2, r0
   b406e:	ea83 0101 	eor.w	r1, r3, r1
   b4072:	ea80 0202 	eor.w	r2, r0, r2
   b4076:	ea81 0303 	eor.w	r3, r1, r3
   b407a:	2d36      	cmp	r5, #54	; 0x36
   b407c:	bf88      	it	hi
   b407e:	bd30      	pophi	{r4, r5, pc}
   b4080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b408c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4090:	d002      	beq.n	b4098 <__adddf3+0x70>
   b4092:	4240      	negs	r0, r0
   b4094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b409c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a4:	d002      	beq.n	b40ac <__adddf3+0x84>
   b40a6:	4252      	negs	r2, r2
   b40a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40ac:	ea94 0f05 	teq	r4, r5
   b40b0:	f000 80a7 	beq.w	b4202 <__adddf3+0x1da>
   b40b4:	f1a4 0401 	sub.w	r4, r4, #1
   b40b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b40bc:	db0d      	blt.n	b40da <__adddf3+0xb2>
   b40be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c2:	fa22 f205 	lsr.w	r2, r2, r5
   b40c6:	1880      	adds	r0, r0, r2
   b40c8:	f141 0100 	adc.w	r1, r1, #0
   b40cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d0:	1880      	adds	r0, r0, r2
   b40d2:	fa43 f305 	asr.w	r3, r3, r5
   b40d6:	4159      	adcs	r1, r3
   b40d8:	e00e      	b.n	b40f8 <__adddf3+0xd0>
   b40da:	f1a5 0520 	sub.w	r5, r5, #32
   b40de:	f10e 0e20 	add.w	lr, lr, #32
   b40e2:	2a01      	cmp	r2, #1
   b40e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40e8:	bf28      	it	cs
   b40ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40ee:	fa43 f305 	asr.w	r3, r3, r5
   b40f2:	18c0      	adds	r0, r0, r3
   b40f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b40fc:	d507      	bpl.n	b410e <__adddf3+0xe6>
   b40fe:	f04f 0e00 	mov.w	lr, #0
   b4102:	f1dc 0c00 	rsbs	ip, ip, #0
   b4106:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410a:	eb6e 0101 	sbc.w	r1, lr, r1
   b410e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4112:	d31b      	bcc.n	b414c <__adddf3+0x124>
   b4114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b4118:	d30c      	bcc.n	b4134 <__adddf3+0x10c>
   b411a:	0849      	lsrs	r1, r1, #1
   b411c:	ea5f 0030 	movs.w	r0, r0, rrx
   b4120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4124:	f104 0401 	add.w	r4, r4, #1
   b4128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b412c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4130:	f080 809a 	bcs.w	b4268 <__adddf3+0x240>
   b4134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4138:	bf08      	it	eq
   b413a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b413e:	f150 0000 	adcs.w	r0, r0, #0
   b4142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4146:	ea41 0105 	orr.w	r1, r1, r5
   b414a:	bd30      	pop	{r4, r5, pc}
   b414c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4150:	4140      	adcs	r0, r0
   b4152:	eb41 0101 	adc.w	r1, r1, r1
   b4156:	3c01      	subs	r4, #1
   b4158:	bf28      	it	cs
   b415a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b415e:	d2e9      	bcs.n	b4134 <__adddf3+0x10c>
   b4160:	f091 0f00 	teq	r1, #0
   b4164:	bf04      	itt	eq
   b4166:	4601      	moveq	r1, r0
   b4168:	2000      	moveq	r0, #0
   b416a:	fab1 f381 	clz	r3, r1
   b416e:	bf08      	it	eq
   b4170:	3320      	addeq	r3, #32
   b4172:	f1a3 030b 	sub.w	r3, r3, #11
   b4176:	f1b3 0220 	subs.w	r2, r3, #32
   b417a:	da0c      	bge.n	b4196 <__adddf3+0x16e>
   b417c:	320c      	adds	r2, #12
   b417e:	dd08      	ble.n	b4192 <__adddf3+0x16a>
   b4180:	f102 0c14 	add.w	ip, r2, #20
   b4184:	f1c2 020c 	rsb	r2, r2, #12
   b4188:	fa01 f00c 	lsl.w	r0, r1, ip
   b418c:	fa21 f102 	lsr.w	r1, r1, r2
   b4190:	e00c      	b.n	b41ac <__adddf3+0x184>
   b4192:	f102 0214 	add.w	r2, r2, #20
   b4196:	bfd8      	it	le
   b4198:	f1c2 0c20 	rsble	ip, r2, #32
   b419c:	fa01 f102 	lsl.w	r1, r1, r2
   b41a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a4:	bfdc      	itt	le
   b41a6:	ea41 010c 	orrle.w	r1, r1, ip
   b41aa:	4090      	lslle	r0, r2
   b41ac:	1ae4      	subs	r4, r4, r3
   b41ae:	bfa2      	ittt	ge
   b41b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b4:	4329      	orrge	r1, r5
   b41b6:	bd30      	popge	{r4, r5, pc}
   b41b8:	ea6f 0404 	mvn.w	r4, r4
   b41bc:	3c1f      	subs	r4, #31
   b41be:	da1c      	bge.n	b41fa <__adddf3+0x1d2>
   b41c0:	340c      	adds	r4, #12
   b41c2:	dc0e      	bgt.n	b41e2 <__adddf3+0x1ba>
   b41c4:	f104 0414 	add.w	r4, r4, #20
   b41c8:	f1c4 0220 	rsb	r2, r4, #32
   b41cc:	fa20 f004 	lsr.w	r0, r0, r4
   b41d0:	fa01 f302 	lsl.w	r3, r1, r2
   b41d4:	ea40 0003 	orr.w	r0, r0, r3
   b41d8:	fa21 f304 	lsr.w	r3, r1, r4
   b41dc:	ea45 0103 	orr.w	r1, r5, r3
   b41e0:	bd30      	pop	{r4, r5, pc}
   b41e2:	f1c4 040c 	rsb	r4, r4, #12
   b41e6:	f1c4 0220 	rsb	r2, r4, #32
   b41ea:	fa20 f002 	lsr.w	r0, r0, r2
   b41ee:	fa01 f304 	lsl.w	r3, r1, r4
   b41f2:	ea40 0003 	orr.w	r0, r0, r3
   b41f6:	4629      	mov	r1, r5
   b41f8:	bd30      	pop	{r4, r5, pc}
   b41fa:	fa21 f004 	lsr.w	r0, r1, r4
   b41fe:	4629      	mov	r1, r5
   b4200:	bd30      	pop	{r4, r5, pc}
   b4202:	f094 0f00 	teq	r4, #0
   b4206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420a:	bf06      	itte	eq
   b420c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4210:	3401      	addeq	r4, #1
   b4212:	3d01      	subne	r5, #1
   b4214:	e74e      	b.n	b40b4 <__adddf3+0x8c>
   b4216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421a:	bf18      	it	ne
   b421c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4220:	d029      	beq.n	b4276 <__adddf3+0x24e>
   b4222:	ea94 0f05 	teq	r4, r5
   b4226:	bf08      	it	eq
   b4228:	ea90 0f02 	teqeq	r0, r2
   b422c:	d005      	beq.n	b423a <__adddf3+0x212>
   b422e:	ea54 0c00 	orrs.w	ip, r4, r0
   b4232:	bf04      	itt	eq
   b4234:	4619      	moveq	r1, r3
   b4236:	4610      	moveq	r0, r2
   b4238:	bd30      	pop	{r4, r5, pc}
   b423a:	ea91 0f03 	teq	r1, r3
   b423e:	bf1e      	ittt	ne
   b4240:	2100      	movne	r1, #0
   b4242:	2000      	movne	r0, #0
   b4244:	bd30      	popne	{r4, r5, pc}
   b4246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424a:	d105      	bne.n	b4258 <__adddf3+0x230>
   b424c:	0040      	lsls	r0, r0, #1
   b424e:	4149      	adcs	r1, r1
   b4250:	bf28      	it	cs
   b4252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b4256:	bd30      	pop	{r4, r5, pc}
   b4258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b425c:	bf3c      	itt	cc
   b425e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4262:	bd30      	popcc	{r4, r5, pc}
   b4264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4270:	f04f 0000 	mov.w	r0, #0
   b4274:	bd30      	pop	{r4, r5, pc}
   b4276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427a:	bf1a      	itte	ne
   b427c:	4619      	movne	r1, r3
   b427e:	4610      	movne	r0, r2
   b4280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4284:	bf1c      	itt	ne
   b4286:	460b      	movne	r3, r1
   b4288:	4602      	movne	r2, r0
   b428a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b428e:	bf06      	itte	eq
   b4290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4294:	ea91 0f03 	teqeq	r1, r3
   b4298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b429c:	bd30      	pop	{r4, r5, pc}
   b429e:	bf00      	nop

000b42a0 <__aeabi_ui2d>:
   b42a0:	f090 0f00 	teq	r0, #0
   b42a4:	bf04      	itt	eq
   b42a6:	2100      	moveq	r1, #0
   b42a8:	4770      	bxeq	lr
   b42aa:	b530      	push	{r4, r5, lr}
   b42ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b4:	f04f 0500 	mov.w	r5, #0
   b42b8:	f04f 0100 	mov.w	r1, #0
   b42bc:	e750      	b.n	b4160 <__adddf3+0x138>
   b42be:	bf00      	nop

000b42c0 <__aeabi_i2d>:
   b42c0:	f090 0f00 	teq	r0, #0
   b42c4:	bf04      	itt	eq
   b42c6:	2100      	moveq	r1, #0
   b42c8:	4770      	bxeq	lr
   b42ca:	b530      	push	{r4, r5, lr}
   b42cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42d8:	bf48      	it	mi
   b42da:	4240      	negmi	r0, r0
   b42dc:	f04f 0100 	mov.w	r1, #0
   b42e0:	e73e      	b.n	b4160 <__adddf3+0x138>
   b42e2:	bf00      	nop

000b42e4 <__aeabi_f2d>:
   b42e4:	0042      	lsls	r2, r0, #1
   b42e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b42ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f2:	bf1f      	itttt	ne
   b42f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b42fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4300:	4770      	bxne	lr
   b4302:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b4306:	bf08      	it	eq
   b4308:	4770      	bxeq	lr
   b430a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b430e:	bf04      	itt	eq
   b4310:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4314:	4770      	bxeq	lr
   b4316:	b530      	push	{r4, r5, lr}
   b4318:	f44f 7460 	mov.w	r4, #896	; 0x380
   b431c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4324:	e71c      	b.n	b4160 <__adddf3+0x138>
   b4326:	bf00      	nop

000b4328 <__aeabi_ul2d>:
   b4328:	ea50 0201 	orrs.w	r2, r0, r1
   b432c:	bf08      	it	eq
   b432e:	4770      	bxeq	lr
   b4330:	b530      	push	{r4, r5, lr}
   b4332:	f04f 0500 	mov.w	r5, #0
   b4336:	e00a      	b.n	b434e <__aeabi_l2d+0x16>

000b4338 <__aeabi_l2d>:
   b4338:	ea50 0201 	orrs.w	r2, r0, r1
   b433c:	bf08      	it	eq
   b433e:	4770      	bxeq	lr
   b4340:	b530      	push	{r4, r5, lr}
   b4342:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b4346:	d502      	bpl.n	b434e <__aeabi_l2d+0x16>
   b4348:	4240      	negs	r0, r0
   b434a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b434e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4352:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b4356:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435a:	f43f aed8 	beq.w	b410e <__adddf3+0xe6>
   b435e:	f04f 0203 	mov.w	r2, #3
   b4362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4366:	bf18      	it	ne
   b4368:	3203      	addne	r2, #3
   b436a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436e:	bf18      	it	ne
   b4370:	3203      	addne	r2, #3
   b4372:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b4376:	f1c2 0320 	rsb	r3, r2, #32
   b437a:	fa00 fc03 	lsl.w	ip, r0, r3
   b437e:	fa20 f002 	lsr.w	r0, r0, r2
   b4382:	fa01 fe03 	lsl.w	lr, r1, r3
   b4386:	ea40 000e 	orr.w	r0, r0, lr
   b438a:	fa21 f102 	lsr.w	r1, r1, r2
   b438e:	4414      	add	r4, r2
   b4390:	e6bd      	b.n	b410e <__adddf3+0xe6>
   b4392:	bf00      	nop

000b4394 <__aeabi_dmul>:
   b4394:	b570      	push	{r4, r5, r6, lr}
   b4396:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b439e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a2:	bf1d      	ittte	ne
   b43a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43a8:	ea94 0f0c 	teqne	r4, ip
   b43ac:	ea95 0f0c 	teqne	r5, ip
   b43b0:	f000 f8de 	bleq	b4570 <__aeabi_dmul+0x1dc>
   b43b4:	442c      	add	r4, r5
   b43b6:	ea81 0603 	eor.w	r6, r1, r3
   b43ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43c6:	bf18      	it	ne
   b43c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d4:	d038      	beq.n	b4448 <__aeabi_dmul+0xb4>
   b43d6:	fba0 ce02 	umull	ip, lr, r0, r2
   b43da:	f04f 0500 	mov.w	r5, #0
   b43de:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ea:	f04f 0600 	mov.w	r6, #0
   b43ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f2:	f09c 0f00 	teq	ip, #0
   b43f6:	bf18      	it	ne
   b43f8:	f04e 0e01 	orrne.w	lr, lr, #1
   b43fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4400:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4404:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b4408:	d204      	bcs.n	b4414 <__aeabi_dmul+0x80>
   b440a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b440e:	416d      	adcs	r5, r5
   b4410:	eb46 0606 	adc.w	r6, r6, r6
   b4414:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b4418:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b441c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4420:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4424:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b4428:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b442c:	bf88      	it	hi
   b442e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4432:	d81e      	bhi.n	b4472 <__aeabi_dmul+0xde>
   b4434:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b4438:	bf08      	it	eq
   b443a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b443e:	f150 0000 	adcs.w	r0, r0, #0
   b4442:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4446:	bd70      	pop	{r4, r5, r6, pc}
   b4448:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b444c:	ea46 0101 	orr.w	r1, r6, r1
   b4450:	ea40 0002 	orr.w	r0, r0, r2
   b4454:	ea81 0103 	eor.w	r1, r1, r3
   b4458:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b445c:	bfc2      	ittt	gt
   b445e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4462:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4466:	bd70      	popgt	{r4, r5, r6, pc}
   b4468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b446c:	f04f 0e00 	mov.w	lr, #0
   b4470:	3c01      	subs	r4, #1
   b4472:	f300 80ab 	bgt.w	b45cc <__aeabi_dmul+0x238>
   b4476:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447a:	bfde      	ittt	le
   b447c:	2000      	movle	r0, #0
   b447e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4482:	bd70      	pople	{r4, r5, r6, pc}
   b4484:	f1c4 0400 	rsb	r4, r4, #0
   b4488:	3c20      	subs	r4, #32
   b448a:	da35      	bge.n	b44f8 <__aeabi_dmul+0x164>
   b448c:	340c      	adds	r4, #12
   b448e:	dc1b      	bgt.n	b44c8 <__aeabi_dmul+0x134>
   b4490:	f104 0414 	add.w	r4, r4, #20
   b4494:	f1c4 0520 	rsb	r5, r4, #32
   b4498:	fa00 f305 	lsl.w	r3, r0, r5
   b449c:	fa20 f004 	lsr.w	r0, r0, r4
   b44a0:	fa01 f205 	lsl.w	r2, r1, r5
   b44a4:	ea40 0002 	orr.w	r0, r0, r2
   b44a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b4:	fa21 f604 	lsr.w	r6, r1, r4
   b44b8:	eb42 0106 	adc.w	r1, r2, r6
   b44bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c0:	bf08      	it	eq
   b44c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44c6:	bd70      	pop	{r4, r5, r6, pc}
   b44c8:	f1c4 040c 	rsb	r4, r4, #12
   b44cc:	f1c4 0520 	rsb	r5, r4, #32
   b44d0:	fa00 f304 	lsl.w	r3, r0, r4
   b44d4:	fa20 f005 	lsr.w	r0, r0, r5
   b44d8:	fa01 f204 	lsl.w	r2, r1, r4
   b44dc:	ea40 0002 	orr.w	r0, r0, r2
   b44e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44e8:	f141 0100 	adc.w	r1, r1, #0
   b44ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f0:	bf08      	it	eq
   b44f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44f6:	bd70      	pop	{r4, r5, r6, pc}
   b44f8:	f1c4 0520 	rsb	r5, r4, #32
   b44fc:	fa00 f205 	lsl.w	r2, r0, r5
   b4500:	ea4e 0e02 	orr.w	lr, lr, r2
   b4504:	fa20 f304 	lsr.w	r3, r0, r4
   b4508:	fa01 f205 	lsl.w	r2, r1, r5
   b450c:	ea43 0302 	orr.w	r3, r3, r2
   b4510:	fa21 f004 	lsr.w	r0, r1, r4
   b4514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4518:	fa21 f204 	lsr.w	r2, r1, r4
   b451c:	ea20 0002 	bic.w	r0, r0, r2
   b4520:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4524:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b4528:	bf08      	it	eq
   b452a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b452e:	bd70      	pop	{r4, r5, r6, pc}
   b4530:	f094 0f00 	teq	r4, #0
   b4534:	d10f      	bne.n	b4556 <__aeabi_dmul+0x1c2>
   b4536:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453a:	0040      	lsls	r0, r0, #1
   b453c:	eb41 0101 	adc.w	r1, r1, r1
   b4540:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4544:	bf08      	it	eq
   b4546:	3c01      	subeq	r4, #1
   b4548:	d0f7      	beq.n	b453a <__aeabi_dmul+0x1a6>
   b454a:	ea41 0106 	orr.w	r1, r1, r6
   b454e:	f095 0f00 	teq	r5, #0
   b4552:	bf18      	it	ne
   b4554:	4770      	bxne	lr
   b4556:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455a:	0052      	lsls	r2, r2, #1
   b455c:	eb43 0303 	adc.w	r3, r3, r3
   b4560:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4564:	bf08      	it	eq
   b4566:	3d01      	subeq	r5, #1
   b4568:	d0f7      	beq.n	b455a <__aeabi_dmul+0x1c6>
   b456a:	ea43 0306 	orr.w	r3, r3, r6
   b456e:	4770      	bx	lr
   b4570:	ea94 0f0c 	teq	r4, ip
   b4574:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b4578:	bf18      	it	ne
   b457a:	ea95 0f0c 	teqne	r5, ip
   b457e:	d00c      	beq.n	b459a <__aeabi_dmul+0x206>
   b4580:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4584:	bf18      	it	ne
   b4586:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458a:	d1d1      	bne.n	b4530 <__aeabi_dmul+0x19c>
   b458c:	ea81 0103 	eor.w	r1, r1, r3
   b4590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4594:	f04f 0000 	mov.w	r0, #0
   b4598:	bd70      	pop	{r4, r5, r6, pc}
   b459a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b459e:	bf06      	itte	eq
   b45a0:	4610      	moveq	r0, r2
   b45a2:	4619      	moveq	r1, r3
   b45a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45a8:	d019      	beq.n	b45de <__aeabi_dmul+0x24a>
   b45aa:	ea94 0f0c 	teq	r4, ip
   b45ae:	d102      	bne.n	b45b6 <__aeabi_dmul+0x222>
   b45b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b4:	d113      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45b6:	ea95 0f0c 	teq	r5, ip
   b45ba:	d105      	bne.n	b45c8 <__aeabi_dmul+0x234>
   b45bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c0:	bf1c      	itt	ne
   b45c2:	4610      	movne	r0, r2
   b45c4:	4619      	movne	r1, r3
   b45c6:	d10a      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45c8:	ea81 0103 	eor.w	r1, r1, r3
   b45cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45d8:	f04f 0000 	mov.w	r0, #0
   b45dc:	bd70      	pop	{r4, r5, r6, pc}
   b45de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45e6:	bd70      	pop	{r4, r5, r6, pc}

000b45e8 <__aeabi_ddiv>:
   b45e8:	b570      	push	{r4, r5, r6, lr}
   b45ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45f6:	bf1d      	ittte	ne
   b45f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b45fc:	ea94 0f0c 	teqne	r4, ip
   b4600:	ea95 0f0c 	teqne	r5, ip
   b4604:	f000 f8a7 	bleq	b4756 <__aeabi_ddiv+0x16e>
   b4608:	eba4 0405 	sub.w	r4, r4, r5
   b460c:	ea81 0e03 	eor.w	lr, r1, r3
   b4610:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4614:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4618:	f000 8088 	beq.w	b472c <__aeabi_ddiv+0x144>
   b461c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4620:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4624:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b4628:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b462c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4630:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4634:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b4638:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b463c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4640:	429d      	cmp	r5, r3
   b4642:	bf08      	it	eq
   b4644:	4296      	cmpeq	r6, r2
   b4646:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b464e:	d202      	bcs.n	b4656 <__aeabi_ddiv+0x6e>
   b4650:	085b      	lsrs	r3, r3, #1
   b4652:	ea4f 0232 	mov.w	r2, r2, rrx
   b4656:	1ab6      	subs	r6, r6, r2
   b4658:	eb65 0503 	sbc.w	r5, r5, r3
   b465c:	085b      	lsrs	r3, r3, #1
   b465e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4662:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b4666:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466a:	ebb6 0e02 	subs.w	lr, r6, r2
   b466e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4672:	bf22      	ittt	cs
   b4674:	1ab6      	subcs	r6, r6, r2
   b4676:	4675      	movcs	r5, lr
   b4678:	ea40 000c 	orrcs.w	r0, r0, ip
   b467c:	085b      	lsrs	r3, r3, #1
   b467e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4682:	ebb6 0e02 	subs.w	lr, r6, r2
   b4686:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468a:	bf22      	ittt	cs
   b468c:	1ab6      	subcs	r6, r6, r2
   b468e:	4675      	movcs	r5, lr
   b4690:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4694:	085b      	lsrs	r3, r3, #1
   b4696:	ea4f 0232 	mov.w	r2, r2, rrx
   b469a:	ebb6 0e02 	subs.w	lr, r6, r2
   b469e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a2:	bf22      	ittt	cs
   b46a4:	1ab6      	subcs	r6, r6, r2
   b46a6:	4675      	movcs	r5, lr
   b46a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46ac:	085b      	lsrs	r3, r3, #1
   b46ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b46b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46ba:	bf22      	ittt	cs
   b46bc:	1ab6      	subcs	r6, r6, r2
   b46be:	4675      	movcs	r5, lr
   b46c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c4:	ea55 0e06 	orrs.w	lr, r5, r6
   b46c8:	d018      	beq.n	b46fc <__aeabi_ddiv+0x114>
   b46ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46e6:	d1c0      	bne.n	b466a <__aeabi_ddiv+0x82>
   b46e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46ec:	d10b      	bne.n	b4706 <__aeabi_ddiv+0x11e>
   b46ee:	ea41 0100 	orr.w	r1, r1, r0
   b46f2:	f04f 0000 	mov.w	r0, #0
   b46f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fa:	e7b6      	b.n	b466a <__aeabi_ddiv+0x82>
   b46fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4700:	bf04      	itt	eq
   b4702:	4301      	orreq	r1, r0
   b4704:	2000      	moveq	r0, #0
   b4706:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470a:	bf88      	it	hi
   b470c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4710:	f63f aeaf 	bhi.w	b4472 <__aeabi_dmul+0xde>
   b4714:	ebb5 0c03 	subs.w	ip, r5, r3
   b4718:	bf04      	itt	eq
   b471a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b471e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4722:	f150 0000 	adcs.w	r0, r0, #0
   b4726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472a:	bd70      	pop	{r4, r5, r6, pc}
   b472c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4730:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4734:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b4738:	bfc2      	ittt	gt
   b473a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b473e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4742:	bd70      	popgt	{r4, r5, r6, pc}
   b4744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4748:	f04f 0e00 	mov.w	lr, #0
   b474c:	3c01      	subs	r4, #1
   b474e:	e690      	b.n	b4472 <__aeabi_dmul+0xde>
   b4750:	ea45 0e06 	orr.w	lr, r5, r6
   b4754:	e68d      	b.n	b4472 <__aeabi_dmul+0xde>
   b4756:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475a:	ea94 0f0c 	teq	r4, ip
   b475e:	bf08      	it	eq
   b4760:	ea95 0f0c 	teqeq	r5, ip
   b4764:	f43f af3b 	beq.w	b45de <__aeabi_dmul+0x24a>
   b4768:	ea94 0f0c 	teq	r4, ip
   b476c:	d10a      	bne.n	b4784 <__aeabi_ddiv+0x19c>
   b476e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4772:	f47f af34 	bne.w	b45de <__aeabi_dmul+0x24a>
   b4776:	ea95 0f0c 	teq	r5, ip
   b477a:	f47f af25 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b477e:	4610      	mov	r0, r2
   b4780:	4619      	mov	r1, r3
   b4782:	e72c      	b.n	b45de <__aeabi_dmul+0x24a>
   b4784:	ea95 0f0c 	teq	r5, ip
   b4788:	d106      	bne.n	b4798 <__aeabi_ddiv+0x1b0>
   b478a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b478e:	f43f aefd 	beq.w	b458c <__aeabi_dmul+0x1f8>
   b4792:	4610      	mov	r0, r2
   b4794:	4619      	mov	r1, r3
   b4796:	e722      	b.n	b45de <__aeabi_dmul+0x24a>
   b4798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b479c:	bf18      	it	ne
   b479e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a2:	f47f aec5 	bne.w	b4530 <__aeabi_dmul+0x19c>
   b47a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47aa:	f47f af0d 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b47ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b2:	f47f aeeb 	bne.w	b458c <__aeabi_dmul+0x1f8>
   b47b6:	e712      	b.n	b45de <__aeabi_dmul+0x24a>

000b47b8 <__gedf2>:
   b47b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47bc:	e006      	b.n	b47cc <__cmpdf2+0x4>
   b47be:	bf00      	nop

000b47c0 <__ledf2>:
   b47c0:	f04f 0c01 	mov.w	ip, #1
   b47c4:	e002      	b.n	b47cc <__cmpdf2+0x4>
   b47c6:	bf00      	nop

000b47c8 <__cmpdf2>:
   b47c8:	f04f 0c01 	mov.w	ip, #1
   b47cc:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47dc:	bf18      	it	ne
   b47de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e2:	d01b      	beq.n	b481c <__cmpdf2+0x54>
   b47e4:	b001      	add	sp, #4
   b47e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ea:	bf0c      	ite	eq
   b47ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f0:	ea91 0f03 	teqne	r1, r3
   b47f4:	bf02      	ittt	eq
   b47f6:	ea90 0f02 	teqeq	r0, r2
   b47fa:	2000      	moveq	r0, #0
   b47fc:	4770      	bxeq	lr
   b47fe:	f110 0f00 	cmn.w	r0, #0
   b4802:	ea91 0f03 	teq	r1, r3
   b4806:	bf58      	it	pl
   b4808:	4299      	cmppl	r1, r3
   b480a:	bf08      	it	eq
   b480c:	4290      	cmpeq	r0, r2
   b480e:	bf2c      	ite	cs
   b4810:	17d8      	asrcs	r0, r3, #31
   b4812:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b4816:	f040 0001 	orr.w	r0, r0, #1
   b481a:	4770      	bx	lr
   b481c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4824:	d102      	bne.n	b482c <__cmpdf2+0x64>
   b4826:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482a:	d107      	bne.n	b483c <__cmpdf2+0x74>
   b482c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4834:	d1d6      	bne.n	b47e4 <__cmpdf2+0x1c>
   b4836:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483a:	d0d3      	beq.n	b47e4 <__cmpdf2+0x1c>
   b483c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4840:	4770      	bx	lr
   b4842:	bf00      	nop

000b4844 <__aeabi_cdrcmple>:
   b4844:	4684      	mov	ip, r0
   b4846:	4610      	mov	r0, r2
   b4848:	4662      	mov	r2, ip
   b484a:	468c      	mov	ip, r1
   b484c:	4619      	mov	r1, r3
   b484e:	4663      	mov	r3, ip
   b4850:	e000      	b.n	b4854 <__aeabi_cdcmpeq>
   b4852:	bf00      	nop

000b4854 <__aeabi_cdcmpeq>:
   b4854:	b501      	push	{r0, lr}
   b4856:	f7ff ffb7 	bl	b47c8 <__cmpdf2>
   b485a:	2800      	cmp	r0, #0
   b485c:	bf48      	it	mi
   b485e:	f110 0f00 	cmnmi.w	r0, #0
   b4862:	bd01      	pop	{r0, pc}

000b4864 <__aeabi_dcmpeq>:
   b4864:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4868:	f7ff fff4 	bl	b4854 <__aeabi_cdcmpeq>
   b486c:	bf0c      	ite	eq
   b486e:	2001      	moveq	r0, #1
   b4870:	2000      	movne	r0, #0
   b4872:	f85d fb08 	ldr.w	pc, [sp], #8
   b4876:	bf00      	nop

000b4878 <__aeabi_dcmplt>:
   b4878:	f84d ed08 	str.w	lr, [sp, #-8]!
   b487c:	f7ff ffea 	bl	b4854 <__aeabi_cdcmpeq>
   b4880:	bf34      	ite	cc
   b4882:	2001      	movcc	r0, #1
   b4884:	2000      	movcs	r0, #0
   b4886:	f85d fb08 	ldr.w	pc, [sp], #8
   b488a:	bf00      	nop

000b488c <__aeabi_dcmple>:
   b488c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4890:	f7ff ffe0 	bl	b4854 <__aeabi_cdcmpeq>
   b4894:	bf94      	ite	ls
   b4896:	2001      	movls	r0, #1
   b4898:	2000      	movhi	r0, #0
   b489a:	f85d fb08 	ldr.w	pc, [sp], #8
   b489e:	bf00      	nop

000b48a0 <__aeabi_dcmpge>:
   b48a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a4:	f7ff ffce 	bl	b4844 <__aeabi_cdrcmple>
   b48a8:	bf94      	ite	ls
   b48aa:	2001      	movls	r0, #1
   b48ac:	2000      	movhi	r0, #0
   b48ae:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b2:	bf00      	nop

000b48b4 <__aeabi_dcmpgt>:
   b48b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48b8:	f7ff ffc4 	bl	b4844 <__aeabi_cdrcmple>
   b48bc:	bf34      	ite	cc
   b48be:	2001      	movcc	r0, #1
   b48c0:	2000      	movcs	r0, #0
   b48c2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48c6:	bf00      	nop

000b48c8 <__aeabi_dcmpun>:
   b48c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d0:	d102      	bne.n	b48d8 <__aeabi_dcmpun+0x10>
   b48d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48d6:	d10a      	bne.n	b48ee <__aeabi_dcmpun+0x26>
   b48d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e0:	d102      	bne.n	b48e8 <__aeabi_dcmpun+0x20>
   b48e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48e6:	d102      	bne.n	b48ee <__aeabi_dcmpun+0x26>
   b48e8:	f04f 0000 	mov.w	r0, #0
   b48ec:	4770      	bx	lr
   b48ee:	f04f 0001 	mov.w	r0, #1
   b48f2:	4770      	bx	lr

000b48f4 <__aeabi_d2iz>:
   b48f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48fc:	d215      	bcs.n	b492a <__aeabi_d2iz+0x36>
   b48fe:	d511      	bpl.n	b4924 <__aeabi_d2iz+0x30>
   b4900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4908:	d912      	bls.n	b4930 <__aeabi_d2iz+0x3c>
   b490a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b490e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b4916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491a:	fa23 f002 	lsr.w	r0, r3, r2
   b491e:	bf18      	it	ne
   b4920:	4240      	negne	r0, r0
   b4922:	4770      	bx	lr
   b4924:	f04f 0000 	mov.w	r0, #0
   b4928:	4770      	bx	lr
   b492a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b492e:	d105      	bne.n	b493c <__aeabi_d2iz+0x48>
   b4930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4934:	bf08      	it	eq
   b4936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493a:	4770      	bx	lr
   b493c:	f04f 0000 	mov.w	r0, #0
   b4940:	4770      	bx	lr
   b4942:	bf00      	nop

000b4944 <__aeabi_d2uiz>:
   b4944:	004a      	lsls	r2, r1, #1
   b4946:	d211      	bcs.n	b496c <__aeabi_d2uiz+0x28>
   b4948:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b494c:	d211      	bcs.n	b4972 <__aeabi_d2uiz+0x2e>
   b494e:	d50d      	bpl.n	b496c <__aeabi_d2uiz+0x28>
   b4950:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4958:	d40e      	bmi.n	b4978 <__aeabi_d2uiz+0x34>
   b495a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b495e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b4966:	fa23 f002 	lsr.w	r0, r3, r2
   b496a:	4770      	bx	lr
   b496c:	f04f 0000 	mov.w	r0, #0
   b4970:	4770      	bx	lr
   b4972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4976:	d102      	bne.n	b497e <__aeabi_d2uiz+0x3a>
   b4978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b497c:	4770      	bx	lr
   b497e:	f04f 0000 	mov.w	r0, #0
   b4982:	4770      	bx	lr

000b4984 <strcmp>:
   b4984:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4988:	f811 3b01 	ldrb.w	r3, [r1], #1
   b498c:	2a01      	cmp	r2, #1
   b498e:	bf28      	it	cs
   b4990:	429a      	cmpcs	r2, r3
   b4992:	d0f7      	beq.n	b4984 <strcmp>
   b4994:	1ad0      	subs	r0, r2, r3
   b4996:	4770      	bx	lr

000b4998 <strlen>:
   b4998:	4603      	mov	r3, r0
   b499a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b499e:	2a00      	cmp	r2, #0
   b49a0:	d1fb      	bne.n	b499a <strlen+0x2>
   b49a2:	1a18      	subs	r0, r3, r0
   b49a4:	3801      	subs	r0, #1
   b49a6:	4770      	bx	lr

000b49a8 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49a8:	4809      	ldr	r0, [pc, #36]	; (b49d0 <module_user_pre_init+0x28>)
   b49aa:	490a      	ldr	r1, [pc, #40]	; (b49d4 <module_user_pre_init+0x2c>)
   b49ac:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b49ae:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49b0:	d005      	beq.n	b49be <module_user_pre_init+0x16>
   b49b2:	4a09      	ldr	r2, [pc, #36]	; (b49d8 <module_user_pre_init+0x30>)
   b49b4:	4282      	cmp	r2, r0
   b49b6:	d002      	beq.n	b49be <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b49b8:	1a12      	subs	r2, r2, r0
   b49ba:	f002 ff9f 	bl	b78fc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b49be:	4807      	ldr	r0, [pc, #28]	; (b49dc <module_user_pre_init+0x34>)
   b49c0:	4a07      	ldr	r2, [pc, #28]	; (b49e0 <module_user_pre_init+0x38>)
   b49c2:	2100      	movs	r1, #0
   b49c4:	1a12      	subs	r2, r2, r0
   b49c6:	f002 ffc1 	bl	b794c <memset>
    return &link_global_data_start;
}
   b49ca:	4801      	ldr	r0, [pc, #4]	; (b49d0 <module_user_pre_init+0x28>)
   b49cc:	bd08      	pop	{r3, pc}
   b49ce:	bf00      	nop
   b49d0:	2003e580 	.word	0x2003e580
   b49d4:	000b8178 	.word	0x000b8178
   b49d8:	2003e5f8 	.word	0x2003e5f8
   b49dc:	2003e5f8 	.word	0x2003e5f8
   b49e0:	2003e7f0 	.word	0x2003e7f0

000b49e4 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b49e4:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49e6:	4e07      	ldr	r6, [pc, #28]	; (b4a04 <module_user_init+0x20>)
   b49e8:	4c07      	ldr	r4, [pc, #28]	; (b4a08 <module_user_init+0x24>)
    module_user_init_hook();
   b49ea:	f002 fe1d 	bl	b7628 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49ee:	1ba4      	subs	r4, r4, r6
   b49f0:	08a4      	lsrs	r4, r4, #2
   b49f2:	2500      	movs	r5, #0
   b49f4:	42ac      	cmp	r4, r5
   b49f6:	d100      	bne.n	b49fa <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b49f8:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b49fa:	f856 3b04 	ldr.w	r3, [r6], #4
   b49fe:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a00:	3501      	adds	r5, #1
   b4a02:	e7f7      	b.n	b49f4 <module_user_init+0x10>
   b4a04:	000b8130 	.word	0x000b8130
   b4a08:	000b8154 	.word	0x000b8154

000b4a0c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4a0c:	f000 b876 	b.w	b4afc <setup>

000b4a10 <module_user_loop>:
}

void module_user_loop() {
   b4a10:	b508      	push	{r3, lr}
    loop();
   b4a12:	f000 f937 	bl	b4c84 <loop>
    _post_loop();
}
   b4a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4a1a:	f002 bdbd 	b.w	b7598 <_post_loop>

000b4a1e <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4a1e:	f000 bc9d 	b.w	b535c <malloc>

000b4a22 <_Znaj>:
   b4a22:	f000 bc9b 	b.w	b535c <malloc>

000b4a26 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4a26:	f000 bca1 	b.w	b536c <free>
	...

000b4a2c <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4a2c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4a2e:	4a03      	ldr	r2, [pc, #12]	; (b4a3c <__cxa_pure_virtual+0x10>)
   b4a30:	4903      	ldr	r1, [pc, #12]	; (b4a40 <__cxa_pure_virtual+0x14>)
   b4a32:	200c      	movs	r0, #12
   b4a34:	f000 fbb6 	bl	b51a4 <panic_>
  while (1);
   b4a38:	e7fe      	b.n	b4a38 <__cxa_pure_virtual+0xc>
   b4a3a:	bf00      	nop
   b4a3c:	000b4f25 	.word	0x000b4f25
   b4a40:	000b7c40 	.word	0x000b7c40

000b4a44 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4a44:	7800      	ldrb	r0, [r0, #0]
   b4a46:	fab0 f080 	clz	r0, r0
   b4a4a:	0940      	lsrs	r0, r0, #5
   b4a4c:	4770      	bx	lr

000b4a4e <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4a4e:	2301      	movs	r3, #1
   b4a50:	7003      	strb	r3, [r0, #0]
   b4a52:	4770      	bx	lr

000b4a54 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b4a54:	4770      	bx	lr
	...

000b4a58 <_Z9ledToggle6String>:
}

/*
  Example "Particle" cloud event handler function. We use the standard connotation for return value success or failures.
*/
int ledToggle(String command) {
   b4a58:	b510      	push	{r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4a5a:	4908      	ldr	r1, [pc, #32]	; (b4a7c <_Z9ledToggle6String+0x24>)
   b4a5c:	4604      	mov	r4, r0
   b4a5e:	f002 fc4d 	bl	b72fc <_ZNK6String6equalsEPKc>
    Then, the function returns a value to us to let us know what happened.
    In this case, it will return 1 for the LEDs turning on, 0 for the LEDs turning off,
    and -1 if we received a totally bogus command that didn't do anything to the LEDs.
    */

    if (command=="on") {
   b4a62:	b940      	cbnz	r0, b4a76 <_Z9ledToggle6String+0x1e>
   b4a64:	4906      	ldr	r1, [pc, #24]	; (b4a80 <_Z9ledToggle6String+0x28>)
   b4a66:	4620      	mov	r0, r4
   b4a68:	f002 fc48 	bl	b72fc <_ZNK6String6equalsEPKc>
        //digitalWrite(led1,HIGH);
        //digitalWrite(led2,HIGH);
        return 1;
    }
    else if (command=="off") {
   b4a6c:	fab0 f080 	clz	r0, r0
   b4a70:	0940      	lsrs	r0, r0, #5
   b4a72:	4240      	negs	r0, r0
        return 0;
    }
    else {
        return -1;
    }
   b4a74:	bd10      	pop	{r4, pc}
        return 1;
   b4a76:	2001      	movs	r0, #1
   b4a78:	e7fc      	b.n	b4a74 <_Z9ledToggle6String+0x1c>
   b4a7a:	bf00      	nop
   b4a7c:	000b7c55 	.word	0x000b7c55
   b4a80:	000b7c58 	.word	0x000b7c58

000b4a84 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4a84:	4b0a      	ldr	r3, [pc, #40]	; (b4ab0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4a86:	b510      	push	{r4, lr}
   b4a88:	4604      	mov	r4, r0
   b4a8a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4a8c:	f001 fb42 	bl	b6114 <_ZN5spark10LogManager8instanceEv>
   b4a90:	4621      	mov	r1, r4
   b4a92:	f001 fd7a 	bl	b658a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4a96:	f002 fd37 	bl	b7508 <_Z16_fetch_usbserialv>
   b4a9a:	f002 fd29 	bl	b74f0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4a9e:	4620      	mov	r0, r4
   b4aa0:	4b04      	ldr	r3, [pc, #16]	; (b4ab4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4aa2:	f840 3b04 	str.w	r3, [r0], #4
   b4aa6:	f001 fc0b 	bl	b62c0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4aaa:	4620      	mov	r0, r4
   b4aac:	bd10      	pop	{r4, pc}
   b4aae:	bf00      	nop
   b4ab0:	000b7ce4 	.word	0x000b7ce4
   b4ab4:	000b7ccc 	.word	0x000b7ccc

000b4ab8 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4ab8:	b510      	push	{r4, lr}
   b4aba:	4604      	mov	r4, r0
    }
   b4abc:	f7ff ffe2 	bl	b4a84 <_ZN5spark16SerialLogHandlerD1Ev>
   b4ac0:	4620      	mov	r0, r4
   b4ac2:	2124      	movs	r1, #36	; 0x24
   b4ac4:	f7ff ffaf 	bl	b4a26 <_ZdlPvj>
   b4ac8:	4620      	mov	r0, r4
   b4aca:	bd10      	pop	{r4, pc}

000b4acc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4acc:	b40e      	push	{r1, r2, r3}
   b4ace:	b500      	push	{lr}
   b4ad0:	b08c      	sub	sp, #48	; 0x30
   b4ad2:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4ad4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4ad8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4adc:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4ade:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4ae2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4ae4:	6801      	ldr	r1, [r0, #0]
   b4ae6:	aa04      	add	r2, sp, #16
   b4ae8:	201e      	movs	r0, #30
    attr.flags = 0;
   b4aea:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4aee:	f000 fb61 	bl	b51b4 <log_message_v>
}
   b4af2:	b00c      	add	sp, #48	; 0x30
   b4af4:	f85d eb04 	ldr.w	lr, [sp], #4
   b4af8:	b003      	add	sp, #12
   b4afa:	4770      	bx	lr

000b4afc <setup>:
void setup() {
   b4afc:	b5f0      	push	{r4, r5, r6, r7, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4afe:	4e2f      	ldr	r6, [pc, #188]	; (b4bbc <setup+0xc0>)
   b4b00:	482f      	ldr	r0, [pc, #188]	; (b4bc0 <setup+0xc4>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4b02:	4d30      	ldr	r5, [pc, #192]	; (b4bc4 <setup+0xc8>)
   b4b04:	b097      	sub	sp, #92	; 0x5c
   b4b06:	2202      	movs	r2, #2
   b4b08:	2300      	movs	r3, #0
   b4b0a:	4631      	mov	r1, r6
   b4b0c:	f000 fb96 	bl	b523c <spark_variable>
  pinMode(LED1, OUTPUT);               // sets pin as output
   b4b10:	4b2d      	ldr	r3, [pc, #180]	; (b4bc8 <setup+0xcc>)
   b4b12:	2101      	movs	r1, #1
   b4b14:	8818      	ldrh	r0, [r3, #0]
   b4b16:	f002 fdf7 	bl	b7708 <pinMode>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b4b1a:	4a2c      	ldr	r2, [pc, #176]	; (b4bcc <setup+0xd0>)
   b4b1c:	492c      	ldr	r1, [pc, #176]	; (b4bd0 <setup+0xd4>)
   b4b1e:	482d      	ldr	r0, [pc, #180]	; (b4bd4 <setup+0xd8>)
  debug = 1; // 0  represents no debug, 1 represents debug
   b4b20:	2301      	movs	r3, #1
   b4b22:	6033      	str	r3, [r6, #0]
   b4b24:	f000 fdbe 	bl	b56a4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4b28:	2200      	movs	r2, #0
   b4b2a:	6868      	ldr	r0, [r5, #4]
   b4b2c:	4611      	mov	r1, r2
   b4b2e:	f000 fbcd 	bl	b52cc <network_ready>
  if (Cellular.ready()) {
   b4b32:	2800      	cmp	r0, #0
   b4b34:	d040      	beq.n	b4bb8 <setup+0xbc>
      CellularSignal sig = Cellular.RSSI();
   b4b36:	4629      	mov	r1, r5
   b4b38:	a80e      	add	r0, sp, #56	; 0x38
   b4b3a:	f000 fcb5 	bl	b54a8 <_ZN5spark13CellularClass4RSSIEv>
      cell_sig_str = sig.getStrength();
   b4b3e:	a80e      	add	r0, sp, #56	; 0x38
   b4b40:	f000 fd2e 	bl	b55a0 <_ZNK14CellularSignal11getStrengthEv>
   b4b44:	4f24      	ldr	r7, [pc, #144]	; (b4bd8 <setup+0xdc>)
      cell_sig_qual = sig.getQuality();
   b4b46:	a80e      	add	r0, sp, #56	; 0x38
      cell_sig_str = sig.getStrength();
   b4b48:	ed87 0a00 	vstr	s0, [r7]
      cell_sig_qual = sig.getQuality();
   b4b4c:	f000 fd58 	bl	b5600 <_ZNK14CellularSignal10getQualityEv>
   b4b50:	4b22      	ldr	r3, [pc, #136]	; (b4bdc <setup+0xe0>)
   b4b52:	ed83 0a00 	vstr	s0, [r3]
      if(debug){
   b4b56:	6833      	ldr	r3, [r6, #0]
      cell_sig_qual = sig.getQuality();
   b4b58:	ee10 4a10 	vmov	r4, s0
      if(debug){
   b4b5c:	b363      	cbz	r3, b4bb8 <setup+0xbc>
        Log.info("Cellular ready at startup: %f strength and %f quality", cell_sig_str, cell_sig_qual);
   b4b5e:	6838      	ldr	r0, [r7, #0]
   b4b60:	f7ff fbc0 	bl	b42e4 <__aeabi_f2d>
   b4b64:	4602      	mov	r2, r0
   b4b66:	460b      	mov	r3, r1
   b4b68:	4620      	mov	r0, r4
   b4b6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b4b6e:	f7ff fbb9 	bl	b42e4 <__aeabi_f2d>
   b4b72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4b76:	e9cd 0100 	strd	r0, r1, [sp]
   b4b7a:	4919      	ldr	r1, [pc, #100]	; (b4be0 <setup+0xe4>)
   b4b7c:	4819      	ldr	r0, [pc, #100]	; (b4be4 <setup+0xe8>)
   b4b7e:	f7ff ffa5 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
   b4b82:	2200      	movs	r2, #0
   b4b84:	4611      	mov	r1, r2
   b4b86:	6868      	ldr	r0, [r5, #4]
   b4b88:	f000 fb80 	bl	b528c <network_config>
   b4b8c:	1c81      	adds	r1, r0, #2
   b4b8e:	a808      	add	r0, sp, #32
   b4b90:	f000 ff32 	bl	b59f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   b4b94:	a908      	add	r1, sp, #32
   b4b96:	a804      	add	r0, sp, #16
   b4b98:	f002 fbc2 	bl	b7320 <_ZN6StringC1ERK9Printable>
        Log.info("localIP: %s", Cellular.localIP().toString().c_str());
   b4b9c:	4912      	ldr	r1, [pc, #72]	; (b4be8 <setup+0xec>)
   b4b9e:	9a04      	ldr	r2, [sp, #16]
   b4ba0:	4810      	ldr	r0, [pc, #64]	; (b4be4 <setup+0xe8>)
   b4ba2:	f7ff ff93 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
   b4ba6:	a804      	add	r0, sp, #16
   b4ba8:	f002 fad4 	bl	b7154 <_ZN6StringD1Ev>
        Serial.begin(9600);
   b4bac:	f002 fcac 	bl	b7508 <_Z16_fetch_usbserialv>
   b4bb0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4bb4:	f002 fc98 	bl	b74e8 <_ZN9USBSerial5beginEl>
}
   b4bb8:	b017      	add	sp, #92	; 0x5c
   b4bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4bbc:	2003e610 	.word	0x2003e610
   b4bc0:	000b7c5c 	.word	0x000b7c5c
   b4bc4:	2003e648 	.word	0x2003e648
   b4bc8:	2003e580 	.word	0x2003e580
   b4bcc:	000b7c62 	.word	0x000b7c62
   b4bd0:	000b4a59 	.word	0x000b4a59
   b4bd4:	000b5679 	.word	0x000b5679
   b4bd8:	2003e60c 	.word	0x2003e60c
   b4bdc:	2003e608 	.word	0x2003e608
   b4be0:	000b7c66 	.word	0x000b7c66
   b4be4:	2003e68c 	.word	0x2003e68c
   b4be8:	000b7c9c 	.word	0x000b7c9c

000b4bec <_Z19get_battery_voltagev>:
void get_battery_voltage(){
   b4bec:	b508      	push	{r3, lr}
  battery_voltage = fuel.getVCell();
   b4bee:	480a      	ldr	r0, [pc, #40]	; (b4c18 <_Z19get_battery_voltagev+0x2c>)
   b4bf0:	f000 fe0e 	bl	b5810 <_ZN9FuelGauge8getVCellEv>
   b4bf4:	4b09      	ldr	r3, [pc, #36]	; (b4c1c <_Z19get_battery_voltagev+0x30>)
   b4bf6:	ed83 0a00 	vstr	s0, [r3]
  if(debug == 1){
   b4bfa:	4b09      	ldr	r3, [pc, #36]	; (b4c20 <_Z19get_battery_voltagev+0x34>)
   b4bfc:	681b      	ldr	r3, [r3, #0]
   b4bfe:	2b01      	cmp	r3, #1
  battery_voltage = fuel.getVCell();
   b4c00:	ee10 0a10 	vmov	r0, s0
  if(debug == 1){
   b4c04:	d107      	bne.n	b4c16 <_Z19get_battery_voltagev+0x2a>
    Log.info("Current battery voltage: %f", battery_voltage);
   b4c06:	f7ff fb6d 	bl	b42e4 <__aeabi_f2d>
   b4c0a:	4602      	mov	r2, r0
   b4c0c:	460b      	mov	r3, r1
   b4c0e:	4805      	ldr	r0, [pc, #20]	; (b4c24 <_Z19get_battery_voltagev+0x38>)
   b4c10:	4905      	ldr	r1, [pc, #20]	; (b4c28 <_Z19get_battery_voltagev+0x3c>)
   b4c12:	f7ff ff5b 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
}
   b4c16:	bd08      	pop	{r3, pc}
   b4c18:	2003e614 	.word	0x2003e614
   b4c1c:	2003e604 	.word	0x2003e604
   b4c20:	2003e610 	.word	0x2003e610
   b4c24:	2003e68c 	.word	0x2003e68c
   b4c28:	000b7ca8 	.word	0x000b7ca8

000b4c2c <_Z9flash_ledii>:
void flash_led(int LED, int time){
   b4c2c:	b538      	push	{r3, r4, r5, lr}
    digitalWrite(LED, HIGH);          // sets the LED on
   b4c2e:	b285      	uxth	r5, r0
void flash_led(int LED, int time){
   b4c30:	460c      	mov	r4, r1
    digitalWrite(LED, HIGH);          // sets the LED on
   b4c32:	4628      	mov	r0, r5
   b4c34:	2101      	movs	r1, #1
   b4c36:	f002 fd78 	bl	b772a <digitalWrite>
    delay(time);                      
   b4c3a:	4620      	mov	r0, r4
   b4c3c:	f000 fbc6 	bl	b53cc <delay>
    digitalWrite(LED, LOW);           // sets the LED off
   b4c40:	4628      	mov	r0, r5
   b4c42:	2100      	movs	r1, #0
   b4c44:	f002 fd71 	bl	b772a <digitalWrite>
    delay(time);  
   b4c48:	4620      	mov	r0, r4
}
   b4c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(time);  
   b4c4e:	f000 bbbd 	b.w	b53cc <delay>
	...

000b4c54 <_Z19check_day_time_syncv>:
void check_day_time_sync() {
   b4c54:	b510      	push	{r4, lr}
  if (millis() - lastSync > ONE_DAY_MILLIS) {
   b4c56:	4c09      	ldr	r4, [pc, #36]	; (b4c7c <_Z19check_day_time_syncv+0x28>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4c58:	f000 f96c 	bl	b4f34 <HAL_Timer_Get_Milli_Seconds>
   b4c5c:	6823      	ldr	r3, [r4, #0]
   b4c5e:	1ac0      	subs	r0, r0, r3
   b4c60:	4b07      	ldr	r3, [pc, #28]	; (b4c80 <_Z19check_day_time_syncv+0x2c>)
   b4c62:	4298      	cmp	r0, r3
   b4c64:	d908      	bls.n	b4c78 <_Z19check_day_time_syncv+0x24>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4c66:	f000 faf9 	bl	b525c <spark_cloud_flag_connected>
        if (!connected()) {
   b4c6a:	b110      	cbz	r0, b4c72 <_Z19check_day_time_syncv+0x1e>
        return spark_sync_time(NULL);
   b4c6c:	2000      	movs	r0, #0
   b4c6e:	f000 fafd 	bl	b526c <spark_sync_time>
   b4c72:	f000 f95f 	bl	b4f34 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   b4c76:	6020      	str	r0, [r4, #0]
}
   b4c78:	bd10      	pop	{r4, pc}
   b4c7a:	bf00      	nop
   b4c7c:	2003e61c 	.word	0x2003e61c
   b4c80:	05265c00 	.word	0x05265c00

000b4c84 <loop>:
void loop() {
   b4c84:	b530      	push	{r4, r5, lr}
   b4c86:	b08d      	sub	sp, #52	; 0x34
  check_day_time_sync();
   b4c88:	f7ff ffe4 	bl	b4c54 <_Z19check_day_time_syncv>
  if(debug){
   b4c8c:	4b1b      	ldr	r3, [pc, #108]	; (b4cfc <loop+0x78>)
   b4c8e:	681b      	ldr	r3, [r3, #0]
   b4c90:	2b00      	cmp	r3, #0
   b4c92:	d031      	beq.n	b4cf8 <loop+0x74>
    flash_led(LED1, 200);
   b4c94:	4b1a      	ldr	r3, [pc, #104]	; (b4d00 <loop+0x7c>)
   b4c96:	4c1b      	ldr	r4, [pc, #108]	; (b4d04 <loop+0x80>)
   b4c98:	6818      	ldr	r0, [r3, #0]
   b4c9a:	21c8      	movs	r1, #200	; 0xc8
   b4c9c:	f7ff ffc6 	bl	b4c2c <_Z9flash_ledii>
        return network_ready(*this, 0,  NULL);
   b4ca0:	2200      	movs	r2, #0
   b4ca2:	6860      	ldr	r0, [r4, #4]
   b4ca4:	4611      	mov	r1, r2
   b4ca6:	f000 fb11 	bl	b52cc <network_ready>
    if (Cellular.ready()) {
   b4caa:	b328      	cbz	r0, b4cf8 <loop+0x74>
      CellularSignal sig = Cellular.RSSI();
   b4cac:	4621      	mov	r1, r4
   b4cae:	a804      	add	r0, sp, #16
   b4cb0:	f000 fbfa 	bl	b54a8 <_ZN5spark13CellularClass4RSSIEv>
      cell_sig_str = sig.getStrength();
   b4cb4:	a804      	add	r0, sp, #16
   b4cb6:	f000 fc73 	bl	b55a0 <_ZNK14CellularSignal11getStrengthEv>
   b4cba:	4d13      	ldr	r5, [pc, #76]	; (b4d08 <loop+0x84>)
      cell_sig_qual = sig.getQuality();
   b4cbc:	a804      	add	r0, sp, #16
      cell_sig_str = sig.getStrength();
   b4cbe:	ed85 0a00 	vstr	s0, [r5]
      cell_sig_qual = sig.getQuality();
   b4cc2:	f000 fc9d 	bl	b5600 <_ZNK14CellularSignal10getQualityEv>
   b4cc6:	4b11      	ldr	r3, [pc, #68]	; (b4d0c <loop+0x88>)
      Log.info("Cellular ready at startup: %f strength and %f quality", cell_sig_str, cell_sig_qual);
   b4cc8:	6828      	ldr	r0, [r5, #0]
      cell_sig_qual = sig.getQuality();
   b4cca:	ed83 0a00 	vstr	s0, [r3]
   b4cce:	ee10 4a10 	vmov	r4, s0
      Log.info("Cellular ready at startup: %f strength and %f quality", cell_sig_str, cell_sig_qual);
   b4cd2:	f7ff fb07 	bl	b42e4 <__aeabi_f2d>
   b4cd6:	4602      	mov	r2, r0
   b4cd8:	460b      	mov	r3, r1
   b4cda:	4620      	mov	r0, r4
   b4cdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b4ce0:	f7ff fb00 	bl	b42e4 <__aeabi_f2d>
   b4ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4ce8:	e9cd 0100 	strd	r0, r1, [sp]
   b4cec:	4908      	ldr	r1, [pc, #32]	; (b4d10 <loop+0x8c>)
   b4cee:	4809      	ldr	r0, [pc, #36]	; (b4d14 <loop+0x90>)
   b4cf0:	f7ff feec 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
      get_battery_voltage();
   b4cf4:	f7ff ff7a 	bl	b4bec <_Z19get_battery_voltagev>
}
   b4cf8:	b00d      	add	sp, #52	; 0x34
   b4cfa:	bd30      	pop	{r4, r5, pc}
   b4cfc:	2003e610 	.word	0x2003e610
   b4d00:	2003e580 	.word	0x2003e580
   b4d04:	2003e648 	.word	0x2003e648
   b4d08:	2003e60c 	.word	0x2003e60c
   b4d0c:	2003e608 	.word	0x2003e608
   b4d10:	000b7c66 	.word	0x000b7c66
   b4d14:	2003e68c 	.word	0x2003e68c

000b4d18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4d18:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4d1a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4d1e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4d20:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4d22:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4d26:	42ae      	cmp	r6, r5
   b4d28:	d004      	beq.n	b4d34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4d2a:	4628      	mov	r0, r5
   b4d2c:	f002 fa12 	bl	b7154 <_ZN6StringD1Ev>
   b4d30:	3514      	adds	r5, #20
   b4d32:	e7f8      	b.n	b4d26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4d34:	6820      	ldr	r0, [r4, #0]
   b4d36:	f000 fb19 	bl	b536c <free>
    AllocatorT::free(data_);
}
   b4d3a:	4620      	mov	r0, r4
   b4d3c:	bd70      	pop	{r4, r5, r6, pc}

000b4d3e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4d3e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d42:	4604      	mov	r4, r0
   b4d44:	460d      	mov	r5, r1
   b4d46:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4d48:	d916      	bls.n	b4d78 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4d4a:	4290      	cmp	r0, r2
   b4d4c:	d215      	bcs.n	b4d7a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4d4e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4d52:	1a75      	subs	r5, r6, r1
   b4d54:	f1a1 0714 	sub.w	r7, r1, #20
   b4d58:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4d5a:	42b7      	cmp	r7, r6
   b4d5c:	d01c      	beq.n	b4d98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4d5e:	b12c      	cbz	r4, b4d6c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4d60:	4631      	mov	r1, r6
   b4d62:	4620      	mov	r0, r4
   b4d64:	f002 fa72 	bl	b724c <_ZN6StringC1EOS_>
   b4d68:	7c33      	ldrb	r3, [r6, #16]
   b4d6a:	7423      	strb	r3, [r4, #16]
   b4d6c:	4630      	mov	r0, r6
   b4d6e:	f002 f9f1 	bl	b7154 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4d72:	3e14      	subs	r6, #20
   b4d74:	3c14      	subs	r4, #20
   b4d76:	e7f0      	b.n	b4d5a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4d78:	d00e      	beq.n	b4d98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4d7a:	42b5      	cmp	r5, r6
   b4d7c:	d00c      	beq.n	b4d98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4d7e:	b12c      	cbz	r4, b4d8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4d80:	4629      	mov	r1, r5
   b4d82:	4620      	mov	r0, r4
   b4d84:	f002 fa62 	bl	b724c <_ZN6StringC1EOS_>
   b4d88:	7c2b      	ldrb	r3, [r5, #16]
   b4d8a:	7423      	strb	r3, [r4, #16]
   b4d8c:	4628      	mov	r0, r5
   b4d8e:	f002 f9e1 	bl	b7154 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4d92:	3514      	adds	r5, #20
   b4d94:	3414      	adds	r4, #20
   b4d96:	e7f0      	b.n	b4d7a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4d9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4d9e:	2300      	movs	r3, #0
   b4da0:	e9c0 3300 	strd	r3, r3, [r0]
   b4da4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4da6:	684f      	ldr	r7, [r1, #4]
   b4da8:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4daa:	4604      	mov	r4, r0
   b4dac:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4dae:	dd23      	ble.n	b4df8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4db0:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4db4:	fb08 f007 	mul.w	r0, r8, r7
   b4db8:	f000 fad0 	bl	b535c <malloc>
            if (!d) {
   b4dbc:	4605      	mov	r5, r0
   b4dbe:	b1d8      	cbz	r0, b4df8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4dc0:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4dc4:	fb08 1202 	mla	r2, r8, r2, r1
   b4dc8:	f7ff ffb9 	bl	b4d3e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4dcc:	6820      	ldr	r0, [r4, #0]
   b4dce:	f000 facd 	bl	b536c <free>
        data_ = d;
   b4dd2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4dd4:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4dd6:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4dda:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4dde:	45b8      	cmp	r8, r7
   b4de0:	d008      	beq.n	b4df4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4de2:	4639      	mov	r1, r7
   b4de4:	4628      	mov	r0, r5
   b4de6:	f002 fa4b 	bl	b7280 <_ZN6StringC1ERKS_>
   b4dea:	7c3b      	ldrb	r3, [r7, #16]
   b4dec:	742b      	strb	r3, [r5, #16]
   b4dee:	3714      	adds	r7, #20
   b4df0:	3514      	adds	r5, #20
   b4df2:	e7f4      	b.n	b4dde <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4df4:	6873      	ldr	r3, [r6, #4]
   b4df6:	6063      	str	r3, [r4, #4]
}
   b4df8:	4620      	mov	r0, r4
   b4dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4e00 <_GLOBAL__sub_I_SystemMode>:
   b4e00:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4e02:	4b28      	ldr	r3, [pc, #160]	; (b4ea4 <_GLOBAL__sub_I_SystemMode+0xa4>)
    SleepResult() {}
   b4e04:	4a28      	ldr	r2, [pc, #160]	; (b4ea8 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b4e06:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4e08:	2400      	movs	r4, #0
   b4e0a:	b08c      	sub	sp, #48	; 0x30
   b4e0c:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4e10:	2001      	movs	r0, #1
   b4e12:	f000 f9e7 	bl	b51e4 <set_system_mode>
SYSTEM_THREAD(ENABLED); // handles data/ cloud messaging in a seperate thread from our setup() and loop()
   b4e16:	4621      	mov	r1, r4
   b4e18:	2001      	movs	r0, #1
   b4e1a:	f000 f9f3 	bl	b5204 <system_thread_set_state>
FuelGauge fuel; // fuel object used to access the battery monitoring circuit
   b4e1e:	4621      	mov	r1, r4
   b4e20:	4822      	ldr	r0, [pc, #136]	; (b4eac <_GLOBAL__sub_I_SystemMode+0xac>)
   b4e22:	f000 fca9 	bl	b5778 <_ZN9FuelGaugeC1Eb>
        capacity_(0) {
   b4e26:	e9cd 4400 	strd	r4, r4, [sp]
   b4e2a:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4e2c:	f002 fb6c 	bl	b7508 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4e30:	4c1f      	ldr	r4, [pc, #124]	; (b4eb0 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b4e32:	4605      	mov	r5, r0
   b4e34:	4669      	mov	r1, sp
   b4e36:	a803      	add	r0, sp, #12
   b4e38:	f7ff ffaf 	bl	b4d9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4e3c:	4626      	mov	r6, r4
        stream_(&stream) {
   b4e3e:	a903      	add	r1, sp, #12
   b4e40:	a806      	add	r0, sp, #24
   b4e42:	f7ff ffaa 	bl	b4d9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4e46:	4b1b      	ldr	r3, [pc, #108]	; (b4eb4 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b4e48:	f846 3b04 	str.w	r3, [r6], #4
   b4e4c:	a906      	add	r1, sp, #24
   b4e4e:	a809      	add	r0, sp, #36	; 0x24
   b4e50:	f7ff ffa3 	bl	b4d9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4e54:	aa09      	add	r2, sp, #36	; 0x24
   b4e56:	211e      	movs	r1, #30
   b4e58:	4630      	mov	r0, r6
   b4e5a:	f001 fc79 	bl	b6750 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4e5e:	a809      	add	r0, sp, #36	; 0x24
   b4e60:	f7ff ff5a 	bl	b4d18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4e64:	a806      	add	r0, sp, #24
   b4e66:	f7ff ff57 	bl	b4d18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4e6a:	4b13      	ldr	r3, [pc, #76]	; (b4eb8 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b4e6c:	6023      	str	r3, [r4, #0]
   b4e6e:	6225      	str	r5, [r4, #32]
   b4e70:	a803      	add	r0, sp, #12
   b4e72:	f7ff ff51 	bl	b4d18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4e76:	4b11      	ldr	r3, [pc, #68]	; (b4ebc <_GLOBAL__sub_I_SystemMode+0xbc>)
   b4e78:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b4e7a:	f002 fb45 	bl	b7508 <_Z16_fetch_usbserialv>
   b4e7e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4e82:	f002 fb31 	bl	b74e8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4e86:	f001 f945 	bl	b6114 <_ZN5spark10LogManager8instanceEv>
   b4e8a:	4621      	mov	r1, r4
   b4e8c:	f001 fb36 	bl	b64fc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b4e90:	4668      	mov	r0, sp
   b4e92:	f7ff ff41 	bl	b4d18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4e96:	f000 f84d 	bl	b4f34 <HAL_Timer_Get_Milli_Seconds>
unsigned long lastSync = millis();
   b4e9a:	4b09      	ldr	r3, [pc, #36]	; (b4ec0 <_GLOBAL__sub_I_SystemMode+0xc0>)
   b4e9c:	6018      	str	r0, [r3, #0]
   b4e9e:	b00c      	add	sp, #48	; 0x30
   b4ea0:	bd70      	pop	{r4, r5, r6, pc}
   b4ea2:	bf00      	nop
   b4ea4:	2003e5f8 	.word	0x2003e5f8
   b4ea8:	ffff0000 	.word	0xffff0000
   b4eac:	2003e614 	.word	0x2003e614
   b4eb0:	2003e620 	.word	0x2003e620
   b4eb4:	000b7ccc 	.word	0x000b7ccc
   b4eb8:	000b7e84 	.word	0x000b7e84
   b4ebc:	000b7ce4 	.word	0x000b7ce4
   b4ec0:	2003e61c 	.word	0x2003e61c

000b4ec4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b4ec4:	b508      	push	{r3, lr}
   b4ec6:	4b02      	ldr	r3, [pc, #8]	; (b4ed0 <cellular_signal+0xc>)
   b4ec8:	681b      	ldr	r3, [r3, #0]
   b4eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4ecc:	9301      	str	r3, [sp, #4]
   b4ece:	bd08      	pop	{r3, pc}
   b4ed0:	00030274 	.word	0x00030274

000b4ed4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4ed4:	b508      	push	{r3, lr}
   b4ed6:	4b02      	ldr	r3, [pc, #8]	; (b4ee0 <os_mutex_recursive_create+0xc>)
   b4ed8:	681b      	ldr	r3, [r3, #0]
   b4eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4edc:	9301      	str	r3, [sp, #4]
   b4ede:	bd08      	pop	{r3, pc}
   b4ee0:	00030248 	.word	0x00030248

000b4ee4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4ee4:	b508      	push	{r3, lr}
   b4ee6:	4b02      	ldr	r3, [pc, #8]	; (b4ef0 <os_mutex_recursive_destroy+0xc>)
   b4ee8:	681b      	ldr	r3, [r3, #0]
   b4eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4eec:	9301      	str	r3, [sp, #4]
   b4eee:	bd08      	pop	{r3, pc}
   b4ef0:	00030248 	.word	0x00030248

000b4ef4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4ef4:	b508      	push	{r3, lr}
   b4ef6:	4b02      	ldr	r3, [pc, #8]	; (b4f00 <os_mutex_recursive_lock+0xc>)
   b4ef8:	681b      	ldr	r3, [r3, #0]
   b4efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4efc:	9301      	str	r3, [sp, #4]
   b4efe:	bd08      	pop	{r3, pc}
   b4f00:	00030248 	.word	0x00030248

000b4f04 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4f04:	b508      	push	{r3, lr}
   b4f06:	4b02      	ldr	r3, [pc, #8]	; (b4f10 <os_mutex_recursive_unlock+0xc>)
   b4f08:	681b      	ldr	r3, [r3, #0]
   b4f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4f0c:	9301      	str	r3, [sp, #4]
   b4f0e:	bd08      	pop	{r3, pc}
   b4f10:	00030248 	.word	0x00030248

000b4f14 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4f14:	b508      	push	{r3, lr}
   b4f16:	4b02      	ldr	r3, [pc, #8]	; (b4f20 <HAL_RNG_GetRandomNumber+0xc>)
   b4f18:	681b      	ldr	r3, [r3, #0]
   b4f1a:	685b      	ldr	r3, [r3, #4]
   b4f1c:	9301      	str	r3, [sp, #4]
   b4f1e:	bd08      	pop	{r3, pc}
   b4f20:	00030218 	.word	0x00030218

000b4f24 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4f24:	b508      	push	{r3, lr}
   b4f26:	4b02      	ldr	r3, [pc, #8]	; (b4f30 <HAL_Delay_Microseconds+0xc>)
   b4f28:	681b      	ldr	r3, [r3, #0]
   b4f2a:	68db      	ldr	r3, [r3, #12]
   b4f2c:	9301      	str	r3, [sp, #4]
   b4f2e:	bd08      	pop	{r3, pc}
   b4f30:	00030218 	.word	0x00030218

000b4f34 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4f34:	b508      	push	{r3, lr}
   b4f36:	4b02      	ldr	r3, [pc, #8]	; (b4f40 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	695b      	ldr	r3, [r3, #20]
   b4f3c:	9301      	str	r3, [sp, #4]
   b4f3e:	bd08      	pop	{r3, pc}
   b4f40:	00030218 	.word	0x00030218

000b4f44 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <hal_gpio_mode+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	689b      	ldr	r3, [r3, #8]
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	0003022c 	.word	0x0003022c

000b4f54 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b02      	ldr	r3, [pc, #8]	; (b4f60 <hal_gpio_get_mode+0xc>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	68db      	ldr	r3, [r3, #12]
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	0003022c 	.word	0x0003022c

000b4f64 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <hal_gpio_write+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	691b      	ldr	r3, [r3, #16]
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	0003022c 	.word	0x0003022c

000b4f74 <hal_i2c_begin_transmission>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <hal_i2c_begin_transmission+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	699b      	ldr	r3, [r3, #24]
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	00030228 	.word	0x00030228

000b4f84 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <hal_i2c_end_transmission+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	69db      	ldr	r3, [r3, #28]
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	00030228 	.word	0x00030228

000b4f94 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <hal_i2c_write+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	6a1b      	ldr	r3, [r3, #32]
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	00030228 	.word	0x00030228

000b4fa4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b02      	ldr	r3, [pc, #8]	; (b4fb0 <hal_i2c_available+0xc>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4fac:	9301      	str	r3, [sp, #4]
   b4fae:	bd08      	pop	{r3, pc}
   b4fb0:	00030228 	.word	0x00030228

000b4fb4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4fb4:	b508      	push	{r3, lr}
   b4fb6:	4b02      	ldr	r3, [pc, #8]	; (b4fc0 <hal_i2c_read+0xc>)
   b4fb8:	681b      	ldr	r3, [r3, #0]
   b4fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4fbc:	9301      	str	r3, [sp, #4]
   b4fbe:	bd08      	pop	{r3, pc}
   b4fc0:	00030228 	.word	0x00030228

000b4fc4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4fc4:	b508      	push	{r3, lr}
   b4fc6:	4b02      	ldr	r3, [pc, #8]	; (b4fd0 <hal_i2c_peek+0xc>)
   b4fc8:	681b      	ldr	r3, [r3, #0]
   b4fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4fcc:	9301      	str	r3, [sp, #4]
   b4fce:	bd08      	pop	{r3, pc}
   b4fd0:	00030228 	.word	0x00030228

000b4fd4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4fd4:	b508      	push	{r3, lr}
   b4fd6:	4b02      	ldr	r3, [pc, #8]	; (b4fe0 <hal_i2c_flush+0xc>)
   b4fd8:	681b      	ldr	r3, [r3, #0]
   b4fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4fdc:	9301      	str	r3, [sp, #4]
   b4fde:	bd08      	pop	{r3, pc}
   b4fe0:	00030228 	.word	0x00030228

000b4fe4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4fe4:	b508      	push	{r3, lr}
   b4fe6:	4b02      	ldr	r3, [pc, #8]	; (b4ff0 <hal_i2c_is_enabled+0xc>)
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4fec:	9301      	str	r3, [sp, #4]
   b4fee:	bd08      	pop	{r3, pc}
   b4ff0:	00030228 	.word	0x00030228

000b4ff4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4ff4:	b508      	push	{r3, lr}
   b4ff6:	4b02      	ldr	r3, [pc, #8]	; (b5000 <hal_i2c_init+0xc>)
   b4ff8:	681b      	ldr	r3, [r3, #0]
   b4ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ffc:	9301      	str	r3, [sp, #4]
   b4ffe:	bd08      	pop	{r3, pc}
   b5000:	00030228 	.word	0x00030228

000b5004 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b5004:	b508      	push	{r3, lr}
   b5006:	4b02      	ldr	r3, [pc, #8]	; (b5010 <hal_i2c_lock+0xc>)
   b5008:	681b      	ldr	r3, [r3, #0]
   b500a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b500c:	9301      	str	r3, [sp, #4]
   b500e:	bd08      	pop	{r3, pc}
   b5010:	00030228 	.word	0x00030228

000b5014 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b5014:	b508      	push	{r3, lr}
   b5016:	4b02      	ldr	r3, [pc, #8]	; (b5020 <hal_i2c_unlock+0xc>)
   b5018:	681b      	ldr	r3, [r3, #0]
   b501a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b501c:	9301      	str	r3, [sp, #4]
   b501e:	bd08      	pop	{r3, pc}
   b5020:	00030228 	.word	0x00030228

000b5024 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5024:	b508      	push	{r3, lr}
   b5026:	4b02      	ldr	r3, [pc, #8]	; (b5030 <hal_i2c_request_ex+0xc>)
   b5028:	681b      	ldr	r3, [r3, #0]
   b502a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b502c:	9301      	str	r3, [sp, #4]
   b502e:	bd08      	pop	{r3, pc}
   b5030:	00030228 	.word	0x00030228

000b5034 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5034:	b508      	push	{r3, lr}
   b5036:	4b02      	ldr	r3, [pc, #8]	; (b5040 <inet_inet_ntop+0xc>)
   b5038:	681b      	ldr	r3, [r3, #0]
   b503a:	695b      	ldr	r3, [r3, #20]
   b503c:	9301      	str	r3, [sp, #4]
   b503e:	bd08      	pop	{r3, pc}
   b5040:	00030264 	.word	0x00030264

000b5044 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5044:	b508      	push	{r3, lr}
   b5046:	4b02      	ldr	r3, [pc, #8]	; (b5050 <netdb_freeaddrinfo+0xc>)
   b5048:	681b      	ldr	r3, [r3, #0]
   b504a:	689b      	ldr	r3, [r3, #8]
   b504c:	9301      	str	r3, [sp, #4]
   b504e:	bd08      	pop	{r3, pc}
   b5050:	00030268 	.word	0x00030268

000b5054 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5054:	b508      	push	{r3, lr}
   b5056:	4b02      	ldr	r3, [pc, #8]	; (b5060 <netdb_getaddrinfo+0xc>)
   b5058:	681b      	ldr	r3, [r3, #0]
   b505a:	68db      	ldr	r3, [r3, #12]
   b505c:	9301      	str	r3, [sp, #4]
   b505e:	bd08      	pop	{r3, pc}
   b5060:	00030268 	.word	0x00030268

000b5064 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5064:	b508      	push	{r3, lr}
   b5066:	4b02      	ldr	r3, [pc, #8]	; (b5070 <hal_spi_init+0xc>)
   b5068:	681b      	ldr	r3, [r3, #0]
   b506a:	69db      	ldr	r3, [r3, #28]
   b506c:	9301      	str	r3, [sp, #4]
   b506e:	bd08      	pop	{r3, pc}
   b5070:	00030230 	.word	0x00030230

000b5074 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5074:	b508      	push	{r3, lr}
   b5076:	4b02      	ldr	r3, [pc, #8]	; (b5080 <hal_spi_is_enabled+0xc>)
   b5078:	681b      	ldr	r3, [r3, #0]
   b507a:	6a1b      	ldr	r3, [r3, #32]
   b507c:	9301      	str	r3, [sp, #4]
   b507e:	bd08      	pop	{r3, pc}
   b5080:	00030230 	.word	0x00030230

000b5084 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b5084:	b508      	push	{r3, lr}
   b5086:	4b02      	ldr	r3, [pc, #8]	; (b5090 <hal_usart_end+0xc>)
   b5088:	681b      	ldr	r3, [r3, #0]
   b508a:	689b      	ldr	r3, [r3, #8]
   b508c:	9301      	str	r3, [sp, #4]
   b508e:	bd08      	pop	{r3, pc}
   b5090:	0003023c 	.word	0x0003023c

000b5094 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5094:	b508      	push	{r3, lr}
   b5096:	4b02      	ldr	r3, [pc, #8]	; (b50a0 <hal_usart_write+0xc>)
   b5098:	681b      	ldr	r3, [r3, #0]
   b509a:	68db      	ldr	r3, [r3, #12]
   b509c:	9301      	str	r3, [sp, #4]
   b509e:	bd08      	pop	{r3, pc}
   b50a0:	0003023c 	.word	0x0003023c

000b50a4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b50a4:	b508      	push	{r3, lr}
   b50a6:	4b02      	ldr	r3, [pc, #8]	; (b50b0 <hal_usart_available+0xc>)
   b50a8:	681b      	ldr	r3, [r3, #0]
   b50aa:	691b      	ldr	r3, [r3, #16]
   b50ac:	9301      	str	r3, [sp, #4]
   b50ae:	bd08      	pop	{r3, pc}
   b50b0:	0003023c 	.word	0x0003023c

000b50b4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b50b4:	b508      	push	{r3, lr}
   b50b6:	4b02      	ldr	r3, [pc, #8]	; (b50c0 <hal_usart_read+0xc>)
   b50b8:	681b      	ldr	r3, [r3, #0]
   b50ba:	695b      	ldr	r3, [r3, #20]
   b50bc:	9301      	str	r3, [sp, #4]
   b50be:	bd08      	pop	{r3, pc}
   b50c0:	0003023c 	.word	0x0003023c

000b50c4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b50c4:	b508      	push	{r3, lr}
   b50c6:	4b02      	ldr	r3, [pc, #8]	; (b50d0 <hal_usart_peek+0xc>)
   b50c8:	681b      	ldr	r3, [r3, #0]
   b50ca:	699b      	ldr	r3, [r3, #24]
   b50cc:	9301      	str	r3, [sp, #4]
   b50ce:	bd08      	pop	{r3, pc}
   b50d0:	0003023c 	.word	0x0003023c

000b50d4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b50d4:	b508      	push	{r3, lr}
   b50d6:	4b02      	ldr	r3, [pc, #8]	; (b50e0 <hal_usart_flush+0xc>)
   b50d8:	681b      	ldr	r3, [r3, #0]
   b50da:	69db      	ldr	r3, [r3, #28]
   b50dc:	9301      	str	r3, [sp, #4]
   b50de:	bd08      	pop	{r3, pc}
   b50e0:	0003023c 	.word	0x0003023c

000b50e4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b50e4:	b508      	push	{r3, lr}
   b50e6:	4b02      	ldr	r3, [pc, #8]	; (b50f0 <hal_usart_is_enabled+0xc>)
   b50e8:	681b      	ldr	r3, [r3, #0]
   b50ea:	6a1b      	ldr	r3, [r3, #32]
   b50ec:	9301      	str	r3, [sp, #4]
   b50ee:	bd08      	pop	{r3, pc}
   b50f0:	0003023c 	.word	0x0003023c

000b50f4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b50f4:	b508      	push	{r3, lr}
   b50f6:	4b02      	ldr	r3, [pc, #8]	; (b5100 <hal_usart_available_data_for_write+0xc>)
   b50f8:	681b      	ldr	r3, [r3, #0]
   b50fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b50fc:	9301      	str	r3, [sp, #4]
   b50fe:	bd08      	pop	{r3, pc}
   b5100:	0003023c 	.word	0x0003023c

000b5104 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b5104:	b508      	push	{r3, lr}
   b5106:	4b02      	ldr	r3, [pc, #8]	; (b5110 <hal_usart_begin_config+0xc>)
   b5108:	681b      	ldr	r3, [r3, #0]
   b510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b510c:	9301      	str	r3, [sp, #4]
   b510e:	bd08      	pop	{r3, pc}
   b5110:	0003023c 	.word	0x0003023c

000b5114 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5114:	b508      	push	{r3, lr}
   b5116:	4b02      	ldr	r3, [pc, #8]	; (b5120 <hal_usart_init_ex+0xc>)
   b5118:	681b      	ldr	r3, [r3, #0]
   b511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b511c:	9301      	str	r3, [sp, #4]
   b511e:	bd08      	pop	{r3, pc}
   b5120:	0003023c 	.word	0x0003023c

000b5124 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5124:	b508      	push	{r3, lr}
   b5126:	4b02      	ldr	r3, [pc, #8]	; (b5130 <HAL_USB_USART_Init+0xc>)
   b5128:	681b      	ldr	r3, [r3, #0]
   b512a:	681b      	ldr	r3, [r3, #0]
   b512c:	9301      	str	r3, [sp, #4]
   b512e:	bd08      	pop	{r3, pc}
   b5130:	0003024c 	.word	0x0003024c

000b5134 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5134:	b508      	push	{r3, lr}
   b5136:	4b02      	ldr	r3, [pc, #8]	; (b5140 <HAL_USB_USART_Begin+0xc>)
   b5138:	681b      	ldr	r3, [r3, #0]
   b513a:	685b      	ldr	r3, [r3, #4]
   b513c:	9301      	str	r3, [sp, #4]
   b513e:	bd08      	pop	{r3, pc}
   b5140:	0003024c 	.word	0x0003024c

000b5144 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b5144:	b508      	push	{r3, lr}
   b5146:	4b02      	ldr	r3, [pc, #8]	; (b5150 <HAL_USB_USART_End+0xc>)
   b5148:	681b      	ldr	r3, [r3, #0]
   b514a:	689b      	ldr	r3, [r3, #8]
   b514c:	9301      	str	r3, [sp, #4]
   b514e:	bd08      	pop	{r3, pc}
   b5150:	0003024c 	.word	0x0003024c

000b5154 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5154:	b508      	push	{r3, lr}
   b5156:	4b02      	ldr	r3, [pc, #8]	; (b5160 <HAL_USB_USART_Available_Data+0xc>)
   b5158:	681b      	ldr	r3, [r3, #0]
   b515a:	691b      	ldr	r3, [r3, #16]
   b515c:	9301      	str	r3, [sp, #4]
   b515e:	bd08      	pop	{r3, pc}
   b5160:	0003024c 	.word	0x0003024c

000b5164 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5164:	b508      	push	{r3, lr}
   b5166:	4b02      	ldr	r3, [pc, #8]	; (b5170 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5168:	681b      	ldr	r3, [r3, #0]
   b516a:	695b      	ldr	r3, [r3, #20]
   b516c:	9301      	str	r3, [sp, #4]
   b516e:	bd08      	pop	{r3, pc}
   b5170:	0003024c 	.word	0x0003024c

000b5174 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5174:	b508      	push	{r3, lr}
   b5176:	4b02      	ldr	r3, [pc, #8]	; (b5180 <HAL_USB_USART_Receive_Data+0xc>)
   b5178:	681b      	ldr	r3, [r3, #0]
   b517a:	699b      	ldr	r3, [r3, #24]
   b517c:	9301      	str	r3, [sp, #4]
   b517e:	bd08      	pop	{r3, pc}
   b5180:	0003024c 	.word	0x0003024c

000b5184 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5184:	b508      	push	{r3, lr}
   b5186:	4b02      	ldr	r3, [pc, #8]	; (b5190 <HAL_USB_USART_Send_Data+0xc>)
   b5188:	681b      	ldr	r3, [r3, #0]
   b518a:	69db      	ldr	r3, [r3, #28]
   b518c:	9301      	str	r3, [sp, #4]
   b518e:	bd08      	pop	{r3, pc}
   b5190:	0003024c 	.word	0x0003024c

000b5194 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5194:	b508      	push	{r3, lr}
   b5196:	4b02      	ldr	r3, [pc, #8]	; (b51a0 <HAL_USB_USART_Flush_Data+0xc>)
   b5198:	681b      	ldr	r3, [r3, #0]
   b519a:	6a1b      	ldr	r3, [r3, #32]
   b519c:	9301      	str	r3, [sp, #4]
   b519e:	bd08      	pop	{r3, pc}
   b51a0:	0003024c 	.word	0x0003024c

000b51a4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b51a4:	b508      	push	{r3, lr}
   b51a6:	4b02      	ldr	r3, [pc, #8]	; (b51b0 <panic_+0xc>)
   b51a8:	681b      	ldr	r3, [r3, #0]
   b51aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b51ac:	9301      	str	r3, [sp, #4]
   b51ae:	bd08      	pop	{r3, pc}
   b51b0:	00030260 	.word	0x00030260

000b51b4 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b51b4:	b508      	push	{r3, lr}
   b51b6:	4b02      	ldr	r3, [pc, #8]	; (b51c0 <log_message_v+0xc>)
   b51b8:	681b      	ldr	r3, [r3, #0]
   b51ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b51bc:	9301      	str	r3, [sp, #4]
   b51be:	bd08      	pop	{r3, pc}
   b51c0:	00030260 	.word	0x00030260

000b51c4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b51c4:	b508      	push	{r3, lr}
   b51c6:	4b02      	ldr	r3, [pc, #8]	; (b51d0 <log_level_name+0xc>)
   b51c8:	681b      	ldr	r3, [r3, #0]
   b51ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b51cc:	9301      	str	r3, [sp, #4]
   b51ce:	bd08      	pop	{r3, pc}
   b51d0:	00030260 	.word	0x00030260

000b51d4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b51d4:	b508      	push	{r3, lr}
   b51d6:	4b02      	ldr	r3, [pc, #8]	; (b51e0 <log_set_callbacks+0xc>)
   b51d8:	681b      	ldr	r3, [r3, #0]
   b51da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b51dc:	9301      	str	r3, [sp, #4]
   b51de:	bd08      	pop	{r3, pc}
   b51e0:	00030260 	.word	0x00030260

000b51e4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b51e4:	b508      	push	{r3, lr}
   b51e6:	4b02      	ldr	r3, [pc, #8]	; (b51f0 <set_system_mode+0xc>)
   b51e8:	681b      	ldr	r3, [r3, #0]
   b51ea:	685b      	ldr	r3, [r3, #4]
   b51ec:	9301      	str	r3, [sp, #4]
   b51ee:	bd08      	pop	{r3, pc}
   b51f0:	00030220 	.word	0x00030220

000b51f4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b51f4:	b508      	push	{r3, lr}
   b51f6:	4b02      	ldr	r3, [pc, #8]	; (b5200 <system_delay_ms+0xc>)
   b51f8:	681b      	ldr	r3, [r3, #0]
   b51fa:	695b      	ldr	r3, [r3, #20]
   b51fc:	9301      	str	r3, [sp, #4]
   b51fe:	bd08      	pop	{r3, pc}
   b5200:	00030220 	.word	0x00030220

000b5204 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5204:	b508      	push	{r3, lr}
   b5206:	4b02      	ldr	r3, [pc, #8]	; (b5210 <system_thread_set_state+0xc>)
   b5208:	681b      	ldr	r3, [r3, #0]
   b520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b520c:	9301      	str	r3, [sp, #4]
   b520e:	bd08      	pop	{r3, pc}
   b5210:	00030220 	.word	0x00030220

000b5214 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5214:	b508      	push	{r3, lr}
   b5216:	4b03      	ldr	r3, [pc, #12]	; (b5224 <system_ctrl_set_app_request_handler+0x10>)
   b5218:	681b      	ldr	r3, [r3, #0]
   b521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b521e:	9301      	str	r3, [sp, #4]
   b5220:	bd08      	pop	{r3, pc}
   b5222:	0000      	.short	0x0000
   b5224:	00030220 	.word	0x00030220

000b5228 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5228:	b508      	push	{r3, lr}
   b522a:	4b03      	ldr	r3, [pc, #12]	; (b5238 <system_ctrl_set_result+0x10>)
   b522c:	681b      	ldr	r3, [r3, #0]
   b522e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5232:	9301      	str	r3, [sp, #4]
   b5234:	bd08      	pop	{r3, pc}
   b5236:	0000      	.short	0x0000
   b5238:	00030220 	.word	0x00030220

000b523c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b523c:	b508      	push	{r3, lr}
   b523e:	4b02      	ldr	r3, [pc, #8]	; (b5248 <spark_variable+0xc>)
   b5240:	681b      	ldr	r3, [r3, #0]
   b5242:	681b      	ldr	r3, [r3, #0]
   b5244:	9301      	str	r3, [sp, #4]
   b5246:	bd08      	pop	{r3, pc}
   b5248:	00030244 	.word	0x00030244

000b524c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b524c:	b508      	push	{r3, lr}
   b524e:	4b02      	ldr	r3, [pc, #8]	; (b5258 <spark_function+0xc>)
   b5250:	681b      	ldr	r3, [r3, #0]
   b5252:	685b      	ldr	r3, [r3, #4]
   b5254:	9301      	str	r3, [sp, #4]
   b5256:	bd08      	pop	{r3, pc}
   b5258:	00030244 	.word	0x00030244

000b525c <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b525c:	b508      	push	{r3, lr}
   b525e:	4b02      	ldr	r3, [pc, #8]	; (b5268 <spark_cloud_flag_connected+0xc>)
   b5260:	681b      	ldr	r3, [r3, #0]
   b5262:	695b      	ldr	r3, [r3, #20]
   b5264:	9301      	str	r3, [sp, #4]
   b5266:	bd08      	pop	{r3, pc}
   b5268:	00030244 	.word	0x00030244

000b526c <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b526c:	b508      	push	{r3, lr}
   b526e:	4b02      	ldr	r3, [pc, #8]	; (b5278 <spark_sync_time+0xc>)
   b5270:	681b      	ldr	r3, [r3, #0]
   b5272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5274:	9301      	str	r3, [sp, #4]
   b5276:	bd08      	pop	{r3, pc}
   b5278:	00030244 	.word	0x00030244

000b527c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b527c:	b508      	push	{r3, lr}
   b527e:	4b02      	ldr	r3, [pc, #8]	; (b5288 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5280:	681b      	ldr	r3, [r3, #0]
   b5282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5284:	9301      	str	r3, [sp, #4]
   b5286:	bd08      	pop	{r3, pc}
   b5288:	00030244 	.word	0x00030244

000b528c <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   b528c:	b508      	push	{r3, lr}
   b528e:	4b02      	ldr	r3, [pc, #8]	; (b5298 <network_config+0xc>)
   b5290:	681b      	ldr	r3, [r3, #0]
   b5292:	681b      	ldr	r3, [r3, #0]
   b5294:	9301      	str	r3, [sp, #4]
   b5296:	bd08      	pop	{r3, pc}
   b5298:	00030240 	.word	0x00030240

000b529c <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b529c:	b508      	push	{r3, lr}
   b529e:	4b02      	ldr	r3, [pc, #8]	; (b52a8 <network_connect+0xc>)
   b52a0:	681b      	ldr	r3, [r3, #0]
   b52a2:	685b      	ldr	r3, [r3, #4]
   b52a4:	9301      	str	r3, [sp, #4]
   b52a6:	bd08      	pop	{r3, pc}
   b52a8:	00030240 	.word	0x00030240

000b52ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b52ac:	b508      	push	{r3, lr}
   b52ae:	4b02      	ldr	r3, [pc, #8]	; (b52b8 <network_connecting+0xc>)
   b52b0:	681b      	ldr	r3, [r3, #0]
   b52b2:	689b      	ldr	r3, [r3, #8]
   b52b4:	9301      	str	r3, [sp, #4]
   b52b6:	bd08      	pop	{r3, pc}
   b52b8:	00030240 	.word	0x00030240

000b52bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b52bc:	b508      	push	{r3, lr}
   b52be:	4b02      	ldr	r3, [pc, #8]	; (b52c8 <network_disconnect+0xc>)
   b52c0:	681b      	ldr	r3, [r3, #0]
   b52c2:	68db      	ldr	r3, [r3, #12]
   b52c4:	9301      	str	r3, [sp, #4]
   b52c6:	bd08      	pop	{r3, pc}
   b52c8:	00030240 	.word	0x00030240

000b52cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b52cc:	b508      	push	{r3, lr}
   b52ce:	4b02      	ldr	r3, [pc, #8]	; (b52d8 <network_ready+0xc>)
   b52d0:	681b      	ldr	r3, [r3, #0]
   b52d2:	691b      	ldr	r3, [r3, #16]
   b52d4:	9301      	str	r3, [sp, #4]
   b52d6:	bd08      	pop	{r3, pc}
   b52d8:	00030240 	.word	0x00030240

000b52dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b52dc:	b508      	push	{r3, lr}
   b52de:	4b02      	ldr	r3, [pc, #8]	; (b52e8 <network_on+0xc>)
   b52e0:	681b      	ldr	r3, [r3, #0]
   b52e2:	695b      	ldr	r3, [r3, #20]
   b52e4:	9301      	str	r3, [sp, #4]
   b52e6:	bd08      	pop	{r3, pc}
   b52e8:	00030240 	.word	0x00030240

000b52ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b52ec:	b508      	push	{r3, lr}
   b52ee:	4b02      	ldr	r3, [pc, #8]	; (b52f8 <network_off+0xc>)
   b52f0:	681b      	ldr	r3, [r3, #0]
   b52f2:	699b      	ldr	r3, [r3, #24]
   b52f4:	9301      	str	r3, [sp, #4]
   b52f6:	bd08      	pop	{r3, pc}
   b52f8:	00030240 	.word	0x00030240

000b52fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b52fc:	b508      	push	{r3, lr}
   b52fe:	4b02      	ldr	r3, [pc, #8]	; (b5308 <network_listen+0xc>)
   b5300:	681b      	ldr	r3, [r3, #0]
   b5302:	69db      	ldr	r3, [r3, #28]
   b5304:	9301      	str	r3, [sp, #4]
   b5306:	bd08      	pop	{r3, pc}
   b5308:	00030240 	.word	0x00030240

000b530c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b530c:	b508      	push	{r3, lr}
   b530e:	4b02      	ldr	r3, [pc, #8]	; (b5318 <network_listening+0xc>)
   b5310:	681b      	ldr	r3, [r3, #0]
   b5312:	6a1b      	ldr	r3, [r3, #32]
   b5314:	9301      	str	r3, [sp, #4]
   b5316:	bd08      	pop	{r3, pc}
   b5318:	00030240 	.word	0x00030240

000b531c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b531c:	b508      	push	{r3, lr}
   b531e:	4b02      	ldr	r3, [pc, #8]	; (b5328 <network_set_listen_timeout+0xc>)
   b5320:	681b      	ldr	r3, [r3, #0]
   b5322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5324:	9301      	str	r3, [sp, #4]
   b5326:	bd08      	pop	{r3, pc}
   b5328:	00030240 	.word	0x00030240

000b532c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b532c:	b508      	push	{r3, lr}
   b532e:	4b02      	ldr	r3, [pc, #8]	; (b5338 <network_get_listen_timeout+0xc>)
   b5330:	681b      	ldr	r3, [r3, #0]
   b5332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5334:	9301      	str	r3, [sp, #4]
   b5336:	bd08      	pop	{r3, pc}
   b5338:	00030240 	.word	0x00030240

000b533c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b533c:	b508      	push	{r3, lr}
   b533e:	4b02      	ldr	r3, [pc, #8]	; (b5348 <network_is_on+0xc>)
   b5340:	681b      	ldr	r3, [r3, #0]
   b5342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5344:	9301      	str	r3, [sp, #4]
   b5346:	bd08      	pop	{r3, pc}
   b5348:	00030240 	.word	0x00030240

000b534c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b534c:	b508      	push	{r3, lr}
   b534e:	4b02      	ldr	r3, [pc, #8]	; (b5358 <network_is_off+0xc>)
   b5350:	681b      	ldr	r3, [r3, #0]
   b5352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5354:	9301      	str	r3, [sp, #4]
   b5356:	bd08      	pop	{r3, pc}
   b5358:	00030240 	.word	0x00030240

000b535c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b535c:	b508      	push	{r3, lr}
   b535e:	4b02      	ldr	r3, [pc, #8]	; (b5368 <malloc+0xc>)
   b5360:	681b      	ldr	r3, [r3, #0]
   b5362:	681b      	ldr	r3, [r3, #0]
   b5364:	9301      	str	r3, [sp, #4]
   b5366:	bd08      	pop	{r3, pc}
   b5368:	0003021c 	.word	0x0003021c

000b536c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b536c:	b508      	push	{r3, lr}
   b536e:	4b02      	ldr	r3, [pc, #8]	; (b5378 <free+0xc>)
   b5370:	681b      	ldr	r3, [r3, #0]
   b5372:	685b      	ldr	r3, [r3, #4]
   b5374:	9301      	str	r3, [sp, #4]
   b5376:	bd08      	pop	{r3, pc}
   b5378:	0003021c 	.word	0x0003021c

000b537c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b537c:	b508      	push	{r3, lr}
   b537e:	4b02      	ldr	r3, [pc, #8]	; (b5388 <realloc+0xc>)
   b5380:	681b      	ldr	r3, [r3, #0]
   b5382:	689b      	ldr	r3, [r3, #8]
   b5384:	9301      	str	r3, [sp, #4]
   b5386:	bd08      	pop	{r3, pc}
   b5388:	0003021c 	.word	0x0003021c

000b538c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b538c:	b508      	push	{r3, lr}
   b538e:	4b02      	ldr	r3, [pc, #8]	; (b5398 <vsnprintf+0xc>)
   b5390:	681b      	ldr	r3, [r3, #0]
   b5392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5394:	9301      	str	r3, [sp, #4]
   b5396:	bd08      	pop	{r3, pc}
   b5398:	0003021c 	.word	0x0003021c

000b539c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b539c:	b508      	push	{r3, lr}
   b539e:	4b02      	ldr	r3, [pc, #8]	; (b53a8 <__errno+0xc>)
   b53a0:	681b      	ldr	r3, [r3, #0]
   b53a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b53a4:	9301      	str	r3, [sp, #4]
   b53a6:	bd08      	pop	{r3, pc}
   b53a8:	0003021c 	.word	0x0003021c

000b53ac <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b53ac:	b508      	push	{r3, lr}
   b53ae:	4b02      	ldr	r3, [pc, #8]	; (b53b8 <__assert_func+0xc>)
   b53b0:	681b      	ldr	r3, [r3, #0]
   b53b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b53b4:	9301      	str	r3, [sp, #4]
   b53b6:	bd08      	pop	{r3, pc}
   b53b8:	0003021c 	.word	0x0003021c

000b53bc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b53bc:	b508      	push	{r3, lr}
   b53be:	4b02      	ldr	r3, [pc, #8]	; (b53c8 <newlib_impure_ptr_callback+0xc>)
   b53c0:	681b      	ldr	r3, [r3, #0]
   b53c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b53c4:	9301      	str	r3, [sp, #4]
   b53c6:	bd08      	pop	{r3, pc}
   b53c8:	0003021c 	.word	0x0003021c

000b53cc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b53cc:	2100      	movs	r1, #0
   b53ce:	f7ff bf11 	b.w	b51f4 <system_delay_ms>

000b53d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b53d2:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b53d4:	6843      	ldr	r3, [r0, #4]
   b53d6:	3b01      	subs	r3, #1
    {
   b53d8:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b53da:	6043      	str	r3, [r0, #4]
   b53dc:	b963      	cbnz	r3, b53f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b53de:	6803      	ldr	r3, [r0, #0]
   b53e0:	689b      	ldr	r3, [r3, #8]
   b53e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b53e4:	68a3      	ldr	r3, [r4, #8]
   b53e6:	3b01      	subs	r3, #1
   b53e8:	60a3      	str	r3, [r4, #8]
   b53ea:	b92b      	cbnz	r3, b53f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b53ec:	6823      	ldr	r3, [r4, #0]
   b53ee:	4620      	mov	r0, r4
   b53f0:	68db      	ldr	r3, [r3, #12]
        }
    }
   b53f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b53f6:	4718      	bx	r3
    }
   b53f8:	bd10      	pop	{r4, pc}

000b53fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b53fa:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b53fc:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5400:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5402:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b5406:	42ae      	cmp	r6, r5
   b5408:	d004      	beq.n	b5414 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b540a:	4628      	mov	r0, r5
   b540c:	f001 fea2 	bl	b7154 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5410:	3510      	adds	r5, #16
   b5412:	e7f8      	b.n	b5406 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5414:	6820      	ldr	r0, [r4, #0]
   b5416:	f7ff ffa9 	bl	b536c <free>
    AllocatorT::free(data_);
}
   b541a:	4620      	mov	r0, r4
   b541c:	bd70      	pop	{r4, r5, r6, pc}

000b541e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b541e:	b510      	push	{r4, lr}
   b5420:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b5422:	6800      	ldr	r0, [r0, #0]
   b5424:	b108      	cbz	r0, b542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b5426:	f7ff ffd4 	bl	b53d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b542a:	4620      	mov	r0, r4
   b542c:	bd10      	pop	{r4, pc}
	...

000b5430 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5430:	4802      	ldr	r0, [pc, #8]	; (b543c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5432:	2300      	movs	r3, #0
   b5434:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5436:	f7ff bd4d 	b.w	b4ed4 <os_mutex_recursive_create>
   b543a:	bf00      	nop
   b543c:	2003e644 	.word	0x2003e644

000b5440 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b5440:	2200      	movs	r2, #0
   b5442:	6840      	ldr	r0, [r0, #4]
   b5444:	4611      	mov	r1, r2
   b5446:	f7ff bf41 	b.w	b52cc <network_ready>

000b544a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b544a:	2200      	movs	r2, #0
   b544c:	6840      	ldr	r0, [r0, #4]
   b544e:	4611      	mov	r1, r2
   b5450:	f7ff bf5c 	b.w	b530c <network_listening>

000b5454 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5454:	2200      	movs	r2, #0
   b5456:	6840      	ldr	r0, [r0, #4]
   b5458:	4611      	mov	r1, r2
   b545a:	f7ff bf67 	b.w	b532c <network_get_listen_timeout>

000b545e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b545e:	6840      	ldr	r0, [r0, #4]
   b5460:	2200      	movs	r2, #0
   b5462:	f7ff bf5b 	b.w	b531c <network_set_listen_timeout>

000b5466 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5466:	6840      	ldr	r0, [r0, #4]
   b5468:	2200      	movs	r2, #0
   b546a:	f081 0101 	eor.w	r1, r1, #1
   b546e:	f7ff bf45 	b.w	b52fc <network_listen>

000b5472 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5472:	2300      	movs	r3, #0
   b5474:	6840      	ldr	r0, [r0, #4]
   b5476:	461a      	mov	r2, r3
   b5478:	4619      	mov	r1, r3
   b547a:	f7ff bf37 	b.w	b52ec <network_off>

000b547e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b547e:	2300      	movs	r3, #0
   b5480:	6840      	ldr	r0, [r0, #4]
   b5482:	461a      	mov	r2, r3
   b5484:	4619      	mov	r1, r3
   b5486:	f7ff bf29 	b.w	b52dc <network_on>

000b548a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b548a:	2200      	movs	r2, #0
   b548c:	6840      	ldr	r0, [r0, #4]
   b548e:	4611      	mov	r1, r2
   b5490:	f7ff bf0c 	b.w	b52ac <network_connecting>

000b5494 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5494:	6840      	ldr	r0, [r0, #4]
   b5496:	2200      	movs	r2, #0
   b5498:	2102      	movs	r1, #2
   b549a:	f7ff bf0f 	b.w	b52bc <network_disconnect>

000b549e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b549e:	2300      	movs	r3, #0
   b54a0:	6840      	ldr	r0, [r0, #4]
   b54a2:	461a      	mov	r2, r3
   b54a4:	f7ff befa 	b.w	b529c <network_connect>

000b54a8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b54a8:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b54aa:	4b13      	ldr	r3, [pc, #76]	; (b54f8 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b54ac:	6003      	str	r3, [r0, #0]
   b54ae:	2518      	movs	r5, #24
   b54b0:	3330      	adds	r3, #48	; 0x30
   b54b2:	b086      	sub	sp, #24
   b54b4:	460e      	mov	r6, r1
   b54b6:	6043      	str	r3, [r0, #4]
   b54b8:	462a      	mov	r2, r5
   b54ba:	2100      	movs	r1, #0
   b54bc:	4604      	mov	r4, r0
   b54be:	3008      	adds	r0, #8
   b54c0:	f002 fa44 	bl	b794c <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b54c4:	2200      	movs	r2, #0
   b54c6:	6870      	ldr	r0, [r6, #4]
   b54c8:	4611      	mov	r1, r2
   b54ca:	f7ff feff 	bl	b52cc <network_ready>
   b54ce:	b178      	cbz	r0, b54f0 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b54d0:	2100      	movs	r1, #0
   b54d2:	462a      	mov	r2, r5
   b54d4:	4668      	mov	r0, sp
   b54d6:	f002 fa39 	bl	b794c <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b54da:	4669      	mov	r1, sp
   b54dc:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b54de:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b54e2:	f7ff fcef 	bl	b4ec4 <cellular_signal>
   b54e6:	b918      	cbnz	r0, b54f0 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b54e8:	4669      	mov	r1, sp
   b54ea:	4620      	mov	r0, r4
   b54ec:	f000 f8b8 	bl	b5660 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b54f0:	4620      	mov	r0, r4
   b54f2:	b006      	add	sp, #24
   b54f4:	bd70      	pop	{r4, r5, r6, pc}
   b54f6:	bf00      	nop
   b54f8:	000b7d38 	.word	0x000b7d38

000b54fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b54fc:	4b08      	ldr	r3, [pc, #32]	; (b5520 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b54fe:	b510      	push	{r4, lr}
   b5500:	2428      	movs	r4, #40	; 0x28
   b5502:	4622      	mov	r2, r4
   b5504:	4618      	mov	r0, r3
   b5506:	2100      	movs	r1, #0
   b5508:	f002 fa20 	bl	b794c <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b550c:	4b05      	ldr	r3, [pc, #20]	; (b5524 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b550e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b5510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5514:	6042      	str	r2, [r0, #4]
   b5516:	2204      	movs	r2, #4
   b5518:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b551a:	4a03      	ldr	r2, [pc, #12]	; (b5528 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b551c:	601a      	str	r2, [r3, #0]
   b551e:	bd10      	pop	{r4, pc}
   b5520:	2003e650 	.word	0x2003e650
   b5524:	2003e648 	.word	0x2003e648
   b5528:	000b7cfc 	.word	0x000b7cfc

000b552c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b552c:	4770      	bx	lr

000b552e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b552e:	7b00      	ldrb	r0, [r0, #12]
   b5530:	4770      	bx	lr

000b5532 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b5532:	7b03      	ldrb	r3, [r0, #12]
   b5534:	b14b      	cbz	r3, b554a <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b5536:	6903      	ldr	r3, [r0, #16]
   b5538:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b553c:	d005      	beq.n	b554a <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b553e:	6980      	ldr	r0, [r0, #24]
   b5540:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b5544:	bf18      	it	ne
   b5546:	2001      	movne	r0, #1
   b5548:	4770      	bx	lr
   b554a:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b554c:	4770      	bx	lr

000b554e <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b554e:	6803      	ldr	r3, [r0, #0]
   b5550:	6a1b      	ldr	r3, [r3, #32]
   b5552:	4718      	bx	r3

000b5554 <_ZNK14CellularSignal7printToER5Print>:
{
   b5554:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b5556:	6803      	ldr	r3, [r0, #0]
{
   b5558:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b555a:	691b      	ldr	r3, [r3, #16]
{
   b555c:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b555e:	4798      	blx	r3
   b5560:	2102      	movs	r1, #2
   b5562:	4628      	mov	r0, r5
   b5564:	f001 fdce 	bl	b7104 <_ZN5Print5printEfi>
    n += p.print(',');
   b5568:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b556a:	4604      	mov	r4, r0
    n += p.print(',');
   b556c:	4628      	mov	r0, r5
   b556e:	f001 fcdf 	bl	b6f30 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b5572:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b5574:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b5576:	699b      	ldr	r3, [r3, #24]
   b5578:	4630      	mov	r0, r6
   b557a:	4798      	blx	r3
   b557c:	2102      	movs	r1, #2
   b557e:	4628      	mov	r0, r5
   b5580:	f001 fdc0 	bl	b7104 <_ZN5Print5printEfi>
}
   b5584:	4420      	add	r0, r4
   b5586:	bd70      	pop	{r4, r5, r6, pc}

000b5588 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b5588:	f1a0 0004 	sub.w	r0, r0, #4
   b558c:	f7ff bfe2 	b.w	b5554 <_ZNK14CellularSignal7printToER5Print>

000b5590 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b5590:	b510      	push	{r4, lr}
   b5592:	2120      	movs	r1, #32
   b5594:	4604      	mov	r4, r0
   b5596:	f7ff fa46 	bl	b4a26 <_ZdlPvj>
   b559a:	4620      	mov	r0, r4
   b559c:	bd10      	pop	{r4, pc}
	...

000b55a0 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b55a0:	7b03      	ldrb	r3, [r0, #12]
   b55a2:	b17b      	cbz	r3, b55c4 <_ZNK14CellularSignal11getStrengthEv+0x24>
   b55a4:	6943      	ldr	r3, [r0, #20]
   b55a6:	2b00      	cmp	r3, #0
   b55a8:	db0c      	blt.n	b55c4 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b55aa:	ee07 3a90 	vmov	s15, r3
   b55ae:	ed9f 7a07 	vldr	s14, [pc, #28]	; b55cc <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b55b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b55b6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b55ba:	eddf 7a05 	vldr	s15, [pc, #20]	; b55d0 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b55be:	ee20 0a27 	vmul.f32	s0, s0, s15
   b55c2:	4770      	bx	lr
    return -1.0f;
   b55c4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b55c8:	4770      	bx	lr
   b55ca:	bf00      	nop
   b55cc:	477fff00 	.word	0x477fff00
   b55d0:	42c80000 	.word	0x42c80000

000b55d4 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b55d4:	7b03      	ldrb	r3, [r0, #12]
   b55d6:	b163      	cbz	r3, b55f2 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b55d8:	6903      	ldr	r3, [r0, #16]
   b55da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b55de:	d008      	beq.n	b55f2 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b55e0:	ee07 3a90 	vmov	s15, r3
   b55e4:	ed9f 7a04 	vldr	s14, [pc, #16]	; b55f8 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b55e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b55ec:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b55f0:	4770      	bx	lr
    return 0.0f;
   b55f2:	ed9f 0a02 	vldr	s0, [pc, #8]	; b55fc <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b55f6:	4770      	bx	lr
   b55f8:	42c80000 	.word	0x42c80000
   b55fc:	00000000 	.word	0x00000000

000b5600 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b5600:	7b03      	ldrb	r3, [r0, #12]
   b5602:	b17b      	cbz	r3, b5624 <_ZNK14CellularSignal10getQualityEv+0x24>
   b5604:	69c3      	ldr	r3, [r0, #28]
   b5606:	2b00      	cmp	r3, #0
   b5608:	db0c      	blt.n	b5624 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b560a:	ee07 3a90 	vmov	s15, r3
   b560e:	ed9f 7a07 	vldr	s14, [pc, #28]	; b562c <_ZNK14CellularSignal10getQualityEv+0x2c>
   b5612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5616:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b561a:	eddf 7a05 	vldr	s15, [pc, #20]	; b5630 <_ZNK14CellularSignal10getQualityEv+0x30>
   b561e:	ee20 0a27 	vmul.f32	s0, s0, s15
   b5622:	4770      	bx	lr
    return -1.0f;
   b5624:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b5628:	4770      	bx	lr
   b562a:	bf00      	nop
   b562c:	477fff00 	.word	0x477fff00
   b5630:	42c80000 	.word	0x42c80000

000b5634 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b5634:	7b03      	ldrb	r3, [r0, #12]
   b5636:	b163      	cbz	r3, b5652 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b5638:	6983      	ldr	r3, [r0, #24]
   b563a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b563e:	d008      	beq.n	b5652 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b5640:	ee07 3a90 	vmov	s15, r3
   b5644:	ed9f 7a04 	vldr	s14, [pc, #16]	; b5658 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b5648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b564c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b5650:	4770      	bx	lr
    return 0.0f;
   b5652:	ed9f 0a02 	vldr	s0, [pc, #8]	; b565c <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b5656:	4770      	bx	lr
   b5658:	42c80000 	.word	0x42c80000
   b565c:	00000000 	.word	0x00000000

000b5660 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b5660:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b5662:	460d      	mov	r5, r1
   b5664:	f100 0408 	add.w	r4, r0, #8
   b5668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b566a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b566c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5670:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b5674:	2001      	movs	r0, #1
   b5676:	bd30      	pop	{r4, r5, pc}

000b5678 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b5678:	b510      	push	{r4, lr}
   b567a:	b088      	sub	sp, #32
   b567c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b567e:	4668      	mov	r0, sp
   b5680:	f001 fdb3 	bl	b71ea <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b5684:	4669      	mov	r1, sp
   b5686:	a804      	add	r0, sp, #16
   b5688:	f001 fdfa 	bl	b7280 <_ZN6StringC1ERKS_>
   b568c:	a804      	add	r0, sp, #16
   b568e:	47a0      	blx	r4
   b5690:	4604      	mov	r4, r0
   b5692:	a804      	add	r0, sp, #16
   b5694:	f001 fd5e 	bl	b7154 <_ZN6StringD1Ev>
    String p(param);
   b5698:	4668      	mov	r0, sp
   b569a:	f001 fd5b 	bl	b7154 <_ZN6StringD1Ev>
}
   b569e:	4620      	mov	r0, r4
   b56a0:	b008      	add	sp, #32
   b56a2:	bd10      	pop	{r4, pc}

000b56a4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b56a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b56a6:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b56a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b56ac:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b56ae:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b56b0:	461a      	mov	r2, r3
   b56b2:	4669      	mov	r1, sp
   b56b4:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b56b6:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b56ba:	f8ad 4000 	strh.w	r4, [sp]
   b56be:	f7ff fdc5 	bl	b524c <spark_function>
}
   b56c2:	b004      	add	sp, #16
   b56c4:	bd10      	pop	{r4, pc}

000b56c6 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b56c6:	2200      	movs	r2, #0
   b56c8:	6840      	ldr	r0, [r0, #4]
   b56ca:	4611      	mov	r1, r2
   b56cc:	f7ff be1e 	b.w	b530c <network_listening>

000b56d0 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b56d0:	2200      	movs	r2, #0
   b56d2:	6840      	ldr	r0, [r0, #4]
   b56d4:	4611      	mov	r1, r2
   b56d6:	f7ff be29 	b.w	b532c <network_get_listen_timeout>

000b56da <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b56da:	6840      	ldr	r0, [r0, #4]
   b56dc:	2200      	movs	r2, #0
   b56de:	f7ff be1d 	b.w	b531c <network_set_listen_timeout>

000b56e2 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b56e2:	6840      	ldr	r0, [r0, #4]
   b56e4:	2200      	movs	r2, #0
   b56e6:	f081 0101 	eor.w	r1, r1, #1
   b56ea:	f7ff be07 	b.w	b52fc <network_listen>

000b56ee <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b56ee:	2300      	movs	r3, #0
   b56f0:	6840      	ldr	r0, [r0, #4]
   b56f2:	461a      	mov	r2, r3
   b56f4:	4619      	mov	r1, r3
   b56f6:	f7ff bdf9 	b.w	b52ec <network_off>

000b56fa <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b56fa:	2300      	movs	r3, #0
   b56fc:	6840      	ldr	r0, [r0, #4]
   b56fe:	461a      	mov	r2, r3
   b5700:	4619      	mov	r1, r3
   b5702:	f7ff bdeb 	b.w	b52dc <network_on>

000b5706 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5706:	2200      	movs	r2, #0
   b5708:	6840      	ldr	r0, [r0, #4]
   b570a:	4611      	mov	r1, r2
   b570c:	f7ff bdde 	b.w	b52cc <network_ready>

000b5710 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5710:	2200      	movs	r2, #0
   b5712:	6840      	ldr	r0, [r0, #4]
   b5714:	4611      	mov	r1, r2
   b5716:	f7ff bdc9 	b.w	b52ac <network_connecting>

000b571a <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b571a:	6840      	ldr	r0, [r0, #4]
   b571c:	2200      	movs	r2, #0
   b571e:	2102      	movs	r1, #2
   b5720:	f7ff bdcc 	b.w	b52bc <network_disconnect>

000b5724 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5724:	2300      	movs	r3, #0
   b5726:	6840      	ldr	r0, [r0, #4]
   b5728:	461a      	mov	r2, r3
   b572a:	f7ff bdb7 	b.w	b529c <network_connect>
	...

000b5730 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b5730:	4b02      	ldr	r3, [pc, #8]	; (b573c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5732:	2203      	movs	r2, #3
   b5734:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5736:	4a02      	ldr	r2, [pc, #8]	; (b5740 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5738:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b573a:	4770      	bx	lr
   b573c:	2003e678 	.word	0x2003e678
   b5740:	000b7d74 	.word	0x000b7d74

000b5744 <_ZN8particle6detail9_getVCellEhh>:
namespace particle {
namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   b5744:	0909      	lsrs	r1, r1, #4
   b5746:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   b574a:	ee07 1a90 	vmov	s15, r1
        return value / 800.0;
    }
   b574e:	ed9f 0a03 	vldr	s0, [pc, #12]	; b575c <_ZN8particle6detail9_getVCellEhh+0x18>
        float value = (float)((MSB << 4) | (LSB >> 4));
   b5752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
   b5756:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b575a:	4770      	bx	lr
   b575c:	44480000 	.word	0x44480000

000b5760 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b5760:	6800      	ldr	r0, [r0, #0]
   b5762:	f000 b8ee 	b.w	b5942 <_ZN7TwoWire4lockEv>

000b5766 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b5766:	b510      	push	{r4, lr}
   b5768:	4604      	mov	r4, r0
      lock_(_lock) {
   b576a:	6001      	str	r1, [r0, #0]
   b576c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b576e:	b10a      	cbz	r2, b5774 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b5770:	f7ff fff6 	bl	b5760 <_ZN9FuelGauge4lockEv>
}
   b5774:	4620      	mov	r0, r4
   b5776:	bd10      	pop	{r4, pc}

000b5778 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b5778:	b513      	push	{r0, r1, r4, lr}
   b577a:	4604      	mov	r4, r0
   b577c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b577e:	f002 f847 	bl	b7810 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b5782:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b5784:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b5786:	4620      	mov	r0, r4
   b5788:	f7ff ffed 	bl	b5766 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b578c:	4620      	mov	r0, r4
   b578e:	b002      	add	sp, #8
   b5790:	bd10      	pop	{r4, pc}

000b5792 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b5792:	6800      	ldr	r0, [r0, #0]
   b5794:	f000 b8de 	b.w	b5954 <_ZN7TwoWire6unlockEv>

000b5798 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   b5798:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b579c:	4604      	mov	r4, r0
   b579e:	460d      	mov	r5, r1
   b57a0:	4617      	mov	r7, r2
   b57a2:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b57a4:	f7ff ffdc 	bl	b5760 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b57a8:	2236      	movs	r2, #54	; 0x36
   b57aa:	2300      	movs	r3, #0
   b57ac:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b57b0:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b57b2:	230a      	movs	r3, #10
   b57b4:	f04f 0801 	mov.w	r8, #1
   b57b8:	4669      	mov	r1, sp
   b57ba:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b57be:	f000 f8a4 	bl	b590a <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   b57c2:	6820      	ldr	r0, [r4, #0]
   b57c4:	6803      	ldr	r3, [r0, #0]
   b57c6:	4629      	mov	r1, r5
   b57c8:	689b      	ldr	r3, [r3, #8]
   b57ca:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b57cc:	6820      	ldr	r0, [r4, #0]
   b57ce:	4641      	mov	r1, r8
   b57d0:	f000 f8b3 	bl	b593a <_ZN7TwoWire15endTransmissionEh>
   b57d4:	4605      	mov	r5, r0
   b57d6:	b140      	cbz	r0, b57ea <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   b57d8:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   b57dc:	4620      	mov	r0, r4
   b57de:	f7ff ffd8 	bl	b5792 <_ZN9FuelGauge6unlockEv>
}
   b57e2:	4628      	mov	r0, r5
   b57e4:	b004      	add	sp, #16
   b57e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   b57ea:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   b57ec:	6820      	ldr	r0, [r4, #0]
   b57ee:	9301      	str	r3, [sp, #4]
   b57f0:	4669      	mov	r1, sp
   b57f2:	f000 f873 	bl	b58dc <_ZN7TwoWire11requestFromERK16WireTransmission>
   b57f6:	2802      	cmp	r0, #2
   b57f8:	d1ee      	bne.n	b57d8 <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   b57fa:	6820      	ldr	r0, [r4, #0]
   b57fc:	6803      	ldr	r3, [r0, #0]
   b57fe:	695b      	ldr	r3, [r3, #20]
   b5800:	4798      	blx	r3
   b5802:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   b5804:	6820      	ldr	r0, [r4, #0]
   b5806:	6803      	ldr	r3, [r0, #0]
   b5808:	695b      	ldr	r3, [r3, #20]
   b580a:	4798      	blx	r3
   b580c:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   b580e:	e7e5      	b.n	b57dc <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000b5810 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   b5810:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   b5812:	2300      	movs	r3, #0
   b5814:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   b5818:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b581c:	f10d 0206 	add.w	r2, sp, #6
   b5820:	f10d 0307 	add.w	r3, sp, #7
   b5824:	2102      	movs	r1, #2
   b5826:	f7ff ffb7 	bl	b5798 <_ZN9FuelGauge12readRegisterEhRhS0_>
   b582a:	b940      	cbnz	r0, b583e <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   b582c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b5830:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   b5834:	b003      	add	sp, #12
   b5836:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   b583a:	f7ff bf83 	b.w	b5744 <_ZN8particle6detail9_getVCellEhh>
}
   b583e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b5842:	b003      	add	sp, #12
   b5844:	f85d fb04 	ldr.w	pc, [sp], #4

000b5848 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5848:	4770      	bx	lr

000b584a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b584a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b584c:	4606      	mov	r6, r0
   b584e:	4615      	mov	r5, r2
   b5850:	460c      	mov	r4, r1
   b5852:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5854:	42bc      	cmp	r4, r7
   b5856:	d006      	beq.n	b5866 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5858:	6833      	ldr	r3, [r6, #0]
   b585a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b585e:	689b      	ldr	r3, [r3, #8]
   b5860:	4630      	mov	r0, r6
   b5862:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5864:	e7f6      	b.n	b5854 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5866:	4628      	mov	r0, r5
   b5868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b586a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b586a:	7c00      	ldrb	r0, [r0, #16]
   b586c:	2200      	movs	r2, #0
   b586e:	f7ff bb91 	b.w	b4f94 <hal_i2c_write>

000b5872 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5872:	7c00      	ldrb	r0, [r0, #16]
   b5874:	2100      	movs	r1, #0
   b5876:	f7ff bb95 	b.w	b4fa4 <hal_i2c_available>

000b587a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b587a:	7c00      	ldrb	r0, [r0, #16]
   b587c:	2100      	movs	r1, #0
   b587e:	f7ff bb99 	b.w	b4fb4 <hal_i2c_read>

000b5882 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5882:	7c00      	ldrb	r0, [r0, #16]
   b5884:	2100      	movs	r1, #0
   b5886:	f7ff bb9d 	b.w	b4fc4 <hal_i2c_peek>

000b588a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b588a:	7c00      	ldrb	r0, [r0, #16]
   b588c:	2100      	movs	r1, #0
   b588e:	f7ff bba1 	b.w	b4fd4 <hal_i2c_flush>

000b5892 <_ZN7TwoWireD0Ev>:
   b5892:	b510      	push	{r4, lr}
   b5894:	2114      	movs	r1, #20
   b5896:	4604      	mov	r4, r0
   b5898:	f7ff f8c5 	bl	b4a26 <_ZdlPvj>
   b589c:	4620      	mov	r0, r4
   b589e:	bd10      	pop	{r4, pc}

000b58a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b58a0:	b538      	push	{r3, r4, r5, lr}
   b58a2:	4604      	mov	r4, r0
   b58a4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b58a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b58aa:	2200      	movs	r2, #0
   b58ac:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b58b0:	4b09      	ldr	r3, [pc, #36]	; (b58d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b58b2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b58b4:	4608      	mov	r0, r1
   b58b6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b58b8:	4629      	mov	r1, r5
   b58ba:	f7ff fb9b 	bl	b4ff4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b58be:	30bf      	adds	r0, #191	; 0xbf
   b58c0:	d108      	bne.n	b58d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b58c2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b58c4:	07db      	lsls	r3, r3, #31
   b58c6:	d505      	bpl.n	b58d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b58c8:	6868      	ldr	r0, [r5, #4]
   b58ca:	f7ff fd4f 	bl	b536c <free>
    free(conf.tx_buffer);
   b58ce:	68e8      	ldr	r0, [r5, #12]
   b58d0:	f7ff fd4c 	bl	b536c <free>
}
   b58d4:	4620      	mov	r0, r4
   b58d6:	bd38      	pop	{r3, r4, r5, pc}
   b58d8:	000b7db0 	.word	0x000b7db0

000b58dc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b58dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b58de:	2200      	movs	r2, #0
   b58e0:	2314      	movs	r3, #20
   b58e2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b58e6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b58ea:	780b      	ldrb	r3, [r1, #0]
   b58ec:	f88d 3008 	strb.w	r3, [sp, #8]
   b58f0:	684b      	ldr	r3, [r1, #4]
   b58f2:	9303      	str	r3, [sp, #12]
   b58f4:	68cb      	ldr	r3, [r1, #12]
   b58f6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b58f8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b58fa:	7a0b      	ldrb	r3, [r1, #8]
   b58fc:	9305      	str	r3, [sp, #20]
   b58fe:	a901      	add	r1, sp, #4
   b5900:	f7ff fb90 	bl	b5024 <hal_i2c_request_ex>
}
   b5904:	b007      	add	sp, #28
   b5906:	f85d fb04 	ldr.w	pc, [sp], #4

000b590a <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b590a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b590c:	2300      	movs	r3, #0
   b590e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b5912:	684a      	ldr	r2, [r1, #4]
   b5914:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b5916:	2314      	movs	r3, #20
    };
   b5918:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b591a:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b591e:	780b      	ldrb	r3, [r1, #0]
    };
   b5920:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b5922:	7a0a      	ldrb	r2, [r1, #8]
   b5924:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b5926:	7c00      	ldrb	r0, [r0, #16]
    };
   b5928:	f88d 3008 	strb.w	r3, [sp, #8]
   b592c:	aa01      	add	r2, sp, #4
   b592e:	4619      	mov	r1, r3
   b5930:	f7ff fb20 	bl	b4f74 <hal_i2c_begin_transmission>
}
   b5934:	b007      	add	sp, #28
   b5936:	f85d fb04 	ldr.w	pc, [sp], #4

000b593a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b593a:	7c00      	ldrb	r0, [r0, #16]
   b593c:	2200      	movs	r2, #0
   b593e:	f7ff bb21 	b.w	b4f84 <hal_i2c_end_transmission>

000b5942 <_ZN7TwoWire4lockEv>:
{
  return hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b5942:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b5944:	2100      	movs	r1, #0
   b5946:	7c00      	ldrb	r0, [r0, #16]
   b5948:	f7ff fb5c 	bl	b5004 <hal_i2c_lock>
}
   b594c:	fab0 f080 	clz	r0, r0
   b5950:	0940      	lsrs	r0, r0, #5
   b5952:	bd08      	pop	{r3, pc}

000b5954 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b5954:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b5956:	2100      	movs	r1, #0
   b5958:	7c00      	ldrb	r0, [r0, #16]
   b595a:	f7ff fb5b 	bl	b5014 <hal_i2c_unlock>
}
   b595e:	fab0 f080 	clz	r0, r0
   b5962:	0940      	lsrs	r0, r0, #5
   b5964:	bd08      	pop	{r3, pc}

000b5966 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5966:	4770      	bx	lr

000b5968 <_ZN9IPAddressD0Ev>:
   b5968:	b510      	push	{r4, lr}
   b596a:	2118      	movs	r1, #24
   b596c:	4604      	mov	r4, r0
   b596e:	f7ff f85a 	bl	b4a26 <_ZdlPvj>
   b5972:	4620      	mov	r0, r4
   b5974:	bd10      	pop	{r4, pc}

000b5976 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5976:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5978:	7d03      	ldrb	r3, [r0, #20]
   b597a:	2b06      	cmp	r3, #6
{
   b597c:	b08d      	sub	sp, #52	; 0x34
   b597e:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5980:	f100 0704 	add.w	r7, r0, #4
   b5984:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5988:	d012      	beq.n	b59b0 <_ZNK9IPAddress7printToER5Print+0x3a>
   b598a:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b598e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5992:	220a      	movs	r2, #10
   b5994:	4630      	mov	r0, r6
   b5996:	f001 face 	bl	b6f36 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b599a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b599c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b599e:	d019      	beq.n	b59d4 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b59a0:	2c00      	cmp	r4, #0
   b59a2:	d0f4      	beq.n	b598e <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b59a4:	212e      	movs	r1, #46	; 0x2e
   b59a6:	4630      	mov	r0, r6
   b59a8:	f001 fac2 	bl	b6f30 <_ZN5Print5printEc>
   b59ac:	4404      	add	r4, r0
   b59ae:	e7ee      	b.n	b598e <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b59b0:	232f      	movs	r3, #47	; 0x2f
   b59b2:	466a      	mov	r2, sp
   b59b4:	4639      	mov	r1, r7
   b59b6:	200a      	movs	r0, #10
		buf[0] = 0;
   b59b8:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b59bc:	f7ff fb3a 	bl	b5034 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b59c0:	4668      	mov	r0, sp
   b59c2:	f7fe ffe9 	bl	b4998 <strlen>
   b59c6:	6833      	ldr	r3, [r6, #0]
   b59c8:	4602      	mov	r2, r0
   b59ca:	68db      	ldr	r3, [r3, #12]
   b59cc:	4669      	mov	r1, sp
   b59ce:	4630      	mov	r0, r6
   b59d0:	4798      	blx	r3
   b59d2:	4604      	mov	r4, r0
    }
    return n;
}
   b59d4:	4620      	mov	r0, r4
   b59d6:	b00d      	add	sp, #52	; 0x34
   b59d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b59dc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b59dc:	b510      	push	{r4, lr}
   b59de:	4b05      	ldr	r3, [pc, #20]	; (b59f4 <_ZN9IPAddressC1Ev+0x18>)
   b59e0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b59e2:	2211      	movs	r2, #17
   b59e4:	f840 3b04 	str.w	r3, [r0], #4
   b59e8:	2100      	movs	r1, #0
   b59ea:	f001 ffaf 	bl	b794c <memset>
}
   b59ee:	4620      	mov	r0, r4
   b59f0:	bd10      	pop	{r4, pc}
   b59f2:	bf00      	nop
   b59f4:	000b7dd8 	.word	0x000b7dd8

000b59f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b59f8:	4603      	mov	r3, r0
   b59fa:	4a07      	ldr	r2, [pc, #28]	; (b5a18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b59fc:	b510      	push	{r4, lr}
   b59fe:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5a02:	f101 0210 	add.w	r2, r1, #16
   b5a06:	f851 4b04 	ldr.w	r4, [r1], #4
   b5a0a:	f843 4b04 	str.w	r4, [r3], #4
   b5a0e:	4291      	cmp	r1, r2
   b5a10:	d1f9      	bne.n	b5a06 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5a12:	780a      	ldrb	r2, [r1, #0]
   b5a14:	701a      	strb	r2, [r3, #0]
}
   b5a16:	bd10      	pop	{r4, pc}
   b5a18:	000b7dd8 	.word	0x000b7dd8

000b5a1c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5a1c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5a1e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5a22:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5a26:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5a2a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5a2e:	2304      	movs	r3, #4
   b5a30:	6041      	str	r1, [r0, #4]
   b5a32:	7503      	strb	r3, [r0, #20]
}
   b5a34:	bd10      	pop	{r4, pc}
	...

000b5a38 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5a38:	b507      	push	{r0, r1, r2, lr}
   b5a3a:	4b06      	ldr	r3, [pc, #24]	; (b5a54 <_ZN9IPAddressC1EPKh+0x1c>)
   b5a3c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5a3e:	78cb      	ldrb	r3, [r1, #3]
   b5a40:	9300      	str	r3, [sp, #0]
   b5a42:	788b      	ldrb	r3, [r1, #2]
   b5a44:	784a      	ldrb	r2, [r1, #1]
   b5a46:	7809      	ldrb	r1, [r1, #0]
   b5a48:	f7ff ffe8 	bl	b5a1c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5a4c:	b003      	add	sp, #12
   b5a4e:	f85d fb04 	ldr.w	pc, [sp], #4
   b5a52:	bf00      	nop
   b5a54:	000b7dd8 	.word	0x000b7dd8

000b5a58 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b5a58:	f100 0310 	add.w	r3, r0, #16
   b5a5c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b5a5e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b5a62:	2901      	cmp	r1, #1
   b5a64:	4618      	mov	r0, r3
   b5a66:	d108      	bne.n	b5a7a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b5a68:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b5a6c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b5a70:	3a01      	subs	r2, #1
   b5a72:	f103 0310 	add.w	r3, r3, #16
   b5a76:	d1f2      	bne.n	b5a5e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b5a78:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b5a7a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b5a7c:	bf04      	itt	eq
   b5a7e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b5a82:	1852      	addeq	r2, r2, r1
   b5a84:	e7f4      	b.n	b5a70 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b5a86 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b5a86:	b40e      	push	{r1, r2, r3}
   b5a88:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5a8a:	b088      	sub	sp, #32
   b5a8c:	af00      	add	r7, sp, #0
   b5a8e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5a92:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b5a94:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5a98:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b5a9a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5a9c:	462b      	mov	r3, r5
   b5a9e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b5aa0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5aa2:	f7ff fc73 	bl	b538c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b5aa6:	280f      	cmp	r0, #15
   b5aa8:	687a      	ldr	r2, [r7, #4]
   b5aaa:	d91a      	bls.n	b5ae2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b5aac:	f100 0308 	add.w	r3, r0, #8
   b5ab0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b5ab4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b5ab6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5aba:	1c41      	adds	r1, r0, #1
   b5abc:	462b      	mov	r3, r5
   b5abe:	4668      	mov	r0, sp
        va_start(args, fmt);
   b5ac0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5ac2:	f7ff fc63 	bl	b538c <vsnprintf>
        if (n > 0) {
   b5ac6:	1e02      	subs	r2, r0, #0
   b5ac8:	dd04      	ble.n	b5ad4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b5aca:	6823      	ldr	r3, [r4, #0]
   b5acc:	4669      	mov	r1, sp
   b5ace:	689b      	ldr	r3, [r3, #8]
   b5ad0:	4620      	mov	r0, r4
   b5ad2:	4798      	blx	r3
   b5ad4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b5ad6:	3720      	adds	r7, #32
   b5ad8:	46bd      	mov	sp, r7
   b5ada:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5ade:	b003      	add	sp, #12
   b5ae0:	4770      	bx	lr
    } else if (n > 0) {
   b5ae2:	2800      	cmp	r0, #0
   b5ae4:	d0f7      	beq.n	b5ad6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b5ae6:	6823      	ldr	r3, [r4, #0]
   b5ae8:	4602      	mov	r2, r0
   b5aea:	689b      	ldr	r3, [r3, #8]
   b5aec:	f107 0110 	add.w	r1, r7, #16
   b5af0:	4620      	mov	r0, r4
   b5af2:	4798      	blx	r3
}
   b5af4:	e7ef      	b.n	b5ad6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b5af6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5af6:	b538      	push	{r3, r4, r5, lr}
   b5af8:	680b      	ldr	r3, [r1, #0]
   b5afa:	6003      	str	r3, [r0, #0]
   b5afc:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b5afe:	6843      	ldr	r3, [r0, #4]
   b5b00:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5b02:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b5b04:	d008      	beq.n	b5b18 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b5b06:	b115      	cbz	r5, b5b0e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b5b08:	686b      	ldr	r3, [r5, #4]
   b5b0a:	3301      	adds	r3, #1
   b5b0c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b5b0e:	6860      	ldr	r0, [r4, #4]
   b5b10:	b108      	cbz	r0, b5b16 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b5b12:	f7ff fc5e 	bl	b53d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5b16:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5b18:	bd38      	pop	{r3, r4, r5, pc}

000b5b1a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b5b1a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5b1c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b5b1e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5b22:	689b      	ldr	r3, [r3, #8]
   b5b24:	2201      	movs	r2, #1
   b5b26:	f10d 0107 	add.w	r1, sp, #7
   b5b2a:	4798      	blx	r3
}
   b5b2c:	b003      	add	sp, #12
   b5b2e:	f85d fb04 	ldr.w	pc, [sp], #4

000b5b32 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5b32:	460b      	mov	r3, r1
   b5b34:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b5b36:	2200      	movs	r2, #0
   b5b38:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b5b3a:	e9c0 2200 	strd	r2, r2, [r0]
   b5b3e:	4604      	mov	r4, r0
        t_ = t;
   b5b40:	6083      	str	r3, [r0, #8]
    if (t) {
   b5b42:	b90b      	cbnz	r3, b5b48 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b5b44:	4620      	mov	r0, r4
   b5b46:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b5b48:	f7ff ffd5 	bl	b5af6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b5b4c:	e7fa      	b.n	b5b44 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b5b4e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b5b4e:	6883      	ldr	r3, [r0, #8]
   b5b50:	b1eb      	cbz	r3, b5b8e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b5b52:	781a      	ldrb	r2, [r3, #0]
   b5b54:	2a03      	cmp	r2, #3
   b5b56:	d81a      	bhi.n	b5b8e <_ZNK5spark9JSONValue4typeEv+0x40>
   b5b58:	e8df f002 	tbb	[pc, r2]
   b5b5c:	1b021704 	.word	0x1b021704
   b5b60:	2005      	movs	r0, #5
   b5b62:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b5b64:	6802      	ldr	r2, [r0, #0]
   b5b66:	685b      	ldr	r3, [r3, #4]
   b5b68:	6852      	ldr	r2, [r2, #4]
   b5b6a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b5b6c:	282d      	cmp	r0, #45	; 0x2d
   b5b6e:	d012      	beq.n	b5b96 <_ZNK5spark9JSONValue4typeEv+0x48>
   b5b70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5b74:	2b09      	cmp	r3, #9
   b5b76:	d90e      	bls.n	b5b96 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b5b78:	2874      	cmp	r0, #116	; 0x74
   b5b7a:	d00e      	beq.n	b5b9a <_ZNK5spark9JSONValue4typeEv+0x4c>
   b5b7c:	2866      	cmp	r0, #102	; 0x66
   b5b7e:	d00c      	beq.n	b5b9a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b5b80:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b5b84:	4258      	negs	r0, r3
   b5b86:	4158      	adcs	r0, r3
   b5b88:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b5b8a:	2006      	movs	r0, #6
   b5b8c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b5b8e:	2000      	movs	r0, #0
   b5b90:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b5b92:	2004      	movs	r0, #4
   b5b94:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b5b96:	2003      	movs	r0, #3
   b5b98:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b5b9a:	2002      	movs	r0, #2
}
   b5b9c:	4770      	bx	lr

000b5b9e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b5b9e:	b510      	push	{r4, lr}
   b5ba0:	4604      	mov	r4, r0
    switch (type()) {
   b5ba2:	f7ff ffd4 	bl	b5b4e <_ZNK5spark9JSONValue4typeEv>
   b5ba6:	2802      	cmp	r0, #2
   b5ba8:	d00e      	beq.n	b5bc8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b5baa:	1ec3      	subs	r3, r0, #3
   b5bac:	b2db      	uxtb	r3, r3
   b5bae:	2b01      	cmp	r3, #1
   b5bb0:	d814      	bhi.n	b5bdc <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b5bb2:	6822      	ldr	r2, [r4, #0]
   b5bb4:	68a3      	ldr	r3, [r4, #8]
   b5bb6:	6850      	ldr	r0, [r2, #4]
   b5bb8:	685b      	ldr	r3, [r3, #4]
}
   b5bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b5bbe:	220a      	movs	r2, #10
   b5bc0:	2100      	movs	r1, #0
   b5bc2:	4418      	add	r0, r3
   b5bc4:	f001 bfc2 	b.w	b7b4c <strtol>
        const char* const s = d_->json + t_->start;
   b5bc8:	6822      	ldr	r2, [r4, #0]
   b5bca:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b5bcc:	6852      	ldr	r2, [r2, #4]
   b5bce:	685b      	ldr	r3, [r3, #4]
   b5bd0:	5cd0      	ldrb	r0, [r2, r3]
   b5bd2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b5bd6:	4258      	negs	r0, r3
   b5bd8:	4158      	adcs	r0, r3
}
   b5bda:	bd10      	pop	{r4, pc}
    switch (type()) {
   b5bdc:	2000      	movs	r0, #0
   b5bde:	e7fc      	b.n	b5bda <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b5be0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5be0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b5be2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5be4:	e9c0 3300 	strd	r3, r3, [r0]
   b5be8:	4604      	mov	r4, r0
        n_(0) {
   b5bea:	480e      	ldr	r0, [pc, #56]	; (b5c24 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b5bec:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b5bf0:	b1a9      	cbz	r1, b5c1e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b5bf2:	780b      	ldrb	r3, [r1, #0]
   b5bf4:	2b03      	cmp	r3, #3
   b5bf6:	d006      	beq.n	b5c06 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b5bf8:	b98b      	cbnz	r3, b5c1e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b5bfa:	6813      	ldr	r3, [r2, #0]
   b5bfc:	6858      	ldr	r0, [r3, #4]
   b5bfe:	684b      	ldr	r3, [r1, #4]
   b5c00:	5cc3      	ldrb	r3, [r0, r3]
   b5c02:	2b6e      	cmp	r3, #110	; 0x6e
   b5c04:	d007      	beq.n	b5c16 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b5c06:	6813      	ldr	r3, [r2, #0]
   b5c08:	684d      	ldr	r5, [r1, #4]
   b5c0a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b5c0c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b5c0e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b5c10:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b5c12:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b5c14:	60e3      	str	r3, [r4, #12]
   b5c16:	4611      	mov	r1, r2
   b5c18:	4620      	mov	r0, r4
   b5c1a:	f7ff ff6c 	bl	b5af6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b5c1e:	4620      	mov	r0, r4
   b5c20:	bd38      	pop	{r3, r4, r5, pc}
   b5c22:	bf00      	nop
   b5c24:	000b7e4a 	.word	0x000b7e4a

000b5c28 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5c28:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b5c2a:	2500      	movs	r5, #0
   b5c2c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b5c2e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b5c32:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b5c36:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5c3a:	4604      	mov	r4, r0
   b5c3c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b5c3e:	b14b      	cbz	r3, b5c54 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b5c40:	781a      	ldrb	r2, [r3, #0]
   b5c42:	2a01      	cmp	r2, #1
   b5c44:	d106      	bne.n	b5c54 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b5c46:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b5c4a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b5c4c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b5c4e:	6143      	str	r3, [r0, #20]
   b5c50:	f7ff ff51 	bl	b5af6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b5c54:	4620      	mov	r0, r4
   b5c56:	bd38      	pop	{r3, r4, r5, pc}

000b5c58 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b5c58:	b510      	push	{r4, lr}
    if (!n_) {
   b5c5a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b5c5c:	4604      	mov	r4, r0
    if (!n_) {
   b5c5e:	b163      	cbz	r3, b5c7a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b5c60:	6880      	ldr	r0, [r0, #8]
   b5c62:	60e0      	str	r0, [r4, #12]
    --n_;
   b5c64:	3b01      	subs	r3, #1
    ++t_;
   b5c66:	3010      	adds	r0, #16
   b5c68:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b5c6a:	6120      	str	r0, [r4, #16]
    --n_;
   b5c6c:	6163      	str	r3, [r4, #20]
    if (n_) {
   b5c6e:	b113      	cbz	r3, b5c76 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b5c70:	f7ff fef2 	bl	b5a58 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b5c74:	60a0      	str	r0, [r4, #8]
    return true;
   b5c76:	2001      	movs	r0, #1
   b5c78:	e000      	b.n	b5c7c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b5c7a:	4618      	mov	r0, r3
}
   b5c7c:	bd10      	pop	{r4, pc}

000b5c7e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b5c7e:	b510      	push	{r4, lr}
    write('}');
   b5c80:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b5c82:	4604      	mov	r4, r0
    write('}');
   b5c84:	f7ff ff49 	bl	b5b1a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b5c88:	2301      	movs	r3, #1
   b5c8a:	7123      	strb	r3, [r4, #4]
}
   b5c8c:	4620      	mov	r0, r4
   b5c8e:	bd10      	pop	{r4, pc}

000b5c90 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b5c90:	b508      	push	{r3, lr}
    switch (state_) {
   b5c92:	7903      	ldrb	r3, [r0, #4]
   b5c94:	2b01      	cmp	r3, #1
   b5c96:	d002      	beq.n	b5c9e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b5c98:	2b02      	cmp	r3, #2
   b5c9a:	d004      	beq.n	b5ca6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b5c9c:	bd08      	pop	{r3, pc}
        write(',');
   b5c9e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b5ca0:	f7ff ff3b 	bl	b5b1a <_ZN5spark10JSONWriter5writeEc>
}
   b5ca4:	e7fa      	b.n	b5c9c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b5ca6:	213a      	movs	r1, #58	; 0x3a
   b5ca8:	e7fa      	b.n	b5ca0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b5caa <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b5caa:	b510      	push	{r4, lr}
   b5cac:	4604      	mov	r4, r0
    writeSeparator();
   b5cae:	f7ff ffef 	bl	b5c90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b5cb2:	4620      	mov	r0, r4
   b5cb4:	217b      	movs	r1, #123	; 0x7b
   b5cb6:	f7ff ff30 	bl	b5b1a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b5cba:	2300      	movs	r3, #0
   b5cbc:	7123      	strb	r3, [r4, #4]
}
   b5cbe:	4620      	mov	r0, r4
   b5cc0:	bd10      	pop	{r4, pc}
	...

000b5cc4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b5cc4:	b513      	push	{r0, r1, r4, lr}
   b5cc6:	4604      	mov	r4, r0
   b5cc8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b5cca:	f7ff ffe1 	bl	b5c90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b5cce:	6823      	ldr	r3, [r4, #0]
   b5cd0:	9a01      	ldr	r2, [sp, #4]
   b5cd2:	68db      	ldr	r3, [r3, #12]
   b5cd4:	4903      	ldr	r1, [pc, #12]	; (b5ce4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b5cd6:	4620      	mov	r0, r4
   b5cd8:	4798      	blx	r3
    state_ = NEXT;
   b5cda:	2301      	movs	r3, #1
}
   b5cdc:	4620      	mov	r0, r4
    state_ = NEXT;
   b5cde:	7123      	strb	r3, [r4, #4]
}
   b5ce0:	b002      	add	sp, #8
   b5ce2:	bd10      	pop	{r4, pc}
   b5ce4:	000b7de4 	.word	0x000b7de4

000b5ce8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b5ce8:	b513      	push	{r0, r1, r4, lr}
   b5cea:	4604      	mov	r4, r0
   b5cec:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b5cee:	f7ff ffcf 	bl	b5c90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b5cf2:	6823      	ldr	r3, [r4, #0]
   b5cf4:	9a01      	ldr	r2, [sp, #4]
   b5cf6:	68db      	ldr	r3, [r3, #12]
   b5cf8:	4903      	ldr	r1, [pc, #12]	; (b5d08 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b5cfa:	4620      	mov	r0, r4
   b5cfc:	4798      	blx	r3
    state_ = NEXT;
   b5cfe:	2301      	movs	r3, #1
}
   b5d00:	4620      	mov	r0, r4
    state_ = NEXT;
   b5d02:	7123      	strb	r3, [r4, #4]
}
   b5d04:	b002      	add	sp, #8
   b5d06:	bd10      	pop	{r4, pc}
   b5d08:	000b7de7 	.word	0x000b7de7

000b5d0c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5d10:	460d      	mov	r5, r1
    write('"');
   b5d12:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5d14:	4690      	mov	r8, r2
   b5d16:	4604      	mov	r4, r0
    write('"');
   b5d18:	f7ff feff 	bl	b5b1a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b5d1c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b5dc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b5d20:	44a8      	add	r8, r5
    const char *s = str;
   b5d22:	462f      	mov	r7, r5
    while (s != end) {
   b5d24:	4547      	cmp	r7, r8
   b5d26:	46ba      	mov	sl, r7
   b5d28:	d03d      	beq.n	b5da6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b5d2a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b5d2e:	2e22      	cmp	r6, #34	; 0x22
   b5d30:	d006      	beq.n	b5d40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b5d32:	2e5c      	cmp	r6, #92	; 0x5c
   b5d34:	d004      	beq.n	b5d40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b5d36:	4630      	mov	r0, r6
   b5d38:	f001 fdd8 	bl	b78ec <isprint>
   b5d3c:	2800      	cmp	r0, #0
   b5d3e:	d1f1      	bne.n	b5d24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b5d40:	6823      	ldr	r3, [r4, #0]
   b5d42:	ebaa 0205 	sub.w	r2, sl, r5
   b5d46:	689b      	ldr	r3, [r3, #8]
   b5d48:	4629      	mov	r1, r5
   b5d4a:	4620      	mov	r0, r4
   b5d4c:	4798      	blx	r3
            write('\\');
   b5d4e:	215c      	movs	r1, #92	; 0x5c
   b5d50:	4620      	mov	r0, r4
   b5d52:	f7ff fee2 	bl	b5b1a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b5d56:	2e0d      	cmp	r6, #13
   b5d58:	d80a      	bhi.n	b5d70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b5d5a:	2e07      	cmp	r6, #7
   b5d5c:	d91c      	bls.n	b5d98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5d5e:	f1a6 0308 	sub.w	r3, r6, #8
   b5d62:	2b05      	cmp	r3, #5
   b5d64:	d818      	bhi.n	b5d98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5d66:	e8df f003 	tbb	[pc, r3]
   b5d6a:	0f0d      	.short	0x0f0d
   b5d6c:	15131711 	.word	0x15131711
   b5d70:	2e22      	cmp	r6, #34	; 0x22
   b5d72:	d001      	beq.n	b5d78 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b5d74:	2e5c      	cmp	r6, #92	; 0x5c
   b5d76:	d10f      	bne.n	b5d98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b5d78:	4631      	mov	r1, r6
                write('b');
   b5d7a:	4620      	mov	r0, r4
   b5d7c:	f7ff fecd 	bl	b5b1a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b5d80:	463d      	mov	r5, r7
    while (s != end) {
   b5d82:	e7cf      	b.n	b5d24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b5d84:	2162      	movs	r1, #98	; 0x62
   b5d86:	e7f8      	b.n	b5d7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b5d88:	2174      	movs	r1, #116	; 0x74
   b5d8a:	e7f6      	b.n	b5d7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b5d8c:	216e      	movs	r1, #110	; 0x6e
   b5d8e:	e7f4      	b.n	b5d7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b5d90:	2166      	movs	r1, #102	; 0x66
   b5d92:	e7f2      	b.n	b5d7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b5d94:	2172      	movs	r1, #114	; 0x72
   b5d96:	e7f0      	b.n	b5d7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b5d98:	6823      	ldr	r3, [r4, #0]
   b5d9a:	4632      	mov	r2, r6
   b5d9c:	68db      	ldr	r3, [r3, #12]
   b5d9e:	4649      	mov	r1, r9
   b5da0:	4620      	mov	r0, r4
   b5da2:	4798      	blx	r3
                break;
   b5da4:	e7ec      	b.n	b5d80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b5da6:	42bd      	cmp	r5, r7
   b5da8:	d005      	beq.n	b5db6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b5daa:	6823      	ldr	r3, [r4, #0]
   b5dac:	1b7a      	subs	r2, r7, r5
   b5dae:	689b      	ldr	r3, [r3, #8]
   b5db0:	4629      	mov	r1, r5
   b5db2:	4620      	mov	r0, r4
   b5db4:	4798      	blx	r3
    }
    write('"');
   b5db6:	2122      	movs	r1, #34	; 0x22
   b5db8:	4620      	mov	r0, r4
   b5dba:	f7ff feae 	bl	b5b1a <_ZN5spark10JSONWriter5writeEc>
}
   b5dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5dc2:	bf00      	nop
   b5dc4:	000b7dea 	.word	0x000b7dea

000b5dc8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b5dc8:	b513      	push	{r0, r1, r4, lr}
   b5dca:	4604      	mov	r4, r0
   b5dcc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5dd0:	f7ff ff5e 	bl	b5c90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b5dd4:	4620      	mov	r0, r4
   b5dd6:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5dda:	f7ff ff97 	bl	b5d0c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b5dde:	2302      	movs	r3, #2
}
   b5de0:	4620      	mov	r0, r4
    state_ = VALUE;
   b5de2:	7123      	strb	r3, [r4, #4]
}
   b5de4:	b002      	add	sp, #8
   b5de6:	bd10      	pop	{r4, pc}

000b5de8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b5de8:	b513      	push	{r0, r1, r4, lr}
   b5dea:	4604      	mov	r4, r0
   b5dec:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5df0:	f7ff ff4e 	bl	b5c90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b5df4:	4620      	mov	r0, r4
   b5df6:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5dfa:	f7ff ff87 	bl	b5d0c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b5dfe:	2301      	movs	r3, #1
}
   b5e00:	4620      	mov	r0, r4
    state_ = NEXT;
   b5e02:	7123      	strb	r3, [r4, #4]
}
   b5e04:	b002      	add	sp, #8
   b5e06:	bd10      	pop	{r4, pc}

000b5e08 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b5e08:	6880      	ldr	r0, [r0, #8]
   b5e0a:	6803      	ldr	r3, [r0, #0]
   b5e0c:	68db      	ldr	r3, [r3, #12]
   b5e0e:	4718      	bx	r3

000b5e10 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b5e10:	4770      	bx	lr

000b5e12 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b5e12:	4608      	mov	r0, r1
   b5e14:	b111      	cbz	r1, b5e1c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b5e16:	680b      	ldr	r3, [r1, #0]
   b5e18:	685b      	ldr	r3, [r3, #4]
   b5e1a:	4718      	bx	r3
}
   b5e1c:	4770      	bx	lr

000b5e1e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b5e1e:	4770      	bx	lr

000b5e20 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5e20:	4770      	bx	lr

000b5e22 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b5e22:	4770      	bx	lr

000b5e24 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b5e24:	4770      	bx	lr

000b5e26 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b5e26:	b538      	push	{r3, r4, r5, lr}
   b5e28:	4604      	mov	r4, r0
   b5e2a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5e2c:	6800      	ldr	r0, [r0, #0]
   b5e2e:	212e      	movs	r1, #46	; 0x2e
   b5e30:	f001 fdcf 	bl	b79d2 <strchrnul>
    size = s - category;
   b5e34:	6823      	ldr	r3, [r4, #0]
   b5e36:	1ac3      	subs	r3, r0, r3
   b5e38:	602b      	str	r3, [r5, #0]
    if (size) {
   b5e3a:	b123      	cbz	r3, b5e46 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5e3c:	7803      	ldrb	r3, [r0, #0]
   b5e3e:	b103      	cbz	r3, b5e42 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b5e40:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5e42:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5e44:	6020      	str	r0, [r4, #0]
}
   b5e46:	4618      	mov	r0, r3
   b5e48:	bd38      	pop	{r3, r4, r5, pc}

000b5e4a <_ZN5spark16JSONStreamWriterD0Ev>:
   b5e4a:	b510      	push	{r4, lr}
   b5e4c:	210c      	movs	r1, #12
   b5e4e:	4604      	mov	r4, r0
   b5e50:	f7fe fde9 	bl	b4a26 <_ZdlPvj>
   b5e54:	4620      	mov	r0, r4
   b5e56:	bd10      	pop	{r4, pc}

000b5e58 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b5e58:	b510      	push	{r4, lr}
   b5e5a:	2104      	movs	r1, #4
   b5e5c:	4604      	mov	r4, r0
   b5e5e:	f7fe fde2 	bl	b4a26 <_ZdlPvj>
   b5e62:	4620      	mov	r0, r4
   b5e64:	bd10      	pop	{r4, pc}

000b5e66 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5e66:	b510      	push	{r4, lr}
   b5e68:	2104      	movs	r1, #4
   b5e6a:	4604      	mov	r4, r0
   b5e6c:	f7fe fddb 	bl	b4a26 <_ZdlPvj>
   b5e70:	4620      	mov	r0, r4
   b5e72:	bd10      	pop	{r4, pc}

000b5e74 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5e74:	f7ff b83e 	b.w	b4ef4 <os_mutex_recursive_lock>

000b5e78 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b5e78:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b5e7a:	f7fe fd83 	bl	b4984 <strcmp>
}
   b5e7e:	fab0 f080 	clz	r0, r0
   b5e82:	0940      	lsrs	r0, r0, #5
   b5e84:	bd08      	pop	{r3, pc}

000b5e86 <__tcf_1>:
   b5e86:	4770      	bx	lr

000b5e88 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b5e88:	b510      	push	{r4, lr}
   b5e8a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b5e8c:	f001 fb3c 	bl	b7508 <_Z16_fetch_usbserialv>
   b5e90:	4284      	cmp	r4, r0
   b5e92:	d010      	beq.n	b5eb6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b5e94:	f001 fcfc 	bl	b7890 <_Z22__fetch_global_Serial1v>
   b5e98:	4284      	cmp	r4, r0
   b5e9a:	d105      	bne.n	b5ea8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b5e9c:	f001 fcf8 	bl	b7890 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b5ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b5ea4:	f001 bacb 	b.w	b743e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b5ea8:	b12c      	cbz	r4, b5eb6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b5eaa:	6823      	ldr	r3, [r4, #0]
   b5eac:	4620      	mov	r0, r4
   b5eae:	685b      	ldr	r3, [r3, #4]
}
   b5eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5eb4:	4718      	bx	r3
   b5eb6:	bd10      	pop	{r4, pc}

000b5eb8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5eb8:	680b      	ldr	r3, [r1, #0]
   b5eba:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5ebc:	684b      	ldr	r3, [r1, #4]
   b5ebe:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5ec0:	b113      	cbz	r3, b5ec8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b5ec2:	685a      	ldr	r2, [r3, #4]
   b5ec4:	3201      	adds	r2, #1
   b5ec6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5ec8:	4770      	bx	lr

000b5eca <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b5eca:	b513      	push	{r0, r1, r4, lr}
   b5ecc:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b5ece:	4608      	mov	r0, r1
   b5ed0:	9101      	str	r1, [sp, #4]
   b5ed2:	f7fe fd61 	bl	b4998 <strlen>
   b5ed6:	9901      	ldr	r1, [sp, #4]
   b5ed8:	4602      	mov	r2, r0
   b5eda:	4620      	mov	r0, r4
}
   b5edc:	b002      	add	sp, #8
   b5ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b5ee2:	f7ff bf81 	b.w	b5de8 <_ZN5spark10JSONWriter5valueEPKcj>

000b5ee6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b5ee6:	b513      	push	{r0, r1, r4, lr}
   b5ee8:	4604      	mov	r4, r0
    write(str, strlen(str));
   b5eea:	4608      	mov	r0, r1
   b5eec:	9101      	str	r1, [sp, #4]
   b5eee:	f7fe fd53 	bl	b4998 <strlen>
   b5ef2:	6823      	ldr	r3, [r4, #0]
   b5ef4:	9901      	ldr	r1, [sp, #4]
   b5ef6:	68db      	ldr	r3, [r3, #12]
   b5ef8:	4602      	mov	r2, r0
   b5efa:	4620      	mov	r0, r4
}
   b5efc:	b002      	add	sp, #8
   b5efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b5f02:	4718      	bx	r3

000b5f04 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b5f04:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5f06:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b5f08:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5f0c:	68db      	ldr	r3, [r3, #12]
   b5f0e:	2201      	movs	r2, #1
   b5f10:	f10d 0107 	add.w	r1, sp, #7
   b5f14:	4798      	blx	r3
}
   b5f16:	b003      	add	sp, #12
   b5f18:	f85d fb04 	ldr.w	pc, [sp], #4

000b5f1c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b5f1c:	680a      	ldr	r2, [r1, #0]
   b5f1e:	6002      	str	r2, [r0, #0]
   b5f20:	684a      	ldr	r2, [r1, #4]
   b5f22:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b5f24:	2200      	movs	r2, #0
   b5f26:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5f2a:	b510      	push	{r4, lr}
   b5f2c:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5f2e:	688c      	ldr	r4, [r1, #8]
   b5f30:	6084      	str	r4, [r0, #8]
   b5f32:	68cc      	ldr	r4, [r1, #12]
   b5f34:	60c4      	str	r4, [r0, #12]
   b5f36:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5f38:	608a      	str	r2, [r1, #8]
   b5f3a:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5f3c:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5f3e:	610a      	str	r2, [r1, #16]
   b5f40:	bd10      	pop	{r4, pc}
	...

000b5f44 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b5f48:	e9d0 8400 	ldrd	r8, r4, [r0]
   b5f4c:	f04f 0a14 	mov.w	sl, #20
   b5f50:	9300      	str	r3, [sp, #0]
   b5f52:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b5f56:	4b18      	ldr	r3, [pc, #96]	; (b5fb8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5f58:	10a4      	asrs	r4, r4, #2
   b5f5a:	4617      	mov	r7, r2
   b5f5c:	435c      	muls	r4, r3
   b5f5e:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b5f60:	2c00      	cmp	r4, #0
   b5f62:	dd21      	ble.n	b5fa8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b5f64:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b5f66:	fb0a f006 	mul.w	r0, sl, r6
   b5f6a:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b5f6e:	463a      	mov	r2, r7
   b5f70:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b5f74:	5828      	ldr	r0, [r5, r0]
   b5f76:	9101      	str	r1, [sp, #4]
   b5f78:	455f      	cmp	r7, fp
   b5f7a:	bf28      	it	cs
   b5f7c:	465a      	movcs	r2, fp
   b5f7e:	f001 fd3a 	bl	b79f6 <strncmp>
                if (cmp == 0) {
   b5f82:	2800      	cmp	r0, #0
   b5f84:	9901      	ldr	r1, [sp, #4]
   b5f86:	f04f 0301 	mov.w	r3, #1
   b5f8a:	d10b      	bne.n	b5fa4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b5f8c:	455f      	cmp	r7, fp
   b5f8e:	d103      	bne.n	b5f98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b5f90:	9a00      	ldr	r2, [sp, #0]
   b5f92:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5f94:	4634      	mov	r4, r6
   b5f96:	e7e3      	b.n	b5f60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b5f98:	d9fc      	bls.n	b5f94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b5f9a:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b5f9c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b5fa0:	3e01      	subs	r6, #1
   b5fa2:	e7f7      	b.n	b5f94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b5fa4:	dbf9      	blt.n	b5f9a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b5fa6:	e7f5      	b.n	b5f94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b5fa8:	eba5 0508 	sub.w	r5, r5, r8
}
   b5fac:	4802      	ldr	r0, [pc, #8]	; (b5fb8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5fae:	10ad      	asrs	r5, r5, #2
   b5fb0:	4368      	muls	r0, r5
   b5fb2:	b003      	add	sp, #12
   b5fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5fb8:	cccccccd 	.word	0xcccccccd

000b5fbc <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5fbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b5fbe:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b5fc0:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5fc2:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b5fc4:	b303      	cbz	r3, b6008 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b5fc6:	b1f9      	cbz	r1, b6008 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b5fc8:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b5fca:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b5fce:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b5fd0:	a903      	add	r1, sp, #12
   b5fd2:	a801      	add	r0, sp, #4
   b5fd4:	f7ff ff27 	bl	b5e26 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5fd8:	4601      	mov	r1, r0
   b5fda:	b1a8      	cbz	r0, b6008 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b5fdc:	f10d 030b 	add.w	r3, sp, #11
   b5fe0:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b5fe2:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5fe6:	4620      	mov	r0, r4
   b5fe8:	f7ff ffac 	bl	b5f44 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b5fec:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b5ff0:	b153      	cbz	r3, b6008 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b5ff2:	6823      	ldr	r3, [r4, #0]
   b5ff4:	2414      	movs	r4, #20
   b5ff6:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b5ffa:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b5ffc:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b6000:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b6002:	bfa8      	it	ge
   b6004:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b6006:	e7e3      	b.n	b5fd0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b6008:	4628      	mov	r0, r5
   b600a:	b004      	add	sp, #16
   b600c:	bd70      	pop	{r4, r5, r6, pc}

000b600e <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b600e:	b40e      	push	{r1, r2, r3}
   b6010:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6012:	b08c      	sub	sp, #48	; 0x30
   b6014:	af00      	add	r7, sp, #0
   b6016:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b601a:	4604      	mov	r4, r0
   b601c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6020:	607a      	str	r2, [r7, #4]
   b6022:	462b      	mov	r3, r5
   b6024:	2120      	movs	r1, #32
   b6026:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b602a:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b602c:	f7ff f9ae 	bl	b538c <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b6030:	281f      	cmp	r0, #31
   b6032:	687a      	ldr	r2, [r7, #4]
   b6034:	d91a      	bls.n	b606c <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b6036:	f100 0308 	add.w	r3, r0, #8
   b603a:	f023 0307 	bic.w	r3, r3, #7
        }
   b603e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b6040:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6044:	1c41      	adds	r1, r0, #1
   b6046:	462b      	mov	r3, r5
   b6048:	4668      	mov	r0, sp
        va_start(args, fmt);
   b604a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b604c:	f7ff f99e 	bl	b538c <vsnprintf>
        if (n > 0) {
   b6050:	1e02      	subs	r2, r0, #0
   b6052:	dd04      	ble.n	b605e <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b6054:	6823      	ldr	r3, [r4, #0]
   b6056:	4669      	mov	r1, sp
   b6058:	68db      	ldr	r3, [r3, #12]
   b605a:	4620      	mov	r0, r4
   b605c:	4798      	blx	r3
   b605e:	46b5      	mov	sp, r6
}
   b6060:	3730      	adds	r7, #48	; 0x30
   b6062:	46bd      	mov	sp, r7
   b6064:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6068:	b003      	add	sp, #12
   b606a:	4770      	bx	lr
    } else if (n > 0) {
   b606c:	2800      	cmp	r0, #0
   b606e:	d0f7      	beq.n	b6060 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b6070:	6823      	ldr	r3, [r4, #0]
   b6072:	4602      	mov	r2, r0
   b6074:	68db      	ldr	r3, [r3, #12]
   b6076:	f107 0110 	add.w	r1, r7, #16
   b607a:	4620      	mov	r0, r4
   b607c:	4798      	blx	r3
}
   b607e:	e7ef      	b.n	b6060 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b6080 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b6080:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b6082:	4c09      	ldr	r4, [pc, #36]	; (b60a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b6084:	7823      	ldrb	r3, [r4, #0]
   b6086:	f3bf 8f5b 	dmb	ish
   b608a:	07db      	lsls	r3, r3, #31
   b608c:	d409      	bmi.n	b60a2 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b608e:	4620      	mov	r0, r4
   b6090:	f7fe fcd8 	bl	b4a44 <__cxa_guard_acquire>
   b6094:	b128      	cbz	r0, b60a2 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b6096:	4620      	mov	r0, r4
   b6098:	f7fe fcd9 	bl	b4a4e <__cxa_guard_release>
   b609c:	4803      	ldr	r0, [pc, #12]	; (b60ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b609e:	f001 fc1f 	bl	b78e0 <atexit>
}
   b60a2:	4803      	ldr	r0, [pc, #12]	; (b60b0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b60a4:	bd10      	pop	{r4, pc}
   b60a6:	bf00      	nop
   b60a8:	2003e684 	.word	0x2003e684
   b60ac:	000b5e1f 	.word	0x000b5e1f
   b60b0:	2003e584 	.word	0x2003e584

000b60b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b60b4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b60b6:	4c09      	ldr	r4, [pc, #36]	; (b60dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b60b8:	7823      	ldrb	r3, [r4, #0]
   b60ba:	f3bf 8f5b 	dmb	ish
   b60be:	07db      	lsls	r3, r3, #31
   b60c0:	d409      	bmi.n	b60d6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b60c2:	4620      	mov	r0, r4
   b60c4:	f7fe fcbe 	bl	b4a44 <__cxa_guard_acquire>
   b60c8:	b128      	cbz	r0, b60d6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b60ca:	4620      	mov	r0, r4
   b60cc:	f7fe fcbf 	bl	b4a4e <__cxa_guard_release>
   b60d0:	4803      	ldr	r0, [pc, #12]	; (b60e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b60d2:	f001 fc05 	bl	b78e0 <atexit>
    return &factory;
}
   b60d6:	4803      	ldr	r0, [pc, #12]	; (b60e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b60d8:	bd10      	pop	{r4, pc}
   b60da:	bf00      	nop
   b60dc:	2003e688 	.word	0x2003e688
   b60e0:	000b5e87 	.word	0x000b5e87
   b60e4:	2003e588 	.word	0x2003e588

000b60e8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b60e8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b60ea:	2500      	movs	r5, #0
   b60ec:	4604      	mov	r4, r0
   b60ee:	e9c0 5500 	strd	r5, r5, [r0]
   b60f2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b60f6:	6085      	str	r5, [r0, #8]
   b60f8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b60fa:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b60fe:	f7fe fee9 	bl	b4ed4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b6102:	f7ff ffbd 	bl	b6080 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b6106:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b6108:	f7ff ffd4 	bl	b60b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b610c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b610e:	6220      	str	r0, [r4, #32]
}
   b6110:	4620      	mov	r0, r4
   b6112:	bd38      	pop	{r3, r4, r5, pc}

000b6114 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b6114:	b510      	push	{r4, lr}
    static LogManager mgr;
   b6116:	4c0a      	ldr	r4, [pc, #40]	; (b6140 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b6118:	7823      	ldrb	r3, [r4, #0]
   b611a:	f3bf 8f5b 	dmb	ish
   b611e:	07db      	lsls	r3, r3, #31
   b6120:	d40c      	bmi.n	b613c <_ZN5spark10LogManager8instanceEv+0x28>
   b6122:	4620      	mov	r0, r4
   b6124:	f7fe fc8e 	bl	b4a44 <__cxa_guard_acquire>
   b6128:	b140      	cbz	r0, b613c <_ZN5spark10LogManager8instanceEv+0x28>
   b612a:	4806      	ldr	r0, [pc, #24]	; (b6144 <_ZN5spark10LogManager8instanceEv+0x30>)
   b612c:	f7ff ffdc 	bl	b60e8 <_ZN5spark10LogManagerC1Ev>
   b6130:	4620      	mov	r0, r4
   b6132:	f7fe fc8c 	bl	b4a4e <__cxa_guard_release>
   b6136:	4804      	ldr	r0, [pc, #16]	; (b6148 <_ZN5spark10LogManager8instanceEv+0x34>)
   b6138:	f001 fbd2 	bl	b78e0 <atexit>
    return &mgr;
}
   b613c:	4801      	ldr	r0, [pc, #4]	; (b6144 <_ZN5spark10LogManager8instanceEv+0x30>)
   b613e:	bd10      	pop	{r4, pc}
   b6140:	2003e680 	.word	0x2003e680
   b6144:	2003e690 	.word	0x2003e690
   b6148:	000b6669 	.word	0x000b6669

000b614c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b614c:	4a02      	ldr	r2, [pc, #8]	; (b6158 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b614e:	4903      	ldr	r1, [pc, #12]	; (b615c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b6150:	4803      	ldr	r0, [pc, #12]	; (b6160 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b6152:	2300      	movs	r3, #0
   b6154:	f7ff b83e 	b.w	b51d4 <log_set_callbacks>
   b6158:	000b644d 	.word	0x000b644d
   b615c:	000b63d9 	.word	0x000b63d9
   b6160:	000b6359 	.word	0x000b6359

000b6164 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b6164:	2300      	movs	r3, #0
   b6166:	461a      	mov	r2, r3
   b6168:	4619      	mov	r1, r3
   b616a:	4618      	mov	r0, r3
   b616c:	f7ff b832 	b.w	b51d4 <log_set_callbacks>

000b6170 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6170:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b6172:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6174:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6176:	4668      	mov	r0, sp
   b6178:	f7ff fe9e 	bl	b5eb8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b617c:	466a      	mov	r2, sp
   b617e:	4629      	mov	r1, r5
   b6180:	4620      	mov	r0, r4
   b6182:	f7ff fd51 	bl	b5c28 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b6186:	a801      	add	r0, sp, #4
   b6188:	f7ff f949 	bl	b541e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b618c:	4620      	mov	r0, r4
   b618e:	b003      	add	sp, #12
   b6190:	bd30      	pop	{r4, r5, pc}

000b6192 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6192:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b6194:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6196:	4604      	mov	r4, r0
   b6198:	4668      	mov	r0, sp
   b619a:	f7ff fe8d 	bl	b5eb8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b619e:	466a      	mov	r2, sp
   b61a0:	4629      	mov	r1, r5
   b61a2:	4620      	mov	r0, r4
   b61a4:	f7ff fd1c 	bl	b5be0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b61a8:	a801      	add	r0, sp, #4
   b61aa:	f7ff f938 	bl	b541e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b61ae:	4620      	mov	r0, r4
   b61b0:	b003      	add	sp, #12
   b61b2:	bd30      	pop	{r4, r5, pc}

000b61b4 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b61b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b61b6:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b61b8:	4604      	mov	r4, r0
   b61ba:	4668      	mov	r0, sp
   b61bc:	f7ff fe7c 	bl	b5eb8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b61c0:	466a      	mov	r2, sp
   b61c2:	4629      	mov	r1, r5
   b61c4:	4620      	mov	r0, r4
   b61c6:	f7ff fcb4 	bl	b5b32 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b61ca:	a801      	add	r0, sp, #4
   b61cc:	f7ff f927 	bl	b541e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b61d0:	4620      	mov	r0, r4
   b61d2:	b003      	add	sp, #12
   b61d4:	bd30      	pop	{r4, r5, pc}
	...

000b61d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b61d8:	b570      	push	{r4, r5, r6, lr}
   b61da:	b08a      	sub	sp, #40	; 0x28
   b61dc:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b61de:	4601      	mov	r1, r0
   b61e0:	a804      	add	r0, sp, #16
   b61e2:	f7ff ffc5 	bl	b6170 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b61e6:	4e14      	ldr	r6, [pc, #80]	; (b6238 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b61e8:	a804      	add	r0, sp, #16
   b61ea:	f7ff fd35 	bl	b5c58 <_ZN5spark18JSONObjectIterator4nextEv>
   b61ee:	b1e8      	cbz	r0, b622c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b61f0:	a904      	add	r1, sp, #16
   b61f2:	4668      	mov	r0, sp
   b61f4:	f7ff ffcd 	bl	b6192 <_ZNK5spark18JSONObjectIterator4nameEv>
   b61f8:	9802      	ldr	r0, [sp, #8]
   b61fa:	4631      	mov	r1, r6
   b61fc:	f7ff fe3c 	bl	b5e78 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b6200:	4604      	mov	r4, r0
   b6202:	b110      	cbz	r0, b620a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b6204:	1e2c      	subs	r4, r5, #0
   b6206:	bf18      	it	ne
   b6208:	2401      	movne	r4, #1
   b620a:	a801      	add	r0, sp, #4
   b620c:	f7ff f907 	bl	b541e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6210:	2c00      	cmp	r4, #0
   b6212:	d0e9      	beq.n	b61e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b6214:	a904      	add	r1, sp, #16
   b6216:	4668      	mov	r0, sp
   b6218:	f7ff ffcc 	bl	b61b4 <_ZNK5spark18JSONObjectIterator5valueEv>
   b621c:	4668      	mov	r0, sp
   b621e:	f7ff fcbe 	bl	b5b9e <_ZNK5spark9JSONValue5toIntEv>
   b6222:	6028      	str	r0, [r5, #0]
   b6224:	a801      	add	r0, sp, #4
   b6226:	f7ff f8fa 	bl	b541e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b622a:	e7dd      	b.n	b61e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b622c:	a805      	add	r0, sp, #20
   b622e:	f7ff f8f6 	bl	b541e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6232:	b00a      	add	sp, #40	; 0x28
   b6234:	bd70      	pop	{r4, r5, r6, pc}
   b6236:	bf00      	nop
   b6238:	000b7df0 	.word	0x000b7df0

000b623c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b623c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b623e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b6240:	4620      	mov	r0, r4
   b6242:	4913      	ldr	r1, [pc, #76]	; (b6290 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6244:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b6246:	f7fe fb9d 	bl	b4984 <strcmp>
   b624a:	b950      	cbnz	r0, b6262 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b624c:	f001 f95c 	bl	b7508 <_Z16_fetch_usbserialv>
   b6250:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6254:	f001 f948 	bl	b74e8 <_ZN9USBSerial5beginEl>
}
   b6258:	b003      	add	sp, #12
   b625a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b625e:	f001 b953 	b.w	b7508 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b6262:	490c      	ldr	r1, [pc, #48]	; (b6294 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b6264:	4620      	mov	r0, r4
   b6266:	f7fe fb8d 	bl	b4984 <strcmp>
   b626a:	b978      	cbnz	r0, b628c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b626c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b6270:	a901      	add	r1, sp, #4
   b6272:	4628      	mov	r0, r5
        int baud = 9600;
   b6274:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b6276:	f7ff ffaf 	bl	b61d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b627a:	f001 fb09 	bl	b7890 <_Z22__fetch_global_Serial1v>
   b627e:	9901      	ldr	r1, [sp, #4]
   b6280:	f001 f8da 	bl	b7438 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b6284:	f001 fb04 	bl	b7890 <_Z22__fetch_global_Serial1v>
}
   b6288:	b003      	add	sp, #12
   b628a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b628c:	2000      	movs	r0, #0
   b628e:	e7fb      	b.n	b6288 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b6290:	000b7df5 	.word	0x000b7df5
   b6294:	000b7dfc 	.word	0x000b7dfc

000b6298 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6298:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b629a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b629e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b62a0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b62a2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b62a6:	42ae      	cmp	r6, r5
   b62a8:	d005      	beq.n	b62b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b62aa:	f105 0008 	add.w	r0, r5, #8
   b62ae:	f7ff fff3 	bl	b6298 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b62b2:	3514      	adds	r5, #20
   b62b4:	e7f7      	b.n	b62a6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b62b6:	6820      	ldr	r0, [r4, #0]
   b62b8:	f7ff f858 	bl	b536c <free>
}
   b62bc:	4620      	mov	r0, r4
   b62be:	bd70      	pop	{r4, r5, r6, pc}

000b62c0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b62c0:	b510      	push	{r4, lr}
   b62c2:	4604      	mov	r4, r0
   b62c4:	300c      	adds	r0, #12
   b62c6:	f7ff ffe7 	bl	b6298 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b62ca:	4620      	mov	r0, r4
   b62cc:	f7ff f895 	bl	b53fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b62d0:	4620      	mov	r0, r4
   b62d2:	bd10      	pop	{r4, pc}

000b62d4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b62d4:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b62d6:	4b04      	ldr	r3, [pc, #16]	; (b62e8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b62d8:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b62da:	f840 3b04 	str.w	r3, [r0], #4
   b62de:	f7ff ffef 	bl	b62c0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b62e2:	4620      	mov	r0, r4
   b62e4:	bd10      	pop	{r4, pc}
   b62e6:	bf00      	nop
   b62e8:	000b7ccc 	.word	0x000b7ccc

000b62ec <_ZN5spark16StreamLogHandlerD0Ev>:
   b62ec:	b510      	push	{r4, lr}
   b62ee:	4604      	mov	r4, r0
   b62f0:	f7ff fff0 	bl	b62d4 <_ZN5spark16StreamLogHandlerD1Ev>
   b62f4:	4620      	mov	r0, r4
   b62f6:	2124      	movs	r1, #36	; 0x24
   b62f8:	f7fe fb95 	bl	b4a26 <_ZdlPvj>
   b62fc:	4620      	mov	r0, r4
   b62fe:	bd10      	pop	{r4, pc}

000b6300 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b6300:	b510      	push	{r4, lr}
   b6302:	4b03      	ldr	r3, [pc, #12]	; (b6310 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b6304:	6003      	str	r3, [r0, #0]
   b6306:	4604      	mov	r4, r0
   b6308:	f7ff ffe4 	bl	b62d4 <_ZN5spark16StreamLogHandlerD1Ev>
   b630c:	4620      	mov	r0, r4
   b630e:	bd10      	pop	{r4, pc}
   b6310:	000b7e9c 	.word	0x000b7e9c

000b6314 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b6314:	b510      	push	{r4, lr}
   b6316:	4604      	mov	r4, r0
   b6318:	f7ff fff2 	bl	b6300 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b631c:	4620      	mov	r0, r4
   b631e:	2124      	movs	r1, #36	; 0x24
   b6320:	f7fe fb81 	bl	b4a26 <_ZdlPvj>
   b6324:	4620      	mov	r0, r4
   b6326:	bd10      	pop	{r4, pc}

000b6328 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b6328:	2200      	movs	r2, #0
   b632a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b632e:	b510      	push	{r4, lr}
        capacity_(0) {
   b6330:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6332:	680c      	ldr	r4, [r1, #0]
   b6334:	6004      	str	r4, [r0, #0]
   b6336:	684c      	ldr	r4, [r1, #4]
   b6338:	6044      	str	r4, [r0, #4]
   b633a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b633c:	600a      	str	r2, [r1, #0]
   b633e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6340:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6342:	608a      	str	r2, [r1, #8]
}
   b6344:	bd10      	pop	{r4, pc}

000b6346 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b6346:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6348:	6803      	ldr	r3, [r0, #0]
   b634a:	4604      	mov	r4, r0
   b634c:	6818      	ldr	r0, [r3, #0]
   b634e:	f7fe fdd9 	bl	b4f04 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b6352:	4620      	mov	r0, r4
   b6354:	bd10      	pop	{r4, pc}
	...

000b6358 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b6358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b635c:	b087      	sub	sp, #28
   b635e:	4680      	mov	r8, r0
   b6360:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b6362:	4b1c      	ldr	r3, [pc, #112]	; (b63d4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b6364:	685b      	ldr	r3, [r3, #4]
   b6366:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b636a:	4689      	mov	r9, r1
   b636c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b636e:	b96b      	cbnz	r3, b638c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b6370:	f7ff fed0 	bl	b6114 <_ZN5spark10LogManager8instanceEv>
   b6374:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b6376:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b637a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b637c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b637e:	f7ff fd79 	bl	b5e74 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b6382:	7b23      	ldrb	r3, [r4, #12]
   b6384:	b12b      	cbz	r3, b6392 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b6386:	a805      	add	r0, sp, #20
   b6388:	f7ff ffdd 	bl	b6346 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b638c:	b007      	add	sp, #28
   b638e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b6392:	2301      	movs	r3, #1
   b6394:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b6396:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b639a:	fa5f f989 	uxtb.w	r9, r9
   b639e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b63a2:	45aa      	cmp	sl, r5
   b63a4:	d012      	beq.n	b63cc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b63a6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b63aa:	4631      	mov	r1, r6
   b63ac:	1d38      	adds	r0, r7, #4
   b63ae:	f7ff fe05 	bl	b5fbc <_ZNK5spark6detail9LogFilter5levelEPKc>
   b63b2:	4581      	cmp	r9, r0
   b63b4:	d3f5      	bcc.n	b63a2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b63b6:	683b      	ldr	r3, [r7, #0]
   b63b8:	9a03      	ldr	r2, [sp, #12]
   b63ba:	9200      	str	r2, [sp, #0]
   b63bc:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b63c0:	464a      	mov	r2, r9
   b63c2:	4633      	mov	r3, r6
   b63c4:	4641      	mov	r1, r8
   b63c6:	4638      	mov	r0, r7
   b63c8:	47d8      	blx	fp
   b63ca:	e7ea      	b.n	b63a2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b63cc:	2300      	movs	r3, #0
   b63ce:	7323      	strb	r3, [r4, #12]
   b63d0:	e7d9      	b.n	b6386 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b63d2:	bf00      	nop
   b63d4:	e000ed00 	.word	0xe000ed00

000b63d8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b63d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b63dc:	469b      	mov	fp, r3
   b63de:	4b1a      	ldr	r3, [pc, #104]	; (b6448 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b63e0:	685b      	ldr	r3, [r3, #4]
   b63e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b63e6:	4680      	mov	r8, r0
   b63e8:	4689      	mov	r9, r1
   b63ea:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b63ec:	b96b      	cbnz	r3, b640a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b63ee:	f7ff fe91 	bl	b6114 <_ZN5spark10LogManager8instanceEv>
   b63f2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b63f4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b63f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b63fa:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b63fc:	f7ff fd3a 	bl	b5e74 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b6400:	7b23      	ldrb	r3, [r4, #12]
   b6402:	b12b      	cbz	r3, b6410 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b6404:	a801      	add	r0, sp, #4
   b6406:	f7ff ff9e 	bl	b6346 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b640a:	b003      	add	sp, #12
   b640c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b6410:	2301      	movs	r3, #1
   b6412:	7323      	strb	r3, [r4, #12]
   b6414:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b6418:	b2f6      	uxtb	r6, r6
   b641a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b641e:	4555      	cmp	r5, sl
   b6420:	d00e      	beq.n	b6440 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b6422:	f855 7b04 	ldr.w	r7, [r5], #4
   b6426:	4659      	mov	r1, fp
   b6428:	1d38      	adds	r0, r7, #4
   b642a:	f7ff fdc7 	bl	b5fbc <_ZNK5spark6detail9LogFilter5levelEPKc>
   b642e:	4286      	cmp	r6, r0
   b6430:	d3f5      	bcc.n	b641e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b6432:	683b      	ldr	r3, [r7, #0]
   b6434:	464a      	mov	r2, r9
   b6436:	68db      	ldr	r3, [r3, #12]
   b6438:	4641      	mov	r1, r8
   b643a:	4638      	mov	r0, r7
   b643c:	4798      	blx	r3
   b643e:	e7ee      	b.n	b641e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b6440:	2300      	movs	r3, #0
   b6442:	7323      	strb	r3, [r4, #12]
   b6444:	e7de      	b.n	b6404 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b6446:	bf00      	nop
   b6448:	e000ed00 	.word	0xe000ed00

000b644c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b644c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6450:	4b16      	ldr	r3, [pc, #88]	; (b64ac <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b6452:	685b      	ldr	r3, [r3, #4]
   b6454:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6458:	4605      	mov	r5, r0
   b645a:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b645c:	bb1b      	cbnz	r3, b64a6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b645e:	f7ff fe59 	bl	b6114 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b6462:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b6466:	4604      	mov	r4, r0
   b6468:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b646a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b646c:	f7ff fd02 	bl	b5e74 <_ZN14RecursiveMutex4lockEv.isra.0>
   b6470:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b6474:	2446      	movs	r4, #70	; 0x46
   b6476:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b647a:	45b0      	cmp	r8, r6
   b647c:	d109      	bne.n	b6492 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b647e:	a801      	add	r0, sp, #4
   b6480:	f7ff ff61 	bl	b6346 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b6484:	42a5      	cmp	r5, r4
   b6486:	bfb4      	ite	lt
   b6488:	2000      	movlt	r0, #0
   b648a:	2001      	movge	r0, #1
}
   b648c:	b002      	add	sp, #8
   b648e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b6492:	f856 0b04 	ldr.w	r0, [r6], #4
   b6496:	4639      	mov	r1, r7
   b6498:	3004      	adds	r0, #4
   b649a:	f7ff fd8f 	bl	b5fbc <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b649e:	4284      	cmp	r4, r0
   b64a0:	bfa8      	it	ge
   b64a2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b64a4:	e7e9      	b.n	b647a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b64a6:	2000      	movs	r0, #0
   b64a8:	e7f0      	b.n	b648c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b64aa:	bf00      	nop
   b64ac:	e000ed00 	.word	0xe000ed00

000b64b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b64b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b64b2:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b64b6:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b64b8:	4604      	mov	r4, r0
   b64ba:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b64bc:	db0d      	blt.n	b64da <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b64be:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b64c0:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b64c2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b64c4:	dd04      	ble.n	b64d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b64c6:	00b9      	lsls	r1, r7, #2
   b64c8:	f7fe ff58 	bl	b537c <realloc>
            if (!d) {
   b64cc:	b918      	cbnz	r0, b64d6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b64ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b64d0:	f7fe ff4c 	bl	b536c <free>
        T* d = nullptr;
   b64d4:	2000      	movs	r0, #0
        data_ = d;
   b64d6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b64d8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b64da:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b64dc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b64de:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b64e2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b64e4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b64e8:	1d08      	adds	r0, r1, #4
   b64ea:	f001 fa15 	bl	b7918 <memmove>
    new(p) T(std::move(value));
   b64ee:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b64f2:	6863      	ldr	r3, [r4, #4]
   b64f4:	3301      	adds	r3, #1
   b64f6:	6063      	str	r3, [r4, #4]
    return true;
   b64f8:	2001      	movs	r0, #1
   b64fa:	e7e8      	b.n	b64ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b64fc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b64fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b64fe:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b6502:	4604      	mov	r4, r0
   b6504:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6506:	9301      	str	r3, [sp, #4]
   b6508:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b650a:	f7ff fcb3 	bl	b5e74 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b650e:	e9d4 3200 	ldrd	r3, r2, [r4]
   b6512:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b6516:	4293      	cmp	r3, r2
   b6518:	4619      	mov	r1, r3
   b651a:	d00b      	beq.n	b6534 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b651c:	6809      	ldr	r1, [r1, #0]
   b651e:	42a9      	cmp	r1, r5
   b6520:	f103 0304 	add.w	r3, r3, #4
   b6524:	d1f7      	bne.n	b6516 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b6526:	a801      	add	r0, sp, #4
   b6528:	f7ff ff0d 	bl	b6346 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b652c:	2500      	movs	r5, #0
}
   b652e:	4628      	mov	r0, r5
   b6530:	b003      	add	sp, #12
   b6532:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b6534:	4629      	mov	r1, r5
   b6536:	4620      	mov	r0, r4
   b6538:	f7ff ffba 	bl	b64b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b653c:	4605      	mov	r5, r0
   b653e:	2800      	cmp	r0, #0
   b6540:	d0f1      	beq.n	b6526 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b6542:	6863      	ldr	r3, [r4, #4]
   b6544:	2b01      	cmp	r3, #1
   b6546:	d101      	bne.n	b654c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b6548:	f7ff fe00 	bl	b614c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b654c:	a801      	add	r0, sp, #4
   b654e:	f7ff fefa 	bl	b6346 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6552:	e7ec      	b.n	b652e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b6554 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6554:	b570      	push	{r4, r5, r6, lr}
   b6556:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b6558:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b655c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b655e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b6562:	4282      	cmp	r2, r0
   b6564:	d00f      	beq.n	b6586 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b6566:	4601      	mov	r1, r0
            if (*p == value) {
   b6568:	681d      	ldr	r5, [r3, #0]
   b656a:	f851 6b04 	ldr.w	r6, [r1], #4
   b656e:	42ae      	cmp	r6, r5
   b6570:	d107      	bne.n	b6582 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6572:	1a52      	subs	r2, r2, r1
   b6574:	f001 f9d0 	bl	b7918 <memmove>
    --size_;
   b6578:	6863      	ldr	r3, [r4, #4]
   b657a:	3b01      	subs	r3, #1
   b657c:	6063      	str	r3, [r4, #4]
    return true;
   b657e:	2001      	movs	r0, #1
}
   b6580:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b6582:	4608      	mov	r0, r1
   b6584:	e7ed      	b.n	b6562 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b6586:	2000      	movs	r0, #0
   b6588:	e7fa      	b.n	b6580 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b658a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b658a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b658c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b6590:	4604      	mov	r4, r0
   b6592:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b6594:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6596:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b6598:	f7ff fc6c 	bl	b5e74 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b659c:	a901      	add	r1, sp, #4
   b659e:	4620      	mov	r0, r4
   b65a0:	f7ff ffd8 	bl	b6554 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b65a4:	b118      	cbz	r0, b65ae <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b65a6:	6863      	ldr	r3, [r4, #4]
   b65a8:	b90b      	cbnz	r3, b65ae <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b65aa:	f7ff fddb 	bl	b6164 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b65ae:	a803      	add	r0, sp, #12
   b65b0:	f7ff fec9 	bl	b6346 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b65b4:	b004      	add	sp, #16
   b65b6:	bd10      	pop	{r4, pc}

000b65b8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b65b8:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b65ba:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b65be:	2318      	movs	r3, #24
   b65c0:	4604      	mov	r4, r0
   b65c2:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b65c6:	42ae      	cmp	r6, r5
   b65c8:	d015      	beq.n	b65f6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b65ca:	f105 0110 	add.w	r1, r5, #16
   b65ce:	4620      	mov	r0, r4
   b65d0:	f7ff ffc0 	bl	b6554 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b65d4:	6863      	ldr	r3, [r4, #4]
   b65d6:	b90b      	cbnz	r3, b65dc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b65d8:	f7ff fdc4 	bl	b6164 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b65dc:	69e0      	ldr	r0, [r4, #28]
   b65de:	6929      	ldr	r1, [r5, #16]
   b65e0:	6803      	ldr	r3, [r0, #0]
   b65e2:	68db      	ldr	r3, [r3, #12]
   b65e4:	4798      	blx	r3
        if (h.stream) {
   b65e6:	6969      	ldr	r1, [r5, #20]
   b65e8:	b119      	cbz	r1, b65f2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b65ea:	6a20      	ldr	r0, [r4, #32]
   b65ec:	6803      	ldr	r3, [r0, #0]
   b65ee:	68db      	ldr	r3, [r3, #12]
   b65f0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b65f2:	3518      	adds	r5, #24
   b65f4:	e7e7      	b.n	b65c6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b65f6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b65fa:	2618      	movs	r6, #24
   b65fc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6600:	42ae      	cmp	r6, r5
   b6602:	d004      	beq.n	b660e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b6604:	4628      	mov	r0, r5
   b6606:	f000 fda5 	bl	b7154 <_ZN6StringD1Ev>
   b660a:	3518      	adds	r5, #24
   b660c:	e7f8      	b.n	b6600 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b660e:	2300      	movs	r3, #0
   b6610:	6163      	str	r3, [r4, #20]
}
   b6612:	bd70      	pop	{r4, r5, r6, pc}

000b6614 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b6614:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6616:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b6618:	f7ff fda4 	bl	b6164 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b661c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b6620:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6622:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6624:	f7ff fc26 	bl	b5e74 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b6628:	4620      	mov	r0, r4
   b662a:	f7ff ffc5 	bl	b65b8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b662e:	a801      	add	r0, sp, #4
   b6630:	f7ff fe89 	bl	b6346 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b6634:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6636:	b108      	cbz	r0, b663c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b6638:	f7fe fc54 	bl	b4ee4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b663c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b6640:	2618      	movs	r6, #24
   b6642:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6646:	42ae      	cmp	r6, r5
   b6648:	d004      	beq.n	b6654 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b664a:	4628      	mov	r0, r5
   b664c:	f000 fd82 	bl	b7154 <_ZN6StringD1Ev>
   b6650:	3518      	adds	r5, #24
   b6652:	e7f8      	b.n	b6646 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b6654:	6920      	ldr	r0, [r4, #16]
   b6656:	f7fe fe89 	bl	b536c <free>
   b665a:	6820      	ldr	r0, [r4, #0]
   b665c:	f7fe fe86 	bl	b536c <free>
}
   b6660:	4620      	mov	r0, r4
   b6662:	b002      	add	sp, #8
   b6664:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6668 <__tcf_2>:
    static LogManager mgr;
   b6668:	4801      	ldr	r0, [pc, #4]	; (b6670 <__tcf_2+0x8>)
   b666a:	f7ff bfd3 	b.w	b6614 <_ZN5spark10LogManagerD1Ev>
   b666e:	bf00      	nop
   b6670:	2003e690 	.word	0x2003e690

000b6674 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b6674:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6678:	4604      	mov	r4, r0
   b667a:	460d      	mov	r5, r1
   b667c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b667e:	d915      	bls.n	b66ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b6680:	4290      	cmp	r0, r2
   b6682:	d214      	bcs.n	b66ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b6684:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6688:	1a75      	subs	r5, r6, r1
   b668a:	f1a1 0714 	sub.w	r7, r1, #20
   b668e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6690:	42b7      	cmp	r7, r6
   b6692:	d01a      	beq.n	b66ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b6694:	b11c      	cbz	r4, b669e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b6696:	4631      	mov	r1, r6
   b6698:	4620      	mov	r0, r4
   b669a:	f7ff fc3f 	bl	b5f1c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b669e:	f106 0008 	add.w	r0, r6, #8
   b66a2:	f7ff fdf9 	bl	b6298 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b66a6:	3e14      	subs	r6, #20
   b66a8:	3c14      	subs	r4, #20
   b66aa:	e7f1      	b.n	b6690 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b66ac:	d00d      	beq.n	b66ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b66ae:	42b5      	cmp	r5, r6
   b66b0:	d00b      	beq.n	b66ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b66b2:	b11c      	cbz	r4, b66bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b66b4:	4629      	mov	r1, r5
   b66b6:	4620      	mov	r0, r4
   b66b8:	f7ff fc30 	bl	b5f1c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b66bc:	f105 0008 	add.w	r0, r5, #8
   b66c0:	f7ff fdea 	bl	b6298 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b66c4:	3514      	adds	r5, #20
   b66c6:	3414      	adds	r4, #20
   b66c8:	e7f1      	b.n	b66ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b66ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b66cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b66cc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b66ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66d0:	4604      	mov	r4, r0
   b66d2:	460d      	mov	r5, r1
   b66d4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b66d6:	d914      	bls.n	b6702 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b66d8:	4290      	cmp	r0, r2
   b66da:	d213      	bcs.n	b6704 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b66dc:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b66e0:	1a75      	subs	r5, r6, r1
   b66e2:	f1a1 0710 	sub.w	r7, r1, #16
   b66e6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b66e8:	42b7      	cmp	r7, r6
   b66ea:	d018      	beq.n	b671e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b66ec:	b11c      	cbz	r4, b66f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b66ee:	4631      	mov	r1, r6
   b66f0:	4620      	mov	r0, r4
   b66f2:	f000 fdab 	bl	b724c <_ZN6StringC1EOS_>
                end->~T();
   b66f6:	4630      	mov	r0, r6
   b66f8:	f000 fd2c 	bl	b7154 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b66fc:	3e10      	subs	r6, #16
   b66fe:	3c10      	subs	r4, #16
   b6700:	e7f2      	b.n	b66e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b6702:	d00c      	beq.n	b671e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b6704:	42b5      	cmp	r5, r6
   b6706:	d00a      	beq.n	b671e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b6708:	b11c      	cbz	r4, b6712 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b670a:	4629      	mov	r1, r5
   b670c:	4620      	mov	r0, r4
   b670e:	f000 fd9d 	bl	b724c <_ZN6StringC1EOS_>
                p->~T();
   b6712:	4628      	mov	r0, r5
   b6714:	f000 fd1e 	bl	b7154 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6718:	3510      	adds	r5, #16
   b671a:	3410      	adds	r4, #16
   b671c:	e7f2      	b.n	b6704 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b671e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6720 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b6720:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6722:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6724:	4605      	mov	r5, r0
        if (n > 0) {
   b6726:	dd11      	ble.n	b674c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6728:	0130      	lsls	r0, r6, #4
   b672a:	f7fe fe17 	bl	b535c <malloc>
            if (!d) {
   b672e:	4604      	mov	r4, r0
   b6730:	b158      	cbz	r0, b674a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6732:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6736:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b673a:	f7ff ffc7 	bl	b66cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b673e:	6828      	ldr	r0, [r5, #0]
   b6740:	f7fe fe14 	bl	b536c <free>
        data_ = d;
   b6744:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6746:	60ae      	str	r6, [r5, #8]
        return true;
   b6748:	2001      	movs	r0, #1
    }
   b674a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b674c:	2400      	movs	r4, #0
   b674e:	e7f6      	b.n	b673e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b6750 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6754:	4690      	mov	r8, r2
   b6756:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b6758:	2300      	movs	r3, #0
   b675a:	9103      	str	r1, [sp, #12]
    return size_;
   b675c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b6760:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6762:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b6764:	4299      	cmp	r1, r3
        capacity_(0) {
   b6766:	e9c0 3300 	strd	r3, r3, [r0]
   b676a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b676e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6772:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6776:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6778:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b677a:	dc23      	bgt.n	b67c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b677c:	e9d8 5700 	ldrd	r5, r7, [r8]
   b6780:	2314      	movs	r3, #20
   b6782:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b6786:	42af      	cmp	r7, r5
   b6788:	d03b      	beq.n	b6802 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b678a:	4629      	mov	r1, r5
   b678c:	a80b      	add	r0, sp, #44	; 0x2c
   b678e:	f000 fd5d 	bl	b724c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b6792:	a90b      	add	r1, sp, #44	; 0x2c
   b6794:	a80f      	add	r0, sp, #60	; 0x3c
   b6796:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b6798:	f000 fd58 	bl	b724c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b679c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b67a0:	4299      	cmp	r1, r3
   b67a2:	da1b      	bge.n	b67dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b67a4:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b67a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b67a8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b67ac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b67b0:	4631      	mov	r1, r6
   b67b2:	f106 0010 	add.w	r0, r6, #16
   b67b6:	f7ff ff89 	bl	b66cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b67ba:	b9ee      	cbnz	r6, b67f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b67bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b67be:	3301      	adds	r3, #1
   b67c0:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b67c2:	e011      	b.n	b67e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b67c4:	a808      	add	r0, sp, #32
   b67c6:	f7ff ffab 	bl	b6720 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b67ca:	2800      	cmp	r0, #0
   b67cc:	d1d6      	bne.n	b677c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b67ce:	a808      	add	r0, sp, #32
   b67d0:	f7fe fe13 	bl	b53fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b67d4:	4620      	mov	r0, r4
   b67d6:	b015      	add	sp, #84	; 0x54
   b67d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b67dc:	3101      	adds	r1, #1
   b67de:	a808      	add	r0, sp, #32
   b67e0:	f7ff ff9e 	bl	b6720 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b67e4:	2800      	cmp	r0, #0
   b67e6:	d1dd      	bne.n	b67a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b67e8:	a80f      	add	r0, sp, #60	; 0x3c
   b67ea:	f000 fcb3 	bl	b7154 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b67ee:	a80b      	add	r0, sp, #44	; 0x2c
   b67f0:	f000 fcb0 	bl	b7154 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b67f4:	3514      	adds	r5, #20
   b67f6:	e7c6      	b.n	b6786 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b67f8:	a90f      	add	r1, sp, #60	; 0x3c
   b67fa:	4630      	mov	r0, r6
   b67fc:	f000 fd26 	bl	b724c <_ZN6StringC1EOS_>
   b6800:	e7dc      	b.n	b67bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b6802:	2600      	movs	r6, #0
   b6804:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b6808:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b680a:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b680e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b6812:	429e      	cmp	r6, r3
   b6814:	da7c      	bge.n	b6910 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b6816:	0133      	lsls	r3, r6, #4
   b6818:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b681a:	9306      	str	r3, [sp, #24]
        if (!category) {
   b681c:	b90b      	cbnz	r3, b6822 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b681e:	3601      	adds	r6, #1
   b6820:	e7f5      	b.n	b680e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b6822:	2300      	movs	r3, #0
   b6824:	9307      	str	r3, [sp, #28]
   b6826:	fb09 f306 	mul.w	r3, r9, r6
   b682a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b682c:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b682e:	a907      	add	r1, sp, #28
   b6830:	a806      	add	r0, sp, #24
   b6832:	f7ff faf8 	bl	b5e26 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6836:	4682      	mov	sl, r0
   b6838:	2800      	cmp	r0, #0
   b683a:	d0f0      	beq.n	b681e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b683c:	f04f 0300 	mov.w	r3, #0
   b6840:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6844:	4601      	mov	r1, r0
   b6846:	9a07      	ldr	r2, [sp, #28]
   b6848:	f10d 0317 	add.w	r3, sp, #23
   b684c:	4628      	mov	r0, r5
   b684e:	f7ff fb79 	bl	b5f44 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6852:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6856:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6858:	2f00      	cmp	r7, #0
   b685a:	d14a      	bne.n	b68f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b685c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b6860:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b6864:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b6868:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b686c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b6870:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b6874:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6876:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b687a:	4293      	cmp	r3, r2
   b687c:	db17      	blt.n	b68ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b687e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b6882:	f1ba 0f00 	cmp.w	sl, #0
   b6886:	dd30      	ble.n	b68ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b6888:	fb09 f00a 	mul.w	r0, r9, sl
   b688c:	f7fe fd66 	bl	b535c <malloc>
            if (!d) {
   b6890:	4683      	mov	fp, r0
   b6892:	b360      	cbz	r0, b68ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b6894:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6898:	fb09 1202 	mla	r2, r9, r2, r1
   b689c:	f7ff feea 	bl	b6674 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b68a0:	6828      	ldr	r0, [r5, #0]
   b68a2:	f7fe fd63 	bl	b536c <free>
        data_ = d;
   b68a6:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b68aa:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b68ae:	682b      	ldr	r3, [r5, #0]
   b68b0:	9a01      	ldr	r2, [sp, #4]
   b68b2:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b68b6:	686a      	ldr	r2, [r5, #4]
   b68b8:	4651      	mov	r1, sl
   b68ba:	fb09 3202 	mla	r2, r9, r2, r3
   b68be:	f10a 0014 	add.w	r0, sl, #20
   b68c2:	f7ff fed7 	bl	b6674 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b68c6:	f1ba 0f00 	cmp.w	sl, #0
   b68ca:	d003      	beq.n	b68d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b68cc:	a90f      	add	r1, sp, #60	; 0x3c
   b68ce:	4650      	mov	r0, sl
   b68d0:	f7ff fb24 	bl	b5f1c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b68d4:	686b      	ldr	r3, [r5, #4]
   b68d6:	3301      	adds	r3, #1
   b68d8:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b68da:	a811      	add	r0, sp, #68	; 0x44
   b68dc:	f7ff fcdc 	bl	b6298 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b68e0:	b13f      	cbz	r7, b68f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b68e2:	a80b      	add	r0, sp, #44	; 0x2c
   b68e4:	f7ff fcd8 	bl	b6298 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b68e8:	e771      	b.n	b67ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b68ea:	46bb      	mov	fp, r7
   b68ec:	e7d8      	b.n	b68a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b68ee:	2701      	movs	r7, #1
   b68f0:	e7f3      	b.n	b68da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b68f2:	9b01      	ldr	r3, [sp, #4]
   b68f4:	682d      	ldr	r5, [r5, #0]
   b68f6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b68fa:	9b06      	ldr	r3, [sp, #24]
   b68fc:	781b      	ldrb	r3, [r3, #0]
   b68fe:	b92b      	cbnz	r3, b690c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b6900:	f8d8 3000 	ldr.w	r3, [r8]
   b6904:	9a02      	ldr	r2, [sp, #8]
   b6906:	4413      	add	r3, r2
   b6908:	7c1b      	ldrb	r3, [r3, #16]
   b690a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b690c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b690e:	e78e      	b.n	b682e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6910:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b6912:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6914:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6916:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6918:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b691a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b691c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b691e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6920:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6922:	60a2      	str	r2, [r4, #8]
   b6924:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b6926:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6928:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b692a:	60e2      	str	r2, [r4, #12]
   b692c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b692e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6930:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6932:	6122      	str	r2, [r4, #16]
   b6934:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b6936:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b6938:	9b03      	ldr	r3, [sp, #12]
   b693a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b693c:	6162      	str	r2, [r4, #20]
   b693e:	7623      	strb	r3, [r4, #24]
   b6940:	e7cf      	b.n	b68e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b6944 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6944:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6946:	4604      	mov	r4, r0
   b6948:	b087      	sub	sp, #28
   b694a:	460d      	mov	r5, r1
        filter_(level, filters) {
   b694c:	4626      	mov	r6, r4
        stream_(&stream) {
   b694e:	4619      	mov	r1, r3
   b6950:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6952:	4617      	mov	r7, r2
        stream_(&stream) {
   b6954:	f7fe fa21 	bl	b4d9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6958:	4b0b      	ldr	r3, [pc, #44]	; (b6988 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b695a:	f846 3b04 	str.w	r3, [r6], #4
   b695e:	4669      	mov	r1, sp
   b6960:	a803      	add	r0, sp, #12
   b6962:	f7fe fa1a 	bl	b4d9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6966:	aa03      	add	r2, sp, #12
   b6968:	4639      	mov	r1, r7
   b696a:	4630      	mov	r0, r6
   b696c:	f7ff fef0 	bl	b6750 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6970:	a803      	add	r0, sp, #12
   b6972:	f7fe f9d1 	bl	b4d18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b6976:	4668      	mov	r0, sp
   b6978:	f7fe f9ce 	bl	b4d18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b697c:	4b03      	ldr	r3, [pc, #12]	; (b698c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b697e:	6023      	str	r3, [r4, #0]
}
   b6980:	4620      	mov	r0, r4
        stream_(&stream) {
   b6982:	6225      	str	r5, [r4, #32]
}
   b6984:	b007      	add	sp, #28
   b6986:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6988:	000b7ccc 	.word	0x000b7ccc
   b698c:	000b7e84 	.word	0x000b7e84

000b6990 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b6990:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6992:	460f      	mov	r7, r1
   b6994:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6996:	491d      	ldr	r1, [pc, #116]	; (b6a0c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b6998:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b699a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b699c:	4616      	mov	r6, r2
   b699e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b69a0:	f7fd fff0 	bl	b4984 <strcmp>
   b69a4:	b9c0      	cbnz	r0, b69d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b69a6:	b1a4      	cbz	r4, b69d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b69a8:	4629      	mov	r1, r5
   b69aa:	a801      	add	r0, sp, #4
   b69ac:	f7ff fcbc 	bl	b6328 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b69b0:	4917      	ldr	r1, [pc, #92]	; (b6a10 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b69b2:	2024      	movs	r0, #36	; 0x24
   b69b4:	f000 ff90 	bl	b78d8 <_ZnwjRKSt9nothrow_t>
   b69b8:	4605      	mov	r5, r0
   b69ba:	b130      	cbz	r0, b69ca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b69bc:	ab01      	add	r3, sp, #4
   b69be:	4632      	mov	r2, r6
   b69c0:	4621      	mov	r1, r4
   b69c2:	f7ff ffbf 	bl	b6944 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b69c6:	4b13      	ldr	r3, [pc, #76]	; (b6a14 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b69c8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b69ca:	a801      	add	r0, sp, #4
   b69cc:	f7fe f9a4 	bl	b4d18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b69d0:	462c      	mov	r4, r5
}
   b69d2:	4620      	mov	r0, r4
   b69d4:	b005      	add	sp, #20
   b69d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b69d8:	490f      	ldr	r1, [pc, #60]	; (b6a18 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b69da:	4638      	mov	r0, r7
   b69dc:	f7fd ffd2 	bl	b4984 <strcmp>
   b69e0:	b990      	cbnz	r0, b6a08 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b69e2:	2c00      	cmp	r4, #0
   b69e4:	d0f5      	beq.n	b69d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b69e6:	4629      	mov	r1, r5
   b69e8:	a801      	add	r0, sp, #4
   b69ea:	f7ff fc9d 	bl	b6328 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b69ee:	4908      	ldr	r1, [pc, #32]	; (b6a10 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b69f0:	2024      	movs	r0, #36	; 0x24
   b69f2:	f000 ff71 	bl	b78d8 <_ZnwjRKSt9nothrow_t>
   b69f6:	4605      	mov	r5, r0
   b69f8:	2800      	cmp	r0, #0
   b69fa:	d0e6      	beq.n	b69ca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b69fc:	ab01      	add	r3, sp, #4
   b69fe:	4632      	mov	r2, r6
   b6a00:	4621      	mov	r1, r4
   b6a02:	f7ff ff9f 	bl	b6944 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6a06:	e7e0      	b.n	b69ca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b6a08:	2400      	movs	r4, #0
   b6a0a:	e7e2      	b.n	b69d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b6a0c:	000b7e04 	.word	0x000b7e04
   b6a10:	000b7fbc 	.word	0x000b7fbc
   b6a14:	000b7e9c 	.word	0x000b7e9c
   b6a18:	000b7e08 	.word	0x000b7e08

000b6a1c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b6a1c:	4b01      	ldr	r3, [pc, #4]	; (b6a24 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6a1e:	4a02      	ldr	r2, [pc, #8]	; (b6a28 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6a20:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6a22:	4770      	bx	lr
   b6a24:	2003e68c 	.word	0x2003e68c
   b6a28:	000b7e19 	.word	0x000b7e19

000b6a2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6a30:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b6a32:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6a36:	4604      	mov	r4, r0
   b6a38:	460e      	mov	r6, r1
   b6a3a:	4617      	mov	r7, r2
   b6a3c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b6a3e:	f000 fd63 	bl	b7508 <_Z16_fetch_usbserialv>
   b6a42:	4581      	cmp	r9, r0
   b6a44:	d04c      	beq.n	b6ae0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b6a46:	792b      	ldrb	r3, [r5, #4]
   b6a48:	0719      	lsls	r1, r3, #28
   b6a4a:	d504      	bpl.n	b6a56 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b6a4c:	696a      	ldr	r2, [r5, #20]
   b6a4e:	4954      	ldr	r1, [pc, #336]	; (b6ba0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b6a50:	4620      	mov	r0, r4
   b6a52:	f7ff fadc 	bl	b600e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b6a56:	f1b8 0f00 	cmp.w	r8, #0
   b6a5a:	d00d      	beq.n	b6a78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b6a5c:	215b      	movs	r1, #91	; 0x5b
   b6a5e:	4620      	mov	r0, r4
   b6a60:	f7ff fa50 	bl	b5f04 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b6a64:	4641      	mov	r1, r8
   b6a66:	4620      	mov	r0, r4
   b6a68:	f7ff fa3d 	bl	b5ee6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b6a6c:	6823      	ldr	r3, [r4, #0]
   b6a6e:	494d      	ldr	r1, [pc, #308]	; (b6ba4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b6a70:	68db      	ldr	r3, [r3, #12]
   b6a72:	2202      	movs	r2, #2
   b6a74:	4620      	mov	r0, r4
   b6a76:	4798      	blx	r3
    if (attr.has_file) {
   b6a78:	792b      	ldrb	r3, [r5, #4]
   b6a7a:	07da      	lsls	r2, r3, #31
   b6a7c:	d523      	bpl.n	b6ac6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b6a7e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b6a82:	212f      	movs	r1, #47	; 0x2f
   b6a84:	4640      	mov	r0, r8
   b6a86:	f000 ffca 	bl	b7a1e <strrchr>
    if (s1) {
   b6a8a:	b108      	cbz	r0, b6a90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b6a8c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b6a90:	4641      	mov	r1, r8
   b6a92:	4620      	mov	r0, r4
   b6a94:	f7ff fa27 	bl	b5ee6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b6a98:	792b      	ldrb	r3, [r5, #4]
   b6a9a:	079b      	lsls	r3, r3, #30
   b6a9c:	d508      	bpl.n	b6ab0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b6a9e:	213a      	movs	r1, #58	; 0x3a
   b6aa0:	4620      	mov	r0, r4
   b6aa2:	f7ff fa2f 	bl	b5f04 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b6aa6:	68ea      	ldr	r2, [r5, #12]
   b6aa8:	493f      	ldr	r1, [pc, #252]	; (b6ba8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b6aaa:	4620      	mov	r0, r4
   b6aac:	f7ff faaf 	bl	b600e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b6ab0:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b6ab2:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b6ab4:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b6ab8:	68db      	ldr	r3, [r3, #12]
   b6aba:	bf14      	ite	ne
   b6abc:	493b      	ldrne	r1, [pc, #236]	; (b6bac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b6abe:	493c      	ldreq	r1, [pc, #240]	; (b6bb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b6ac0:	2202      	movs	r2, #2
            write(": ", 2);
   b6ac2:	4620      	mov	r0, r4
   b6ac4:	4798      	blx	r3
    if (attr.has_function) {
   b6ac6:	792b      	ldrb	r3, [r5, #4]
   b6ac8:	0758      	lsls	r0, r3, #29
   b6aca:	d51d      	bpl.n	b6b08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6acc:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6ace:	460b      	mov	r3, r1
   b6ad0:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b6ad2:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6ad6:	b160      	cbz	r0, b6af2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b6ad8:	2820      	cmp	r0, #32
   b6ada:	d108      	bne.n	b6aee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b6adc:	4619      	mov	r1, r3
   b6ade:	e7f7      	b.n	b6ad0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b6ae0:	4834      	ldr	r0, [pc, #208]	; (b6bb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b6ae2:	f000 f982 	bl	b6dea <_ZN5spark12NetworkClass9listeningEv>
   b6ae6:	2800      	cmp	r0, #0
   b6ae8:	d0ad      	beq.n	b6a46 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b6aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b6aee:	2828      	cmp	r0, #40	; 0x28
   b6af0:	d1ee      	bne.n	b6ad0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b6af2:	6823      	ldr	r3, [r4, #0]
   b6af4:	1a52      	subs	r2, r2, r1
   b6af6:	68db      	ldr	r3, [r3, #12]
   b6af8:	4620      	mov	r0, r4
   b6afa:	4798      	blx	r3
        write("(): ", 4);
   b6afc:	6823      	ldr	r3, [r4, #0]
   b6afe:	492e      	ldr	r1, [pc, #184]	; (b6bb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b6b00:	68db      	ldr	r3, [r3, #12]
   b6b02:	2204      	movs	r2, #4
   b6b04:	4620      	mov	r0, r4
   b6b06:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b6b08:	2100      	movs	r1, #0
   b6b0a:	4638      	mov	r0, r7
   b6b0c:	f7fe fb5a 	bl	b51c4 <log_level_name>
   b6b10:	4601      	mov	r1, r0
    write(s);
   b6b12:	4620      	mov	r0, r4
   b6b14:	f7ff f9e7 	bl	b5ee6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b6b18:	6823      	ldr	r3, [r4, #0]
   b6b1a:	4925      	ldr	r1, [pc, #148]	; (b6bb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b6b1c:	68db      	ldr	r3, [r3, #12]
   b6b1e:	2202      	movs	r2, #2
   b6b20:	4620      	mov	r0, r4
   b6b22:	4798      	blx	r3
    if (msg) {
   b6b24:	b11e      	cbz	r6, b6b2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b6b26:	4631      	mov	r1, r6
   b6b28:	4620      	mov	r0, r4
   b6b2a:	f7ff f9dc 	bl	b5ee6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b6b2e:	792b      	ldrb	r3, [r5, #4]
   b6b30:	f013 0f30 	tst.w	r3, #48	; 0x30
   b6b34:	d02c      	beq.n	b6b90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b6b36:	6823      	ldr	r3, [r4, #0]
   b6b38:	4920      	ldr	r1, [pc, #128]	; (b6bbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b6b3a:	68db      	ldr	r3, [r3, #12]
   b6b3c:	2202      	movs	r2, #2
   b6b3e:	4620      	mov	r0, r4
   b6b40:	4798      	blx	r3
        if (attr.has_code) {
   b6b42:	792b      	ldrb	r3, [r5, #4]
   b6b44:	06d9      	lsls	r1, r3, #27
   b6b46:	d50a      	bpl.n	b6b5e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b6b48:	6823      	ldr	r3, [r4, #0]
   b6b4a:	491d      	ldr	r1, [pc, #116]	; (b6bc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b6b4c:	68db      	ldr	r3, [r3, #12]
   b6b4e:	2207      	movs	r2, #7
   b6b50:	4620      	mov	r0, r4
   b6b52:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b6b54:	69aa      	ldr	r2, [r5, #24]
   b6b56:	491b      	ldr	r1, [pc, #108]	; (b6bc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b6b58:	4620      	mov	r0, r4
   b6b5a:	f7ff fa58 	bl	b600e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b6b5e:	792b      	ldrb	r3, [r5, #4]
   b6b60:	069a      	lsls	r2, r3, #26
   b6b62:	d511      	bpl.n	b6b88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b6b64:	06db      	lsls	r3, r3, #27
   b6b66:	d505      	bpl.n	b6b74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b6b68:	6823      	ldr	r3, [r4, #0]
   b6b6a:	4910      	ldr	r1, [pc, #64]	; (b6bac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b6b6c:	68db      	ldr	r3, [r3, #12]
   b6b6e:	2202      	movs	r2, #2
   b6b70:	4620      	mov	r0, r4
   b6b72:	4798      	blx	r3
            write("details = ", 10);
   b6b74:	6823      	ldr	r3, [r4, #0]
   b6b76:	4914      	ldr	r1, [pc, #80]	; (b6bc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b6b78:	68db      	ldr	r3, [r3, #12]
   b6b7a:	4620      	mov	r0, r4
   b6b7c:	220a      	movs	r2, #10
   b6b7e:	4798      	blx	r3
            write(attr.details);
   b6b80:	69e9      	ldr	r1, [r5, #28]
   b6b82:	4620      	mov	r0, r4
   b6b84:	f7ff f9af 	bl	b5ee6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b6b88:	215d      	movs	r1, #93	; 0x5d
   b6b8a:	4620      	mov	r0, r4
   b6b8c:	f7ff f9ba 	bl	b5f04 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b6b90:	6823      	ldr	r3, [r4, #0]
   b6b92:	490e      	ldr	r1, [pc, #56]	; (b6bcc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b6b94:	68db      	ldr	r3, [r3, #12]
   b6b96:	4620      	mov	r0, r4
   b6b98:	2202      	movs	r2, #2
}
   b6b9a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b6b9e:	4718      	bx	r3
   b6ba0:	000b7e1d 	.word	0x000b7e1d
   b6ba4:	000b7e24 	.word	0x000b7e24
   b6ba8:	000b7de4 	.word	0x000b7de4
   b6bac:	000b7e27 	.word	0x000b7e27
   b6bb0:	000b7e2c 	.word	0x000b7e2c
   b6bb4:	2003e6b8 	.word	0x2003e6b8
   b6bb8:	000b7e2a 	.word	0x000b7e2a
   b6bbc:	000b7e2f 	.word	0x000b7e2f
   b6bc0:	000b7e32 	.word	0x000b7e32
   b6bc4:	000b7e3a 	.word	0x000b7e3a
   b6bc8:	000b7e3d 	.word	0x000b7e3d
   b6bcc:	000b7e48 	.word	0x000b7e48

000b6bd0 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b6bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6bd4:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b6bd6:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b6bd8:	460d      	mov	r5, r1
   b6bda:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b6bdc:	f000 fc94 	bl	b7508 <_Z16_fetch_usbserialv>
   b6be0:	4287      	cmp	r7, r0
   b6be2:	d007      	beq.n	b6bf4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b6be4:	6a20      	ldr	r0, [r4, #32]
   b6be6:	6803      	ldr	r3, [r0, #0]
   b6be8:	4632      	mov	r2, r6
   b6bea:	4629      	mov	r1, r5
   b6bec:	68db      	ldr	r3, [r3, #12]
}
   b6bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b6bf2:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b6bf4:	4803      	ldr	r0, [pc, #12]	; (b6c04 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b6bf6:	f000 f8f8 	bl	b6dea <_ZN5spark12NetworkClass9listeningEv>
   b6bfa:	2800      	cmp	r0, #0
   b6bfc:	d0f2      	beq.n	b6be4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b6bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6c02:	bf00      	nop
   b6c04:	2003e6b8 	.word	0x2003e6b8

000b6c08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6c0c:	b085      	sub	sp, #20
    return stream_;
   b6c0e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b6c12:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6c14:	4605      	mov	r5, r0
   b6c16:	460f      	mov	r7, r1
   b6c18:	4690      	mov	r8, r2
   b6c1a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b6c1c:	f000 fc74 	bl	b7508 <_Z16_fetch_usbserialv>
   b6c20:	4581      	cmp	r9, r0
   b6c22:	d105      	bne.n	b6c30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b6c24:	4849      	ldr	r0, [pc, #292]	; (b6d4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b6c26:	f000 f8e0 	bl	b6dea <_ZN5spark12NetworkClass9listeningEv>
   b6c2a:	2800      	cmp	r0, #0
   b6c2c:	f040 808a 	bne.w	b6d44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b6c30:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b6c32:	4a47      	ldr	r2, [pc, #284]	; (b6d50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b6c34:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b6c36:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b6c3a:	a801      	add	r0, sp, #4
        strm_(stream) {
   b6c3c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b6c3e:	f88d 9008 	strb.w	r9, [sp, #8]
   b6c42:	f7ff f832 	bl	b5caa <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b6c46:	4649      	mov	r1, r9
   b6c48:	4640      	mov	r0, r8
   b6c4a:	f7fe fabb 	bl	b51c4 <log_level_name>
    json.name("l", 1).value(s);
   b6c4e:	4941      	ldr	r1, [pc, #260]	; (b6d54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b6c50:	4680      	mov	r8, r0
   b6c52:	2201      	movs	r2, #1
   b6c54:	a801      	add	r0, sp, #4
   b6c56:	f7ff f8b7 	bl	b5dc8 <_ZN5spark10JSONWriter4nameEPKcj>
   b6c5a:	4641      	mov	r1, r8
   b6c5c:	f7ff f935 	bl	b5eca <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b6c60:	b13f      	cbz	r7, b6c72 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b6c62:	493d      	ldr	r1, [pc, #244]	; (b6d58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b6c64:	2201      	movs	r2, #1
   b6c66:	a801      	add	r0, sp, #4
   b6c68:	f7ff f8ae 	bl	b5dc8 <_ZN5spark10JSONWriter4nameEPKcj>
   b6c6c:	4639      	mov	r1, r7
   b6c6e:	f7ff f92c 	bl	b5eca <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b6c72:	b13e      	cbz	r6, b6c84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b6c74:	4939      	ldr	r1, [pc, #228]	; (b6d5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b6c76:	2201      	movs	r2, #1
   b6c78:	a801      	add	r0, sp, #4
   b6c7a:	f7ff f8a5 	bl	b5dc8 <_ZN5spark10JSONWriter4nameEPKcj>
   b6c7e:	4631      	mov	r1, r6
   b6c80:	f7ff f923 	bl	b5eca <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b6c84:	7923      	ldrb	r3, [r4, #4]
   b6c86:	07df      	lsls	r7, r3, #31
   b6c88:	d50e      	bpl.n	b6ca8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b6c8a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b6c8c:	212f      	movs	r1, #47	; 0x2f
   b6c8e:	4630      	mov	r0, r6
   b6c90:	f000 fec5 	bl	b7a1e <strrchr>
    if (s1) {
   b6c94:	b100      	cbz	r0, b6c98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b6c96:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b6c98:	4931      	ldr	r1, [pc, #196]	; (b6d60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b6c9a:	2201      	movs	r2, #1
   b6c9c:	a801      	add	r0, sp, #4
   b6c9e:	f7ff f893 	bl	b5dc8 <_ZN5spark10JSONWriter4nameEPKcj>
   b6ca2:	4631      	mov	r1, r6
   b6ca4:	f7ff f911 	bl	b5eca <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b6ca8:	7923      	ldrb	r3, [r4, #4]
   b6caa:	079e      	lsls	r6, r3, #30
   b6cac:	d507      	bpl.n	b6cbe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b6cae:	492d      	ldr	r1, [pc, #180]	; (b6d64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b6cb0:	2202      	movs	r2, #2
   b6cb2:	a801      	add	r0, sp, #4
   b6cb4:	f7ff f888 	bl	b5dc8 <_ZN5spark10JSONWriter4nameEPKcj>
   b6cb8:	68e1      	ldr	r1, [r4, #12]
   b6cba:	f7ff f803 	bl	b5cc4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b6cbe:	7923      	ldrb	r3, [r4, #4]
   b6cc0:	0758      	lsls	r0, r3, #29
   b6cc2:	d514      	bpl.n	b6cee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6cc4:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6cc6:	4633      	mov	r3, r6
   b6cc8:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b6cca:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6cce:	b12a      	cbz	r2, b6cdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b6cd0:	2a20      	cmp	r2, #32
   b6cd2:	d101      	bne.n	b6cd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b6cd4:	461e      	mov	r6, r3
   b6cd6:	e7f7      	b.n	b6cc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b6cd8:	2a28      	cmp	r2, #40	; 0x28
   b6cda:	d1f5      	bne.n	b6cc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b6cdc:	4922      	ldr	r1, [pc, #136]	; (b6d68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b6cde:	2202      	movs	r2, #2
   b6ce0:	a801      	add	r0, sp, #4
   b6ce2:	f7ff f871 	bl	b5dc8 <_ZN5spark10JSONWriter4nameEPKcj>
   b6ce6:	1bba      	subs	r2, r7, r6
   b6ce8:	4631      	mov	r1, r6
   b6cea:	f7ff f87d 	bl	b5de8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b6cee:	7923      	ldrb	r3, [r4, #4]
   b6cf0:	0719      	lsls	r1, r3, #28
   b6cf2:	d507      	bpl.n	b6d04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b6cf4:	491d      	ldr	r1, [pc, #116]	; (b6d6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b6cf6:	2201      	movs	r2, #1
   b6cf8:	a801      	add	r0, sp, #4
   b6cfa:	f7ff f865 	bl	b5dc8 <_ZN5spark10JSONWriter4nameEPKcj>
   b6cfe:	6961      	ldr	r1, [r4, #20]
   b6d00:	f7fe fff2 	bl	b5ce8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b6d04:	7923      	ldrb	r3, [r4, #4]
   b6d06:	06da      	lsls	r2, r3, #27
   b6d08:	d508      	bpl.n	b6d1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b6d0a:	2204      	movs	r2, #4
   b6d0c:	4918      	ldr	r1, [pc, #96]	; (b6d70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b6d0e:	eb0d 0002 	add.w	r0, sp, r2
   b6d12:	f7ff f859 	bl	b5dc8 <_ZN5spark10JSONWriter4nameEPKcj>
   b6d16:	69a1      	ldr	r1, [r4, #24]
   b6d18:	f7fe ffd4 	bl	b5cc4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b6d1c:	7923      	ldrb	r3, [r4, #4]
   b6d1e:	069b      	lsls	r3, r3, #26
   b6d20:	d507      	bpl.n	b6d32 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b6d22:	4914      	ldr	r1, [pc, #80]	; (b6d74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b6d24:	2206      	movs	r2, #6
   b6d26:	a801      	add	r0, sp, #4
   b6d28:	f7ff f84e 	bl	b5dc8 <_ZN5spark10JSONWriter4nameEPKcj>
   b6d2c:	69e1      	ldr	r1, [r4, #28]
   b6d2e:	f7ff f8cc 	bl	b5eca <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b6d32:	a801      	add	r0, sp, #4
   b6d34:	f7fe ffa3 	bl	b5c7e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b6d38:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b6d3a:	490f      	ldr	r1, [pc, #60]	; (b6d78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b6d3c:	6803      	ldr	r3, [r0, #0]
   b6d3e:	2202      	movs	r2, #2
   b6d40:	68db      	ldr	r3, [r3, #12]
   b6d42:	4798      	blx	r3
}
   b6d44:	b005      	add	sp, #20
   b6d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6d4a:	bf00      	nop
   b6d4c:	2003e6b8 	.word	0x2003e6b8
   b6d50:	000b7e6c 	.word	0x000b7e6c
   b6d54:	000b7dfa 	.word	0x000b7dfa
   b6d58:	000b7e4b 	.word	0x000b7e4b
   b6d5c:	000b802b 	.word	0x000b802b
   b6d60:	000b7cc2 	.word	0x000b7cc2
   b6d64:	000b7e4d 	.word	0x000b7e4d
   b6d68:	000b7e50 	.word	0x000b7e50
   b6d6c:	000b7e53 	.word	0x000b7e53
   b6d70:	000b7e55 	.word	0x000b7e55
   b6d74:	000b7e5a 	.word	0x000b7e5a
   b6d78:	000b7e48 	.word	0x000b7e48

000b6d7c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6d7c:	2300      	movs	r3, #0
   b6d7e:	6840      	ldr	r0, [r0, #4]
   b6d80:	461a      	mov	r2, r3
   b6d82:	f7fe ba8b 	b.w	b529c <network_connect>

000b6d86 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6d86:	6840      	ldr	r0, [r0, #4]
   b6d88:	2200      	movs	r2, #0
   b6d8a:	2102      	movs	r1, #2
   b6d8c:	f7fe ba96 	b.w	b52bc <network_disconnect>

000b6d90 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6d90:	2200      	movs	r2, #0
   b6d92:	6840      	ldr	r0, [r0, #4]
   b6d94:	4611      	mov	r1, r2
   b6d96:	f7fe ba89 	b.w	b52ac <network_connecting>

000b6d9a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6d9a:	2200      	movs	r2, #0
   b6d9c:	6840      	ldr	r0, [r0, #4]
   b6d9e:	4611      	mov	r1, r2
   b6da0:	f7fe ba94 	b.w	b52cc <network_ready>

000b6da4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6da4:	2300      	movs	r3, #0
   b6da6:	6840      	ldr	r0, [r0, #4]
   b6da8:	461a      	mov	r2, r3
   b6daa:	4619      	mov	r1, r3
   b6dac:	f7fe ba96 	b.w	b52dc <network_on>

000b6db0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6db0:	2300      	movs	r3, #0
   b6db2:	6840      	ldr	r0, [r0, #4]
   b6db4:	461a      	mov	r2, r3
   b6db6:	4619      	mov	r1, r3
   b6db8:	f7fe ba98 	b.w	b52ec <network_off>

000b6dbc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6dbc:	6840      	ldr	r0, [r0, #4]
   b6dbe:	2100      	movs	r1, #0
   b6dc0:	f7fe babc 	b.w	b533c <network_is_on>

000b6dc4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6dc4:	6840      	ldr	r0, [r0, #4]
   b6dc6:	2100      	movs	r1, #0
   b6dc8:	f7fe bac0 	b.w	b534c <network_is_off>

000b6dcc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6dcc:	6840      	ldr	r0, [r0, #4]
   b6dce:	2200      	movs	r2, #0
   b6dd0:	f081 0101 	eor.w	r1, r1, #1
   b6dd4:	f7fe ba92 	b.w	b52fc <network_listen>

000b6dd8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6dd8:	6840      	ldr	r0, [r0, #4]
   b6dda:	2200      	movs	r2, #0
   b6ddc:	f7fe ba9e 	b.w	b531c <network_set_listen_timeout>

000b6de0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6de0:	2200      	movs	r2, #0
   b6de2:	6840      	ldr	r0, [r0, #4]
   b6de4:	4611      	mov	r1, r2
   b6de6:	f7fe baa1 	b.w	b532c <network_get_listen_timeout>

000b6dea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6dea:	2200      	movs	r2, #0
   b6dec:	6840      	ldr	r0, [r0, #4]
   b6dee:	4611      	mov	r1, r2
   b6df0:	f7fe ba8c 	b.w	b530c <network_listening>

000b6df4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6df8:	b095      	sub	sp, #84	; 0x54
   b6dfa:	4614      	mov	r4, r2
   b6dfc:	460d      	mov	r5, r1
   b6dfe:	4607      	mov	r7, r0
    IPAddress addr;
   b6e00:	f7fe fdec 	bl	b59dc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6e04:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6e06:	221c      	movs	r2, #28
   b6e08:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6e0a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6e0c:	f000 fd9e 	bl	b794c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6e10:	2340      	movs	r3, #64	; 0x40
   b6e12:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6e14:	4620      	mov	r0, r4
   b6e16:	466b      	mov	r3, sp
   b6e18:	aa0c      	add	r2, sp, #48	; 0x30
   b6e1a:	2100      	movs	r1, #0
   b6e1c:	f7fe f91a 	bl	b5054 <netdb_getaddrinfo>
    if (!r) {
   b6e20:	4604      	mov	r4, r0
   b6e22:	2800      	cmp	r0, #0
   b6e24:	d14b      	bne.n	b6ebe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6e26:	4602      	mov	r2, r0
   b6e28:	2101      	movs	r1, #1
   b6e2a:	6868      	ldr	r0, [r5, #4]
   b6e2c:	f7fe fa4e 	bl	b52cc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6e30:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6e32:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6e34:	4622      	mov	r2, r4
   b6e36:	6868      	ldr	r0, [r5, #4]
   b6e38:	f7fe fa48 	bl	b52cc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6e3c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6e3e:	4681      	mov	r9, r0
        bool ok = false;
   b6e40:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6e42:	2e00      	cmp	r6, #0
   b6e44:	d03b      	beq.n	b6ebe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6e46:	2900      	cmp	r1, #0
   b6e48:	d139      	bne.n	b6ebe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6e4a:	6873      	ldr	r3, [r6, #4]
   b6e4c:	2b02      	cmp	r3, #2
   b6e4e:	d003      	beq.n	b6e58 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6e50:	2b0a      	cmp	r3, #10
   b6e52:	d011      	beq.n	b6e78 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6e54:	69f6      	ldr	r6, [r6, #28]
   b6e56:	e7f4      	b.n	b6e42 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6e58:	f1b8 0f00 	cmp.w	r8, #0
   b6e5c:	d0fa      	beq.n	b6e54 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6e5e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6e60:	a806      	add	r0, sp, #24
   b6e62:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6e64:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6e66:	f7fe fde7 	bl	b5a38 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e6c:	1d3c      	adds	r4, r7, #4
   b6e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e70:	682b      	ldr	r3, [r5, #0]
   b6e72:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6e74:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6e76:	e7ed      	b.n	b6e54 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6e78:	f1b9 0f00 	cmp.w	r9, #0
   b6e7c:	d0ea      	beq.n	b6e54 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6e7e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6e80:	2210      	movs	r2, #16
   b6e82:	a801      	add	r0, sp, #4
   b6e84:	f000 fd62 	bl	b794c <memset>
                    a.v = 6;
   b6e88:	2306      	movs	r3, #6
   b6e8a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6e8e:	ad01      	add	r5, sp, #4
   b6e90:	f104 0308 	add.w	r3, r4, #8
   b6e94:	3418      	adds	r4, #24
   b6e96:	6818      	ldr	r0, [r3, #0]
   b6e98:	6859      	ldr	r1, [r3, #4]
   b6e9a:	462a      	mov	r2, r5
   b6e9c:	c203      	stmia	r2!, {r0, r1}
   b6e9e:	3308      	adds	r3, #8
   b6ea0:	42a3      	cmp	r3, r4
   b6ea2:	4615      	mov	r5, r2
   b6ea4:	d1f7      	bne.n	b6e96 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6ea6:	a901      	add	r1, sp, #4
   b6ea8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6eaa:	ad07      	add	r5, sp, #28
   b6eac:	f7fe fda4 	bl	b59f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6eb2:	1d3c      	adds	r4, r7, #4
   b6eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6eb6:	682b      	ldr	r3, [r5, #0]
   b6eb8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6eba:	4649      	mov	r1, r9
   b6ebc:	e7ca      	b.n	b6e54 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6ebe:	9800      	ldr	r0, [sp, #0]
   b6ec0:	f7fe f8c0 	bl	b5044 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6ec4:	4638      	mov	r0, r7
   b6ec6:	b015      	add	sp, #84	; 0x54
   b6ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6ecc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6ecc:	4b02      	ldr	r3, [pc, #8]	; (b6ed8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6ece:	4a03      	ldr	r2, [pc, #12]	; (b6edc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6ed0:	601a      	str	r2, [r3, #0]
   b6ed2:	2200      	movs	r2, #0
   b6ed4:	605a      	str	r2, [r3, #4]

} // spark
   b6ed6:	4770      	bx	lr
   b6ed8:	2003e6b8 	.word	0x2003e6b8
   b6edc:	000b7ee4 	.word	0x000b7ee4

000b6ee0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6ee2:	4606      	mov	r6, r0
   b6ee4:	460d      	mov	r5, r1
  size_t n = 0;
   b6ee6:	188f      	adds	r7, r1, r2
   b6ee8:	2400      	movs	r4, #0
  while (size--) {
   b6eea:	42bd      	cmp	r5, r7
   b6eec:	d00c      	beq.n	b6f08 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6eee:	6833      	ldr	r3, [r6, #0]
   b6ef0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6ef4:	689b      	ldr	r3, [r3, #8]
   b6ef6:	4630      	mov	r0, r6
   b6ef8:	4798      	blx	r3
     if (chunk>=0)
   b6efa:	1e03      	subs	r3, r0, #0
   b6efc:	db01      	blt.n	b6f02 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6efe:	441c      	add	r4, r3
  while (size--) {
   b6f00:	e7f3      	b.n	b6eea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6f02:	2c00      	cmp	r4, #0
   b6f04:	bf08      	it	eq
   b6f06:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6f08:	4620      	mov	r0, r4
   b6f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6f0c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6f0c:	b513      	push	{r0, r1, r4, lr}
   b6f0e:	4604      	mov	r4, r0
    }
   b6f10:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6f12:	b159      	cbz	r1, b6f2c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6f14:	9101      	str	r1, [sp, #4]
   b6f16:	f7fd fd3f 	bl	b4998 <strlen>
   b6f1a:	6823      	ldr	r3, [r4, #0]
   b6f1c:	9901      	ldr	r1, [sp, #4]
   b6f1e:	68db      	ldr	r3, [r3, #12]
   b6f20:	4602      	mov	r2, r0
   b6f22:	4620      	mov	r0, r4
    }
   b6f24:	b002      	add	sp, #8
   b6f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6f2a:	4718      	bx	r3
    }
   b6f2c:	b002      	add	sp, #8
   b6f2e:	bd10      	pop	{r4, pc}

000b6f30 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6f30:	6803      	ldr	r3, [r0, #0]
   b6f32:	689b      	ldr	r3, [r3, #8]
   b6f34:	4718      	bx	r3

000b6f36 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6f36:	b530      	push	{r4, r5, lr}
   b6f38:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6f3a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6f3c:	2a01      	cmp	r2, #1
  *str = '\0';
   b6f3e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6f42:	bf98      	it	ls
   b6f44:	220a      	movls	r2, #10
   b6f46:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6f48:	460d      	mov	r5, r1
   b6f4a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6f4e:	fb01 5312 	mls	r3, r1, r2, r5
   b6f52:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6f56:	2b09      	cmp	r3, #9
   b6f58:	bf94      	ite	ls
   b6f5a:	3330      	addls	r3, #48	; 0x30
   b6f5c:	3337      	addhi	r3, #55	; 0x37
   b6f5e:	b2db      	uxtb	r3, r3
  } while(n);
   b6f60:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6f62:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6f66:	d9ef      	bls.n	b6f48 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6f68:	4621      	mov	r1, r4
   b6f6a:	f7ff ffcf 	bl	b6f0c <_ZN5Print5writeEPKc>
}
   b6f6e:	b00b      	add	sp, #44	; 0x2c
   b6f70:	bd30      	pop	{r4, r5, pc}
	...

000b6f74 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b6f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6f78:	ec55 4b10 	vmov	r4, r5, d0
   b6f7c:	4606      	mov	r6, r0
   b6f7e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b6f80:	ee10 2a10 	vmov	r2, s0
   b6f84:	ee10 0a10 	vmov	r0, s0
   b6f88:	462b      	mov	r3, r5
   b6f8a:	4629      	mov	r1, r5
   b6f8c:	f7fd fc9c 	bl	b48c8 <__aeabi_dcmpun>
   b6f90:	b140      	cbz	r0, b6fa4 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b6f92:	4953      	ldr	r1, [pc, #332]	; (b70e0 <_ZN5Print10printFloatEdh+0x16c>)
   b6f94:	4630      	mov	r0, r6
   b6f96:	f7ff ffb9 	bl	b6f0c <_ZN5Print5writeEPKc>
   b6f9a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b6f9c:	4650      	mov	r0, sl
   b6f9e:	b003      	add	sp, #12
   b6fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b6fa4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b6fa8:	4b4e      	ldr	r3, [pc, #312]	; (b70e4 <_ZN5Print10printFloatEdh+0x170>)
   b6faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6fae:	4620      	mov	r0, r4
   b6fb0:	4649      	mov	r1, r9
   b6fb2:	f7fd fc89 	bl	b48c8 <__aeabi_dcmpun>
   b6fb6:	b948      	cbnz	r0, b6fcc <_ZN5Print10printFloatEdh+0x58>
   b6fb8:	4b4a      	ldr	r3, [pc, #296]	; (b70e4 <_ZN5Print10printFloatEdh+0x170>)
   b6fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6fbe:	4620      	mov	r0, r4
   b6fc0:	4649      	mov	r1, r9
   b6fc2:	f7fd fc63 	bl	b488c <__aeabi_dcmple>
   b6fc6:	b908      	cbnz	r0, b6fcc <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b6fc8:	4947      	ldr	r1, [pc, #284]	; (b70e8 <_ZN5Print10printFloatEdh+0x174>)
   b6fca:	e7e3      	b.n	b6f94 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b6fcc:	4b47      	ldr	r3, [pc, #284]	; (b70ec <_ZN5Print10printFloatEdh+0x178>)
   b6fce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6fd2:	4620      	mov	r0, r4
   b6fd4:	4629      	mov	r1, r5
   b6fd6:	f7fd fc6d 	bl	b48b4 <__aeabi_dcmpgt>
   b6fda:	b108      	cbz	r0, b6fe0 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b6fdc:	4944      	ldr	r1, [pc, #272]	; (b70f0 <_ZN5Print10printFloatEdh+0x17c>)
   b6fde:	e7d9      	b.n	b6f94 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b6fe0:	4b44      	ldr	r3, [pc, #272]	; (b70f4 <_ZN5Print10printFloatEdh+0x180>)
   b6fe2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6fe6:	4620      	mov	r0, r4
   b6fe8:	4629      	mov	r1, r5
   b6fea:	f7fd fc45 	bl	b4878 <__aeabi_dcmplt>
   b6fee:	2800      	cmp	r0, #0
   b6ff0:	d1f4      	bne.n	b6fdc <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b6ff2:	2200      	movs	r2, #0
   b6ff4:	2300      	movs	r3, #0
   b6ff6:	4620      	mov	r0, r4
   b6ff8:	4629      	mov	r1, r5
   b6ffa:	f7fd fc3d 	bl	b4878 <__aeabi_dcmplt>
   b6ffe:	b1d0      	cbz	r0, b7036 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b7000:	212d      	movs	r1, #45	; 0x2d
   b7002:	4630      	mov	r0, r6
   b7004:	f7ff ff94 	bl	b6f30 <_ZN5Print5printEc>
     number = -number;
   b7008:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b700c:	4682      	mov	sl, r0
     number = -number;
   b700e:	461d      	mov	r5, r3
  double rounding = 0.5;
   b7010:	4939      	ldr	r1, [pc, #228]	; (b70f8 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b7012:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b7100 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b7016:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b701a:	2000      	movs	r0, #0
    rounding /= 10.0;
   b701c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b7020:	fa5f f38b 	uxtb.w	r3, fp
   b7024:	429f      	cmp	r7, r3
   b7026:	d908      	bls.n	b703a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b7028:	4642      	mov	r2, r8
   b702a:	464b      	mov	r3, r9
   b702c:	f7fd fadc 	bl	b45e8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b7030:	f10b 0b01 	add.w	fp, fp, #1
   b7034:	e7f4      	b.n	b7020 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b7036:	4682      	mov	sl, r0
   b7038:	e7ea      	b.n	b7010 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b703a:	4622      	mov	r2, r4
   b703c:	462b      	mov	r3, r5
   b703e:	f7fc fff3 	bl	b4028 <__adddf3>
   b7042:	460d      	mov	r5, r1
   b7044:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b7046:	f7fd fc7d 	bl	b4944 <__aeabi_d2uiz>
   b704a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b704c:	f7fd f928 	bl	b42a0 <__aeabi_ui2d>
   b7050:	4602      	mov	r2, r0
   b7052:	460b      	mov	r3, r1
   b7054:	4620      	mov	r0, r4
   b7056:	4629      	mov	r1, r5
   b7058:	f7fc ffe4 	bl	b4024 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b705c:	220a      	movs	r2, #10
   b705e:	4604      	mov	r4, r0
   b7060:	460d      	mov	r5, r1
   b7062:	4630      	mov	r0, r6
   b7064:	4641      	mov	r1, r8
   b7066:	f7ff ff66 	bl	b6f36 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b706a:	4482      	add	sl, r0
  if (digits > 0) {
   b706c:	2f00      	cmp	r7, #0
   b706e:	d095      	beq.n	b6f9c <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b7070:	4922      	ldr	r1, [pc, #136]	; (b70fc <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b7072:	f8df 908c 	ldr.w	r9, [pc, #140]	; b7100 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b7076:	4630      	mov	r0, r6
   b7078:	f7ff ff48 	bl	b6f0c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b707c:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b7080:	4482      	add	sl, r0
  while (digits-- > 0)
   b7082:	2f00      	cmp	r7, #0
   b7084:	d08a      	beq.n	b6f9c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b7086:	4642      	mov	r2, r8
   b7088:	464b      	mov	r3, r9
   b708a:	4620      	mov	r0, r4
   b708c:	4629      	mov	r1, r5
   b708e:	f7fd f981 	bl	b4394 <__aeabi_dmul>
   b7092:	4604      	mov	r4, r0
   b7094:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b7096:	f7fd fc2d 	bl	b48f4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b709a:	f1b0 0b00 	subs.w	fp, r0, #0
   b709e:	da1c      	bge.n	b70da <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b70a0:	212d      	movs	r1, #45	; 0x2d
   b70a2:	4630      	mov	r0, r6
   b70a4:	f7ff ff44 	bl	b6f30 <_ZN5Print5printEc>
            val = -n;
   b70a8:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b70ac:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b70ae:	220a      	movs	r2, #10
   b70b0:	4630      	mov	r0, r6
   b70b2:	9301      	str	r3, [sp, #4]
   b70b4:	f7ff ff3f 	bl	b6f36 <_ZN5Print11printNumberEmh>
   b70b8:	9b01      	ldr	r3, [sp, #4]
   b70ba:	4418      	add	r0, r3
    n += print(toPrint);
   b70bc:	4482      	add	sl, r0
    remainder -= toPrint;
   b70be:	4658      	mov	r0, fp
   b70c0:	f7fd f8fe 	bl	b42c0 <__aeabi_i2d>
   b70c4:	4602      	mov	r2, r0
   b70c6:	460b      	mov	r3, r1
   b70c8:	4620      	mov	r0, r4
   b70ca:	4629      	mov	r1, r5
   b70cc:	f7fc ffaa 	bl	b4024 <__aeabi_dsub>
   b70d0:	3f01      	subs	r7, #1
   b70d2:	4604      	mov	r4, r0
   b70d4:	460d      	mov	r5, r1
   b70d6:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b70d8:	e7d3      	b.n	b7082 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b70da:	4659      	mov	r1, fp
        size_t t = 0;
   b70dc:	2300      	movs	r3, #0
   b70de:	e7e6      	b.n	b70ae <_ZN5Print10printFloatEdh+0x13a>
   b70e0:	000b7f18 	.word	0x000b7f18
   b70e4:	7fefffff 	.word	0x7fefffff
   b70e8:	000b7f1c 	.word	0x000b7f1c
   b70ec:	41efffff 	.word	0x41efffff
   b70f0:	000b7f20 	.word	0x000b7f20
   b70f4:	c1efffff 	.word	0xc1efffff
   b70f8:	3fe00000 	.word	0x3fe00000
   b70fc:	000b7f24 	.word	0x000b7f24
   b7100:	40240000 	.word	0x40240000

000b7104 <_ZN5Print5printEfi>:
{
   b7104:	b538      	push	{r3, r4, r5, lr}
   b7106:	4604      	mov	r4, r0
   b7108:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b710c:	b2cd      	uxtb	r5, r1
   b710e:	f7fd f8e9 	bl	b42e4 <__aeabi_f2d>
   b7112:	ec41 0b10 	vmov	d0, r0, r1
   b7116:	4629      	mov	r1, r5
   b7118:	4620      	mov	r0, r4
}
   b711a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b711e:	f7ff bf29 	b.w	b6f74 <_ZN5Print10printFloatEdh>
	...

000b7124 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b7124:	4b01      	ldr	r3, [pc, #4]	; (b712c <_GLOBAL__sub_I_RGB+0x8>)
   b7126:	2200      	movs	r2, #0
   b7128:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b712a:	4770      	bx	lr
   b712c:	2003e6c0 	.word	0x2003e6c0

000b7130 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7130:	b510      	push	{r4, lr}
   b7132:	4604      	mov	r4, r0
   b7134:	4608      	mov	r0, r1
{
    _spi = spi;
   b7136:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7138:	f7fd ff94 	bl	b5064 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b713c:	2300      	movs	r3, #0
   b713e:	6063      	str	r3, [r4, #4]
}
   b7140:	4620      	mov	r0, r4
   b7142:	bd10      	pop	{r4, pc}

000b7144 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   b7144:	4770      	bx	lr

000b7146 <_ZN21StringPrintableHelperD0Ev>:
   b7146:	b510      	push	{r4, lr}
   b7148:	210c      	movs	r1, #12
   b714a:	4604      	mov	r4, r0
   b714c:	f7fd fc6b 	bl	b4a26 <_ZdlPvj>
   b7150:	4620      	mov	r0, r4
   b7152:	bd10      	pop	{r4, pc}

000b7154 <_ZN6StringD1Ev>:
String::~String()
   b7154:	b510      	push	{r4, lr}
   b7156:	4604      	mov	r4, r0
	free(buffer);
   b7158:	6800      	ldr	r0, [r0, #0]
   b715a:	f7fe f907 	bl	b536c <free>
}
   b715e:	4620      	mov	r0, r4
   b7160:	bd10      	pop	{r4, pc}

000b7162 <_ZN6String10invalidateEv>:
{
   b7162:	b510      	push	{r4, lr}
   b7164:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7166:	6800      	ldr	r0, [r0, #0]
   b7168:	b108      	cbz	r0, b716e <_ZN6String10invalidateEv+0xc>
   b716a:	f7fe f8ff 	bl	b536c <free>
	buffer = NULL;
   b716e:	2300      	movs	r3, #0
	capacity = len = 0;
   b7170:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7174:	6023      	str	r3, [r4, #0]
}
   b7176:	bd10      	pop	{r4, pc}

000b7178 <_ZN6String12changeBufferEj>:
{
   b7178:	b538      	push	{r3, r4, r5, lr}
   b717a:	4604      	mov	r4, r0
   b717c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b717e:	6800      	ldr	r0, [r0, #0]
   b7180:	3101      	adds	r1, #1
   b7182:	f7fe f8fb 	bl	b537c <realloc>
	if (newbuffer) {
   b7186:	b110      	cbz	r0, b718e <_ZN6String12changeBufferEj+0x16>
		capacity = maxStrLen;
   b7188:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b718c:	2001      	movs	r0, #1
}
   b718e:	bd38      	pop	{r3, r4, r5, pc}

000b7190 <_ZN6String7reserveEj>:
{
   b7190:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7192:	6803      	ldr	r3, [r0, #0]
{
   b7194:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7196:	b123      	cbz	r3, b71a2 <_ZN6String7reserveEj+0x12>
   b7198:	6843      	ldr	r3, [r0, #4]
   b719a:	428b      	cmp	r3, r1
   b719c:	d301      	bcc.n	b71a2 <_ZN6String7reserveEj+0x12>
   b719e:	2001      	movs	r0, #1
}
   b71a0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b71a2:	4620      	mov	r0, r4
   b71a4:	f7ff ffe8 	bl	b7178 <_ZN6String12changeBufferEj>
   b71a8:	2800      	cmp	r0, #0
   b71aa:	d0f9      	beq.n	b71a0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b71ac:	68a3      	ldr	r3, [r4, #8]
   b71ae:	2b00      	cmp	r3, #0
   b71b0:	d1f5      	bne.n	b719e <_ZN6String7reserveEj+0xe>
   b71b2:	6822      	ldr	r2, [r4, #0]
   b71b4:	7013      	strb	r3, [r2, #0]
   b71b6:	e7f2      	b.n	b719e <_ZN6String7reserveEj+0xe>

000b71b8 <_ZN6String4copyEPKcj>:
{
   b71b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b71ba:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b71bc:	4611      	mov	r1, r2
   b71be:	9201      	str	r2, [sp, #4]
{
   b71c0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b71c2:	f7ff ffe5 	bl	b7190 <_ZN6String7reserveEj>
   b71c6:	9a01      	ldr	r2, [sp, #4]
   b71c8:	b928      	cbnz	r0, b71d6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b71ca:	4620      	mov	r0, r4
   b71cc:	f7ff ffc9 	bl	b7162 <_ZN6String10invalidateEv>
}
   b71d0:	4620      	mov	r0, r4
   b71d2:	b003      	add	sp, #12
   b71d4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b71d6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b71d8:	4629      	mov	r1, r5
   b71da:	6820      	ldr	r0, [r4, #0]
   b71dc:	f000 fb8e 	bl	b78fc <memcpy>
	buffer[len] = 0;
   b71e0:	6822      	ldr	r2, [r4, #0]
   b71e2:	68a3      	ldr	r3, [r4, #8]
   b71e4:	2100      	movs	r1, #0
   b71e6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b71e8:	e7f2      	b.n	b71d0 <_ZN6String4copyEPKcj+0x18>

000b71ea <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b71ea:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b71ec:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b71ee:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b71f2:	4604      	mov	r4, r0
	len = 0;
   b71f4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b71f6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b71f8:	b141      	cbz	r1, b720c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b71fa:	4608      	mov	r0, r1
   b71fc:	9101      	str	r1, [sp, #4]
   b71fe:	f7fd fbcb 	bl	b4998 <strlen>
   b7202:	9901      	ldr	r1, [sp, #4]
   b7204:	4602      	mov	r2, r0
   b7206:	4620      	mov	r0, r4
   b7208:	f7ff ffd6 	bl	b71b8 <_ZN6String4copyEPKcj>
}
   b720c:	4620      	mov	r0, r4
   b720e:	b002      	add	sp, #8
   b7210:	bd10      	pop	{r4, pc}

000b7212 <_ZN6String4moveERS_>:
{
   b7212:	b538      	push	{r3, r4, r5, lr}
   b7214:	4605      	mov	r5, r0
	if (buffer) {
   b7216:	6800      	ldr	r0, [r0, #0]
{
   b7218:	460c      	mov	r4, r1
	if (buffer) {
   b721a:	b168      	cbz	r0, b7238 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b721c:	686a      	ldr	r2, [r5, #4]
   b721e:	688b      	ldr	r3, [r1, #8]
   b7220:	429a      	cmp	r2, r3
   b7222:	d307      	bcc.n	b7234 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b7224:	6809      	ldr	r1, [r1, #0]
   b7226:	f000 fbde 	bl	b79e6 <strcpy>
			len = rhs.len;
   b722a:	68a3      	ldr	r3, [r4, #8]
   b722c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b722e:	2300      	movs	r3, #0
	rhs.len = 0;
   b7230:	60a3      	str	r3, [r4, #8]
}
   b7232:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b7234:	f7fe f89a 	bl	b536c <free>
	buffer = rhs.buffer;
   b7238:	6823      	ldr	r3, [r4, #0]
   b723a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b723c:	6863      	ldr	r3, [r4, #4]
   b723e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b7240:	68a3      	ldr	r3, [r4, #8]
   b7242:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b7244:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b7246:	e9c4 3300 	strd	r3, r3, [r4]
   b724a:	e7f1      	b.n	b7230 <_ZN6String4moveERS_+0x1e>

000b724c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b724c:	b510      	push	{r4, lr}
	buffer = NULL;
   b724e:	2300      	movs	r3, #0
	capacity = 0;
   b7250:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b7254:	4604      	mov	r4, r0
	len = 0;
   b7256:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7258:	7303      	strb	r3, [r0, #12]
	move(rval);
   b725a:	f7ff ffda 	bl	b7212 <_ZN6String4moveERS_>
}
   b725e:	4620      	mov	r0, r4
   b7260:	bd10      	pop	{r4, pc}

000b7262 <_ZN6StringaSERKS_>:
	if (this == &rhs) return *this;
   b7262:	4288      	cmp	r0, r1
{
   b7264:	b510      	push	{r4, lr}
   b7266:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7268:	d005      	beq.n	b7276 <_ZN6StringaSERKS_+0x14>
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b726a:	680b      	ldr	r3, [r1, #0]
   b726c:	b12b      	cbz	r3, b727a <_ZN6StringaSERKS_+0x18>
   b726e:	688a      	ldr	r2, [r1, #8]
   b7270:	4619      	mov	r1, r3
   b7272:	f7ff ffa1 	bl	b71b8 <_ZN6String4copyEPKcj>
}
   b7276:	4620      	mov	r0, r4
   b7278:	bd10      	pop	{r4, pc}
	else invalidate();
   b727a:	f7ff ff72 	bl	b7162 <_ZN6String10invalidateEv>
   b727e:	e7fa      	b.n	b7276 <_ZN6StringaSERKS_+0x14>

000b7280 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7280:	b510      	push	{r4, lr}
	buffer = NULL;
   b7282:	2300      	movs	r3, #0
String::String(const String &value)
   b7284:	4604      	mov	r4, r0
	capacity = 0;
   b7286:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b728a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b728c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b728e:	f7ff ffe8 	bl	b7262 <_ZN6StringaSERKS_>
}
   b7292:	4620      	mov	r0, r4
   b7294:	bd10      	pop	{r4, pc}

000b7296 <_ZN6String6concatEPKcj>:
{
   b7296:	b570      	push	{r4, r5, r6, lr}
   b7298:	4605      	mov	r5, r0
	if (!cstr) return 0;
   b729a:	460e      	mov	r6, r1
   b729c:	b909      	cbnz	r1, b72a2 <_ZN6String6concatEPKcj+0xc>
   b729e:	2000      	movs	r0, #0
}
   b72a0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b72a2:	b16a      	cbz	r2, b72c0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b72a4:	6884      	ldr	r4, [r0, #8]
   b72a6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b72a8:	4621      	mov	r1, r4
   b72aa:	f7ff ff71 	bl	b7190 <_ZN6String7reserveEj>
   b72ae:	2800      	cmp	r0, #0
   b72b0:	d0f5      	beq.n	b729e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b72b2:	6828      	ldr	r0, [r5, #0]
   b72b4:	68ab      	ldr	r3, [r5, #8]
   b72b6:	4631      	mov	r1, r6
   b72b8:	4418      	add	r0, r3
   b72ba:	f000 fb94 	bl	b79e6 <strcpy>
	len = newlen;
   b72be:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b72c0:	2001      	movs	r0, #1
   b72c2:	e7ed      	b.n	b72a0 <_ZN6String6concatEPKcj+0xa>

000b72c4 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   b72c4:	b538      	push	{r3, r4, r5, lr}
   b72c6:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   b72c8:	6880      	ldr	r0, [r0, #8]
	inline unsigned int length(void) const {return len;}
   b72ca:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   b72cc:	f7ff ffe3 	bl	b7296 <_ZN6String6concatEPKcj>
   b72d0:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   b72d2:	6898      	ldr	r0, [r3, #8]
    }
   b72d4:	1b40      	subs	r0, r0, r5
   b72d6:	bd38      	pop	{r3, r4, r5, pc}

000b72d8 <_ZN6String6concatEc>:
{
   b72d8:	b507      	push	{r0, r1, r2, lr}
	buf[1] = 0;
   b72da:	2300      	movs	r3, #0
	buf[0] = c;
   b72dc:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b72e0:	2201      	movs	r2, #1
   b72e2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b72e4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b72e8:	f7ff ffd5 	bl	b7296 <_ZN6String6concatEPKcj>
}
   b72ec:	b003      	add	sp, #12
   b72ee:	f85d fb04 	ldr.w	pc, [sp], #4

000b72f2 <_ZN21StringPrintableHelper5writeEh>:

    virtual size_t write(uint8_t c) override
   b72f2:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   b72f4:	6880      	ldr	r0, [r0, #8]
   b72f6:	f7ff ffef 	bl	b72d8 <_ZN6String6concatEc>
    }
   b72fa:	bd08      	pop	{r3, pc}

000b72fc <_ZNK6String6equalsEPKc>:
{
   b72fc:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b72fe:	6882      	ldr	r2, [r0, #8]
   b7300:	b93a      	cbnz	r2, b7312 <_ZNK6String6equalsEPKc+0x16>
   b7302:	b121      	cbz	r1, b730e <_ZNK6String6equalsEPKc+0x12>
   b7304:	7808      	ldrb	r0, [r1, #0]
	return strcmp(buffer, cstr) == 0;
   b7306:	fab0 f080 	clz	r0, r0
   b730a:	0940      	lsrs	r0, r0, #5
   b730c:	e000      	b.n	b7310 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b730e:	2001      	movs	r0, #1
}
   b7310:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b7312:	6800      	ldr	r0, [r0, #0]
   b7314:	b909      	cbnz	r1, b731a <_ZNK6String6equalsEPKc+0x1e>
   b7316:	7800      	ldrb	r0, [r0, #0]
   b7318:	e7f5      	b.n	b7306 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b731a:	f7fd fb33 	bl	b4984 <strcmp>
   b731e:	e7f2      	b.n	b7306 <_ZNK6String6equalsEPKc+0xa>

000b7320 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   b7320:	b530      	push	{r4, r5, lr}
   b7322:	b085      	sub	sp, #20
	buffer = NULL;
   b7324:	2300      	movs	r3, #0
String::String(const Printable& printable)
   b7326:	460d      	mov	r5, r1
    Print() : write_error(0) {}
   b7328:	9302      	str	r3, [sp, #8]
	capacity = 0;
   b732a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b732e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7330:	7303      	strb	r3, [r0, #12]
        s.reserve(20);
   b7332:	2114      	movs	r1, #20
    StringPrintableHelper(String& s_) : s(s_) {
   b7334:	4b06      	ldr	r3, [pc, #24]	; (b7350 <_ZN6StringC1ERK9Printable+0x30>)
   b7336:	9301      	str	r3, [sp, #4]
String::String(const Printable& printable)
   b7338:	4604      	mov	r4, r0
    StringPrintableHelper(String& s_) : s(s_) {
   b733a:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   b733c:	f7ff ff28 	bl	b7190 <_ZN6String7reserveEj>
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   b7340:	682b      	ldr	r3, [r5, #0]
   b7342:	a901      	add	r1, sp, #4
   b7344:	681b      	ldr	r3, [r3, #0]
   b7346:	4628      	mov	r0, r5
   b7348:	4798      	blx	r3
}
   b734a:	4620      	mov	r0, r4
   b734c:	b005      	add	sp, #20
   b734e:	bd30      	pop	{r4, r5, pc}
   b7350:	000b7f30 	.word	0x000b7f30

000b7354 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7354:	4b05      	ldr	r3, [pc, #20]	; (b736c <_GLOBAL__sub_I_System+0x18>)
   b7356:	2202      	movs	r2, #2
   b7358:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b735a:	4b05      	ldr	r3, [pc, #20]	; (b7370 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b735c:	4a05      	ldr	r2, [pc, #20]	; (b7374 <_GLOBAL__sub_I_System+0x20>)
   b735e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7360:	2000      	movs	r0, #0
   b7362:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7366:	f7fd bf3d 	b.w	b51e4 <set_system_mode>
   b736a:	bf00      	nop
   b736c:	2003e6dc 	.word	0x2003e6dc
   b7370:	2003e6d0 	.word	0x2003e6d0
   b7374:	ffff0000 	.word	0xffff0000

000b7378 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7378:	4b02      	ldr	r3, [pc, #8]	; (b7384 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b737a:	681a      	ldr	r2, [r3, #0]
   b737c:	4b02      	ldr	r3, [pc, #8]	; (b7388 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b737e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7380:	4770      	bx	lr
   b7382:	bf00      	nop
   b7384:	2003e58c 	.word	0x2003e58c
   b7388:	2003e6e0 	.word	0x2003e6e0

000b738c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b738c:	4770      	bx	lr

000b738e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b738e:	7441      	strb	r1, [r0, #17]
}
   b7390:	4770      	bx	lr

000b7392 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7392:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7394:	7c00      	ldrb	r0, [r0, #16]
   b7396:	f7fd fead 	bl	b50f4 <hal_usart_available_data_for_write>
}
   b739a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b739e:	bd08      	pop	{r3, pc}

000b73a0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b73a0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b73a2:	7c00      	ldrb	r0, [r0, #16]
   b73a4:	f7fd fe7e 	bl	b50a4 <hal_usart_available>
}
   b73a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b73ac:	bd08      	pop	{r3, pc}

000b73ae <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b73ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b73b0:	7c00      	ldrb	r0, [r0, #16]
   b73b2:	f7fd fe87 	bl	b50c4 <hal_usart_peek>
}
   b73b6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b73ba:	bd08      	pop	{r3, pc}

000b73bc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b73bc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b73be:	7c00      	ldrb	r0, [r0, #16]
   b73c0:	f7fd fe78 	bl	b50b4 <hal_usart_read>
}
   b73c4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b73c8:	bd08      	pop	{r3, pc}

000b73ca <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b73ca:	7c00      	ldrb	r0, [r0, #16]
   b73cc:	f7fd be82 	b.w	b50d4 <hal_usart_flush>

000b73d0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b73d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b73d2:	7c45      	ldrb	r5, [r0, #17]
{
   b73d4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b73d6:	b12d      	cbz	r5, b73e4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b73d8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b73da:	b003      	add	sp, #12
   b73dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b73e0:	f7fd be58 	b.w	b5094 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b73e4:	7c00      	ldrb	r0, [r0, #16]
   b73e6:	9101      	str	r1, [sp, #4]
   b73e8:	f7fd fe84 	bl	b50f4 <hal_usart_available_data_for_write>
   b73ec:	2800      	cmp	r0, #0
   b73ee:	9901      	ldr	r1, [sp, #4]
   b73f0:	dcf2      	bgt.n	b73d8 <_ZN11USARTSerial5writeEh+0x8>
}
   b73f2:	4628      	mov	r0, r5
   b73f4:	b003      	add	sp, #12
   b73f6:	bd30      	pop	{r4, r5, pc}

000b73f8 <_ZN11USARTSerialD0Ev>:
   b73f8:	b510      	push	{r4, lr}
   b73fa:	2114      	movs	r1, #20
   b73fc:	4604      	mov	r4, r0
   b73fe:	f7fd fb12 	bl	b4a26 <_ZdlPvj>
   b7402:	4620      	mov	r0, r4
   b7404:	bd10      	pop	{r4, pc}
	...

000b7408 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7408:	b510      	push	{r4, lr}
   b740a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b740e:	4604      	mov	r4, r0
   b7410:	4608      	mov	r0, r1
   b7412:	4611      	mov	r1, r2
   b7414:	2200      	movs	r2, #0
   b7416:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b741a:	4b04      	ldr	r3, [pc, #16]	; (b742c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b741c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b741e:	2301      	movs	r3, #1
  _serial = serial;
   b7420:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7422:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7424:	f7fd fe76 	bl	b5114 <hal_usart_init_ex>
}
   b7428:	4620      	mov	r0, r4
   b742a:	bd10      	pop	{r4, pc}
   b742c:	000b7f64 	.word	0x000b7f64

000b7430 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b7430:	7c00      	ldrb	r0, [r0, #16]
   b7432:	2300      	movs	r3, #0
   b7434:	f7fd be66 	b.w	b5104 <hal_usart_begin_config>

000b7438 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b7438:	2200      	movs	r2, #0
   b743a:	f7ff bff9 	b.w	b7430 <_ZN11USARTSerial5beginEmm>

000b743e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b743e:	7c00      	ldrb	r0, [r0, #16]
   b7440:	f7fd be20 	b.w	b5084 <hal_usart_end>

000b7444 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7444:	7441      	strb	r1, [r0, #17]
}
   b7446:	4770      	bx	lr

000b7448 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7448:	4770      	bx	lr

000b744a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b744a:	4770      	bx	lr

000b744c <_ZN9USBSerial4readEv>:
{
   b744c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b744e:	2100      	movs	r1, #0
   b7450:	7c00      	ldrb	r0, [r0, #16]
   b7452:	f7fd fe8f 	bl	b5174 <HAL_USB_USART_Receive_Data>
}
   b7456:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b745a:	bd08      	pop	{r3, pc}

000b745c <_ZN9USBSerial4peekEv>:
{
   b745c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b745e:	2101      	movs	r1, #1
   b7460:	7c00      	ldrb	r0, [r0, #16]
   b7462:	f7fd fe87 	bl	b5174 <HAL_USB_USART_Receive_Data>
}
   b7466:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b746a:	bd08      	pop	{r3, pc}

000b746c <_ZN9USBSerial17availableForWriteEv>:
{
   b746c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b746e:	7c00      	ldrb	r0, [r0, #16]
   b7470:	f7fd fe78 	bl	b5164 <HAL_USB_USART_Available_Data_For_Write>
}
   b7474:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7478:	bd08      	pop	{r3, pc}

000b747a <_ZN9USBSerial9availableEv>:
{
   b747a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b747c:	7c00      	ldrb	r0, [r0, #16]
   b747e:	f7fd fe69 	bl	b5154 <HAL_USB_USART_Available_Data>
}
   b7482:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7486:	bd08      	pop	{r3, pc}

000b7488 <_ZN9USBSerial5writeEh>:
{
   b7488:	b513      	push	{r0, r1, r4, lr}
   b748a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b748c:	7c00      	ldrb	r0, [r0, #16]
{
   b748e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7490:	f7fd fe68 	bl	b5164 <HAL_USB_USART_Available_Data_For_Write>
   b7494:	2800      	cmp	r0, #0
   b7496:	9901      	ldr	r1, [sp, #4]
   b7498:	dc01      	bgt.n	b749e <_ZN9USBSerial5writeEh+0x16>
   b749a:	7c60      	ldrb	r0, [r4, #17]
   b749c:	b120      	cbz	r0, b74a8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b749e:	7c20      	ldrb	r0, [r4, #16]
   b74a0:	f7fd fe70 	bl	b5184 <HAL_USB_USART_Send_Data>
   b74a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b74a8:	b002      	add	sp, #8
   b74aa:	bd10      	pop	{r4, pc}

000b74ac <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b74ac:	7c00      	ldrb	r0, [r0, #16]
   b74ae:	f7fd be71 	b.w	b5194 <HAL_USB_USART_Flush_Data>

000b74b2 <_ZN9USBSerialD0Ev>:
   b74b2:	b510      	push	{r4, lr}
   b74b4:	2114      	movs	r1, #20
   b74b6:	4604      	mov	r4, r0
   b74b8:	f7fd fab5 	bl	b4a26 <_ZdlPvj>
   b74bc:	4620      	mov	r0, r4
   b74be:	bd10      	pop	{r4, pc}

000b74c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b74c0:	b510      	push	{r4, lr}
   b74c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b74c6:	4604      	mov	r4, r0
   b74c8:	4608      	mov	r0, r1
   b74ca:	2100      	movs	r1, #0
   b74cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b74d0:	4b04      	ldr	r3, [pc, #16]	; (b74e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b74d2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b74d4:	2301      	movs	r3, #1
  _serial = serial;
   b74d6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b74d8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b74da:	4611      	mov	r1, r2
   b74dc:	f7fd fe22 	bl	b5124 <HAL_USB_USART_Init>
}
   b74e0:	4620      	mov	r0, r4
   b74e2:	bd10      	pop	{r4, pc}
   b74e4:	000b7f94 	.word	0x000b7f94

000b74e8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b74e8:	7c00      	ldrb	r0, [r0, #16]
   b74ea:	2200      	movs	r2, #0
   b74ec:	f7fd be22 	b.w	b5134 <HAL_USB_USART_Begin>

000b74f0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b74f0:	7c00      	ldrb	r0, [r0, #16]
   b74f2:	f7fd be27 	b.w	b5144 <HAL_USB_USART_End>

000b74f6 <_Z19acquireSerialBufferv>:
{
   b74f6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b74f8:	2214      	movs	r2, #20
{
   b74fa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b74fc:	2100      	movs	r1, #0
   b74fe:	f000 fa25 	bl	b794c <memset>
}
   b7502:	4620      	mov	r0, r4
   b7504:	bd10      	pop	{r4, pc}
	...

000b7508 <_Z16_fetch_usbserialv>:
{
   b7508:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b750a:	4c0f      	ldr	r4, [pc, #60]	; (b7548 <_Z16_fetch_usbserialv+0x40>)
{
   b750c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b750e:	a803      	add	r0, sp, #12
   b7510:	f7ff fff1 	bl	b74f6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7514:	7821      	ldrb	r1, [r4, #0]
   b7516:	f3bf 8f5b 	dmb	ish
   b751a:	f011 0101 	ands.w	r1, r1, #1
   b751e:	d10f      	bne.n	b7540 <_Z16_fetch_usbserialv+0x38>
   b7520:	4620      	mov	r0, r4
   b7522:	9101      	str	r1, [sp, #4]
   b7524:	f7fd fa8e 	bl	b4a44 <__cxa_guard_acquire>
   b7528:	9901      	ldr	r1, [sp, #4]
   b752a:	b148      	cbz	r0, b7540 <_Z16_fetch_usbserialv+0x38>
   b752c:	aa03      	add	r2, sp, #12
   b752e:	4807      	ldr	r0, [pc, #28]	; (b754c <_Z16_fetch_usbserialv+0x44>)
   b7530:	f7ff ffc6 	bl	b74c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7534:	4620      	mov	r0, r4
   b7536:	f7fd fa8a 	bl	b4a4e <__cxa_guard_release>
   b753a:	4805      	ldr	r0, [pc, #20]	; (b7550 <_Z16_fetch_usbserialv+0x48>)
   b753c:	f000 f9d0 	bl	b78e0 <atexit>
	return _usbserial;
}
   b7540:	4802      	ldr	r0, [pc, #8]	; (b754c <_Z16_fetch_usbserialv+0x44>)
   b7542:	b008      	add	sp, #32
   b7544:	bd10      	pop	{r4, pc}
   b7546:	bf00      	nop
   b7548:	2003e6e4 	.word	0x2003e6e4
   b754c:	2003e6e8 	.word	0x2003e6e8
   b7550:	000b7449 	.word	0x000b7449

000b7554 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7554:	4b01      	ldr	r3, [pc, #4]	; (b755c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7556:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7558:	4770      	bx	lr
   b755a:	bf00      	nop
   b755c:	2003e590 	.word	0x2003e590

000b7560 <serialEventRun>:
{
   b7560:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7562:	4b0b      	ldr	r3, [pc, #44]	; (b7590 <serialEventRun+0x30>)
   b7564:	b143      	cbz	r3, b7578 <serialEventRun+0x18>
   b7566:	f7ff ffcf 	bl	b7508 <_Z16_fetch_usbserialv>
   b756a:	6803      	ldr	r3, [r0, #0]
   b756c:	691b      	ldr	r3, [r3, #16]
   b756e:	4798      	blx	r3
   b7570:	2800      	cmp	r0, #0
   b7572:	dd01      	ble.n	b7578 <serialEventRun+0x18>
        serialEvent();
   b7574:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7578:	4b06      	ldr	r3, [pc, #24]	; (b7594 <serialEventRun+0x34>)
   b757a:	b143      	cbz	r3, b758e <serialEventRun+0x2e>
   b757c:	f000 f988 	bl	b7890 <_Z22__fetch_global_Serial1v>
   b7580:	6803      	ldr	r3, [r0, #0]
   b7582:	691b      	ldr	r3, [r3, #16]
   b7584:	4798      	blx	r3
   b7586:	2800      	cmp	r0, #0
   b7588:	dd01      	ble.n	b758e <serialEventRun+0x2e>
        serialEvent1();
   b758a:	f3af 8000 	nop.w
}
   b758e:	bd08      	pop	{r3, pc}
	...

000b7598 <_post_loop>:
{
   b7598:	b508      	push	{r3, lr}
	serialEventRun();
   b759a:	f7ff ffe1 	bl	b7560 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b759e:	f7fd fcc9 	bl	b4f34 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b75a2:	4b01      	ldr	r3, [pc, #4]	; (b75a8 <_post_loop+0x10>)
   b75a4:	6018      	str	r0, [r3, #0]
}
   b75a6:	bd08      	pop	{r3, pc}
   b75a8:	2003e710 	.word	0x2003e710

000b75ac <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b75ac:	4805      	ldr	r0, [pc, #20]	; (b75c4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b75ae:	4a06      	ldr	r2, [pc, #24]	; (b75c8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b75b0:	4906      	ldr	r1, [pc, #24]	; (b75cc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b75b2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b75b4:	1a12      	subs	r2, r2, r0
   b75b6:	f000 f9a1 	bl	b78fc <memcpy>
    __backup_sram_signature = signature;
   b75ba:	4b05      	ldr	r3, [pc, #20]	; (b75d0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b75bc:	4a05      	ldr	r2, [pc, #20]	; (b75d4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b75be:	601a      	str	r2, [r3, #0]
}
   b75c0:	bd08      	pop	{r3, pc}
   b75c2:	bf00      	nop
   b75c4:	2003f400 	.word	0x2003f400
   b75c8:	2003f404 	.word	0x2003f404
   b75cc:	000b81f0 	.word	0x000b81f0
   b75d0:	2003f400 	.word	0x2003f400
   b75d4:	9a271c1e 	.word	0x9a271c1e

000b75d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b75d8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b75da:	2300      	movs	r3, #0
   b75dc:	9300      	str	r3, [sp, #0]
   b75de:	461a      	mov	r2, r3
   b75e0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b75e4:	f7fd fe20 	bl	b5228 <system_ctrl_set_result>
}
   b75e8:	b003      	add	sp, #12
   b75ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b75f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b75f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b75f2:	8843      	ldrh	r3, [r0, #2]
   b75f4:	2b0a      	cmp	r3, #10
   b75f6:	d008      	beq.n	b760a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b75f8:	2b50      	cmp	r3, #80	; 0x50
   b75fa:	d10b      	bne.n	b7614 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b75fc:	4b09      	ldr	r3, [pc, #36]	; (b7624 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b75fe:	681b      	ldr	r3, [r3, #0]
   b7600:	b14b      	cbz	r3, b7616 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7602:	b003      	add	sp, #12
   b7604:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7608:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b760a:	f7ff ffe5 	bl	b75d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b760e:	b003      	add	sp, #12
   b7610:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7614:	2300      	movs	r3, #0
   b7616:	9300      	str	r3, [sp, #0]
   b7618:	461a      	mov	r2, r3
   b761a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b761e:	f7fd fe03 	bl	b5228 <system_ctrl_set_result>
}
   b7622:	e7f4      	b.n	b760e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7624:	2003e700 	.word	0x2003e700

000b7628 <module_user_init_hook>:
{
   b7628:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b762a:	4812      	ldr	r0, [pc, #72]	; (b7674 <module_user_init_hook+0x4c>)
   b762c:	2100      	movs	r1, #0
   b762e:	f7fd fec5 	bl	b53bc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7632:	4b11      	ldr	r3, [pc, #68]	; (b7678 <module_user_init_hook+0x50>)
   b7634:	681a      	ldr	r2, [r3, #0]
   b7636:	4b11      	ldr	r3, [pc, #68]	; (b767c <module_user_init_hook+0x54>)
   b7638:	429a      	cmp	r2, r3
   b763a:	4b11      	ldr	r3, [pc, #68]	; (b7680 <module_user_init_hook+0x58>)
   b763c:	bf0c      	ite	eq
   b763e:	2201      	moveq	r2, #1
   b7640:	2200      	movne	r2, #0
   b7642:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7644:	d001      	beq.n	b764a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7646:	f7ff ffb1 	bl	b75ac <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b764a:	f7fd fc63 	bl	b4f14 <HAL_RNG_GetRandomNumber>
   b764e:	4604      	mov	r4, r0
    srand(seed);
   b7650:	f000 f984 	bl	b795c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7654:	4b0b      	ldr	r3, [pc, #44]	; (b7684 <module_user_init_hook+0x5c>)
   b7656:	b113      	cbz	r3, b765e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7658:	4620      	mov	r0, r4
   b765a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b765e:	2100      	movs	r1, #0
   b7660:	4808      	ldr	r0, [pc, #32]	; (b7684 <module_user_init_hook+0x5c>)
   b7662:	f7fd fe0b 	bl	b527c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b766a:	4807      	ldr	r0, [pc, #28]	; (b7688 <module_user_init_hook+0x60>)
   b766c:	2100      	movs	r1, #0
   b766e:	f7fd bdd1 	b.w	b5214 <system_ctrl_set_app_request_handler>
   b7672:	bf00      	nop
   b7674:	000b7555 	.word	0x000b7555
   b7678:	2003f400 	.word	0x2003f400
   b767c:	9a271c1e 	.word	0x9a271c1e
   b7680:	2003e6fc 	.word	0x2003e6fc
   b7684:	00000000 	.word	0x00000000
   b7688:	000b75f1 	.word	0x000b75f1

000b768c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b768c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b768e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7690:	d902      	bls.n	b7698 <pinAvailable+0xc>
    return false;
   b7692:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7694:	b002      	add	sp, #8
   b7696:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7698:	f1a0 030b 	sub.w	r3, r0, #11
   b769c:	2b02      	cmp	r3, #2
   b769e:	d81a      	bhi.n	b76d6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b76a0:	4c17      	ldr	r4, [pc, #92]	; (b7700 <pinAvailable+0x74>)
   b76a2:	7821      	ldrb	r1, [r4, #0]
   b76a4:	f3bf 8f5b 	dmb	ish
   b76a8:	f011 0101 	ands.w	r1, r1, #1
   b76ac:	d10b      	bne.n	b76c6 <pinAvailable+0x3a>
   b76ae:	4620      	mov	r0, r4
   b76b0:	9101      	str	r1, [sp, #4]
   b76b2:	f7fd f9c7 	bl	b4a44 <__cxa_guard_acquire>
   b76b6:	9901      	ldr	r1, [sp, #4]
   b76b8:	b128      	cbz	r0, b76c6 <pinAvailable+0x3a>
   b76ba:	4812      	ldr	r0, [pc, #72]	; (b7704 <pinAvailable+0x78>)
   b76bc:	f7ff fd38 	bl	b7130 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b76c0:	4620      	mov	r0, r4
   b76c2:	f7fd f9c4 	bl	b4a4e <__cxa_guard_release>
   b76c6:	4b0f      	ldr	r3, [pc, #60]	; (b7704 <pinAvailable+0x78>)
   b76c8:	7818      	ldrb	r0, [r3, #0]
   b76ca:	f7fd fcd3 	bl	b5074 <hal_spi_is_enabled>
   b76ce:	2800      	cmp	r0, #0
   b76d0:	d1df      	bne.n	b7692 <pinAvailable+0x6>
  return true; // 'pin' is available
   b76d2:	2001      	movs	r0, #1
   b76d4:	e7de      	b.n	b7694 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b76d6:	2801      	cmp	r0, #1
   b76d8:	d809      	bhi.n	b76ee <pinAvailable+0x62>
   b76da:	f000 f875 	bl	b77c8 <_Z19__fetch_global_Wirev>
   b76de:	2100      	movs	r1, #0
   b76e0:	7c00      	ldrb	r0, [r0, #16]
   b76e2:	f7fd fc7f 	bl	b4fe4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b76e6:	f080 0001 	eor.w	r0, r0, #1
   b76ea:	b2c0      	uxtb	r0, r0
   b76ec:	e7d2      	b.n	b7694 <pinAvailable+0x8>
   b76ee:	3809      	subs	r0, #9
   b76f0:	2801      	cmp	r0, #1
   b76f2:	d8ee      	bhi.n	b76d2 <pinAvailable+0x46>
   b76f4:	f000 f8cc 	bl	b7890 <_Z22__fetch_global_Serial1v>
   b76f8:	7c00      	ldrb	r0, [r0, #16]
   b76fa:	f7fd fcf3 	bl	b50e4 <hal_usart_is_enabled>
   b76fe:	e7f2      	b.n	b76e6 <pinAvailable+0x5a>
   b7700:	2003e704 	.word	0x2003e704
   b7704:	2003e708 	.word	0x2003e708

000b7708 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7708:	2823      	cmp	r0, #35	; 0x23
{
   b770a:	b538      	push	{r3, r4, r5, lr}
   b770c:	4604      	mov	r4, r0
   b770e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7710:	d80a      	bhi.n	b7728 <pinMode+0x20>
   b7712:	29ff      	cmp	r1, #255	; 0xff
   b7714:	d008      	beq.n	b7728 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7716:	f7ff ffb9 	bl	b768c <pinAvailable>
   b771a:	b128      	cbz	r0, b7728 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b771c:	4629      	mov	r1, r5
   b771e:	4620      	mov	r0, r4
}
   b7720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b7724:	f7fd bc0e 	b.w	b4f44 <hal_gpio_mode>
}
   b7728:	bd38      	pop	{r3, r4, r5, pc}

000b772a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b772a:	b538      	push	{r3, r4, r5, lr}
   b772c:	4604      	mov	r4, r0
   b772e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b7730:	f7fd fc10 	bl	b4f54 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7734:	28ff      	cmp	r0, #255	; 0xff
   b7736:	d010      	beq.n	b775a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7738:	2806      	cmp	r0, #6
   b773a:	d804      	bhi.n	b7746 <digitalWrite+0x1c>
   b773c:	234d      	movs	r3, #77	; 0x4d
   b773e:	fa23 f000 	lsr.w	r0, r3, r0
   b7742:	07c3      	lsls	r3, r0, #31
   b7744:	d409      	bmi.n	b775a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7746:	4620      	mov	r0, r4
   b7748:	f7ff ffa0 	bl	b768c <pinAvailable>
   b774c:	b128      	cbz	r0, b775a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b774e:	4629      	mov	r1, r5
   b7750:	4620      	mov	r0, r4
}
   b7752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b7756:	f7fd bc05 	b.w	b4f64 <hal_gpio_write>
}
   b775a:	bd38      	pop	{r3, r4, r5, pc}

000b775c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b775c:	4770      	bx	lr

000b775e <__tcf_1>:
   b775e:	4770      	bx	lr

000b7760 <_Z17acquireWireBufferv>:
{
   b7760:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7762:	4b0a      	ldr	r3, [pc, #40]	; (b778c <_Z17acquireWireBufferv+0x2c>)
   b7764:	6003      	str	r3, [r0, #0]
   b7766:	2301      	movs	r3, #1
{
   b7768:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b776a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b776c:	4908      	ldr	r1, [pc, #32]	; (b7790 <_Z17acquireWireBufferv+0x30>)
   b776e:	2020      	movs	r0, #32
   b7770:	f000 f8b4 	bl	b78dc <_ZnajRKSt9nothrow_t>
	};
   b7774:	2520      	movs	r5, #32
   b7776:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7778:	4905      	ldr	r1, [pc, #20]	; (b7790 <_Z17acquireWireBufferv+0x30>)
	};
   b777a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b777c:	4628      	mov	r0, r5
   b777e:	f000 f8ad 	bl	b78dc <_ZnajRKSt9nothrow_t>
	};
   b7782:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7786:	4620      	mov	r0, r4
   b7788:	bd38      	pop	{r3, r4, r5, pc}
   b778a:	bf00      	nop
   b778c:	00010018 	.word	0x00010018
   b7790:	000b7fbc 	.word	0x000b7fbc

000b7794 <_Z18acquireWire1Bufferv>:
{
   b7794:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7796:	4b0a      	ldr	r3, [pc, #40]	; (b77c0 <_Z18acquireWire1Bufferv+0x2c>)
   b7798:	6003      	str	r3, [r0, #0]
   b779a:	2301      	movs	r3, #1
{
   b779c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b779e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b77a0:	4908      	ldr	r1, [pc, #32]	; (b77c4 <_Z18acquireWire1Bufferv+0x30>)
   b77a2:	2020      	movs	r0, #32
   b77a4:	f000 f89a 	bl	b78dc <_ZnajRKSt9nothrow_t>
	};
   b77a8:	2520      	movs	r5, #32
   b77aa:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b77ac:	4905      	ldr	r1, [pc, #20]	; (b77c4 <_Z18acquireWire1Bufferv+0x30>)
	};
   b77ae:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b77b0:	4628      	mov	r0, r5
   b77b2:	f000 f893 	bl	b78dc <_ZnajRKSt9nothrow_t>
	};
   b77b6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b77ba:	4620      	mov	r0, r4
   b77bc:	bd38      	pop	{r3, r4, r5, pc}
   b77be:	bf00      	nop
   b77c0:	00010018 	.word	0x00010018
   b77c4:	000b7fbc 	.word	0x000b7fbc

000b77c8 <_Z19__fetch_global_Wirev>:
{
   b77c8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b77ca:	4d0e      	ldr	r5, [pc, #56]	; (b7804 <_Z19__fetch_global_Wirev+0x3c>)
   b77cc:	7829      	ldrb	r1, [r5, #0]
   b77ce:	f3bf 8f5b 	dmb	ish
   b77d2:	f011 0401 	ands.w	r4, r1, #1
{
   b77d6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b77d8:	d111      	bne.n	b77fe <_Z19__fetch_global_Wirev+0x36>
   b77da:	4628      	mov	r0, r5
   b77dc:	f7fd f932 	bl	b4a44 <__cxa_guard_acquire>
   b77e0:	b168      	cbz	r0, b77fe <_Z19__fetch_global_Wirev+0x36>
   b77e2:	4668      	mov	r0, sp
   b77e4:	f7ff ffbc 	bl	b7760 <_Z17acquireWireBufferv>
   b77e8:	466a      	mov	r2, sp
   b77ea:	4621      	mov	r1, r4
   b77ec:	4806      	ldr	r0, [pc, #24]	; (b7808 <_Z19__fetch_global_Wirev+0x40>)
   b77ee:	f7fe f857 	bl	b58a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b77f2:	4628      	mov	r0, r5
   b77f4:	f7fd f92b 	bl	b4a4e <__cxa_guard_release>
   b77f8:	4804      	ldr	r0, [pc, #16]	; (b780c <_Z19__fetch_global_Wirev+0x44>)
   b77fa:	f000 f871 	bl	b78e0 <atexit>
	return wire;
}
   b77fe:	4802      	ldr	r0, [pc, #8]	; (b7808 <_Z19__fetch_global_Wirev+0x40>)
   b7800:	b007      	add	sp, #28
   b7802:	bd30      	pop	{r4, r5, pc}
   b7804:	2003e714 	.word	0x2003e714
   b7808:	2003e71c 	.word	0x2003e71c
   b780c:	000b775d 	.word	0x000b775d

000b7810 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b7810:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b7812:	4c0e      	ldr	r4, [pc, #56]	; (b784c <_Z20__fetch_global_Wire1v+0x3c>)
   b7814:	7823      	ldrb	r3, [r4, #0]
   b7816:	f3bf 8f5b 	dmb	ish
   b781a:	07db      	lsls	r3, r3, #31
{
   b781c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b781e:	d411      	bmi.n	b7844 <_Z20__fetch_global_Wire1v+0x34>
   b7820:	4620      	mov	r0, r4
   b7822:	f7fd f90f 	bl	b4a44 <__cxa_guard_acquire>
   b7826:	b168      	cbz	r0, b7844 <_Z20__fetch_global_Wire1v+0x34>
   b7828:	4668      	mov	r0, sp
   b782a:	f7ff ffb3 	bl	b7794 <_Z18acquireWire1Bufferv>
   b782e:	466a      	mov	r2, sp
   b7830:	2101      	movs	r1, #1
   b7832:	4807      	ldr	r0, [pc, #28]	; (b7850 <_Z20__fetch_global_Wire1v+0x40>)
   b7834:	f7fe f834 	bl	b58a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7838:	4620      	mov	r0, r4
   b783a:	f7fd f908 	bl	b4a4e <__cxa_guard_release>
   b783e:	4805      	ldr	r0, [pc, #20]	; (b7854 <_Z20__fetch_global_Wire1v+0x44>)
   b7840:	f000 f84e 	bl	b78e0 <atexit>
	return wire;
}
   b7844:	4802      	ldr	r0, [pc, #8]	; (b7850 <_Z20__fetch_global_Wire1v+0x40>)
   b7846:	b006      	add	sp, #24
   b7848:	bd10      	pop	{r4, pc}
   b784a:	bf00      	nop
   b784c:	2003e718 	.word	0x2003e718
   b7850:	2003e730 	.word	0x2003e730
   b7854:	000b775f 	.word	0x000b775f

000b7858 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7858:	4770      	bx	lr
	...

000b785c <_Z20acquireSerial1Bufferv>:
{
   b785c:	b538      	push	{r3, r4, r5, lr}
   b785e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7860:	2514      	movs	r5, #20
   b7862:	462a      	mov	r2, r5
   b7864:	2100      	movs	r1, #0
   b7866:	f000 f871 	bl	b794c <memset>
   b786a:	8025      	strh	r5, [r4, #0]
   b786c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b786e:	4907      	ldr	r1, [pc, #28]	; (b788c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7870:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7872:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7874:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7876:	f000 f831 	bl	b78dc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b787a:	4904      	ldr	r1, [pc, #16]	; (b788c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b787c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b787e:	4628      	mov	r0, r5
   b7880:	f000 f82c 	bl	b78dc <_ZnajRKSt9nothrow_t>
    };
   b7884:	60e0      	str	r0, [r4, #12]
}
   b7886:	4620      	mov	r0, r4
   b7888:	bd38      	pop	{r3, r4, r5, pc}
   b788a:	bf00      	nop
   b788c:	000b7fbc 	.word	0x000b7fbc

000b7890 <_Z22__fetch_global_Serial1v>:
{
   b7890:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7892:	4d0e      	ldr	r5, [pc, #56]	; (b78cc <_Z22__fetch_global_Serial1v+0x3c>)
   b7894:	7829      	ldrb	r1, [r5, #0]
   b7896:	f3bf 8f5b 	dmb	ish
   b789a:	f011 0401 	ands.w	r4, r1, #1
{
   b789e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b78a0:	d111      	bne.n	b78c6 <_Z22__fetch_global_Serial1v+0x36>
   b78a2:	4628      	mov	r0, r5
   b78a4:	f7fd f8ce 	bl	b4a44 <__cxa_guard_acquire>
   b78a8:	b168      	cbz	r0, b78c6 <_Z22__fetch_global_Serial1v+0x36>
   b78aa:	a801      	add	r0, sp, #4
   b78ac:	f7ff ffd6 	bl	b785c <_Z20acquireSerial1Bufferv>
   b78b0:	aa01      	add	r2, sp, #4
   b78b2:	4621      	mov	r1, r4
   b78b4:	4806      	ldr	r0, [pc, #24]	; (b78d0 <_Z22__fetch_global_Serial1v+0x40>)
   b78b6:	f7ff fda7 	bl	b7408 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b78ba:	4628      	mov	r0, r5
   b78bc:	f7fd f8c7 	bl	b4a4e <__cxa_guard_release>
   b78c0:	4804      	ldr	r0, [pc, #16]	; (b78d4 <_Z22__fetch_global_Serial1v+0x44>)
   b78c2:	f000 f80d 	bl	b78e0 <atexit>
    return serial1;
}
   b78c6:	4802      	ldr	r0, [pc, #8]	; (b78d0 <_Z22__fetch_global_Serial1v+0x40>)
   b78c8:	b007      	add	sp, #28
   b78ca:	bd30      	pop	{r4, r5, pc}
   b78cc:	2003e744 	.word	0x2003e744
   b78d0:	2003e748 	.word	0x2003e748
   b78d4:	000b7859 	.word	0x000b7859

000b78d8 <_ZnwjRKSt9nothrow_t>:
   b78d8:	f7fd b8a1 	b.w	b4a1e <_Znwj>

000b78dc <_ZnajRKSt9nothrow_t>:
   b78dc:	f7fd b8a1 	b.w	b4a22 <_Znaj>

000b78e0 <atexit>:
   b78e0:	2300      	movs	r3, #0
   b78e2:	4601      	mov	r1, r0
   b78e4:	461a      	mov	r2, r3
   b78e6:	4618      	mov	r0, r3
   b78e8:	f000 b93a 	b.w	b7b60 <__register_exitproc>

000b78ec <isprint>:
   b78ec:	4b02      	ldr	r3, [pc, #8]	; (b78f8 <isprint+0xc>)
   b78ee:	4418      	add	r0, r3
   b78f0:	7840      	ldrb	r0, [r0, #1]
   b78f2:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b78f6:	4770      	bx	lr
   b78f8:	000b802d 	.word	0x000b802d

000b78fc <memcpy>:
   b78fc:	440a      	add	r2, r1
   b78fe:	4291      	cmp	r1, r2
   b7900:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7904:	d100      	bne.n	b7908 <memcpy+0xc>
   b7906:	4770      	bx	lr
   b7908:	b510      	push	{r4, lr}
   b790a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b790e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7912:	4291      	cmp	r1, r2
   b7914:	d1f9      	bne.n	b790a <memcpy+0xe>
   b7916:	bd10      	pop	{r4, pc}

000b7918 <memmove>:
   b7918:	4288      	cmp	r0, r1
   b791a:	b510      	push	{r4, lr}
   b791c:	eb01 0402 	add.w	r4, r1, r2
   b7920:	d902      	bls.n	b7928 <memmove+0x10>
   b7922:	4284      	cmp	r4, r0
   b7924:	4623      	mov	r3, r4
   b7926:	d807      	bhi.n	b7938 <memmove+0x20>
   b7928:	1e43      	subs	r3, r0, #1
   b792a:	42a1      	cmp	r1, r4
   b792c:	d008      	beq.n	b7940 <memmove+0x28>
   b792e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7932:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7936:	e7f8      	b.n	b792a <memmove+0x12>
   b7938:	4402      	add	r2, r0
   b793a:	4601      	mov	r1, r0
   b793c:	428a      	cmp	r2, r1
   b793e:	d100      	bne.n	b7942 <memmove+0x2a>
   b7940:	bd10      	pop	{r4, pc}
   b7942:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b7946:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b794a:	e7f7      	b.n	b793c <memmove+0x24>

000b794c <memset>:
   b794c:	4402      	add	r2, r0
   b794e:	4603      	mov	r3, r0
   b7950:	4293      	cmp	r3, r2
   b7952:	d100      	bne.n	b7956 <memset+0xa>
   b7954:	4770      	bx	lr
   b7956:	f803 1b01 	strb.w	r1, [r3], #1
   b795a:	e7f9      	b.n	b7950 <memset+0x4>

000b795c <srand>:
   b795c:	b538      	push	{r3, r4, r5, lr}
   b795e:	4b10      	ldr	r3, [pc, #64]	; (b79a0 <srand+0x44>)
   b7960:	681d      	ldr	r5, [r3, #0]
   b7962:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7964:	4604      	mov	r4, r0
   b7966:	b9b3      	cbnz	r3, b7996 <srand+0x3a>
   b7968:	2018      	movs	r0, #24
   b796a:	f7fd fcf7 	bl	b535c <malloc>
   b796e:	4602      	mov	r2, r0
   b7970:	63a8      	str	r0, [r5, #56]	; 0x38
   b7972:	b920      	cbnz	r0, b797e <srand+0x22>
   b7974:	4b0b      	ldr	r3, [pc, #44]	; (b79a4 <srand+0x48>)
   b7976:	480c      	ldr	r0, [pc, #48]	; (b79a8 <srand+0x4c>)
   b7978:	2142      	movs	r1, #66	; 0x42
   b797a:	f7fd fd17 	bl	b53ac <__assert_func>
   b797e:	490b      	ldr	r1, [pc, #44]	; (b79ac <srand+0x50>)
   b7980:	4b0b      	ldr	r3, [pc, #44]	; (b79b0 <srand+0x54>)
   b7982:	e9c0 1300 	strd	r1, r3, [r0]
   b7986:	4b0b      	ldr	r3, [pc, #44]	; (b79b4 <srand+0x58>)
   b7988:	6083      	str	r3, [r0, #8]
   b798a:	230b      	movs	r3, #11
   b798c:	8183      	strh	r3, [r0, #12]
   b798e:	2100      	movs	r1, #0
   b7990:	2001      	movs	r0, #1
   b7992:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7996:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7998:	2200      	movs	r2, #0
   b799a:	611c      	str	r4, [r3, #16]
   b799c:	615a      	str	r2, [r3, #20]
   b799e:	bd38      	pop	{r3, r4, r5, pc}
   b79a0:	2003e590 	.word	0x2003e590
   b79a4:	000b7fbd 	.word	0x000b7fbd
   b79a8:	000b7fd4 	.word	0x000b7fd4
   b79ac:	abcd330e 	.word	0xabcd330e
   b79b0:	e66d1234 	.word	0xe66d1234
   b79b4:	0005deec 	.word	0x0005deec

000b79b8 <strchr>:
   b79b8:	b2c9      	uxtb	r1, r1
   b79ba:	4603      	mov	r3, r0
   b79bc:	f810 2b01 	ldrb.w	r2, [r0], #1
   b79c0:	b11a      	cbz	r2, b79ca <strchr+0x12>
   b79c2:	428a      	cmp	r2, r1
   b79c4:	d1f9      	bne.n	b79ba <strchr+0x2>
   b79c6:	4618      	mov	r0, r3
   b79c8:	4770      	bx	lr
   b79ca:	2900      	cmp	r1, #0
   b79cc:	bf18      	it	ne
   b79ce:	2300      	movne	r3, #0
   b79d0:	e7f9      	b.n	b79c6 <strchr+0xe>

000b79d2 <strchrnul>:
   b79d2:	b510      	push	{r4, lr}
   b79d4:	4604      	mov	r4, r0
   b79d6:	f7ff ffef 	bl	b79b8 <strchr>
   b79da:	b918      	cbnz	r0, b79e4 <strchrnul+0x12>
   b79dc:	4620      	mov	r0, r4
   b79de:	f7fc ffdb 	bl	b4998 <strlen>
   b79e2:	4420      	add	r0, r4
   b79e4:	bd10      	pop	{r4, pc}

000b79e6 <strcpy>:
   b79e6:	4603      	mov	r3, r0
   b79e8:	f811 2b01 	ldrb.w	r2, [r1], #1
   b79ec:	f803 2b01 	strb.w	r2, [r3], #1
   b79f0:	2a00      	cmp	r2, #0
   b79f2:	d1f9      	bne.n	b79e8 <strcpy+0x2>
   b79f4:	4770      	bx	lr

000b79f6 <strncmp>:
   b79f6:	b510      	push	{r4, lr}
   b79f8:	b17a      	cbz	r2, b7a1a <strncmp+0x24>
   b79fa:	4603      	mov	r3, r0
   b79fc:	3901      	subs	r1, #1
   b79fe:	1884      	adds	r4, r0, r2
   b7a00:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7a04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7a08:	4290      	cmp	r0, r2
   b7a0a:	d101      	bne.n	b7a10 <strncmp+0x1a>
   b7a0c:	42a3      	cmp	r3, r4
   b7a0e:	d101      	bne.n	b7a14 <strncmp+0x1e>
   b7a10:	1a80      	subs	r0, r0, r2
   b7a12:	bd10      	pop	{r4, pc}
   b7a14:	2800      	cmp	r0, #0
   b7a16:	d1f3      	bne.n	b7a00 <strncmp+0xa>
   b7a18:	e7fa      	b.n	b7a10 <strncmp+0x1a>
   b7a1a:	4610      	mov	r0, r2
   b7a1c:	e7f9      	b.n	b7a12 <strncmp+0x1c>

000b7a1e <strrchr>:
   b7a1e:	b538      	push	{r3, r4, r5, lr}
   b7a20:	4603      	mov	r3, r0
   b7a22:	460c      	mov	r4, r1
   b7a24:	b969      	cbnz	r1, b7a42 <strrchr+0x24>
   b7a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7a2a:	f7ff bfc5 	b.w	b79b8 <strchr>
   b7a2e:	1c43      	adds	r3, r0, #1
   b7a30:	4605      	mov	r5, r0
   b7a32:	4621      	mov	r1, r4
   b7a34:	4618      	mov	r0, r3
   b7a36:	f7ff ffbf 	bl	b79b8 <strchr>
   b7a3a:	2800      	cmp	r0, #0
   b7a3c:	d1f7      	bne.n	b7a2e <strrchr+0x10>
   b7a3e:	4628      	mov	r0, r5
   b7a40:	bd38      	pop	{r3, r4, r5, pc}
   b7a42:	2500      	movs	r5, #0
   b7a44:	e7f5      	b.n	b7a32 <strrchr+0x14>
	...

000b7a48 <_strtol_l.constprop.0>:
   b7a48:	2b01      	cmp	r3, #1
   b7a4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7a4e:	d001      	beq.n	b7a54 <_strtol_l.constprop.0+0xc>
   b7a50:	2b24      	cmp	r3, #36	; 0x24
   b7a52:	d906      	bls.n	b7a62 <_strtol_l.constprop.0+0x1a>
   b7a54:	f7fd fca2 	bl	b539c <__errno>
   b7a58:	2316      	movs	r3, #22
   b7a5a:	6003      	str	r3, [r0, #0]
   b7a5c:	2000      	movs	r0, #0
   b7a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7a62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7b48 <_strtol_l.constprop.0+0x100>
   b7a66:	460d      	mov	r5, r1
   b7a68:	462e      	mov	r6, r5
   b7a6a:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7a6e:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7a72:	f017 0708 	ands.w	r7, r7, #8
   b7a76:	d1f7      	bne.n	b7a68 <_strtol_l.constprop.0+0x20>
   b7a78:	2c2d      	cmp	r4, #45	; 0x2d
   b7a7a:	d132      	bne.n	b7ae2 <_strtol_l.constprop.0+0x9a>
   b7a7c:	782c      	ldrb	r4, [r5, #0]
   b7a7e:	2701      	movs	r7, #1
   b7a80:	1cb5      	adds	r5, r6, #2
   b7a82:	2b00      	cmp	r3, #0
   b7a84:	d05b      	beq.n	b7b3e <_strtol_l.constprop.0+0xf6>
   b7a86:	2b10      	cmp	r3, #16
   b7a88:	d109      	bne.n	b7a9e <_strtol_l.constprop.0+0x56>
   b7a8a:	2c30      	cmp	r4, #48	; 0x30
   b7a8c:	d107      	bne.n	b7a9e <_strtol_l.constprop.0+0x56>
   b7a8e:	782c      	ldrb	r4, [r5, #0]
   b7a90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7a94:	2c58      	cmp	r4, #88	; 0x58
   b7a96:	d14d      	bne.n	b7b34 <_strtol_l.constprop.0+0xec>
   b7a98:	786c      	ldrb	r4, [r5, #1]
   b7a9a:	2310      	movs	r3, #16
   b7a9c:	3502      	adds	r5, #2
   b7a9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7aa2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7aa6:	f04f 0c00 	mov.w	ip, #0
   b7aaa:	fbb8 f9f3 	udiv	r9, r8, r3
   b7aae:	4666      	mov	r6, ip
   b7ab0:	fb03 8a19 	mls	sl, r3, r9, r8
   b7ab4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7ab8:	f1be 0f09 	cmp.w	lr, #9
   b7abc:	d816      	bhi.n	b7aec <_strtol_l.constprop.0+0xa4>
   b7abe:	4674      	mov	r4, lr
   b7ac0:	42a3      	cmp	r3, r4
   b7ac2:	dd24      	ble.n	b7b0e <_strtol_l.constprop.0+0xc6>
   b7ac4:	f1bc 0f00 	cmp.w	ip, #0
   b7ac8:	db1e      	blt.n	b7b08 <_strtol_l.constprop.0+0xc0>
   b7aca:	45b1      	cmp	r9, r6
   b7acc:	d31c      	bcc.n	b7b08 <_strtol_l.constprop.0+0xc0>
   b7ace:	d101      	bne.n	b7ad4 <_strtol_l.constprop.0+0x8c>
   b7ad0:	45a2      	cmp	sl, r4
   b7ad2:	db19      	blt.n	b7b08 <_strtol_l.constprop.0+0xc0>
   b7ad4:	fb06 4603 	mla	r6, r6, r3, r4
   b7ad8:	f04f 0c01 	mov.w	ip, #1
   b7adc:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7ae0:	e7e8      	b.n	b7ab4 <_strtol_l.constprop.0+0x6c>
   b7ae2:	2c2b      	cmp	r4, #43	; 0x2b
   b7ae4:	bf04      	itt	eq
   b7ae6:	782c      	ldrbeq	r4, [r5, #0]
   b7ae8:	1cb5      	addeq	r5, r6, #2
   b7aea:	e7ca      	b.n	b7a82 <_strtol_l.constprop.0+0x3a>
   b7aec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7af0:	f1be 0f19 	cmp.w	lr, #25
   b7af4:	d801      	bhi.n	b7afa <_strtol_l.constprop.0+0xb2>
   b7af6:	3c37      	subs	r4, #55	; 0x37
   b7af8:	e7e2      	b.n	b7ac0 <_strtol_l.constprop.0+0x78>
   b7afa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7afe:	f1be 0f19 	cmp.w	lr, #25
   b7b02:	d804      	bhi.n	b7b0e <_strtol_l.constprop.0+0xc6>
   b7b04:	3c57      	subs	r4, #87	; 0x57
   b7b06:	e7db      	b.n	b7ac0 <_strtol_l.constprop.0+0x78>
   b7b08:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7b0c:	e7e6      	b.n	b7adc <_strtol_l.constprop.0+0x94>
   b7b0e:	f1bc 0f00 	cmp.w	ip, #0
   b7b12:	da05      	bge.n	b7b20 <_strtol_l.constprop.0+0xd8>
   b7b14:	2322      	movs	r3, #34	; 0x22
   b7b16:	6003      	str	r3, [r0, #0]
   b7b18:	4646      	mov	r6, r8
   b7b1a:	b942      	cbnz	r2, b7b2e <_strtol_l.constprop.0+0xe6>
   b7b1c:	4630      	mov	r0, r6
   b7b1e:	e79e      	b.n	b7a5e <_strtol_l.constprop.0+0x16>
   b7b20:	b107      	cbz	r7, b7b24 <_strtol_l.constprop.0+0xdc>
   b7b22:	4276      	negs	r6, r6
   b7b24:	2a00      	cmp	r2, #0
   b7b26:	d0f9      	beq.n	b7b1c <_strtol_l.constprop.0+0xd4>
   b7b28:	f1bc 0f00 	cmp.w	ip, #0
   b7b2c:	d000      	beq.n	b7b30 <_strtol_l.constprop.0+0xe8>
   b7b2e:	1e69      	subs	r1, r5, #1
   b7b30:	6011      	str	r1, [r2, #0]
   b7b32:	e7f3      	b.n	b7b1c <_strtol_l.constprop.0+0xd4>
   b7b34:	2430      	movs	r4, #48	; 0x30
   b7b36:	2b00      	cmp	r3, #0
   b7b38:	d1b1      	bne.n	b7a9e <_strtol_l.constprop.0+0x56>
   b7b3a:	2308      	movs	r3, #8
   b7b3c:	e7af      	b.n	b7a9e <_strtol_l.constprop.0+0x56>
   b7b3e:	2c30      	cmp	r4, #48	; 0x30
   b7b40:	d0a5      	beq.n	b7a8e <_strtol_l.constprop.0+0x46>
   b7b42:	230a      	movs	r3, #10
   b7b44:	e7ab      	b.n	b7a9e <_strtol_l.constprop.0+0x56>
   b7b46:	bf00      	nop
   b7b48:	000b802e 	.word	0x000b802e

000b7b4c <strtol>:
   b7b4c:	4613      	mov	r3, r2
   b7b4e:	460a      	mov	r2, r1
   b7b50:	4601      	mov	r1, r0
   b7b52:	4802      	ldr	r0, [pc, #8]	; (b7b5c <strtol+0x10>)
   b7b54:	6800      	ldr	r0, [r0, #0]
   b7b56:	f7ff bf77 	b.w	b7a48 <_strtol_l.constprop.0>
   b7b5a:	bf00      	nop
   b7b5c:	2003e590 	.word	0x2003e590

000b7b60 <__register_exitproc>:
   b7b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7b64:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7c20 <__register_exitproc+0xc0>
   b7b68:	4606      	mov	r6, r0
   b7b6a:	f8d8 0000 	ldr.w	r0, [r8]
   b7b6e:	461f      	mov	r7, r3
   b7b70:	460d      	mov	r5, r1
   b7b72:	4691      	mov	r9, r2
   b7b74:	f000 f856 	bl	b7c24 <__retarget_lock_acquire_recursive>
   b7b78:	4b25      	ldr	r3, [pc, #148]	; (b7c10 <__register_exitproc+0xb0>)
   b7b7a:	681c      	ldr	r4, [r3, #0]
   b7b7c:	b934      	cbnz	r4, b7b8c <__register_exitproc+0x2c>
   b7b7e:	4c25      	ldr	r4, [pc, #148]	; (b7c14 <__register_exitproc+0xb4>)
   b7b80:	601c      	str	r4, [r3, #0]
   b7b82:	4b25      	ldr	r3, [pc, #148]	; (b7c18 <__register_exitproc+0xb8>)
   b7b84:	b113      	cbz	r3, b7b8c <__register_exitproc+0x2c>
   b7b86:	681b      	ldr	r3, [r3, #0]
   b7b88:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7b8c:	6863      	ldr	r3, [r4, #4]
   b7b8e:	2b1f      	cmp	r3, #31
   b7b90:	dd07      	ble.n	b7ba2 <__register_exitproc+0x42>
   b7b92:	f8d8 0000 	ldr.w	r0, [r8]
   b7b96:	f000 f847 	bl	b7c28 <__retarget_lock_release_recursive>
   b7b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7ba2:	b34e      	cbz	r6, b7bf8 <__register_exitproc+0x98>
   b7ba4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7ba8:	b988      	cbnz	r0, b7bce <__register_exitproc+0x6e>
   b7baa:	4b1c      	ldr	r3, [pc, #112]	; (b7c1c <__register_exitproc+0xbc>)
   b7bac:	b923      	cbnz	r3, b7bb8 <__register_exitproc+0x58>
   b7bae:	f8d8 0000 	ldr.w	r0, [r8]
   b7bb2:	f000 f838 	bl	b7c26 <__retarget_lock_release>
   b7bb6:	e7f0      	b.n	b7b9a <__register_exitproc+0x3a>
   b7bb8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7bbc:	f7fd fbce 	bl	b535c <malloc>
   b7bc0:	2800      	cmp	r0, #0
   b7bc2:	d0f4      	beq.n	b7bae <__register_exitproc+0x4e>
   b7bc4:	2300      	movs	r3, #0
   b7bc6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7bca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7bce:	6863      	ldr	r3, [r4, #4]
   b7bd0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7bd4:	2201      	movs	r2, #1
   b7bd6:	409a      	lsls	r2, r3
   b7bd8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7bdc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7be0:	4313      	orrs	r3, r2
   b7be2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7be6:	2e02      	cmp	r6, #2
   b7be8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7bec:	bf02      	ittt	eq
   b7bee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7bf2:	4313      	orreq	r3, r2
   b7bf4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7bf8:	6863      	ldr	r3, [r4, #4]
   b7bfa:	f8d8 0000 	ldr.w	r0, [r8]
   b7bfe:	1c5a      	adds	r2, r3, #1
   b7c00:	3302      	adds	r3, #2
   b7c02:	6062      	str	r2, [r4, #4]
   b7c04:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7c08:	f000 f80e 	bl	b7c28 <__retarget_lock_release_recursive>
   b7c0c:	2000      	movs	r0, #0
   b7c0e:	e7c6      	b.n	b7b9e <__register_exitproc+0x3e>
   b7c10:	2003e7e8 	.word	0x2003e7e8
   b7c14:	2003e75c 	.word	0x2003e75c
   b7c18:	00000000 	.word	0x00000000
   b7c1c:	000b535d 	.word	0x000b535d
   b7c20:	2003e5f4 	.word	0x2003e5f4

000b7c24 <__retarget_lock_acquire_recursive>:
   b7c24:	4770      	bx	lr

000b7c26 <__retarget_lock_release>:
   b7c26:	4770      	bx	lr

000b7c28 <__retarget_lock_release_recursive>:
   b7c28:	4770      	bx	lr

000b7c2a <link_code_end>:
	...

000b7c2c <dynalib_user>:
   b7c2c:	49a9 000b 49e5 000b 4a0d 000b 4a11 000b     .I...I...J...J..
   b7c3c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7c4c:	7620 7269 7574 6c61 6f00 006e 666f 0066      virtual.on.off.
   b7c5c:	6564 7562 0067 656c 0064 6543 6c6c 6c75     debug.led.Cellul
   b7c6c:	7261 7220 6165 7964 6120 2074 7473 7261     ar ready at star
   b7c7c:	7574 3a70 2520 2066 7473 6572 676e 6874     tup: %f strength
   b7c8c:	6120 646e 2520 2066 7571 6c61 7469 0079      and %f quality.
   b7c9c:	6f6c 6163 496c 3a50 2520 0073 7543 7272     localIP: %s.Curr
   b7cac:	6e65 2074 6162 7474 7265 2079 6f76 746c     ent battery volt
   b7cbc:	6761 3a65 2520 0066                         age: %f.

000b7cc4 <_ZTVN5spark10LogHandlerE>:
	...
   b7cd4:	4a2d 000b 4a55 000b                         -J..UJ..

000b7cdc <_ZTVN5spark16SerialLogHandlerE>:
	...
   b7ce4:	4a85 000b 4ab9 000b 6a2d 000b 6bd1 000b     .J...J..-j...k..

000b7cf4 <_ZTVN5spark13CellularClassE>:
	...
   b7cfc:	549f 000b 5495 000b 548b 000b 5441 000b     .T...T...T..AT..
   b7d0c:	547f 000b 5473 000b 6dbd 000b 6dc5 000b     .T..sT...m...m..
   b7d1c:	5467 000b 545f 000b 5455 000b 544b 000b     gT.._T..UT..KT..
   b7d2c:	6df5 000b                                   .m..

000b7d30 <_ZTV14CellularSignal>:
	...
   b7d38:	552d 000b 5591 000b 552f 000b 55a1 000b     -U...U../U...U..
   b7d48:	55d5 000b 5601 000b 5635 000b 5555 000b     .U...V..5V..UU..
   b7d58:	5533 000b 554f 000b fffc ffff 0000 0000     3U..OU..........
   b7d68:	5589 000b                                   .U..

000b7d6c <_ZTVN5spark13EthernetClassE>:
	...
   b7d74:	5725 000b 571b 000b 5711 000b 5707 000b     %W...W...W...W..
   b7d84:	56fb 000b 56ef 000b 6dbd 000b 6dc5 000b     .V...V...m...m..
   b7d94:	56e3 000b 56db 000b 56d1 000b 56c7 000b     .V...V...V...V..
   b7da4:	6df5 000b                                   .m..

000b7da8 <_ZTV7TwoWire>:
	...
   b7db0:	5849 000b 5893 000b 586b 000b 584b 000b     IX...X..kX..KX..
   b7dc0:	5873 000b 587b 000b 5883 000b 588b 000b     sX..{X...X...X..

000b7dd0 <_ZTV9IPAddress>:
	...
   b7dd8:	5977 000b 5967 000b 5969 000b 6425 2500     wY..gY..iY..%d.%
   b7de8:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
   b7df8:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   b7e08:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   b7e18:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
   b7e28:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   b7e38:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   b7e48:	0a0d 6d00 6c00 006e 6e66 7400 6300 646f     ...m.ln.fn.t.cod
   b7e58:	0065 6564 6174 6c69 0000 0000               e.detail....

000b7e64 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b7e6c:	5e25 000b 5e4b 000b 5e09 000b 5a87 000b     %^..K^...^...Z..

000b7e7c <_ZTVN5spark16StreamLogHandlerE>:
	...
   b7e84:	62d5 000b 62ed 000b 6a2d 000b 6bd1 000b     .b...b..-j...k..

000b7e94 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b7e9c:	6301 000b 6315 000b 6c09 000b 5e11 000b     .c...c...l...^..

000b7eac <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b7eb4:	5e23 000b 5e59 000b 6991 000b 5e13 000b     #^..Y^...i...^..

000b7ec4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b7ecc:	5e21 000b 5e67 000b 623d 000b 5e89 000b     !^..g^..=b...^..

000b7edc <_ZTVN5spark12NetworkClassE>:
	...
   b7ee4:	6d7d 000b 6d87 000b 6d91 000b 6d9b 000b     }m...m...m...m..
   b7ef4:	6da5 000b 6db1 000b 6dbd 000b 6dc5 000b     .m...m...m...m..
   b7f04:	6dcd 000b 6dd9 000b 6de1 000b 6deb 000b     .m...m...m...m..
   b7f14:	6df5 000b 616e 006e 6e69 0066 766f 0066     .m..nan.inf.ovf.
   b7f24:	002e 0000                                   ....

000b7f28 <_ZTV21StringPrintableHelper>:
	...
   b7f30:	7145 000b 7147 000b 72f3 000b 72c5 000b     Eq..Gq...r...r..
   b7f40:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b7f50:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b7f5c <_ZTV11USARTSerial>:
	...
   b7f64:	738d 000b 73f9 000b 73d1 000b 6ee1 000b     .s...s...s...n..
   b7f74:	73a1 000b 73bd 000b 73af 000b 73cb 000b     .s...s...s...s..
   b7f84:	738f 000b 7393 000b                         .s...s..

000b7f8c <_ZTV9USBSerial>:
	...
   b7f94:	744b 000b 74b3 000b 7489 000b 6ee1 000b     Kt...t...t...n..
   b7fa4:	747b 000b 744d 000b 745d 000b 74ad 000b     {t..Mt..]t...t..
   b7fb4:	746d 000b 7445 000b                         mt..Et..

000b7fbc <_ZSt7nothrow>:
   b7fbc:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b7fcc:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b7fdc:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7fec:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7ffc:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b800c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b801c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b802d <_ctype_>:
   b802d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b803d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b804d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b805d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b806d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b807d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b808d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b809d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b80ad:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b812e <link_const_data_end>:
	...

000b8130 <link_constructors_location>:
   b8130:	000b4e01 	.word	0x000b4e01
   b8134:	000b5431 	.word	0x000b5431
   b8138:	000b54fd 	.word	0x000b54fd
   b813c:	000b5731 	.word	0x000b5731
   b8140:	000b6a1d 	.word	0x000b6a1d
   b8144:	000b6ecd 	.word	0x000b6ecd
   b8148:	000b7125 	.word	0x000b7125
   b814c:	000b7355 	.word	0x000b7355
   b8150:	000b7379 	.word	0x000b7379
