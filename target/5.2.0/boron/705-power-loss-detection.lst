
/Users/christopherkosik/Documents/particle_deviceos/705-power-loss-detection/target/5.2.0/boron/705-power-loss-detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004d68  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8d84  000b8d84  00008d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000007c  2003e54c  000b8da8  0000e54c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000228  2003e5c8  2003e5c8  0001e5c8  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000b8e24  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b8e28  000b8e28  00018e28  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b8e2e  000b8e2e  00018e2e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b8e52  000b8e52  00018e52  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00136ffa  00000000  00000000  00018e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001510b  00000000  00000000  0014fe50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003e971  00000000  00000000  00164f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000030b8  00000000  00000000  001a38cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000b330  00000000  00000000  001a6984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003a548  00000000  00000000  001b1cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000449dd  00000000  00000000  001ec1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013b21d  00000000  00000000  00230bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008b74  00000000  00000000  0036bdf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <__aeabi_drsub>:
   b401c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4020:	e002      	b.n	b4028 <__adddf3>
   b4022:	bf00      	nop

000b4024 <__aeabi_dsub>:
   b4024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b4028 <__adddf3>:
   b4028:	b530      	push	{r4, r5, lr}
   b402a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b402e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4032:	ea94 0f05 	teq	r4, r5
   b4036:	bf08      	it	eq
   b4038:	ea90 0f02 	teqeq	r0, r2
   b403c:	bf1f      	itttt	ne
   b403e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4042:	ea55 0c02 	orrsne.w	ip, r5, r2
   b4046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b404e:	f000 80e2 	beq.w	b4216 <__adddf3+0x1ee>
   b4052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b4056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405a:	bfb8      	it	lt
   b405c:	426d      	neglt	r5, r5
   b405e:	dd0c      	ble.n	b407a <__adddf3+0x52>
   b4060:	442c      	add	r4, r5
   b4062:	ea80 0202 	eor.w	r2, r0, r2
   b4066:	ea81 0303 	eor.w	r3, r1, r3
   b406a:	ea82 0000 	eor.w	r0, r2, r0
   b406e:	ea83 0101 	eor.w	r1, r3, r1
   b4072:	ea80 0202 	eor.w	r2, r0, r2
   b4076:	ea81 0303 	eor.w	r3, r1, r3
   b407a:	2d36      	cmp	r5, #54	; 0x36
   b407c:	bf88      	it	hi
   b407e:	bd30      	pophi	{r4, r5, pc}
   b4080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b408c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4090:	d002      	beq.n	b4098 <__adddf3+0x70>
   b4092:	4240      	negs	r0, r0
   b4094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b409c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a4:	d002      	beq.n	b40ac <__adddf3+0x84>
   b40a6:	4252      	negs	r2, r2
   b40a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40ac:	ea94 0f05 	teq	r4, r5
   b40b0:	f000 80a7 	beq.w	b4202 <__adddf3+0x1da>
   b40b4:	f1a4 0401 	sub.w	r4, r4, #1
   b40b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b40bc:	db0d      	blt.n	b40da <__adddf3+0xb2>
   b40be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c2:	fa22 f205 	lsr.w	r2, r2, r5
   b40c6:	1880      	adds	r0, r0, r2
   b40c8:	f141 0100 	adc.w	r1, r1, #0
   b40cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d0:	1880      	adds	r0, r0, r2
   b40d2:	fa43 f305 	asr.w	r3, r3, r5
   b40d6:	4159      	adcs	r1, r3
   b40d8:	e00e      	b.n	b40f8 <__adddf3+0xd0>
   b40da:	f1a5 0520 	sub.w	r5, r5, #32
   b40de:	f10e 0e20 	add.w	lr, lr, #32
   b40e2:	2a01      	cmp	r2, #1
   b40e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40e8:	bf28      	it	cs
   b40ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40ee:	fa43 f305 	asr.w	r3, r3, r5
   b40f2:	18c0      	adds	r0, r0, r3
   b40f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b40fc:	d507      	bpl.n	b410e <__adddf3+0xe6>
   b40fe:	f04f 0e00 	mov.w	lr, #0
   b4102:	f1dc 0c00 	rsbs	ip, ip, #0
   b4106:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410a:	eb6e 0101 	sbc.w	r1, lr, r1
   b410e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4112:	d31b      	bcc.n	b414c <__adddf3+0x124>
   b4114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b4118:	d30c      	bcc.n	b4134 <__adddf3+0x10c>
   b411a:	0849      	lsrs	r1, r1, #1
   b411c:	ea5f 0030 	movs.w	r0, r0, rrx
   b4120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4124:	f104 0401 	add.w	r4, r4, #1
   b4128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b412c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4130:	f080 809a 	bcs.w	b4268 <__adddf3+0x240>
   b4134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4138:	bf08      	it	eq
   b413a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b413e:	f150 0000 	adcs.w	r0, r0, #0
   b4142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4146:	ea41 0105 	orr.w	r1, r1, r5
   b414a:	bd30      	pop	{r4, r5, pc}
   b414c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4150:	4140      	adcs	r0, r0
   b4152:	eb41 0101 	adc.w	r1, r1, r1
   b4156:	3c01      	subs	r4, #1
   b4158:	bf28      	it	cs
   b415a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b415e:	d2e9      	bcs.n	b4134 <__adddf3+0x10c>
   b4160:	f091 0f00 	teq	r1, #0
   b4164:	bf04      	itt	eq
   b4166:	4601      	moveq	r1, r0
   b4168:	2000      	moveq	r0, #0
   b416a:	fab1 f381 	clz	r3, r1
   b416e:	bf08      	it	eq
   b4170:	3320      	addeq	r3, #32
   b4172:	f1a3 030b 	sub.w	r3, r3, #11
   b4176:	f1b3 0220 	subs.w	r2, r3, #32
   b417a:	da0c      	bge.n	b4196 <__adddf3+0x16e>
   b417c:	320c      	adds	r2, #12
   b417e:	dd08      	ble.n	b4192 <__adddf3+0x16a>
   b4180:	f102 0c14 	add.w	ip, r2, #20
   b4184:	f1c2 020c 	rsb	r2, r2, #12
   b4188:	fa01 f00c 	lsl.w	r0, r1, ip
   b418c:	fa21 f102 	lsr.w	r1, r1, r2
   b4190:	e00c      	b.n	b41ac <__adddf3+0x184>
   b4192:	f102 0214 	add.w	r2, r2, #20
   b4196:	bfd8      	it	le
   b4198:	f1c2 0c20 	rsble	ip, r2, #32
   b419c:	fa01 f102 	lsl.w	r1, r1, r2
   b41a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a4:	bfdc      	itt	le
   b41a6:	ea41 010c 	orrle.w	r1, r1, ip
   b41aa:	4090      	lslle	r0, r2
   b41ac:	1ae4      	subs	r4, r4, r3
   b41ae:	bfa2      	ittt	ge
   b41b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b4:	4329      	orrge	r1, r5
   b41b6:	bd30      	popge	{r4, r5, pc}
   b41b8:	ea6f 0404 	mvn.w	r4, r4
   b41bc:	3c1f      	subs	r4, #31
   b41be:	da1c      	bge.n	b41fa <__adddf3+0x1d2>
   b41c0:	340c      	adds	r4, #12
   b41c2:	dc0e      	bgt.n	b41e2 <__adddf3+0x1ba>
   b41c4:	f104 0414 	add.w	r4, r4, #20
   b41c8:	f1c4 0220 	rsb	r2, r4, #32
   b41cc:	fa20 f004 	lsr.w	r0, r0, r4
   b41d0:	fa01 f302 	lsl.w	r3, r1, r2
   b41d4:	ea40 0003 	orr.w	r0, r0, r3
   b41d8:	fa21 f304 	lsr.w	r3, r1, r4
   b41dc:	ea45 0103 	orr.w	r1, r5, r3
   b41e0:	bd30      	pop	{r4, r5, pc}
   b41e2:	f1c4 040c 	rsb	r4, r4, #12
   b41e6:	f1c4 0220 	rsb	r2, r4, #32
   b41ea:	fa20 f002 	lsr.w	r0, r0, r2
   b41ee:	fa01 f304 	lsl.w	r3, r1, r4
   b41f2:	ea40 0003 	orr.w	r0, r0, r3
   b41f6:	4629      	mov	r1, r5
   b41f8:	bd30      	pop	{r4, r5, pc}
   b41fa:	fa21 f004 	lsr.w	r0, r1, r4
   b41fe:	4629      	mov	r1, r5
   b4200:	bd30      	pop	{r4, r5, pc}
   b4202:	f094 0f00 	teq	r4, #0
   b4206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420a:	bf06      	itte	eq
   b420c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4210:	3401      	addeq	r4, #1
   b4212:	3d01      	subne	r5, #1
   b4214:	e74e      	b.n	b40b4 <__adddf3+0x8c>
   b4216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421a:	bf18      	it	ne
   b421c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4220:	d029      	beq.n	b4276 <__adddf3+0x24e>
   b4222:	ea94 0f05 	teq	r4, r5
   b4226:	bf08      	it	eq
   b4228:	ea90 0f02 	teqeq	r0, r2
   b422c:	d005      	beq.n	b423a <__adddf3+0x212>
   b422e:	ea54 0c00 	orrs.w	ip, r4, r0
   b4232:	bf04      	itt	eq
   b4234:	4619      	moveq	r1, r3
   b4236:	4610      	moveq	r0, r2
   b4238:	bd30      	pop	{r4, r5, pc}
   b423a:	ea91 0f03 	teq	r1, r3
   b423e:	bf1e      	ittt	ne
   b4240:	2100      	movne	r1, #0
   b4242:	2000      	movne	r0, #0
   b4244:	bd30      	popne	{r4, r5, pc}
   b4246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424a:	d105      	bne.n	b4258 <__adddf3+0x230>
   b424c:	0040      	lsls	r0, r0, #1
   b424e:	4149      	adcs	r1, r1
   b4250:	bf28      	it	cs
   b4252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b4256:	bd30      	pop	{r4, r5, pc}
   b4258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b425c:	bf3c      	itt	cc
   b425e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4262:	bd30      	popcc	{r4, r5, pc}
   b4264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4270:	f04f 0000 	mov.w	r0, #0
   b4274:	bd30      	pop	{r4, r5, pc}
   b4276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427a:	bf1a      	itte	ne
   b427c:	4619      	movne	r1, r3
   b427e:	4610      	movne	r0, r2
   b4280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4284:	bf1c      	itt	ne
   b4286:	460b      	movne	r3, r1
   b4288:	4602      	movne	r2, r0
   b428a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b428e:	bf06      	itte	eq
   b4290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4294:	ea91 0f03 	teqeq	r1, r3
   b4298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b429c:	bd30      	pop	{r4, r5, pc}
   b429e:	bf00      	nop

000b42a0 <__aeabi_ui2d>:
   b42a0:	f090 0f00 	teq	r0, #0
   b42a4:	bf04      	itt	eq
   b42a6:	2100      	moveq	r1, #0
   b42a8:	4770      	bxeq	lr
   b42aa:	b530      	push	{r4, r5, lr}
   b42ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b4:	f04f 0500 	mov.w	r5, #0
   b42b8:	f04f 0100 	mov.w	r1, #0
   b42bc:	e750      	b.n	b4160 <__adddf3+0x138>
   b42be:	bf00      	nop

000b42c0 <__aeabi_i2d>:
   b42c0:	f090 0f00 	teq	r0, #0
   b42c4:	bf04      	itt	eq
   b42c6:	2100      	moveq	r1, #0
   b42c8:	4770      	bxeq	lr
   b42ca:	b530      	push	{r4, r5, lr}
   b42cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42d8:	bf48      	it	mi
   b42da:	4240      	negmi	r0, r0
   b42dc:	f04f 0100 	mov.w	r1, #0
   b42e0:	e73e      	b.n	b4160 <__adddf3+0x138>
   b42e2:	bf00      	nop

000b42e4 <__aeabi_f2d>:
   b42e4:	0042      	lsls	r2, r0, #1
   b42e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b42ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f2:	bf1f      	itttt	ne
   b42f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b42fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4300:	4770      	bxne	lr
   b4302:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b4306:	bf08      	it	eq
   b4308:	4770      	bxeq	lr
   b430a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b430e:	bf04      	itt	eq
   b4310:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4314:	4770      	bxeq	lr
   b4316:	b530      	push	{r4, r5, lr}
   b4318:	f44f 7460 	mov.w	r4, #896	; 0x380
   b431c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4324:	e71c      	b.n	b4160 <__adddf3+0x138>
   b4326:	bf00      	nop

000b4328 <__aeabi_ul2d>:
   b4328:	ea50 0201 	orrs.w	r2, r0, r1
   b432c:	bf08      	it	eq
   b432e:	4770      	bxeq	lr
   b4330:	b530      	push	{r4, r5, lr}
   b4332:	f04f 0500 	mov.w	r5, #0
   b4336:	e00a      	b.n	b434e <__aeabi_l2d+0x16>

000b4338 <__aeabi_l2d>:
   b4338:	ea50 0201 	orrs.w	r2, r0, r1
   b433c:	bf08      	it	eq
   b433e:	4770      	bxeq	lr
   b4340:	b530      	push	{r4, r5, lr}
   b4342:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b4346:	d502      	bpl.n	b434e <__aeabi_l2d+0x16>
   b4348:	4240      	negs	r0, r0
   b434a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b434e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4352:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b4356:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435a:	f43f aed8 	beq.w	b410e <__adddf3+0xe6>
   b435e:	f04f 0203 	mov.w	r2, #3
   b4362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4366:	bf18      	it	ne
   b4368:	3203      	addne	r2, #3
   b436a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436e:	bf18      	it	ne
   b4370:	3203      	addne	r2, #3
   b4372:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b4376:	f1c2 0320 	rsb	r3, r2, #32
   b437a:	fa00 fc03 	lsl.w	ip, r0, r3
   b437e:	fa20 f002 	lsr.w	r0, r0, r2
   b4382:	fa01 fe03 	lsl.w	lr, r1, r3
   b4386:	ea40 000e 	orr.w	r0, r0, lr
   b438a:	fa21 f102 	lsr.w	r1, r1, r2
   b438e:	4414      	add	r4, r2
   b4390:	e6bd      	b.n	b410e <__adddf3+0xe6>
   b4392:	bf00      	nop

000b4394 <__aeabi_dmul>:
   b4394:	b570      	push	{r4, r5, r6, lr}
   b4396:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b439e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a2:	bf1d      	ittte	ne
   b43a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43a8:	ea94 0f0c 	teqne	r4, ip
   b43ac:	ea95 0f0c 	teqne	r5, ip
   b43b0:	f000 f8de 	bleq	b4570 <__aeabi_dmul+0x1dc>
   b43b4:	442c      	add	r4, r5
   b43b6:	ea81 0603 	eor.w	r6, r1, r3
   b43ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43c6:	bf18      	it	ne
   b43c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d4:	d038      	beq.n	b4448 <__aeabi_dmul+0xb4>
   b43d6:	fba0 ce02 	umull	ip, lr, r0, r2
   b43da:	f04f 0500 	mov.w	r5, #0
   b43de:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ea:	f04f 0600 	mov.w	r6, #0
   b43ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f2:	f09c 0f00 	teq	ip, #0
   b43f6:	bf18      	it	ne
   b43f8:	f04e 0e01 	orrne.w	lr, lr, #1
   b43fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4400:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4404:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b4408:	d204      	bcs.n	b4414 <__aeabi_dmul+0x80>
   b440a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b440e:	416d      	adcs	r5, r5
   b4410:	eb46 0606 	adc.w	r6, r6, r6
   b4414:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b4418:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b441c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4420:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4424:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b4428:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b442c:	bf88      	it	hi
   b442e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4432:	d81e      	bhi.n	b4472 <__aeabi_dmul+0xde>
   b4434:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b4438:	bf08      	it	eq
   b443a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b443e:	f150 0000 	adcs.w	r0, r0, #0
   b4442:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4446:	bd70      	pop	{r4, r5, r6, pc}
   b4448:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b444c:	ea46 0101 	orr.w	r1, r6, r1
   b4450:	ea40 0002 	orr.w	r0, r0, r2
   b4454:	ea81 0103 	eor.w	r1, r1, r3
   b4458:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b445c:	bfc2      	ittt	gt
   b445e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4462:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4466:	bd70      	popgt	{r4, r5, r6, pc}
   b4468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b446c:	f04f 0e00 	mov.w	lr, #0
   b4470:	3c01      	subs	r4, #1
   b4472:	f300 80ab 	bgt.w	b45cc <__aeabi_dmul+0x238>
   b4476:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447a:	bfde      	ittt	le
   b447c:	2000      	movle	r0, #0
   b447e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4482:	bd70      	pople	{r4, r5, r6, pc}
   b4484:	f1c4 0400 	rsb	r4, r4, #0
   b4488:	3c20      	subs	r4, #32
   b448a:	da35      	bge.n	b44f8 <__aeabi_dmul+0x164>
   b448c:	340c      	adds	r4, #12
   b448e:	dc1b      	bgt.n	b44c8 <__aeabi_dmul+0x134>
   b4490:	f104 0414 	add.w	r4, r4, #20
   b4494:	f1c4 0520 	rsb	r5, r4, #32
   b4498:	fa00 f305 	lsl.w	r3, r0, r5
   b449c:	fa20 f004 	lsr.w	r0, r0, r4
   b44a0:	fa01 f205 	lsl.w	r2, r1, r5
   b44a4:	ea40 0002 	orr.w	r0, r0, r2
   b44a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b4:	fa21 f604 	lsr.w	r6, r1, r4
   b44b8:	eb42 0106 	adc.w	r1, r2, r6
   b44bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c0:	bf08      	it	eq
   b44c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44c6:	bd70      	pop	{r4, r5, r6, pc}
   b44c8:	f1c4 040c 	rsb	r4, r4, #12
   b44cc:	f1c4 0520 	rsb	r5, r4, #32
   b44d0:	fa00 f304 	lsl.w	r3, r0, r4
   b44d4:	fa20 f005 	lsr.w	r0, r0, r5
   b44d8:	fa01 f204 	lsl.w	r2, r1, r4
   b44dc:	ea40 0002 	orr.w	r0, r0, r2
   b44e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44e8:	f141 0100 	adc.w	r1, r1, #0
   b44ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f0:	bf08      	it	eq
   b44f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44f6:	bd70      	pop	{r4, r5, r6, pc}
   b44f8:	f1c4 0520 	rsb	r5, r4, #32
   b44fc:	fa00 f205 	lsl.w	r2, r0, r5
   b4500:	ea4e 0e02 	orr.w	lr, lr, r2
   b4504:	fa20 f304 	lsr.w	r3, r0, r4
   b4508:	fa01 f205 	lsl.w	r2, r1, r5
   b450c:	ea43 0302 	orr.w	r3, r3, r2
   b4510:	fa21 f004 	lsr.w	r0, r1, r4
   b4514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4518:	fa21 f204 	lsr.w	r2, r1, r4
   b451c:	ea20 0002 	bic.w	r0, r0, r2
   b4520:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4524:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b4528:	bf08      	it	eq
   b452a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b452e:	bd70      	pop	{r4, r5, r6, pc}
   b4530:	f094 0f00 	teq	r4, #0
   b4534:	d10f      	bne.n	b4556 <__aeabi_dmul+0x1c2>
   b4536:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453a:	0040      	lsls	r0, r0, #1
   b453c:	eb41 0101 	adc.w	r1, r1, r1
   b4540:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4544:	bf08      	it	eq
   b4546:	3c01      	subeq	r4, #1
   b4548:	d0f7      	beq.n	b453a <__aeabi_dmul+0x1a6>
   b454a:	ea41 0106 	orr.w	r1, r1, r6
   b454e:	f095 0f00 	teq	r5, #0
   b4552:	bf18      	it	ne
   b4554:	4770      	bxne	lr
   b4556:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455a:	0052      	lsls	r2, r2, #1
   b455c:	eb43 0303 	adc.w	r3, r3, r3
   b4560:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4564:	bf08      	it	eq
   b4566:	3d01      	subeq	r5, #1
   b4568:	d0f7      	beq.n	b455a <__aeabi_dmul+0x1c6>
   b456a:	ea43 0306 	orr.w	r3, r3, r6
   b456e:	4770      	bx	lr
   b4570:	ea94 0f0c 	teq	r4, ip
   b4574:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b4578:	bf18      	it	ne
   b457a:	ea95 0f0c 	teqne	r5, ip
   b457e:	d00c      	beq.n	b459a <__aeabi_dmul+0x206>
   b4580:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4584:	bf18      	it	ne
   b4586:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458a:	d1d1      	bne.n	b4530 <__aeabi_dmul+0x19c>
   b458c:	ea81 0103 	eor.w	r1, r1, r3
   b4590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4594:	f04f 0000 	mov.w	r0, #0
   b4598:	bd70      	pop	{r4, r5, r6, pc}
   b459a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b459e:	bf06      	itte	eq
   b45a0:	4610      	moveq	r0, r2
   b45a2:	4619      	moveq	r1, r3
   b45a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45a8:	d019      	beq.n	b45de <__aeabi_dmul+0x24a>
   b45aa:	ea94 0f0c 	teq	r4, ip
   b45ae:	d102      	bne.n	b45b6 <__aeabi_dmul+0x222>
   b45b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b4:	d113      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45b6:	ea95 0f0c 	teq	r5, ip
   b45ba:	d105      	bne.n	b45c8 <__aeabi_dmul+0x234>
   b45bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c0:	bf1c      	itt	ne
   b45c2:	4610      	movne	r0, r2
   b45c4:	4619      	movne	r1, r3
   b45c6:	d10a      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45c8:	ea81 0103 	eor.w	r1, r1, r3
   b45cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45d8:	f04f 0000 	mov.w	r0, #0
   b45dc:	bd70      	pop	{r4, r5, r6, pc}
   b45de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45e6:	bd70      	pop	{r4, r5, r6, pc}

000b45e8 <__aeabi_ddiv>:
   b45e8:	b570      	push	{r4, r5, r6, lr}
   b45ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45f6:	bf1d      	ittte	ne
   b45f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b45fc:	ea94 0f0c 	teqne	r4, ip
   b4600:	ea95 0f0c 	teqne	r5, ip
   b4604:	f000 f8a7 	bleq	b4756 <__aeabi_ddiv+0x16e>
   b4608:	eba4 0405 	sub.w	r4, r4, r5
   b460c:	ea81 0e03 	eor.w	lr, r1, r3
   b4610:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4614:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4618:	f000 8088 	beq.w	b472c <__aeabi_ddiv+0x144>
   b461c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4620:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4624:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b4628:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b462c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4630:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4634:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b4638:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b463c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4640:	429d      	cmp	r5, r3
   b4642:	bf08      	it	eq
   b4644:	4296      	cmpeq	r6, r2
   b4646:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b464e:	d202      	bcs.n	b4656 <__aeabi_ddiv+0x6e>
   b4650:	085b      	lsrs	r3, r3, #1
   b4652:	ea4f 0232 	mov.w	r2, r2, rrx
   b4656:	1ab6      	subs	r6, r6, r2
   b4658:	eb65 0503 	sbc.w	r5, r5, r3
   b465c:	085b      	lsrs	r3, r3, #1
   b465e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4662:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b4666:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466a:	ebb6 0e02 	subs.w	lr, r6, r2
   b466e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4672:	bf22      	ittt	cs
   b4674:	1ab6      	subcs	r6, r6, r2
   b4676:	4675      	movcs	r5, lr
   b4678:	ea40 000c 	orrcs.w	r0, r0, ip
   b467c:	085b      	lsrs	r3, r3, #1
   b467e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4682:	ebb6 0e02 	subs.w	lr, r6, r2
   b4686:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468a:	bf22      	ittt	cs
   b468c:	1ab6      	subcs	r6, r6, r2
   b468e:	4675      	movcs	r5, lr
   b4690:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4694:	085b      	lsrs	r3, r3, #1
   b4696:	ea4f 0232 	mov.w	r2, r2, rrx
   b469a:	ebb6 0e02 	subs.w	lr, r6, r2
   b469e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a2:	bf22      	ittt	cs
   b46a4:	1ab6      	subcs	r6, r6, r2
   b46a6:	4675      	movcs	r5, lr
   b46a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46ac:	085b      	lsrs	r3, r3, #1
   b46ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b46b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46ba:	bf22      	ittt	cs
   b46bc:	1ab6      	subcs	r6, r6, r2
   b46be:	4675      	movcs	r5, lr
   b46c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c4:	ea55 0e06 	orrs.w	lr, r5, r6
   b46c8:	d018      	beq.n	b46fc <__aeabi_ddiv+0x114>
   b46ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46e6:	d1c0      	bne.n	b466a <__aeabi_ddiv+0x82>
   b46e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46ec:	d10b      	bne.n	b4706 <__aeabi_ddiv+0x11e>
   b46ee:	ea41 0100 	orr.w	r1, r1, r0
   b46f2:	f04f 0000 	mov.w	r0, #0
   b46f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fa:	e7b6      	b.n	b466a <__aeabi_ddiv+0x82>
   b46fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4700:	bf04      	itt	eq
   b4702:	4301      	orreq	r1, r0
   b4704:	2000      	moveq	r0, #0
   b4706:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470a:	bf88      	it	hi
   b470c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4710:	f63f aeaf 	bhi.w	b4472 <__aeabi_dmul+0xde>
   b4714:	ebb5 0c03 	subs.w	ip, r5, r3
   b4718:	bf04      	itt	eq
   b471a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b471e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4722:	f150 0000 	adcs.w	r0, r0, #0
   b4726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472a:	bd70      	pop	{r4, r5, r6, pc}
   b472c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4730:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4734:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b4738:	bfc2      	ittt	gt
   b473a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b473e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4742:	bd70      	popgt	{r4, r5, r6, pc}
   b4744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4748:	f04f 0e00 	mov.w	lr, #0
   b474c:	3c01      	subs	r4, #1
   b474e:	e690      	b.n	b4472 <__aeabi_dmul+0xde>
   b4750:	ea45 0e06 	orr.w	lr, r5, r6
   b4754:	e68d      	b.n	b4472 <__aeabi_dmul+0xde>
   b4756:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475a:	ea94 0f0c 	teq	r4, ip
   b475e:	bf08      	it	eq
   b4760:	ea95 0f0c 	teqeq	r5, ip
   b4764:	f43f af3b 	beq.w	b45de <__aeabi_dmul+0x24a>
   b4768:	ea94 0f0c 	teq	r4, ip
   b476c:	d10a      	bne.n	b4784 <__aeabi_ddiv+0x19c>
   b476e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4772:	f47f af34 	bne.w	b45de <__aeabi_dmul+0x24a>
   b4776:	ea95 0f0c 	teq	r5, ip
   b477a:	f47f af25 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b477e:	4610      	mov	r0, r2
   b4780:	4619      	mov	r1, r3
   b4782:	e72c      	b.n	b45de <__aeabi_dmul+0x24a>
   b4784:	ea95 0f0c 	teq	r5, ip
   b4788:	d106      	bne.n	b4798 <__aeabi_ddiv+0x1b0>
   b478a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b478e:	f43f aefd 	beq.w	b458c <__aeabi_dmul+0x1f8>
   b4792:	4610      	mov	r0, r2
   b4794:	4619      	mov	r1, r3
   b4796:	e722      	b.n	b45de <__aeabi_dmul+0x24a>
   b4798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b479c:	bf18      	it	ne
   b479e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a2:	f47f aec5 	bne.w	b4530 <__aeabi_dmul+0x19c>
   b47a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47aa:	f47f af0d 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b47ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b2:	f47f aeeb 	bne.w	b458c <__aeabi_dmul+0x1f8>
   b47b6:	e712      	b.n	b45de <__aeabi_dmul+0x24a>

000b47b8 <__gedf2>:
   b47b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47bc:	e006      	b.n	b47cc <__cmpdf2+0x4>
   b47be:	bf00      	nop

000b47c0 <__ledf2>:
   b47c0:	f04f 0c01 	mov.w	ip, #1
   b47c4:	e002      	b.n	b47cc <__cmpdf2+0x4>
   b47c6:	bf00      	nop

000b47c8 <__cmpdf2>:
   b47c8:	f04f 0c01 	mov.w	ip, #1
   b47cc:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47dc:	bf18      	it	ne
   b47de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e2:	d01b      	beq.n	b481c <__cmpdf2+0x54>
   b47e4:	b001      	add	sp, #4
   b47e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ea:	bf0c      	ite	eq
   b47ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f0:	ea91 0f03 	teqne	r1, r3
   b47f4:	bf02      	ittt	eq
   b47f6:	ea90 0f02 	teqeq	r0, r2
   b47fa:	2000      	moveq	r0, #0
   b47fc:	4770      	bxeq	lr
   b47fe:	f110 0f00 	cmn.w	r0, #0
   b4802:	ea91 0f03 	teq	r1, r3
   b4806:	bf58      	it	pl
   b4808:	4299      	cmppl	r1, r3
   b480a:	bf08      	it	eq
   b480c:	4290      	cmpeq	r0, r2
   b480e:	bf2c      	ite	cs
   b4810:	17d8      	asrcs	r0, r3, #31
   b4812:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b4816:	f040 0001 	orr.w	r0, r0, #1
   b481a:	4770      	bx	lr
   b481c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4824:	d102      	bne.n	b482c <__cmpdf2+0x64>
   b4826:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482a:	d107      	bne.n	b483c <__cmpdf2+0x74>
   b482c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4834:	d1d6      	bne.n	b47e4 <__cmpdf2+0x1c>
   b4836:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483a:	d0d3      	beq.n	b47e4 <__cmpdf2+0x1c>
   b483c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4840:	4770      	bx	lr
   b4842:	bf00      	nop

000b4844 <__aeabi_cdrcmple>:
   b4844:	4684      	mov	ip, r0
   b4846:	4610      	mov	r0, r2
   b4848:	4662      	mov	r2, ip
   b484a:	468c      	mov	ip, r1
   b484c:	4619      	mov	r1, r3
   b484e:	4663      	mov	r3, ip
   b4850:	e000      	b.n	b4854 <__aeabi_cdcmpeq>
   b4852:	bf00      	nop

000b4854 <__aeabi_cdcmpeq>:
   b4854:	b501      	push	{r0, lr}
   b4856:	f7ff ffb7 	bl	b47c8 <__cmpdf2>
   b485a:	2800      	cmp	r0, #0
   b485c:	bf48      	it	mi
   b485e:	f110 0f00 	cmnmi.w	r0, #0
   b4862:	bd01      	pop	{r0, pc}

000b4864 <__aeabi_dcmpeq>:
   b4864:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4868:	f7ff fff4 	bl	b4854 <__aeabi_cdcmpeq>
   b486c:	bf0c      	ite	eq
   b486e:	2001      	moveq	r0, #1
   b4870:	2000      	movne	r0, #0
   b4872:	f85d fb08 	ldr.w	pc, [sp], #8
   b4876:	bf00      	nop

000b4878 <__aeabi_dcmplt>:
   b4878:	f84d ed08 	str.w	lr, [sp, #-8]!
   b487c:	f7ff ffea 	bl	b4854 <__aeabi_cdcmpeq>
   b4880:	bf34      	ite	cc
   b4882:	2001      	movcc	r0, #1
   b4884:	2000      	movcs	r0, #0
   b4886:	f85d fb08 	ldr.w	pc, [sp], #8
   b488a:	bf00      	nop

000b488c <__aeabi_dcmple>:
   b488c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4890:	f7ff ffe0 	bl	b4854 <__aeabi_cdcmpeq>
   b4894:	bf94      	ite	ls
   b4896:	2001      	movls	r0, #1
   b4898:	2000      	movhi	r0, #0
   b489a:	f85d fb08 	ldr.w	pc, [sp], #8
   b489e:	bf00      	nop

000b48a0 <__aeabi_dcmpge>:
   b48a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a4:	f7ff ffce 	bl	b4844 <__aeabi_cdrcmple>
   b48a8:	bf94      	ite	ls
   b48aa:	2001      	movls	r0, #1
   b48ac:	2000      	movhi	r0, #0
   b48ae:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b2:	bf00      	nop

000b48b4 <__aeabi_dcmpgt>:
   b48b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48b8:	f7ff ffc4 	bl	b4844 <__aeabi_cdrcmple>
   b48bc:	bf34      	ite	cc
   b48be:	2001      	movcc	r0, #1
   b48c0:	2000      	movcs	r0, #0
   b48c2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48c6:	bf00      	nop

000b48c8 <__aeabi_dcmpun>:
   b48c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d0:	d102      	bne.n	b48d8 <__aeabi_dcmpun+0x10>
   b48d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48d6:	d10a      	bne.n	b48ee <__aeabi_dcmpun+0x26>
   b48d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e0:	d102      	bne.n	b48e8 <__aeabi_dcmpun+0x20>
   b48e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48e6:	d102      	bne.n	b48ee <__aeabi_dcmpun+0x26>
   b48e8:	f04f 0000 	mov.w	r0, #0
   b48ec:	4770      	bx	lr
   b48ee:	f04f 0001 	mov.w	r0, #1
   b48f2:	4770      	bx	lr

000b48f4 <__aeabi_d2iz>:
   b48f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48fc:	d215      	bcs.n	b492a <__aeabi_d2iz+0x36>
   b48fe:	d511      	bpl.n	b4924 <__aeabi_d2iz+0x30>
   b4900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4908:	d912      	bls.n	b4930 <__aeabi_d2iz+0x3c>
   b490a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b490e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b4916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491a:	fa23 f002 	lsr.w	r0, r3, r2
   b491e:	bf18      	it	ne
   b4920:	4240      	negne	r0, r0
   b4922:	4770      	bx	lr
   b4924:	f04f 0000 	mov.w	r0, #0
   b4928:	4770      	bx	lr
   b492a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b492e:	d105      	bne.n	b493c <__aeabi_d2iz+0x48>
   b4930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4934:	bf08      	it	eq
   b4936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493a:	4770      	bx	lr
   b493c:	f04f 0000 	mov.w	r0, #0
   b4940:	4770      	bx	lr
   b4942:	bf00      	nop

000b4944 <__aeabi_d2uiz>:
   b4944:	004a      	lsls	r2, r1, #1
   b4946:	d211      	bcs.n	b496c <__aeabi_d2uiz+0x28>
   b4948:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b494c:	d211      	bcs.n	b4972 <__aeabi_d2uiz+0x2e>
   b494e:	d50d      	bpl.n	b496c <__aeabi_d2uiz+0x28>
   b4950:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4958:	d40e      	bmi.n	b4978 <__aeabi_d2uiz+0x34>
   b495a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b495e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b4966:	fa23 f002 	lsr.w	r0, r3, r2
   b496a:	4770      	bx	lr
   b496c:	f04f 0000 	mov.w	r0, #0
   b4970:	4770      	bx	lr
   b4972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4976:	d102      	bne.n	b497e <__aeabi_d2uiz+0x3a>
   b4978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b497c:	4770      	bx	lr
   b497e:	f04f 0000 	mov.w	r0, #0
   b4982:	4770      	bx	lr

000b4984 <strcmp>:
   b4984:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4988:	f811 3b01 	ldrb.w	r3, [r1], #1
   b498c:	2a01      	cmp	r2, #1
   b498e:	bf28      	it	cs
   b4990:	429a      	cmpcs	r2, r3
   b4992:	d0f7      	beq.n	b4984 <strcmp>
   b4994:	1ad0      	subs	r0, r2, r3
   b4996:	4770      	bx	lr

000b4998 <strlen>:
   b4998:	4603      	mov	r3, r0
   b499a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b499e:	2a00      	cmp	r2, #0
   b49a0:	d1fb      	bne.n	b499a <strlen+0x2>
   b49a2:	1a18      	subs	r0, r3, r0
   b49a4:	3801      	subs	r0, #1
   b49a6:	4770      	bx	lr

000b49a8 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49a8:	4809      	ldr	r0, [pc, #36]	; (b49d0 <module_user_pre_init+0x28>)
   b49aa:	490a      	ldr	r1, [pc, #40]	; (b49d4 <module_user_pre_init+0x2c>)
   b49ac:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b49ae:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49b0:	d005      	beq.n	b49be <module_user_pre_init+0x16>
   b49b2:	4a09      	ldr	r2, [pc, #36]	; (b49d8 <module_user_pre_init+0x30>)
   b49b4:	4282      	cmp	r2, r0
   b49b6:	d002      	beq.n	b49be <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b49b8:	1a12      	subs	r2, r2, r0
   b49ba:	f003 fd25 	bl	b8408 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b49be:	4807      	ldr	r0, [pc, #28]	; (b49dc <module_user_pre_init+0x34>)
   b49c0:	4a07      	ldr	r2, [pc, #28]	; (b49e0 <module_user_pre_init+0x38>)
   b49c2:	2100      	movs	r1, #0
   b49c4:	1a12      	subs	r2, r2, r0
   b49c6:	f003 fd47 	bl	b8458 <memset>
    return &link_global_data_start;
}
   b49ca:	4801      	ldr	r0, [pc, #4]	; (b49d0 <module_user_pre_init+0x28>)
   b49cc:	bd08      	pop	{r3, pc}
   b49ce:	bf00      	nop
   b49d0:	2003e54c 	.word	0x2003e54c
   b49d4:	000b8da8 	.word	0x000b8da8
   b49d8:	2003e5c8 	.word	0x2003e5c8
   b49dc:	2003e5c8 	.word	0x2003e5c8
   b49e0:	2003e7f0 	.word	0x2003e7f0

000b49e4 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b49e4:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49e6:	4e07      	ldr	r6, [pc, #28]	; (b4a04 <module_user_init+0x20>)
   b49e8:	4c07      	ldr	r4, [pc, #28]	; (b4a08 <module_user_init+0x24>)
    module_user_init_hook();
   b49ea:	f003 fb9f 	bl	b812c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49ee:	1ba4      	subs	r4, r4, r6
   b49f0:	08a4      	lsrs	r4, r4, #2
   b49f2:	2500      	movs	r5, #0
   b49f4:	42ac      	cmp	r4, r5
   b49f6:	d100      	bne.n	b49fa <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b49f8:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b49fa:	f856 3b04 	ldr.w	r3, [r6], #4
   b49fe:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a00:	3501      	adds	r5, #1
   b4a02:	e7f7      	b.n	b49f4 <module_user_init+0x10>
   b4a04:	000b8d60 	.word	0x000b8d60
   b4a08:	000b8d84 	.word	0x000b8d84

000b4a0c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4a0c:	f000 b876 	b.w	b4afc <setup>

000b4a10 <module_user_loop>:
}

void module_user_loop() {
   b4a10:	b508      	push	{r3, lr}
    loop();
   b4a12:	f000 fb47 	bl	b50a4 <loop>
    _post_loop();
}
   b4a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4a1a:	f003 bb3f 	b.w	b809c <_post_loop>

000b4a1e <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4a1e:	f000 bf11 	b.w	b5844 <malloc>

000b4a22 <_Znaj>:
   b4a22:	f000 bf0f 	b.w	b5844 <malloc>

000b4a26 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4a26:	f000 bf15 	b.w	b5854 <free>
	...

000b4a2c <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4a2c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4a2e:	4a03      	ldr	r2, [pc, #12]	; (b4a3c <__cxa_pure_virtual+0x10>)
   b4a30:	4903      	ldr	r1, [pc, #12]	; (b4a40 <__cxa_pure_virtual+0x14>)
   b4a32:	200c      	movs	r0, #12
   b4a34:	f000 fe00 	bl	b5638 <panic_>
  while (1);
   b4a38:	e7fe      	b.n	b4a38 <__cxa_pure_virtual+0xc>
   b4a3a:	bf00      	nop
   b4a3c:	000b53b9 	.word	0x000b53b9
   b4a40:	000b8788 	.word	0x000b8788

000b4a44 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4a44:	7800      	ldrb	r0, [r0, #0]
   b4a46:	fab0 f080 	clz	r0, r0
   b4a4a:	0940      	lsrs	r0, r0, #5
   b4a4c:	4770      	bx	lr

000b4a4e <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4a4e:	2301      	movs	r3, #1
   b4a50:	7003      	strb	r3, [r0, #0]
   b4a52:	4770      	bx	lr

000b4a54 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b4a54:	4770      	bx	lr
	...

000b4a58 <_Z9ledToggle6String>:
}

/*
  Example "Particle" cloud event handler function. We use the standard connotation for return value success or failures.
*/
int ledToggle(String command) {
   b4a58:	b510      	push	{r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4a5a:	4908      	ldr	r1, [pc, #32]	; (b4a7c <_Z9ledToggle6String+0x24>)
   b4a5c:	4604      	mov	r4, r0
   b4a5e:	f003 f9a7 	bl	b7db0 <_ZNK6String6equalsEPKc>
    Then, the function returns a value to us to let us know what happened.
    In this case, it will return 1 for the LEDs turning on, 0 for the LEDs turning off,
    and -1 if we received a totally bogus command that didn't do anything to the LEDs.
    */

    if (command=="on") {
   b4a62:	b940      	cbnz	r0, b4a76 <_Z9ledToggle6String+0x1e>
   b4a64:	4906      	ldr	r1, [pc, #24]	; (b4a80 <_Z9ledToggle6String+0x28>)
   b4a66:	4620      	mov	r0, r4
   b4a68:	f003 f9a2 	bl	b7db0 <_ZNK6String6equalsEPKc>
        //digitalWrite(led1,HIGH);
        //digitalWrite(led2,HIGH);
        return 1;
    }
    else if (command=="off") {
   b4a6c:	fab0 f080 	clz	r0, r0
   b4a70:	0940      	lsrs	r0, r0, #5
   b4a72:	4240      	negs	r0, r0
        return 0;
    }
    else {
        return -1;
    }
}
   b4a74:	bd10      	pop	{r4, pc}
        return 1;
   b4a76:	2001      	movs	r0, #1
   b4a78:	e7fc      	b.n	b4a74 <_Z9ledToggle6String+0x1c>
   b4a7a:	bf00      	nop
   b4a7c:	000b879d 	.word	0x000b879d
   b4a80:	000b87a0 	.word	0x000b87a0

000b4a84 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4a84:	4b0a      	ldr	r3, [pc, #40]	; (b4ab0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4a86:	b510      	push	{r4, lr}
   b4a88:	4604      	mov	r4, r0
   b4a8a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4a8c:	f002 f882 	bl	b6b94 <_ZN5spark10LogManager8instanceEv>
   b4a90:	4621      	mov	r1, r4
   b4a92:	f002 faba 	bl	b700a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4a96:	f003 fab9 	bl	b800c <_Z16_fetch_usbserialv>
   b4a9a:	f003 faab 	bl	b7ff4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4a9e:	4620      	mov	r0, r4
   b4aa0:	4b04      	ldr	r3, [pc, #16]	; (b4ab4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4aa2:	f840 3b04 	str.w	r3, [r0], #4
   b4aa6:	f002 f94b 	bl	b6d40 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4aaa:	4620      	mov	r0, r4
   b4aac:	bd10      	pop	{r4, pc}
   b4aae:	bf00      	nop
   b4ab0:	000b88fc 	.word	0x000b88fc
   b4ab4:	000b88e4 	.word	0x000b88e4

000b4ab8 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4ab8:	b510      	push	{r4, lr}
   b4aba:	4604      	mov	r4, r0
    }
   b4abc:	f7ff ffe2 	bl	b4a84 <_ZN5spark16SerialLogHandlerD1Ev>
   b4ac0:	4620      	mov	r0, r4
   b4ac2:	2124      	movs	r1, #36	; 0x24
   b4ac4:	f7ff ffaf 	bl	b4a26 <_ZdlPvj>
   b4ac8:	4620      	mov	r0, r4
   b4aca:	bd10      	pop	{r4, pc}

000b4acc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4acc:	b40e      	push	{r1, r2, r3}
   b4ace:	b500      	push	{lr}
   b4ad0:	b08c      	sub	sp, #48	; 0x30
   b4ad2:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4ad4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4ad8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4adc:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4ade:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4ae2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4ae4:	6801      	ldr	r1, [r0, #0]
   b4ae6:	aa04      	add	r2, sp, #16
   b4ae8:	201e      	movs	r0, #30
    attr.flags = 0;
   b4aea:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4aee:	f000 fdab 	bl	b5648 <log_message_v>
}
   b4af2:	b00c      	add	sp, #48	; 0x30
   b4af4:	f85d eb04 	ldr.w	lr, [sp], #4
   b4af8:	b003      	add	sp, #12
   b4afa:	4770      	bx	lr

000b4afc <setup>:
void setup() {
   b4afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4b00:	4932      	ldr	r1, [pc, #200]	; (b4bcc <setup+0xd0>)
   b4b02:	4833      	ldr	r0, [pc, #204]	; (b4bd0 <setup+0xd4>)
  debug = 0; // 0  represents no debug, 1 represents debug
   b4b04:	f8df 80f8 	ldr.w	r8, [pc, #248]	; b4c00 <setup+0x104>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4b08:	4e32      	ldr	r6, [pc, #200]	; (b4bd4 <setup+0xd8>)
void setup() {
   b4b0a:	b096      	sub	sp, #88	; 0x58
   b4b0c:	2300      	movs	r3, #0
   b4b0e:	2209      	movs	r2, #9
   b4b10:	f000 fdf8 	bl	b5704 <spark_variable>
  initPowerSource = 3; //this should be USB/ wall power for our design
   b4b14:	4b30      	ldr	r3, [pc, #192]	; (b4bd8 <setup+0xdc>)
   b4b16:	2203      	movs	r2, #3
   b4b18:	601a      	str	r2, [r3, #0]
  pinMode(LED1, OUTPUT);               // sets pin as output
   b4b1a:	4b30      	ldr	r3, [pc, #192]	; (b4bdc <setup+0xe0>)
   b4b1c:	2101      	movs	r1, #1
   b4b1e:	8818      	ldrh	r0, [r3, #0]
   b4b20:	f003 fb74 	bl	b820c <pinMode>
  debug = 0; // 0  represents no debug, 1 represents debug
   b4b24:	2400      	movs	r4, #0
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b4b26:	4a2e      	ldr	r2, [pc, #184]	; (b4be0 <setup+0xe4>)
   b4b28:	492e      	ldr	r1, [pc, #184]	; (b4be4 <setup+0xe8>)
   b4b2a:	482f      	ldr	r0, [pc, #188]	; (b4be8 <setup+0xec>)
   b4b2c:	f8c8 4000 	str.w	r4, [r8]
   b4b30:	f001 f8a7 	bl	b5c82 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4b34:	6870      	ldr	r0, [r6, #4]
   b4b36:	4622      	mov	r2, r4
   b4b38:	4621      	mov	r1, r4
   b4b3a:	f000 fe3b 	bl	b57b4 <network_ready>
  if (Cellular.ready()) {
   b4b3e:	2800      	cmp	r0, #0
   b4b40:	d041      	beq.n	b4bc6 <setup+0xca>
      CellularSignal sig = Cellular.RSSI();
   b4b42:	4631      	mov	r1, r6
   b4b44:	a80e      	add	r0, sp, #56	; 0x38
   b4b46:	f000 ff59 	bl	b59fc <_ZN5spark13CellularClass4RSSIEv>
      cell_sig_str = sig.getStrength();
   b4b4a:	a80e      	add	r0, sp, #56	; 0x38
   b4b4c:	f000 ffd2 	bl	b5af4 <_ZNK14CellularSignal11getStrengthEv>
   b4b50:	4f26      	ldr	r7, [pc, #152]	; (b4bec <setup+0xf0>)
      cell_sig_qual = sig.getQuality();
   b4b52:	a80e      	add	r0, sp, #56	; 0x38
      cell_sig_str = sig.getStrength();
   b4b54:	ed87 0a00 	vstr	s0, [r7]
      cell_sig_qual = sig.getQuality();
   b4b58:	f000 fffc 	bl	b5b54 <_ZNK14CellularSignal10getQualityEv>
   b4b5c:	4b24      	ldr	r3, [pc, #144]	; (b4bf0 <setup+0xf4>)
   b4b5e:	ed83 0a00 	vstr	s0, [r3]
      if(debug){
   b4b62:	f8d8 3000 	ldr.w	r3, [r8]
      cell_sig_qual = sig.getQuality();
   b4b66:	ee10 5a10 	vmov	r5, s0
      if(debug){
   b4b6a:	b363      	cbz	r3, b4bc6 <setup+0xca>
        Log.info("Cellular ready at startup: %f strength and %f quality", cell_sig_str, cell_sig_qual);
   b4b6c:	6838      	ldr	r0, [r7, #0]
   b4b6e:	f7ff fbb9 	bl	b42e4 <__aeabi_f2d>
   b4b72:	4602      	mov	r2, r0
   b4b74:	460b      	mov	r3, r1
   b4b76:	4628      	mov	r0, r5
   b4b78:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b4b7c:	f7ff fbb2 	bl	b42e4 <__aeabi_f2d>
   b4b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4b84:	e9cd 0100 	strd	r0, r1, [sp]
   b4b88:	491a      	ldr	r1, [pc, #104]	; (b4bf4 <setup+0xf8>)
   b4b8a:	481b      	ldr	r0, [pc, #108]	; (b4bf8 <setup+0xfc>)
   b4b8c:	f7ff ff9e 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
   b4b90:	4622      	mov	r2, r4
   b4b92:	4621      	mov	r1, r4
   b4b94:	6870      	ldr	r0, [r6, #4]
   b4b96:	f000 fded 	bl	b5774 <network_config>
   b4b9a:	1c81      	adds	r1, r0, #2
   b4b9c:	a808      	add	r0, sp, #32
   b4b9e:	f001 fc6b 	bl	b6478 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   b4ba2:	a908      	add	r1, sp, #32
   b4ba4:	a804      	add	r0, sp, #16
   b4ba6:	f003 f915 	bl	b7dd4 <_ZN6StringC1ERK9Printable>
        Log.info("localIP: %s", Cellular.localIP().toString().c_str());
   b4baa:	4914      	ldr	r1, [pc, #80]	; (b4bfc <setup+0x100>)
   b4bac:	9a04      	ldr	r2, [sp, #16]
   b4bae:	4812      	ldr	r0, [pc, #72]	; (b4bf8 <setup+0xfc>)
   b4bb0:	f7ff ff8c 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
   b4bb4:	a804      	add	r0, sp, #16
   b4bb6:	f003 f80d 	bl	b7bd4 <_ZN6StringD1Ev>
        Serial.begin(9600);
   b4bba:	f003 fa27 	bl	b800c <_Z16_fetch_usbserialv>
   b4bbe:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4bc2:	f003 fa13 	bl	b7fec <_ZN9USBSerial5beginEl>
}
   b4bc6:	b016      	add	sp, #88	; 0x58
   b4bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4bcc:	2003e5d8 	.word	0x2003e5d8
   b4bd0:	000b87a4 	.word	0x000b87a4
   b4bd4:	2003e648 	.word	0x2003e648
   b4bd8:	2003e5f4 	.word	0x2003e5f4
   b4bdc:	2003e54c 	.word	0x2003e54c
   b4be0:	000b87b4 	.word	0x000b87b4
   b4be4:	000b4a59 	.word	0x000b4a59
   b4be8:	000b5c57 	.word	0x000b5c57
   b4bec:	2003e5e4 	.word	0x2003e5e4
   b4bf0:	2003e5e0 	.word	0x2003e5e0
   b4bf4:	000b87b8 	.word	0x000b87b8
   b4bf8:	2003e68c 	.word	0x2003e68c
   b4bfc:	000b87ee 	.word	0x000b87ee
   b4c00:	2003e5e8 	.word	0x2003e5e8

000b4c04 <_Z19get_battery_voltagev>:
void get_battery_voltage(){
   b4c04:	b508      	push	{r3, lr}
  battery_voltage = fuel.getVCell();
   b4c06:	480a      	ldr	r0, [pc, #40]	; (b4c30 <_Z19get_battery_voltagev+0x2c>)
   b4c08:	f001 fb42 	bl	b6290 <_ZN9FuelGauge8getVCellEv>
   b4c0c:	ee10 0a10 	vmov	r0, s0
   b4c10:	f7ff fb68 	bl	b42e4 <__aeabi_f2d>
   b4c14:	4b07      	ldr	r3, [pc, #28]	; (b4c34 <_Z19get_battery_voltagev+0x30>)
   b4c16:	e9c3 0100 	strd	r0, r1, [r3]
  if(debug == 1){
   b4c1a:	4b07      	ldr	r3, [pc, #28]	; (b4c38 <_Z19get_battery_voltagev+0x34>)
   b4c1c:	681b      	ldr	r3, [r3, #0]
   b4c1e:	2b01      	cmp	r3, #1
   b4c20:	d105      	bne.n	b4c2e <_Z19get_battery_voltagev+0x2a>
    Log.info("Current battery voltage: %f", battery_voltage);
   b4c22:	4602      	mov	r2, r0
   b4c24:	460b      	mov	r3, r1
   b4c26:	4805      	ldr	r0, [pc, #20]	; (b4c3c <_Z19get_battery_voltagev+0x38>)
   b4c28:	4905      	ldr	r1, [pc, #20]	; (b4c40 <_Z19get_battery_voltagev+0x3c>)
   b4c2a:	f7ff ff4f 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
}
   b4c2e:	bd08      	pop	{r3, pc}
   b4c30:	2003e5ec 	.word	0x2003e5ec
   b4c34:	2003e5d8 	.word	0x2003e5d8
   b4c38:	2003e5e8 	.word	0x2003e5e8
   b4c3c:	2003e68c 	.word	0x2003e68c
   b4c40:	000b87fa 	.word	0x000b87fa

000b4c44 <_Z14test_flash_ledii>:
void test_flash_led(int LED, int time){
   b4c44:	b538      	push	{r3, r4, r5, lr}
    digitalWrite(LED, HIGH);          // sets the LED on
   b4c46:	b285      	uxth	r5, r0
void test_flash_led(int LED, int time){
   b4c48:	460c      	mov	r4, r1
    digitalWrite(LED, HIGH);          // sets the LED on
   b4c4a:	4628      	mov	r0, r5
   b4c4c:	2101      	movs	r1, #1
   b4c4e:	f003 faee 	bl	b822e <digitalWrite>
    delay(time);                      
   b4c52:	4620      	mov	r0, r4
   b4c54:	f000 fe3e 	bl	b58d4 <delay>
    digitalWrite(LED, LOW);           // sets the LED off
   b4c58:	4628      	mov	r0, r5
   b4c5a:	2100      	movs	r1, #0
   b4c5c:	f003 fae7 	bl	b822e <digitalWrite>
    delay(time);  
   b4c60:	4620      	mov	r0, r4
}
   b4c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(time);  
   b4c66:	f000 be35 	b.w	b58d4 <delay>
	...

000b4c6c <_Z19check_day_time_syncv>:
void check_day_time_sync() {
   b4c6c:	b510      	push	{r4, lr}
  if (millis() - lastSync > ONE_DAY_MILLIS) {
   b4c6e:	4c09      	ldr	r4, [pc, #36]	; (b4c94 <_Z19check_day_time_syncv+0x28>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4c70:	f000 fbaa 	bl	b53c8 <HAL_Timer_Get_Milli_Seconds>
   b4c74:	6823      	ldr	r3, [r4, #0]
   b4c76:	1ac0      	subs	r0, r0, r3
   b4c78:	4b07      	ldr	r3, [pc, #28]	; (b4c98 <_Z19check_day_time_syncv+0x2c>)
   b4c7a:	4298      	cmp	r0, r3
   b4c7c:	d908      	bls.n	b4c90 <_Z19check_day_time_syncv+0x24>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4c7e:	f000 fd59 	bl	b5734 <spark_cloud_flag_connected>
        if (!connected()) {
   b4c82:	b110      	cbz	r0, b4c8a <_Z19check_day_time_syncv+0x1e>
        return spark_sync_time(NULL);
   b4c84:	2000      	movs	r0, #0
   b4c86:	f000 fd65 	bl	b5754 <spark_sync_time>
   b4c8a:	f000 fb9d 	bl	b53c8 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   b4c8e:	6020      	str	r0, [r4, #0]
}
   b4c90:	bd10      	pop	{r4, pc}
   b4c92:	bf00      	nop
   b4c94:	2003e5f8 	.word	0x2003e5f8
   b4c98:	05265c00 	.word	0x05265c00

000b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4c9c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4c9e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4ca0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4ca2:	b17c      	cbz	r4, b4cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4ca4:	6863      	ldr	r3, [r4, #4]
   b4ca6:	3b01      	subs	r3, #1
   b4ca8:	6063      	str	r3, [r4, #4]
   b4caa:	b95b      	cbnz	r3, b4cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4cac:	6823      	ldr	r3, [r4, #0]
   b4cae:	4620      	mov	r0, r4
   b4cb0:	689b      	ldr	r3, [r3, #8]
   b4cb2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4cb4:	68a3      	ldr	r3, [r4, #8]
   b4cb6:	3b01      	subs	r3, #1
   b4cb8:	60a3      	str	r3, [r4, #8]
   b4cba:	b91b      	cbnz	r3, b4cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4cbc:	6823      	ldr	r3, [r4, #0]
   b4cbe:	4620      	mov	r0, r4
   b4cc0:	68db      	ldr	r3, [r3, #12]
   b4cc2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4cc4:	4628      	mov	r0, r5
   b4cc6:	bd38      	pop	{r3, r4, r5, pc}

000b4cc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4cc8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4cca:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4cce:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4cd0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4cd2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4cd6:	42ae      	cmp	r6, r5
   b4cd8:	d004      	beq.n	b4ce4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4cda:	4628      	mov	r0, r5
   b4cdc:	f002 ff7a 	bl	b7bd4 <_ZN6StringD1Ev>
   b4ce0:	3514      	adds	r5, #20
   b4ce2:	e7f8      	b.n	b4cd6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4ce4:	6820      	ldr	r0, [r4, #0]
   b4ce6:	f000 fdb5 	bl	b5854 <free>
    AllocatorT::free(data_);
}
   b4cea:	4620      	mov	r0, r4
   b4cec:	bd70      	pop	{r4, r5, r6, pc}

000b4cee <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>:
    // Constructs succeeded future
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
   b4cee:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4cf0:	6804      	ldr	r4, [r0, #0]
        return (application_thread_current(nullptr) != 0);
   b4cf2:	2000      	movs	r0, #0
   b4cf4:	f000 fcd8 	bl	b56a8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4cf8:	b120      	cbz	r0, b4d04 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b4cfa:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4cfc:	b913      	cbnz	r3, b4d04 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
        spark_process();
   b4cfe:	f000 fd11 	bl	b5724 <spark_process>
    }
   b4d02:	e7fa      	b.n	b4cfa <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0xc>
   b4d04:	7863      	ldrb	r3, [r4, #1]
   b4d06:	f3bf 8f5b 	dmb	ish
   b4d0a:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b4d0c:	b90b      	cbnz	r3, b4d12 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x24>
        return std::move(defaultValue);
   b4d0e:	2000      	movs	r0, #0
        return this->p_->result();
    }
   b4d10:	bd38      	pop	{r3, r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   b4d12:	2000      	movs	r0, #0
   b4d14:	f000 fcc8 	bl	b56a8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4d18:	b120      	cbz	r0, b4d24 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
   b4d1a:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4d1c:	b913      	cbnz	r3, b4d24 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
        spark_process();
   b4d1e:	f000 fd01 	bl	b5724 <spark_process>
    }
   b4d22:	e7fa      	b.n	b4d1a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x2c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4d24:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b4d26:	2b01      	cmp	r3, #1
   b4d28:	d1f1      	bne.n	b4d0e <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x20>
            return result_;
   b4d2a:	7b20      	ldrb	r0, [r4, #12]
   b4d2c:	e7f0      	b.n	b4d10 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x22>
	...

000b4d30 <_Z19detect_power_sourcev>:
void detect_power_source() {
   b4d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b4d34:	2018      	movs	r0, #24
  if(debug) {
   b4d36:	4e81      	ldr	r6, [pc, #516]	; (b4f3c <_Z19detect_power_sourcev+0x20c>)
  powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b4d38:	4c81      	ldr	r4, [pc, #516]	; (b4f40 <_Z19detect_power_sourcev+0x210>)
void detect_power_source() {
   b4d3a:	b087      	sub	sp, #28
  powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b4d3c:	f000 faee 	bl	b531c <_ZN17DiagnosticsHelper8getValueEt>
  if(debug) {
   b4d40:	6833      	ldr	r3, [r6, #0]
  powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b4d42:	6020      	str	r0, [r4, #0]
  if(debug) {
   b4d44:	b153      	cbz	r3, b4d5c <_Z19detect_power_sourcev+0x2c>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4d46:	4b7f      	ldr	r3, [pc, #508]	; (b4f44 <_Z19detect_power_sourcev+0x214>)
    Log.info("power src str: %s", powerSourceStr.c_str());
   b4d48:	497f      	ldr	r1, [pc, #508]	; (b4f48 <_Z19detect_power_sourcev+0x218>)
   b4d4a:	681a      	ldr	r2, [r3, #0]
   b4d4c:	487f      	ldr	r0, [pc, #508]	; (b4f4c <_Z19detect_power_sourcev+0x21c>)
   b4d4e:	f7ff febd 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
    Log.info("power src INT: %d", powerSource);
   b4d52:	6822      	ldr	r2, [r4, #0]
   b4d54:	497e      	ldr	r1, [pc, #504]	; (b4f50 <_Z19detect_power_sourcev+0x220>)
   b4d56:	487d      	ldr	r0, [pc, #500]	; (b4f4c <_Z19detect_power_sourcev+0x21c>)
   b4d58:	f7ff feb8 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
  if (powerSource != initPowerSource && powerSource != lastPowerSource) {
   b4d5c:	4f7d      	ldr	r7, [pc, #500]	; (b4f54 <_Z19detect_power_sourcev+0x224>)
   b4d5e:	6823      	ldr	r3, [r4, #0]
   b4d60:	683a      	ldr	r2, [r7, #0]
   b4d62:	4293      	cmp	r3, r2
   b4d64:	f000 810f 	beq.w	b4f86 <_Z19detect_power_sourcev+0x256>
   b4d68:	f8df 820c 	ldr.w	r8, [pc, #524]	; b4f78 <_Z19detect_power_sourcev+0x248>
   b4d6c:	f8d8 2000 	ldr.w	r2, [r8]
   b4d70:	4293      	cmp	r3, r2
   b4d72:	f000 8108 	beq.w	b4f86 <_Z19detect_power_sourcev+0x256>
      if(debug) {
   b4d76:	6833      	ldr	r3, [r6, #0]
   b4d78:	b12b      	cbz	r3, b4d86 <_Z19detect_power_sourcev+0x56>
   b4d7a:	4b72      	ldr	r3, [pc, #456]	; (b4f44 <_Z19detect_power_sourcev+0x214>)
        Log.info("Potential Power source change: %s", powerSourceStr.c_str());
   b4d7c:	4976      	ldr	r1, [pc, #472]	; (b4f58 <_Z19detect_power_sourcev+0x228>)
   b4d7e:	681a      	ldr	r2, [r3, #0]
   b4d80:	4872      	ldr	r0, [pc, #456]	; (b4f4c <_Z19detect_power_sourcev+0x21c>)
   b4d82:	f7ff fea3 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
      delay(5000);
   b4d86:	f241 3088 	movw	r0, #5000	; 0x1388
   b4d8a:	f000 fda3 	bl	b58d4 <delay>
      powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b4d8e:	2018      	movs	r0, #24
   b4d90:	f000 fac4 	bl	b531c <_ZN17DiagnosticsHelper8getValueEt>
      if(powerSource != initPowerSource) {
   b4d94:	683b      	ldr	r3, [r7, #0]
      powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b4d96:	6020      	str	r0, [r4, #0]
      if(powerSource != initPowerSource) {
   b4d98:	4298      	cmp	r0, r3
   b4d9a:	f000 80f4 	beq.w	b4f86 <_Z19detect_power_sourcev+0x256>
        if(debug) {
   b4d9e:	6833      	ldr	r3, [r6, #0]
   b4da0:	b12b      	cbz	r3, b4dae <_Z19detect_power_sourcev+0x7e>
   b4da2:	4b68      	ldr	r3, [pc, #416]	; (b4f44 <_Z19detect_power_sourcev+0x214>)
          Log.info("Confirmed Power source change: %s", powerSourceStr.c_str());
   b4da4:	496d      	ldr	r1, [pc, #436]	; (b4f5c <_Z19detect_power_sourcev+0x22c>)
   b4da6:	681a      	ldr	r2, [r3, #0]
   b4da8:	4868      	ldr	r0, [pc, #416]	; (b4f4c <_Z19detect_power_sourcev+0x21c>)
   b4daa:	f7ff fe8f 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
        if(powerSource == 5) {
   b4dae:	6823      	ldr	r3, [r4, #0]
   b4db0:	2b05      	cmp	r3, #5
   b4db2:	d147      	bne.n	b4e44 <_Z19detect_power_sourcev+0x114>
          powerSourceStr = "POWER LOSS AT DMOC";
   b4db4:	4d63      	ldr	r5, [pc, #396]	; (b4f44 <_Z19detect_power_sourcev+0x214>)
   b4db6:	496a      	ldr	r1, [pc, #424]	; (b4f60 <_Z19detect_power_sourcev+0x230>)
          status = String::format("{\"powerSource\":\"%s\"}", powerSourceStr.c_str());
   b4db8:	f8df 91b4 	ldr.w	r9, [pc, #436]	; b4f70 <_Z19detect_power_sourcev+0x240>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b4dbc:	f8df b1bc 	ldr.w	fp, [pc, #444]	; b4f7c <_Z19detect_power_sourcev+0x24c>
   b4dc0:	f8df a1b0 	ldr.w	sl, [pc, #432]	; b4f74 <_Z19detect_power_sourcev+0x244>
          powerSourceStr = "POWER LOSS AT DMOC";
   b4dc4:	4628      	mov	r0, r5
   b4dc6:	f002 ffae 	bl	b7d26 <_ZN6StringaSEPKc>
          get_battery_voltage();
   b4dca:	f7ff ff1b 	bl	b4c04 <_Z19get_battery_voltagev>
          status = String::format("{\"powerSource\":\"%s\"}", powerSourceStr.c_str());
   b4dce:	682a      	ldr	r2, [r5, #0]
   b4dd0:	4964      	ldr	r1, [pc, #400]	; (b4f64 <_Z19detect_power_sourcev+0x234>)
   b4dd2:	a802      	add	r0, sp, #8
   b4dd4:	f003 f818 	bl	b7e08 <_ZN6String6formatEPKcz>
   b4dd8:	a902      	add	r1, sp, #8
   b4dda:	4648      	mov	r0, r9
   b4ddc:	f002 ff9b 	bl	b7d16 <_ZN6StringaSEOS_>
   b4de0:	a802      	add	r0, sp, #8
   b4de2:	f002 fef7 	bl	b7bd4 <_ZN6StringD1Ev>
   b4de6:	f89a 2000 	ldrb.w	r2, [sl]
   b4dea:	f89b 3000 	ldrb.w	r3, [fp]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4dee:	495e      	ldr	r1, [pc, #376]	; (b4f68 <_Z19detect_power_sourcev+0x238>)
   b4df0:	4313      	orrs	r3, r2
   b4df2:	f88d 3000 	strb.w	r3, [sp]
   b4df6:	f8d9 2000 	ldr.w	r2, [r9]
   b4dfa:	233c      	movs	r3, #60	; 0x3c
   b4dfc:	a802      	add	r0, sp, #8
   b4dfe:	f001 f837 	bl	b5e70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    ResultT result(ResultT defaultValue) const {
        return this->p_->result(std::move(defaultValue));
    }

    operator ResultT() const {
        return result();
   b4e02:	a802      	add	r0, sp, #8
   b4e04:	f7ff ff73 	bl	b4cee <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b4e08:	4605      	mov	r5, r0
      ~__shared_ptr() = default;
   b4e0a:	a803      	add	r0, sp, #12
   b4e0c:	f7ff ff46 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          lastPowerSource = powerSource;
   b4e10:	6823      	ldr	r3, [r4, #0]
   b4e12:	f8c8 3000 	str.w	r3, [r8]
   b4e16:	4954      	ldr	r1, [pc, #336]	; (b4f68 <_Z19detect_power_sourcev+0x238>)
          while(!success) {
   b4e18:	b9a5      	cbnz	r5, b4e44 <_Z19detect_power_sourcev+0x114>
   b4e1a:	f89a 2000 	ldrb.w	r2, [sl]
   b4e1e:	f89b 3000 	ldrb.w	r3, [fp]
   b4e22:	4313      	orrs	r3, r2
   b4e24:	f88d 3000 	strb.w	r3, [sp]
   b4e28:	f8d9 2000 	ldr.w	r2, [r9]
   b4e2c:	233c      	movs	r3, #60	; 0x3c
   b4e2e:	a802      	add	r0, sp, #8
   b4e30:	f001 f81e 	bl	b5e70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4e34:	a802      	add	r0, sp, #8
   b4e36:	f7ff ff5a 	bl	b4cee <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b4e3a:	4605      	mov	r5, r0
   b4e3c:	a803      	add	r0, sp, #12
   b4e3e:	f7ff ff2d 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4e42:	e7e8      	b.n	b4e16 <_Z19detect_power_sourcev+0xe6>
        if(powerSource == 1) {
   b4e44:	6823      	ldr	r3, [r4, #0]
   b4e46:	2b01      	cmp	r3, #1
   b4e48:	d13b      	bne.n	b4ec2 <_Z19detect_power_sourcev+0x192>
          powerSourceStr = "POWER RESTORED AT DMOC";
   b4e4a:	4d3e      	ldr	r5, [pc, #248]	; (b4f44 <_Z19detect_power_sourcev+0x214>)
   b4e4c:	4947      	ldr	r1, [pc, #284]	; (b4f6c <_Z19detect_power_sourcev+0x23c>)
          status = String::format("{\"powerSource\":\"%s\"}", powerSourceStr.c_str());
   b4e4e:	f8df 9120 	ldr.w	r9, [pc, #288]	; b4f70 <_Z19detect_power_sourcev+0x240>
   b4e52:	f8df a128 	ldr.w	sl, [pc, #296]	; b4f7c <_Z19detect_power_sourcev+0x24c>
   b4e56:	f8df b11c 	ldr.w	fp, [pc, #284]	; b4f74 <_Z19detect_power_sourcev+0x244>
          powerSourceStr = "POWER RESTORED AT DMOC";
   b4e5a:	4628      	mov	r0, r5
   b4e5c:	f002 ff63 	bl	b7d26 <_ZN6StringaSEPKc>
          status = String::format("{\"powerSource\":\"%s\"}", powerSourceStr.c_str());
   b4e60:	682a      	ldr	r2, [r5, #0]
   b4e62:	4940      	ldr	r1, [pc, #256]	; (b4f64 <_Z19detect_power_sourcev+0x234>)
   b4e64:	a802      	add	r0, sp, #8
   b4e66:	f002 ffcf 	bl	b7e08 <_ZN6String6formatEPKcz>
   b4e6a:	a902      	add	r1, sp, #8
   b4e6c:	4648      	mov	r0, r9
   b4e6e:	f002 ff52 	bl	b7d16 <_ZN6StringaSEOS_>
   b4e72:	a802      	add	r0, sp, #8
   b4e74:	f002 feae 	bl	b7bd4 <_ZN6StringD1Ev>
   b4e78:	f89b 2000 	ldrb.w	r2, [fp]
   b4e7c:	f89a 3000 	ldrb.w	r3, [sl]
   b4e80:	4939      	ldr	r1, [pc, #228]	; (b4f68 <_Z19detect_power_sourcev+0x238>)
   b4e82:	4313      	orrs	r3, r2
   b4e84:	f88d 3000 	strb.w	r3, [sp]
   b4e88:	f8d9 2000 	ldr.w	r2, [r9]
   b4e8c:	233c      	movs	r3, #60	; 0x3c
   b4e8e:	a802      	add	r0, sp, #8
   b4e90:	f000 ffee 	bl	b5e70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4e94:	a802      	add	r0, sp, #8
   b4e96:	f7ff ff2a 	bl	b4cee <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b4e9a:	4605      	mov	r5, r0
   b4e9c:	a803      	add	r0, sp, #12
   b4e9e:	f7ff fefd 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4ea2:	4931      	ldr	r1, [pc, #196]	; (b4f68 <_Z19detect_power_sourcev+0x238>)
          while(!success) {
   b4ea4:	b955      	cbnz	r5, b4ebc <_Z19detect_power_sourcev+0x18c>
   b4ea6:	f89a 2000 	ldrb.w	r2, [sl]
   b4eaa:	f89b 3000 	ldrb.w	r3, [fp]
   b4eae:	4313      	orrs	r3, r2
   b4eb0:	f88d 3000 	strb.w	r3, [sp]
   b4eb4:	f8d9 2000 	ldr.w	r2, [r9]
   b4eb8:	233c      	movs	r3, #60	; 0x3c
   b4eba:	e7e8      	b.n	b4e8e <_Z19detect_power_sourcev+0x15e>
          lastPowerSource = powerSource;
   b4ebc:	6823      	ldr	r3, [r4, #0]
   b4ebe:	f8c8 3000 	str.w	r3, [r8]
        if(powerSource == 2 || powerSource == 3 || powerSource == 4) {
   b4ec2:	6823      	ldr	r3, [r4, #0]
   b4ec4:	3b02      	subs	r3, #2
   b4ec6:	2b02      	cmp	r3, #2
   b4ec8:	d85d      	bhi.n	b4f86 <_Z19detect_power_sourcev+0x256>
          powerSourceStr = "POWER RESTORED AT DMOC";
   b4eca:	4d1e      	ldr	r5, [pc, #120]	; (b4f44 <_Z19detect_power_sourcev+0x214>)
   b4ecc:	4927      	ldr	r1, [pc, #156]	; (b4f6c <_Z19detect_power_sourcev+0x23c>)
          status = String::format("{\"powerSource\":\"%s\"}", powerSourceStr.c_str());
   b4ece:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b4f70 <_Z19detect_power_sourcev+0x240>
   b4ed2:	f8df b0a8 	ldr.w	fp, [pc, #168]	; b4f7c <_Z19detect_power_sourcev+0x24c>
   b4ed6:	f8df a09c 	ldr.w	sl, [pc, #156]	; b4f74 <_Z19detect_power_sourcev+0x244>
          powerSourceStr = "POWER RESTORED AT DMOC";
   b4eda:	4628      	mov	r0, r5
   b4edc:	f002 ff23 	bl	b7d26 <_ZN6StringaSEPKc>
          status = String::format("{\"powerSource\":\"%s\"}", powerSourceStr.c_str());
   b4ee0:	682a      	ldr	r2, [r5, #0]
   b4ee2:	4920      	ldr	r1, [pc, #128]	; (b4f64 <_Z19detect_power_sourcev+0x234>)
   b4ee4:	a802      	add	r0, sp, #8
   b4ee6:	f002 ff8f 	bl	b7e08 <_ZN6String6formatEPKcz>
   b4eea:	a902      	add	r1, sp, #8
   b4eec:	4648      	mov	r0, r9
   b4eee:	f002 ff12 	bl	b7d16 <_ZN6StringaSEOS_>
   b4ef2:	a802      	add	r0, sp, #8
   b4ef4:	f002 fe6e 	bl	b7bd4 <_ZN6StringD1Ev>
   b4ef8:	f89a 2000 	ldrb.w	r2, [sl]
   b4efc:	f89b 3000 	ldrb.w	r3, [fp]
   b4f00:	4919      	ldr	r1, [pc, #100]	; (b4f68 <_Z19detect_power_sourcev+0x238>)
   b4f02:	4313      	orrs	r3, r2
   b4f04:	f88d 3000 	strb.w	r3, [sp]
   b4f08:	f8d9 2000 	ldr.w	r2, [r9]
   b4f0c:	233c      	movs	r3, #60	; 0x3c
   b4f0e:	a802      	add	r0, sp, #8
   b4f10:	f000 ffae 	bl	b5e70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4f14:	a802      	add	r0, sp, #8
   b4f16:	f7ff feea 	bl	b4cee <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b4f1a:	4605      	mov	r5, r0
   b4f1c:	a803      	add	r0, sp, #12
   b4f1e:	f7ff febd 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4f22:	4911      	ldr	r1, [pc, #68]	; (b4f68 <_Z19detect_power_sourcev+0x238>)
          while(!success) {
   b4f24:	bb65      	cbnz	r5, b4f80 <_Z19detect_power_sourcev+0x250>
   b4f26:	f89a 2000 	ldrb.w	r2, [sl]
   b4f2a:	f89b 3000 	ldrb.w	r3, [fp]
   b4f2e:	4313      	orrs	r3, r2
   b4f30:	f88d 3000 	strb.w	r3, [sp]
   b4f34:	f8d9 2000 	ldr.w	r2, [r9]
   b4f38:	233c      	movs	r3, #60	; 0x3c
   b4f3a:	e7e8      	b.n	b4f0e <_Z19detect_power_sourcev+0x1de>
   b4f3c:	2003e5e8 	.word	0x2003e5e8
   b4f40:	2003e620 	.word	0x2003e620
   b4f44:	2003e624 	.word	0x2003e624
   b4f48:	000b8816 	.word	0x000b8816
   b4f4c:	2003e68c 	.word	0x2003e68c
   b4f50:	000b8828 	.word	0x000b8828
   b4f54:	2003e5f4 	.word	0x2003e5f4
   b4f58:	000b883a 	.word	0x000b883a
   b4f5c:	000b885c 	.word	0x000b885c
   b4f60:	000b887e 	.word	0x000b887e
   b4f64:	000b8891 	.word	0x000b8891
   b4f68:	000b88a6 	.word	0x000b88a6
   b4f6c:	000b88b3 	.word	0x000b88b3
   b4f70:	2003e634 	.word	0x2003e634
   b4f74:	2003e5d5 	.word	0x2003e5d5
   b4f78:	2003e550 	.word	0x2003e550
   b4f7c:	2003e5d4 	.word	0x2003e5d4
          lastPowerSource = powerSource;
   b4f80:	6823      	ldr	r3, [r4, #0]
   b4f82:	f8c8 3000 	str.w	r3, [r8]
  if(powerSource == initPowerSource && lastPowerSource != powerSource && lastPowerSource != -1) {
   b4f86:	6822      	ldr	r2, [r4, #0]
   b4f88:	683b      	ldr	r3, [r7, #0]
   b4f8a:	429a      	cmp	r2, r3
   b4f8c:	d16c      	bne.n	b5068 <_Z19detect_power_sourcev+0x338>
   b4f8e:	f8df 8108 	ldr.w	r8, [pc, #264]	; b5098 <_Z19detect_power_sourcev+0x368>
   b4f92:	f8d8 3000 	ldr.w	r3, [r8]
   b4f96:	429a      	cmp	r2, r3
   b4f98:	d066      	beq.n	b5068 <_Z19detect_power_sourcev+0x338>
   b4f9a:	3301      	adds	r3, #1
   b4f9c:	d064      	beq.n	b5068 <_Z19detect_power_sourcev+0x338>
    if(debug) {
   b4f9e:	6833      	ldr	r3, [r6, #0]
   b4fa0:	4d33      	ldr	r5, [pc, #204]	; (b5070 <_Z19detect_power_sourcev+0x340>)
   b4fa2:	b123      	cbz	r3, b4fae <_Z19detect_power_sourcev+0x27e>
      Log.info("Potential Power source change: %s", powerSourceStr.c_str());
   b4fa4:	682a      	ldr	r2, [r5, #0]
   b4fa6:	4933      	ldr	r1, [pc, #204]	; (b5074 <_Z19detect_power_sourcev+0x344>)
   b4fa8:	4833      	ldr	r0, [pc, #204]	; (b5078 <_Z19detect_power_sourcev+0x348>)
   b4faa:	f7ff fd8f 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
    delay(5000);
   b4fae:	f241 3088 	movw	r0, #5000	; 0x1388
   b4fb2:	f000 fc8f 	bl	b58d4 <delay>
    powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b4fb6:	2018      	movs	r0, #24
   b4fb8:	f000 f9b0 	bl	b531c <_ZN17DiagnosticsHelper8getValueEt>
    powerSourceStr = "POWER RESTORED AT DMOC";
   b4fbc:	492f      	ldr	r1, [pc, #188]	; (b507c <_Z19detect_power_sourcev+0x34c>)
    powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b4fbe:	6020      	str	r0, [r4, #0]
    powerSourceStr = "POWER RESTORED AT DMOC";
   b4fc0:	482b      	ldr	r0, [pc, #172]	; (b5070 <_Z19detect_power_sourcev+0x340>)
   b4fc2:	f002 feb0 	bl	b7d26 <_ZN6StringaSEPKc>
    if(powerSource == initPowerSource) {
   b4fc6:	6822      	ldr	r2, [r4, #0]
   b4fc8:	683b      	ldr	r3, [r7, #0]
   b4fca:	429a      	cmp	r2, r3
   b4fcc:	d14c      	bne.n	b5068 <_Z19detect_power_sourcev+0x338>
      if(debug) {
   b4fce:	6833      	ldr	r3, [r6, #0]
   b4fd0:	b14b      	cbz	r3, b4fe6 <_Z19detect_power_sourcev+0x2b6>
        Log.info("Confirmed Power source change: %s", powerSourceStr.c_str());
   b4fd2:	682a      	ldr	r2, [r5, #0]
   b4fd4:	492a      	ldr	r1, [pc, #168]	; (b5080 <_Z19detect_power_sourcev+0x350>)
   b4fd6:	4828      	ldr	r0, [pc, #160]	; (b5078 <_Z19detect_power_sourcev+0x348>)
   b4fd8:	f7ff fd78 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
        Log.info("power src INT: %d", powerSource);
   b4fdc:	6822      	ldr	r2, [r4, #0]
   b4fde:	4929      	ldr	r1, [pc, #164]	; (b5084 <_Z19detect_power_sourcev+0x354>)
   b4fe0:	4825      	ldr	r0, [pc, #148]	; (b5078 <_Z19detect_power_sourcev+0x348>)
   b4fe2:	f7ff fd73 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
        if(powerSource == 2 || powerSource == 3 || powerSource == 4) {
   b4fe6:	6823      	ldr	r3, [r4, #0]
   b4fe8:	3b02      	subs	r3, #2
   b4fea:	2b02      	cmp	r3, #2
   b4fec:	d83c      	bhi.n	b5068 <_Z19detect_power_sourcev+0x338>
          status = String::format("{\"powerSource\":\"%s\"}", powerSourceStr.c_str());
   b4fee:	4e26      	ldr	r6, [pc, #152]	; (b5088 <_Z19detect_power_sourcev+0x358>)
   b4ff0:	682a      	ldr	r2, [r5, #0]
   b4ff2:	4926      	ldr	r1, [pc, #152]	; (b508c <_Z19detect_power_sourcev+0x35c>)
   b4ff4:	4f26      	ldr	r7, [pc, #152]	; (b5090 <_Z19detect_power_sourcev+0x360>)
   b4ff6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b509c <_Z19detect_power_sourcev+0x36c>
   b4ffa:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b50a0 <_Z19detect_power_sourcev+0x370>
   b4ffe:	a802      	add	r0, sp, #8
   b5000:	f002 ff02 	bl	b7e08 <_ZN6String6formatEPKcz>
   b5004:	a902      	add	r1, sp, #8
   b5006:	4630      	mov	r0, r6
   b5008:	f002 fe85 	bl	b7d16 <_ZN6StringaSEOS_>
   b500c:	a802      	add	r0, sp, #8
   b500e:	f002 fde1 	bl	b7bd4 <_ZN6StringD1Ev>
   b5012:	f899 2000 	ldrb.w	r2, [r9]
   b5016:	783b      	ldrb	r3, [r7, #0]
   b5018:	491e      	ldr	r1, [pc, #120]	; (b5094 <_Z19detect_power_sourcev+0x364>)
   b501a:	4313      	orrs	r3, r2
   b501c:	f88d 3000 	strb.w	r3, [sp]
   b5020:	6832      	ldr	r2, [r6, #0]
   b5022:	233c      	movs	r3, #60	; 0x3c
   b5024:	a802      	add	r0, sp, #8
   b5026:	f000 ff23 	bl	b5e70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b502a:	a802      	add	r0, sp, #8
   b502c:	f7ff fe5f 	bl	b4cee <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b5030:	4605      	mov	r5, r0
   b5032:	a803      	add	r0, sp, #12
   b5034:	f7ff fe32 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          while(!success) {
   b5038:	b99d      	cbnz	r5, b5062 <_Z19detect_power_sourcev+0x332>
   b503a:	783a      	ldrb	r2, [r7, #0]
   b503c:	f899 3000 	ldrb.w	r3, [r9]
   b5040:	4313      	orrs	r3, r2
   b5042:	f88d 3000 	strb.w	r3, [sp]
   b5046:	6832      	ldr	r2, [r6, #0]
   b5048:	233c      	movs	r3, #60	; 0x3c
   b504a:	4651      	mov	r1, sl
   b504c:	a802      	add	r0, sp, #8
   b504e:	f000 ff0f 	bl	b5e70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5052:	a802      	add	r0, sp, #8
   b5054:	f7ff fe4b 	bl	b4cee <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b5058:	4605      	mov	r5, r0
   b505a:	a803      	add	r0, sp, #12
   b505c:	f7ff fe1e 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5060:	e7ea      	b.n	b5038 <_Z19detect_power_sourcev+0x308>
          lastPowerSource = powerSource;
   b5062:	6823      	ldr	r3, [r4, #0]
   b5064:	f8c8 3000 	str.w	r3, [r8]
}
   b5068:	b007      	add	sp, #28
   b506a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b506e:	bf00      	nop
   b5070:	2003e624 	.word	0x2003e624
   b5074:	000b883a 	.word	0x000b883a
   b5078:	2003e68c 	.word	0x2003e68c
   b507c:	000b88b3 	.word	0x000b88b3
   b5080:	000b885c 	.word	0x000b885c
   b5084:	000b8828 	.word	0x000b8828
   b5088:	2003e634 	.word	0x2003e634
   b508c:	000b8891 	.word	0x000b8891
   b5090:	2003e5d5 	.word	0x2003e5d5
   b5094:	000b88a6 	.word	0x000b88a6
   b5098:	2003e550 	.word	0x2003e550
   b509c:	2003e5d4 	.word	0x2003e5d4
   b50a0:	000b88ca 	.word	0x000b88ca

000b50a4 <loop>:
void loop() {
   b50a4:	b530      	push	{r4, r5, lr}
  if(debug){
   b50a6:	4b21      	ldr	r3, [pc, #132]	; (b512c <loop+0x88>)
   b50a8:	681b      	ldr	r3, [r3, #0]
void loop() {
   b50aa:	b08d      	sub	sp, #52	; 0x34
  if(debug){
   b50ac:	2b00      	cmp	r3, #0
   b50ae:	d03a      	beq.n	b5126 <loop+0x82>
    test_flash_led(LED1, 200);
   b50b0:	4b1f      	ldr	r3, [pc, #124]	; (b5130 <loop+0x8c>)
   b50b2:	4c20      	ldr	r4, [pc, #128]	; (b5134 <loop+0x90>)
   b50b4:	6818      	ldr	r0, [r3, #0]
   b50b6:	21c8      	movs	r1, #200	; 0xc8
   b50b8:	f7ff fdc4 	bl	b4c44 <_Z14test_flash_ledii>
        return network_ready(*this, 0,  NULL);
   b50bc:	2200      	movs	r2, #0
   b50be:	6860      	ldr	r0, [r4, #4]
   b50c0:	4611      	mov	r1, r2
   b50c2:	f000 fb77 	bl	b57b4 <network_ready>
    if (Cellular.ready()) {
   b50c6:	b328      	cbz	r0, b5114 <loop+0x70>
      CellularSignal sig = Cellular.RSSI();
   b50c8:	4621      	mov	r1, r4
   b50ca:	a804      	add	r0, sp, #16
   b50cc:	f000 fc96 	bl	b59fc <_ZN5spark13CellularClass4RSSIEv>
      cell_sig_str = sig.getStrength();
   b50d0:	a804      	add	r0, sp, #16
   b50d2:	f000 fd0f 	bl	b5af4 <_ZNK14CellularSignal11getStrengthEv>
   b50d6:	4d18      	ldr	r5, [pc, #96]	; (b5138 <loop+0x94>)
      cell_sig_qual = sig.getQuality();
   b50d8:	a804      	add	r0, sp, #16
      cell_sig_str = sig.getStrength();
   b50da:	ed85 0a00 	vstr	s0, [r5]
      cell_sig_qual = sig.getQuality();
   b50de:	f000 fd39 	bl	b5b54 <_ZNK14CellularSignal10getQualityEv>
   b50e2:	4b16      	ldr	r3, [pc, #88]	; (b513c <loop+0x98>)
      Log.info("Cellular ready at startup: %f strength and %f quality", cell_sig_str, cell_sig_qual);
   b50e4:	6828      	ldr	r0, [r5, #0]
      cell_sig_qual = sig.getQuality();
   b50e6:	ed83 0a00 	vstr	s0, [r3]
   b50ea:	ee10 4a10 	vmov	r4, s0
      Log.info("Cellular ready at startup: %f strength and %f quality", cell_sig_str, cell_sig_qual);
   b50ee:	f7ff f8f9 	bl	b42e4 <__aeabi_f2d>
   b50f2:	4602      	mov	r2, r0
   b50f4:	460b      	mov	r3, r1
   b50f6:	4620      	mov	r0, r4
   b50f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b50fc:	f7ff f8f2 	bl	b42e4 <__aeabi_f2d>
   b5100:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b5104:	e9cd 0100 	strd	r0, r1, [sp]
   b5108:	490d      	ldr	r1, [pc, #52]	; (b5140 <loop+0x9c>)
   b510a:	480e      	ldr	r0, [pc, #56]	; (b5144 <loop+0xa0>)
   b510c:	f7ff fcde 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
      get_battery_voltage();
   b5110:	f7ff fd78 	bl	b4c04 <_Z19get_battery_voltagev>
    detect_power_source();
   b5114:	f7ff fe0c 	bl	b4d30 <_Z19detect_power_sourcev>
  delay(10000);
   b5118:	f242 7010 	movw	r0, #10000	; 0x2710
}
   b511c:	b00d      	add	sp, #52	; 0x34
   b511e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  delay(10000);
   b5122:	f000 bbd7 	b.w	b58d4 <delay>
    check_day_time_sync();
   b5126:	f7ff fda1 	bl	b4c6c <_Z19check_day_time_syncv>
   b512a:	e7f3      	b.n	b5114 <loop+0x70>
   b512c:	2003e5e8 	.word	0x2003e5e8
   b5130:	2003e54c 	.word	0x2003e54c
   b5134:	2003e648 	.word	0x2003e648
   b5138:	2003e5e4 	.word	0x2003e5e4
   b513c:	2003e5e0 	.word	0x2003e5e0
   b5140:	000b87b8 	.word	0x000b87b8
   b5144:	2003e68c 	.word	0x2003e68c

000b5148 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5148:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b514a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b514c:	4604      	mov	r4, r0
   b514e:	460d      	mov	r5, r1
   b5150:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5152:	d916      	bls.n	b5182 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5154:	4290      	cmp	r0, r2
   b5156:	d215      	bcs.n	b5184 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b5158:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b515c:	1a75      	subs	r5, r6, r1
   b515e:	f1a1 0714 	sub.w	r7, r1, #20
   b5162:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5164:	42b7      	cmp	r7, r6
   b5166:	d01c      	beq.n	b51a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5168:	b12c      	cbz	r4, b5176 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b516a:	4631      	mov	r1, r6
   b516c:	4620      	mov	r0, r4
   b516e:	f002 fdad 	bl	b7ccc <_ZN6StringC1EOS_>
   b5172:	7c33      	ldrb	r3, [r6, #16]
   b5174:	7423      	strb	r3, [r4, #16]
   b5176:	4630      	mov	r0, r6
   b5178:	f002 fd2c 	bl	b7bd4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b517c:	3e14      	subs	r6, #20
   b517e:	3c14      	subs	r4, #20
   b5180:	e7f0      	b.n	b5164 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5182:	d00e      	beq.n	b51a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5184:	42b5      	cmp	r5, r6
   b5186:	d00c      	beq.n	b51a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b5188:	b12c      	cbz	r4, b5196 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b518a:	4629      	mov	r1, r5
   b518c:	4620      	mov	r0, r4
   b518e:	f002 fd9d 	bl	b7ccc <_ZN6StringC1EOS_>
   b5192:	7c2b      	ldrb	r3, [r5, #16]
   b5194:	7423      	strb	r3, [r4, #16]
   b5196:	4628      	mov	r0, r5
   b5198:	f002 fd1c 	bl	b7bd4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b519c:	3514      	adds	r5, #20
   b519e:	3414      	adds	r4, #20
   b51a0:	e7f0      	b.n	b5184 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b51a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b51a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b51a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b51a8:	2300      	movs	r3, #0
   b51aa:	e9c0 3300 	strd	r3, r3, [r0]
   b51ae:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b51b0:	684f      	ldr	r7, [r1, #4]
   b51b2:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b51b4:	4604      	mov	r4, r0
   b51b6:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b51b8:	dd23      	ble.n	b5202 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b51ba:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b51be:	fb08 f007 	mul.w	r0, r8, r7
   b51c2:	f000 fb3f 	bl	b5844 <malloc>
            if (!d) {
   b51c6:	4605      	mov	r5, r0
   b51c8:	b1d8      	cbz	r0, b5202 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b51ca:	e9d4 1200 	ldrd	r1, r2, [r4]
   b51ce:	fb08 1202 	mla	r2, r8, r2, r1
   b51d2:	f7ff ffb9 	bl	b5148 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b51d6:	6820      	ldr	r0, [r4, #0]
   b51d8:	f000 fb3c 	bl	b5854 <free>
        data_ = d;
   b51dc:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b51de:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b51e0:	e9d6 7300 	ldrd	r7, r3, [r6]
   b51e4:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b51e8:	45b8      	cmp	r8, r7
   b51ea:	d008      	beq.n	b51fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b51ec:	4639      	mov	r1, r7
   b51ee:	4628      	mov	r0, r5
   b51f0:	f002 fd86 	bl	b7d00 <_ZN6StringC1ERKS_>
   b51f4:	7c3b      	ldrb	r3, [r7, #16]
   b51f6:	742b      	strb	r3, [r5, #16]
   b51f8:	3714      	adds	r7, #20
   b51fa:	3514      	adds	r5, #20
   b51fc:	e7f4      	b.n	b51e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b51fe:	6873      	ldr	r3, [r6, #4]
   b5200:	6063      	str	r3, [r4, #4]
}
   b5202:	4620      	mov	r0, r4
   b5204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5208 <_GLOBAL__sub_I_SystemMode>:
        val_(val) {
   b5208:	4b2f      	ldr	r3, [pc, #188]	; (b52c8 <_GLOBAL__sub_I_SystemMode+0xc0>)
}
   b520a:	b570      	push	{r4, r5, r6, lr}
   b520c:	2501      	movs	r5, #1
   b520e:	701d      	strb	r5, [r3, #0]
   b5210:	4b2e      	ldr	r3, [pc, #184]	; (b52cc <_GLOBAL__sub_I_SystemMode+0xc4>)
   b5212:	2208      	movs	r2, #8
   b5214:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5216:	4b2e      	ldr	r3, [pc, #184]	; (b52d0 <_GLOBAL__sub_I_SystemMode+0xc8>)
    SleepResult() {}
   b5218:	4a2e      	ldr	r2, [pc, #184]	; (b52d4 <_GLOBAL__sub_I_SystemMode+0xcc>)
   b521a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b521c:	2400      	movs	r4, #0
   b521e:	b08c      	sub	sp, #48	; 0x30
   b5220:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5224:	4628      	mov	r0, r5
   b5226:	f000 fa27 	bl	b5678 <set_system_mode>
SYSTEM_THREAD(ENABLED); // handles data/ cloud messaging in a seperate thread from our setup() and loop()
   b522a:	4621      	mov	r1, r4
   b522c:	4628      	mov	r0, r5
   b522e:	f000 fa33 	bl	b5698 <system_thread_set_state>
FuelGauge fuel; // fuel object used to access the battery monitoring circuit
   b5232:	4621      	mov	r1, r4
   b5234:	4828      	ldr	r0, [pc, #160]	; (b52d8 <_GLOBAL__sub_I_SystemMode+0xd0>)
   b5236:	f000 ffdf 	bl	b61f8 <_ZN9FuelGaugeC1Eb>
        capacity_(0) {
   b523a:	e9cd 4400 	strd	r4, r4, [sp]
   b523e:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b5240:	f002 fee4 	bl	b800c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b5244:	4c25      	ldr	r4, [pc, #148]	; (b52dc <_GLOBAL__sub_I_SystemMode+0xd4>)
   b5246:	4605      	mov	r5, r0
   b5248:	4669      	mov	r1, sp
   b524a:	a803      	add	r0, sp, #12
   b524c:	f7ff ffaa 	bl	b51a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5250:	4626      	mov	r6, r4
        stream_(&stream) {
   b5252:	a903      	add	r1, sp, #12
   b5254:	a806      	add	r0, sp, #24
   b5256:	f7ff ffa5 	bl	b51a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b525a:	4b21      	ldr	r3, [pc, #132]	; (b52e0 <_GLOBAL__sub_I_SystemMode+0xd8>)
   b525c:	f846 3b04 	str.w	r3, [r6], #4
   b5260:	a906      	add	r1, sp, #24
   b5262:	a809      	add	r0, sp, #36	; 0x24
   b5264:	f7ff ff9e 	bl	b51a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5268:	aa09      	add	r2, sp, #36	; 0x24
   b526a:	211e      	movs	r1, #30
   b526c:	4630      	mov	r0, r6
   b526e:	f001 ffaf 	bl	b71d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5272:	a809      	add	r0, sp, #36	; 0x24
   b5274:	f7ff fd28 	bl	b4cc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5278:	a806      	add	r0, sp, #24
   b527a:	f7ff fd25 	bl	b4cc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b527e:	4b19      	ldr	r3, [pc, #100]	; (b52e4 <_GLOBAL__sub_I_SystemMode+0xdc>)
   b5280:	6023      	str	r3, [r4, #0]
   b5282:	6225      	str	r5, [r4, #32]
   b5284:	a803      	add	r0, sp, #12
   b5286:	f7ff fd1f 	bl	b4cc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b528a:	4b17      	ldr	r3, [pc, #92]	; (b52e8 <_GLOBAL__sub_I_SystemMode+0xe0>)
   b528c:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b528e:	f002 febd 	bl	b800c <_Z16_fetch_usbserialv>
   b5292:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5296:	f002 fea9 	bl	b7fec <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b529a:	f001 fc7b 	bl	b6b94 <_ZN5spark10LogManager8instanceEv>
   b529e:	4621      	mov	r1, r4
   b52a0:	f001 fe6c 	bl	b6f7c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b52a4:	4668      	mov	r0, sp
   b52a6:	f7ff fd0f 	bl	b4cc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b52aa:	f000 f88d 	bl	b53c8 <HAL_Timer_Get_Milli_Seconds>
unsigned long lastSync = millis();
   b52ae:	4b0f      	ldr	r3, [pc, #60]	; (b52ec <_GLOBAL__sub_I_SystemMode+0xe4>)
String powerSourceStr;
   b52b0:	490f      	ldr	r1, [pc, #60]	; (b52f0 <_GLOBAL__sub_I_SystemMode+0xe8>)
unsigned long lastSync = millis();
   b52b2:	6018      	str	r0, [r3, #0]
String powerSourceStr;
   b52b4:	480f      	ldr	r0, [pc, #60]	; (b52f4 <_GLOBAL__sub_I_SystemMode+0xec>)
   b52b6:	f002 fcd8 	bl	b7c6a <_ZN6StringC1EPK19__FlashStringHelper>
String status;
   b52ba:	490d      	ldr	r1, [pc, #52]	; (b52f0 <_GLOBAL__sub_I_SystemMode+0xe8>)
   b52bc:	480e      	ldr	r0, [pc, #56]	; (b52f8 <_GLOBAL__sub_I_SystemMode+0xf0>)
}
   b52be:	b00c      	add	sp, #48	; 0x30
   b52c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
String status;
   b52c4:	f002 bcd1 	b.w	b7c6a <_ZN6StringC1EPK19__FlashStringHelper>
   b52c8:	2003e5d4 	.word	0x2003e5d4
   b52cc:	2003e5d5 	.word	0x2003e5d5
   b52d0:	2003e5c8 	.word	0x2003e5c8
   b52d4:	ffff0000 	.word	0xffff0000
   b52d8:	2003e5ec 	.word	0x2003e5ec
   b52dc:	2003e5fc 	.word	0x2003e5fc
   b52e0:	000b88e4 	.word	0x000b88e4
   b52e4:	000b8ab4 	.word	0x000b8ab4
   b52e8:	000b88fc 	.word	0x000b88fc
   b52ec:	2003e5f8 	.word	0x2003e5f8
   b52f0:	000b8a7b 	.word	0x000b8a7b
   b52f4:	2003e624 	.word	0x2003e624
   b52f8:	2003e634 	.word	0x2003e634

000b52fc <_ZZN17DiagnosticsHelper8getValueEtENUt_8appenderEPvPKhj>:
	};
    Data data;
    data.offset = data.u.d.value = 0;

    struct {
        static bool appender(void* appender, const uint8_t* data, size_t size) {
   b52fc:	b538      	push	{r3, r4, r5, lr}
   b52fe:	4604      	mov	r4, r0
            Data *d = (Data *)appender;
            if ((d->offset + size) <= sizeof(Data::u)) {
   b5300:	68c0      	ldr	r0, [r0, #12]
   b5302:	1883      	adds	r3, r0, r2
   b5304:	2b0a      	cmp	r3, #10
        static bool appender(void* appender, const uint8_t* data, size_t size) {
   b5306:	4615      	mov	r5, r2
            if ((d->offset + size) <= sizeof(Data::u)) {
   b5308:	d805      	bhi.n	b5316 <_ZZN17DiagnosticsHelper8getValueEtENUt_8appenderEPvPKhj+0x1a>
                memcpy(&d->u.b[d->offset], data, size);
   b530a:	4420      	add	r0, r4
   b530c:	f003 f87c 	bl	b8408 <memcpy>
                d->offset += size;
   b5310:	68e2      	ldr	r2, [r4, #12]
   b5312:	442a      	add	r2, r5
   b5314:	60e2      	str	r2, [r4, #12]
            }
            return true;
        }
   b5316:	2001      	movs	r0, #1
   b5318:	bd38      	pop	{r3, r4, r5, pc}
	...

000b531c <_ZN17DiagnosticsHelper8getValueEt>:
int32_t DiagnosticsHelper::getValue(uint16_t id) {
   b531c:	b510      	push	{r4, lr}
   b531e:	b088      	sub	sp, #32
    data.offset = data.u.d.value = 0;
   b5320:	2400      	movs	r4, #0
    } Callback;

    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   b5322:	ab04      	add	r3, sp, #16
   b5324:	2201      	movs	r2, #1
int32_t DiagnosticsHelper::getValue(uint16_t id) {
   b5326:	f8ad 000e 	strh.w	r0, [sp, #14]
    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   b532a:	9300      	str	r3, [sp, #0]
   b532c:	9401      	str	r4, [sp, #4]
   b532e:	4b09      	ldr	r3, [pc, #36]	; (b5354 <_ZN17DiagnosticsHelper8getValueEt+0x38>)
    data.offset = data.u.d.value = 0;
   b5330:	f8ad 4016 	strh.w	r4, [sp, #22]
    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   b5334:	4611      	mov	r1, r2
   b5336:	f10d 000e 	add.w	r0, sp, #14
    data.offset = data.u.d.value = 0;
   b533a:	f8ad 4018 	strh.w	r4, [sp, #24]
   b533e:	9407      	str	r4, [sp, #28]
    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   b5340:	f000 f9c2 	bl	b56c8 <system_format_diag_data>

    // Log.info("idSize=%u valueSize=%u id=%u value=%ld", data.u.d.idSize, data.u.d.valueSize, data.u.d.id, data.u.d.value);

    if (data.offset == sizeof(Data::u)) {
   b5344:	9b07      	ldr	r3, [sp, #28]
   b5346:	2b0a      	cmp	r3, #10
    	return data.u.d.value;
   b5348:	bf0c      	ite	eq
   b534a:	f8dd 0016 	ldreq.w	r0, [sp, #22]
    }
    else {
        return 0;
   b534e:	4620      	movne	r0, r4
    }
}
   b5350:	b008      	add	sp, #32
   b5352:	bd10      	pop	{r4, pc}
   b5354:	000b52fd 	.word	0x000b52fd

000b5358 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b5358:	b508      	push	{r3, lr}
   b535a:	4b02      	ldr	r3, [pc, #8]	; (b5364 <cellular_signal+0xc>)
   b535c:	681b      	ldr	r3, [r3, #0]
   b535e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5360:	9301      	str	r3, [sp, #4]
   b5362:	bd08      	pop	{r3, pc}
   b5364:	00030274 	.word	0x00030274

000b5368 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5368:	b508      	push	{r3, lr}
   b536a:	4b02      	ldr	r3, [pc, #8]	; (b5374 <os_mutex_recursive_create+0xc>)
   b536c:	681b      	ldr	r3, [r3, #0]
   b536e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5370:	9301      	str	r3, [sp, #4]
   b5372:	bd08      	pop	{r3, pc}
   b5374:	00030248 	.word	0x00030248

000b5378 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b5378:	b508      	push	{r3, lr}
   b537a:	4b02      	ldr	r3, [pc, #8]	; (b5384 <os_mutex_recursive_destroy+0xc>)
   b537c:	681b      	ldr	r3, [r3, #0]
   b537e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5380:	9301      	str	r3, [sp, #4]
   b5382:	bd08      	pop	{r3, pc}
   b5384:	00030248 	.word	0x00030248

000b5388 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5388:	b508      	push	{r3, lr}
   b538a:	4b02      	ldr	r3, [pc, #8]	; (b5394 <os_mutex_recursive_lock+0xc>)
   b538c:	681b      	ldr	r3, [r3, #0]
   b538e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5390:	9301      	str	r3, [sp, #4]
   b5392:	bd08      	pop	{r3, pc}
   b5394:	00030248 	.word	0x00030248

000b5398 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5398:	b508      	push	{r3, lr}
   b539a:	4b02      	ldr	r3, [pc, #8]	; (b53a4 <os_mutex_recursive_unlock+0xc>)
   b539c:	681b      	ldr	r3, [r3, #0]
   b539e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b53a0:	9301      	str	r3, [sp, #4]
   b53a2:	bd08      	pop	{r3, pc}
   b53a4:	00030248 	.word	0x00030248

000b53a8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b53a8:	b508      	push	{r3, lr}
   b53aa:	4b02      	ldr	r3, [pc, #8]	; (b53b4 <HAL_RNG_GetRandomNumber+0xc>)
   b53ac:	681b      	ldr	r3, [r3, #0]
   b53ae:	685b      	ldr	r3, [r3, #4]
   b53b0:	9301      	str	r3, [sp, #4]
   b53b2:	bd08      	pop	{r3, pc}
   b53b4:	00030218 	.word	0x00030218

000b53b8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b53b8:	b508      	push	{r3, lr}
   b53ba:	4b02      	ldr	r3, [pc, #8]	; (b53c4 <HAL_Delay_Microseconds+0xc>)
   b53bc:	681b      	ldr	r3, [r3, #0]
   b53be:	68db      	ldr	r3, [r3, #12]
   b53c0:	9301      	str	r3, [sp, #4]
   b53c2:	bd08      	pop	{r3, pc}
   b53c4:	00030218 	.word	0x00030218

000b53c8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b53c8:	b508      	push	{r3, lr}
   b53ca:	4b02      	ldr	r3, [pc, #8]	; (b53d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b53cc:	681b      	ldr	r3, [r3, #0]
   b53ce:	695b      	ldr	r3, [r3, #20]
   b53d0:	9301      	str	r3, [sp, #4]
   b53d2:	bd08      	pop	{r3, pc}
   b53d4:	00030218 	.word	0x00030218

000b53d8 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b53d8:	b508      	push	{r3, lr}
   b53da:	4b02      	ldr	r3, [pc, #8]	; (b53e4 <hal_gpio_mode+0xc>)
   b53dc:	681b      	ldr	r3, [r3, #0]
   b53de:	689b      	ldr	r3, [r3, #8]
   b53e0:	9301      	str	r3, [sp, #4]
   b53e2:	bd08      	pop	{r3, pc}
   b53e4:	0003022c 	.word	0x0003022c

000b53e8 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b53e8:	b508      	push	{r3, lr}
   b53ea:	4b02      	ldr	r3, [pc, #8]	; (b53f4 <hal_gpio_get_mode+0xc>)
   b53ec:	681b      	ldr	r3, [r3, #0]
   b53ee:	68db      	ldr	r3, [r3, #12]
   b53f0:	9301      	str	r3, [sp, #4]
   b53f2:	bd08      	pop	{r3, pc}
   b53f4:	0003022c 	.word	0x0003022c

000b53f8 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b53f8:	b508      	push	{r3, lr}
   b53fa:	4b02      	ldr	r3, [pc, #8]	; (b5404 <hal_gpio_write+0xc>)
   b53fc:	681b      	ldr	r3, [r3, #0]
   b53fe:	691b      	ldr	r3, [r3, #16]
   b5400:	9301      	str	r3, [sp, #4]
   b5402:	bd08      	pop	{r3, pc}
   b5404:	0003022c 	.word	0x0003022c

000b5408 <hal_i2c_begin_transmission>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5408:	b508      	push	{r3, lr}
   b540a:	4b02      	ldr	r3, [pc, #8]	; (b5414 <hal_i2c_begin_transmission+0xc>)
   b540c:	681b      	ldr	r3, [r3, #0]
   b540e:	699b      	ldr	r3, [r3, #24]
   b5410:	9301      	str	r3, [sp, #4]
   b5412:	bd08      	pop	{r3, pc}
   b5414:	00030228 	.word	0x00030228

000b5418 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5418:	b508      	push	{r3, lr}
   b541a:	4b02      	ldr	r3, [pc, #8]	; (b5424 <hal_i2c_end_transmission+0xc>)
   b541c:	681b      	ldr	r3, [r3, #0]
   b541e:	69db      	ldr	r3, [r3, #28]
   b5420:	9301      	str	r3, [sp, #4]
   b5422:	bd08      	pop	{r3, pc}
   b5424:	00030228 	.word	0x00030228

000b5428 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5428:	b508      	push	{r3, lr}
   b542a:	4b02      	ldr	r3, [pc, #8]	; (b5434 <hal_i2c_write+0xc>)
   b542c:	681b      	ldr	r3, [r3, #0]
   b542e:	6a1b      	ldr	r3, [r3, #32]
   b5430:	9301      	str	r3, [sp, #4]
   b5432:	bd08      	pop	{r3, pc}
   b5434:	00030228 	.word	0x00030228

000b5438 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5438:	b508      	push	{r3, lr}
   b543a:	4b02      	ldr	r3, [pc, #8]	; (b5444 <hal_i2c_available+0xc>)
   b543c:	681b      	ldr	r3, [r3, #0]
   b543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5440:	9301      	str	r3, [sp, #4]
   b5442:	bd08      	pop	{r3, pc}
   b5444:	00030228 	.word	0x00030228

000b5448 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5448:	b508      	push	{r3, lr}
   b544a:	4b02      	ldr	r3, [pc, #8]	; (b5454 <hal_i2c_read+0xc>)
   b544c:	681b      	ldr	r3, [r3, #0]
   b544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5450:	9301      	str	r3, [sp, #4]
   b5452:	bd08      	pop	{r3, pc}
   b5454:	00030228 	.word	0x00030228

000b5458 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5458:	b508      	push	{r3, lr}
   b545a:	4b02      	ldr	r3, [pc, #8]	; (b5464 <hal_i2c_peek+0xc>)
   b545c:	681b      	ldr	r3, [r3, #0]
   b545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5460:	9301      	str	r3, [sp, #4]
   b5462:	bd08      	pop	{r3, pc}
   b5464:	00030228 	.word	0x00030228

000b5468 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5468:	b508      	push	{r3, lr}
   b546a:	4b02      	ldr	r3, [pc, #8]	; (b5474 <hal_i2c_flush+0xc>)
   b546c:	681b      	ldr	r3, [r3, #0]
   b546e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5470:	9301      	str	r3, [sp, #4]
   b5472:	bd08      	pop	{r3, pc}
   b5474:	00030228 	.word	0x00030228

000b5478 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5478:	b508      	push	{r3, lr}
   b547a:	4b02      	ldr	r3, [pc, #8]	; (b5484 <hal_i2c_is_enabled+0xc>)
   b547c:	681b      	ldr	r3, [r3, #0]
   b547e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5480:	9301      	str	r3, [sp, #4]
   b5482:	bd08      	pop	{r3, pc}
   b5484:	00030228 	.word	0x00030228

000b5488 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5488:	b508      	push	{r3, lr}
   b548a:	4b02      	ldr	r3, [pc, #8]	; (b5494 <hal_i2c_init+0xc>)
   b548c:	681b      	ldr	r3, [r3, #0]
   b548e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5490:	9301      	str	r3, [sp, #4]
   b5492:	bd08      	pop	{r3, pc}
   b5494:	00030228 	.word	0x00030228

000b5498 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b5498:	b508      	push	{r3, lr}
   b549a:	4b02      	ldr	r3, [pc, #8]	; (b54a4 <hal_i2c_lock+0xc>)
   b549c:	681b      	ldr	r3, [r3, #0]
   b549e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b54a0:	9301      	str	r3, [sp, #4]
   b54a2:	bd08      	pop	{r3, pc}
   b54a4:	00030228 	.word	0x00030228

000b54a8 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b54a8:	b508      	push	{r3, lr}
   b54aa:	4b02      	ldr	r3, [pc, #8]	; (b54b4 <hal_i2c_unlock+0xc>)
   b54ac:	681b      	ldr	r3, [r3, #0]
   b54ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b54b0:	9301      	str	r3, [sp, #4]
   b54b2:	bd08      	pop	{r3, pc}
   b54b4:	00030228 	.word	0x00030228

000b54b8 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b54b8:	b508      	push	{r3, lr}
   b54ba:	4b02      	ldr	r3, [pc, #8]	; (b54c4 <hal_i2c_request_ex+0xc>)
   b54bc:	681b      	ldr	r3, [r3, #0]
   b54be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b54c0:	9301      	str	r3, [sp, #4]
   b54c2:	bd08      	pop	{r3, pc}
   b54c4:	00030228 	.word	0x00030228

000b54c8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b54c8:	b508      	push	{r3, lr}
   b54ca:	4b02      	ldr	r3, [pc, #8]	; (b54d4 <inet_inet_ntop+0xc>)
   b54cc:	681b      	ldr	r3, [r3, #0]
   b54ce:	695b      	ldr	r3, [r3, #20]
   b54d0:	9301      	str	r3, [sp, #4]
   b54d2:	bd08      	pop	{r3, pc}
   b54d4:	00030264 	.word	0x00030264

000b54d8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b54d8:	b508      	push	{r3, lr}
   b54da:	4b02      	ldr	r3, [pc, #8]	; (b54e4 <netdb_freeaddrinfo+0xc>)
   b54dc:	681b      	ldr	r3, [r3, #0]
   b54de:	689b      	ldr	r3, [r3, #8]
   b54e0:	9301      	str	r3, [sp, #4]
   b54e2:	bd08      	pop	{r3, pc}
   b54e4:	00030268 	.word	0x00030268

000b54e8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b54e8:	b508      	push	{r3, lr}
   b54ea:	4b02      	ldr	r3, [pc, #8]	; (b54f4 <netdb_getaddrinfo+0xc>)
   b54ec:	681b      	ldr	r3, [r3, #0]
   b54ee:	68db      	ldr	r3, [r3, #12]
   b54f0:	9301      	str	r3, [sp, #4]
   b54f2:	bd08      	pop	{r3, pc}
   b54f4:	00030268 	.word	0x00030268

000b54f8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b54f8:	b508      	push	{r3, lr}
   b54fa:	4b02      	ldr	r3, [pc, #8]	; (b5504 <hal_spi_init+0xc>)
   b54fc:	681b      	ldr	r3, [r3, #0]
   b54fe:	69db      	ldr	r3, [r3, #28]
   b5500:	9301      	str	r3, [sp, #4]
   b5502:	bd08      	pop	{r3, pc}
   b5504:	00030230 	.word	0x00030230

000b5508 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5508:	b508      	push	{r3, lr}
   b550a:	4b02      	ldr	r3, [pc, #8]	; (b5514 <hal_spi_is_enabled+0xc>)
   b550c:	681b      	ldr	r3, [r3, #0]
   b550e:	6a1b      	ldr	r3, [r3, #32]
   b5510:	9301      	str	r3, [sp, #4]
   b5512:	bd08      	pop	{r3, pc}
   b5514:	00030230 	.word	0x00030230

000b5518 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b5518:	b508      	push	{r3, lr}
   b551a:	4b02      	ldr	r3, [pc, #8]	; (b5524 <hal_usart_end+0xc>)
   b551c:	681b      	ldr	r3, [r3, #0]
   b551e:	689b      	ldr	r3, [r3, #8]
   b5520:	9301      	str	r3, [sp, #4]
   b5522:	bd08      	pop	{r3, pc}
   b5524:	0003023c 	.word	0x0003023c

000b5528 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5528:	b508      	push	{r3, lr}
   b552a:	4b02      	ldr	r3, [pc, #8]	; (b5534 <hal_usart_write+0xc>)
   b552c:	681b      	ldr	r3, [r3, #0]
   b552e:	68db      	ldr	r3, [r3, #12]
   b5530:	9301      	str	r3, [sp, #4]
   b5532:	bd08      	pop	{r3, pc}
   b5534:	0003023c 	.word	0x0003023c

000b5538 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5538:	b508      	push	{r3, lr}
   b553a:	4b02      	ldr	r3, [pc, #8]	; (b5544 <hal_usart_available+0xc>)
   b553c:	681b      	ldr	r3, [r3, #0]
   b553e:	691b      	ldr	r3, [r3, #16]
   b5540:	9301      	str	r3, [sp, #4]
   b5542:	bd08      	pop	{r3, pc}
   b5544:	0003023c 	.word	0x0003023c

000b5548 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5548:	b508      	push	{r3, lr}
   b554a:	4b02      	ldr	r3, [pc, #8]	; (b5554 <hal_usart_read+0xc>)
   b554c:	681b      	ldr	r3, [r3, #0]
   b554e:	695b      	ldr	r3, [r3, #20]
   b5550:	9301      	str	r3, [sp, #4]
   b5552:	bd08      	pop	{r3, pc}
   b5554:	0003023c 	.word	0x0003023c

000b5558 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5558:	b508      	push	{r3, lr}
   b555a:	4b02      	ldr	r3, [pc, #8]	; (b5564 <hal_usart_peek+0xc>)
   b555c:	681b      	ldr	r3, [r3, #0]
   b555e:	699b      	ldr	r3, [r3, #24]
   b5560:	9301      	str	r3, [sp, #4]
   b5562:	bd08      	pop	{r3, pc}
   b5564:	0003023c 	.word	0x0003023c

000b5568 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5568:	b508      	push	{r3, lr}
   b556a:	4b02      	ldr	r3, [pc, #8]	; (b5574 <hal_usart_flush+0xc>)
   b556c:	681b      	ldr	r3, [r3, #0]
   b556e:	69db      	ldr	r3, [r3, #28]
   b5570:	9301      	str	r3, [sp, #4]
   b5572:	bd08      	pop	{r3, pc}
   b5574:	0003023c 	.word	0x0003023c

000b5578 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5578:	b508      	push	{r3, lr}
   b557a:	4b02      	ldr	r3, [pc, #8]	; (b5584 <hal_usart_is_enabled+0xc>)
   b557c:	681b      	ldr	r3, [r3, #0]
   b557e:	6a1b      	ldr	r3, [r3, #32]
   b5580:	9301      	str	r3, [sp, #4]
   b5582:	bd08      	pop	{r3, pc}
   b5584:	0003023c 	.word	0x0003023c

000b5588 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5588:	b508      	push	{r3, lr}
   b558a:	4b02      	ldr	r3, [pc, #8]	; (b5594 <hal_usart_available_data_for_write+0xc>)
   b558c:	681b      	ldr	r3, [r3, #0]
   b558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5590:	9301      	str	r3, [sp, #4]
   b5592:	bd08      	pop	{r3, pc}
   b5594:	0003023c 	.word	0x0003023c

000b5598 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b5598:	b508      	push	{r3, lr}
   b559a:	4b02      	ldr	r3, [pc, #8]	; (b55a4 <hal_usart_begin_config+0xc>)
   b559c:	681b      	ldr	r3, [r3, #0]
   b559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b55a0:	9301      	str	r3, [sp, #4]
   b55a2:	bd08      	pop	{r3, pc}
   b55a4:	0003023c 	.word	0x0003023c

000b55a8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b55a8:	b508      	push	{r3, lr}
   b55aa:	4b02      	ldr	r3, [pc, #8]	; (b55b4 <hal_usart_init_ex+0xc>)
   b55ac:	681b      	ldr	r3, [r3, #0]
   b55ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b55b0:	9301      	str	r3, [sp, #4]
   b55b2:	bd08      	pop	{r3, pc}
   b55b4:	0003023c 	.word	0x0003023c

000b55b8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b55b8:	b508      	push	{r3, lr}
   b55ba:	4b02      	ldr	r3, [pc, #8]	; (b55c4 <HAL_USB_USART_Init+0xc>)
   b55bc:	681b      	ldr	r3, [r3, #0]
   b55be:	681b      	ldr	r3, [r3, #0]
   b55c0:	9301      	str	r3, [sp, #4]
   b55c2:	bd08      	pop	{r3, pc}
   b55c4:	0003024c 	.word	0x0003024c

000b55c8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b55c8:	b508      	push	{r3, lr}
   b55ca:	4b02      	ldr	r3, [pc, #8]	; (b55d4 <HAL_USB_USART_Begin+0xc>)
   b55cc:	681b      	ldr	r3, [r3, #0]
   b55ce:	685b      	ldr	r3, [r3, #4]
   b55d0:	9301      	str	r3, [sp, #4]
   b55d2:	bd08      	pop	{r3, pc}
   b55d4:	0003024c 	.word	0x0003024c

000b55d8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b55d8:	b508      	push	{r3, lr}
   b55da:	4b02      	ldr	r3, [pc, #8]	; (b55e4 <HAL_USB_USART_End+0xc>)
   b55dc:	681b      	ldr	r3, [r3, #0]
   b55de:	689b      	ldr	r3, [r3, #8]
   b55e0:	9301      	str	r3, [sp, #4]
   b55e2:	bd08      	pop	{r3, pc}
   b55e4:	0003024c 	.word	0x0003024c

000b55e8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b55e8:	b508      	push	{r3, lr}
   b55ea:	4b02      	ldr	r3, [pc, #8]	; (b55f4 <HAL_USB_USART_Available_Data+0xc>)
   b55ec:	681b      	ldr	r3, [r3, #0]
   b55ee:	691b      	ldr	r3, [r3, #16]
   b55f0:	9301      	str	r3, [sp, #4]
   b55f2:	bd08      	pop	{r3, pc}
   b55f4:	0003024c 	.word	0x0003024c

000b55f8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b55f8:	b508      	push	{r3, lr}
   b55fa:	4b02      	ldr	r3, [pc, #8]	; (b5604 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b55fc:	681b      	ldr	r3, [r3, #0]
   b55fe:	695b      	ldr	r3, [r3, #20]
   b5600:	9301      	str	r3, [sp, #4]
   b5602:	bd08      	pop	{r3, pc}
   b5604:	0003024c 	.word	0x0003024c

000b5608 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5608:	b508      	push	{r3, lr}
   b560a:	4b02      	ldr	r3, [pc, #8]	; (b5614 <HAL_USB_USART_Receive_Data+0xc>)
   b560c:	681b      	ldr	r3, [r3, #0]
   b560e:	699b      	ldr	r3, [r3, #24]
   b5610:	9301      	str	r3, [sp, #4]
   b5612:	bd08      	pop	{r3, pc}
   b5614:	0003024c 	.word	0x0003024c

000b5618 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5618:	b508      	push	{r3, lr}
   b561a:	4b02      	ldr	r3, [pc, #8]	; (b5624 <HAL_USB_USART_Send_Data+0xc>)
   b561c:	681b      	ldr	r3, [r3, #0]
   b561e:	69db      	ldr	r3, [r3, #28]
   b5620:	9301      	str	r3, [sp, #4]
   b5622:	bd08      	pop	{r3, pc}
   b5624:	0003024c 	.word	0x0003024c

000b5628 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5628:	b508      	push	{r3, lr}
   b562a:	4b02      	ldr	r3, [pc, #8]	; (b5634 <HAL_USB_USART_Flush_Data+0xc>)
   b562c:	681b      	ldr	r3, [r3, #0]
   b562e:	6a1b      	ldr	r3, [r3, #32]
   b5630:	9301      	str	r3, [sp, #4]
   b5632:	bd08      	pop	{r3, pc}
   b5634:	0003024c 	.word	0x0003024c

000b5638 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5638:	b508      	push	{r3, lr}
   b563a:	4b02      	ldr	r3, [pc, #8]	; (b5644 <panic_+0xc>)
   b563c:	681b      	ldr	r3, [r3, #0]
   b563e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5640:	9301      	str	r3, [sp, #4]
   b5642:	bd08      	pop	{r3, pc}
   b5644:	00030260 	.word	0x00030260

000b5648 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b5648:	b508      	push	{r3, lr}
   b564a:	4b02      	ldr	r3, [pc, #8]	; (b5654 <log_message_v+0xc>)
   b564c:	681b      	ldr	r3, [r3, #0]
   b564e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5650:	9301      	str	r3, [sp, #4]
   b5652:	bd08      	pop	{r3, pc}
   b5654:	00030260 	.word	0x00030260

000b5658 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b5658:	b508      	push	{r3, lr}
   b565a:	4b02      	ldr	r3, [pc, #8]	; (b5664 <log_level_name+0xc>)
   b565c:	681b      	ldr	r3, [r3, #0]
   b565e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b5660:	9301      	str	r3, [sp, #4]
   b5662:	bd08      	pop	{r3, pc}
   b5664:	00030260 	.word	0x00030260

000b5668 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b5668:	b508      	push	{r3, lr}
   b566a:	4b02      	ldr	r3, [pc, #8]	; (b5674 <log_set_callbacks+0xc>)
   b566c:	681b      	ldr	r3, [r3, #0]
   b566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b5670:	9301      	str	r3, [sp, #4]
   b5672:	bd08      	pop	{r3, pc}
   b5674:	00030260 	.word	0x00030260

000b5678 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5678:	b508      	push	{r3, lr}
   b567a:	4b02      	ldr	r3, [pc, #8]	; (b5684 <set_system_mode+0xc>)
   b567c:	681b      	ldr	r3, [r3, #0]
   b567e:	685b      	ldr	r3, [r3, #4]
   b5680:	9301      	str	r3, [sp, #4]
   b5682:	bd08      	pop	{r3, pc}
   b5684:	00030220 	.word	0x00030220

000b5688 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5688:	b508      	push	{r3, lr}
   b568a:	4b02      	ldr	r3, [pc, #8]	; (b5694 <system_delay_ms+0xc>)
   b568c:	681b      	ldr	r3, [r3, #0]
   b568e:	695b      	ldr	r3, [r3, #20]
   b5690:	9301      	str	r3, [sp, #4]
   b5692:	bd08      	pop	{r3, pc}
   b5694:	00030220 	.word	0x00030220

000b5698 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5698:	b508      	push	{r3, lr}
   b569a:	4b02      	ldr	r3, [pc, #8]	; (b56a4 <system_thread_set_state+0xc>)
   b569c:	681b      	ldr	r3, [r3, #0]
   b569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b56a0:	9301      	str	r3, [sp, #4]
   b56a2:	bd08      	pop	{r3, pc}
   b56a4:	00030220 	.word	0x00030220

000b56a8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b56a8:	b508      	push	{r3, lr}
   b56aa:	4b02      	ldr	r3, [pc, #8]	; (b56b4 <application_thread_current+0xc>)
   b56ac:	681b      	ldr	r3, [r3, #0]
   b56ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b56b0:	9301      	str	r3, [sp, #4]
   b56b2:	bd08      	pop	{r3, pc}
   b56b4:	00030220 	.word	0x00030220

000b56b8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b56b8:	b508      	push	{r3, lr}
   b56ba:	4b02      	ldr	r3, [pc, #8]	; (b56c4 <application_thread_invoke+0xc>)
   b56bc:	681b      	ldr	r3, [r3, #0]
   b56be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b56c0:	9301      	str	r3, [sp, #4]
   b56c2:	bd08      	pop	{r3, pc}
   b56c4:	00030220 	.word	0x00030220

000b56c8 <system_format_diag_data>:
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))
   b56c8:	b508      	push	{r3, lr}
   b56ca:	4b03      	ldr	r3, [pc, #12]	; (b56d8 <system_format_diag_data+0x10>)
   b56cc:	681b      	ldr	r3, [r3, #0]
   b56ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b56d2:	9301      	str	r3, [sp, #4]
   b56d4:	bd08      	pop	{r3, pc}
   b56d6:	0000      	.short	0x0000
   b56d8:	00030220 	.word	0x00030220

000b56dc <system_ctrl_set_app_request_handler>:

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b56dc:	b508      	push	{r3, lr}
   b56de:	4b03      	ldr	r3, [pc, #12]	; (b56ec <system_ctrl_set_app_request_handler+0x10>)
   b56e0:	681b      	ldr	r3, [r3, #0]
   b56e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b56e6:	9301      	str	r3, [sp, #4]
   b56e8:	bd08      	pop	{r3, pc}
   b56ea:	0000      	.short	0x0000
   b56ec:	00030220 	.word	0x00030220

000b56f0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b56f0:	b508      	push	{r3, lr}
   b56f2:	4b03      	ldr	r3, [pc, #12]	; (b5700 <system_ctrl_set_result+0x10>)
   b56f4:	681b      	ldr	r3, [r3, #0]
   b56f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b56fa:	9301      	str	r3, [sp, #4]
   b56fc:	bd08      	pop	{r3, pc}
   b56fe:	0000      	.short	0x0000
   b5700:	00030220 	.word	0x00030220

000b5704 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b5704:	b508      	push	{r3, lr}
   b5706:	4b02      	ldr	r3, [pc, #8]	; (b5710 <spark_variable+0xc>)
   b5708:	681b      	ldr	r3, [r3, #0]
   b570a:	681b      	ldr	r3, [r3, #0]
   b570c:	9301      	str	r3, [sp, #4]
   b570e:	bd08      	pop	{r3, pc}
   b5710:	00030244 	.word	0x00030244

000b5714 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b5714:	b508      	push	{r3, lr}
   b5716:	4b02      	ldr	r3, [pc, #8]	; (b5720 <spark_function+0xc>)
   b5718:	681b      	ldr	r3, [r3, #0]
   b571a:	685b      	ldr	r3, [r3, #4]
   b571c:	9301      	str	r3, [sp, #4]
   b571e:	bd08      	pop	{r3, pc}
   b5720:	00030244 	.word	0x00030244

000b5724 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5724:	b508      	push	{r3, lr}
   b5726:	4b02      	ldr	r3, [pc, #8]	; (b5730 <spark_process+0xc>)
   b5728:	681b      	ldr	r3, [r3, #0]
   b572a:	689b      	ldr	r3, [r3, #8]
   b572c:	9301      	str	r3, [sp, #4]
   b572e:	bd08      	pop	{r3, pc}
   b5730:	00030244 	.word	0x00030244

000b5734 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5734:	b508      	push	{r3, lr}
   b5736:	4b02      	ldr	r3, [pc, #8]	; (b5740 <spark_cloud_flag_connected+0xc>)
   b5738:	681b      	ldr	r3, [r3, #0]
   b573a:	695b      	ldr	r3, [r3, #20]
   b573c:	9301      	str	r3, [sp, #4]
   b573e:	bd08      	pop	{r3, pc}
   b5740:	00030244 	.word	0x00030244

000b5744 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5744:	b508      	push	{r3, lr}
   b5746:	4b02      	ldr	r3, [pc, #8]	; (b5750 <spark_send_event+0xc>)
   b5748:	681b      	ldr	r3, [r3, #0]
   b574a:	6a1b      	ldr	r3, [r3, #32]
   b574c:	9301      	str	r3, [sp, #4]
   b574e:	bd08      	pop	{r3, pc}
   b5750:	00030244 	.word	0x00030244

000b5754 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b5754:	b508      	push	{r3, lr}
   b5756:	4b02      	ldr	r3, [pc, #8]	; (b5760 <spark_sync_time+0xc>)
   b5758:	681b      	ldr	r3, [r3, #0]
   b575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b575c:	9301      	str	r3, [sp, #4]
   b575e:	bd08      	pop	{r3, pc}
   b5760:	00030244 	.word	0x00030244

000b5764 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5764:	b508      	push	{r3, lr}
   b5766:	4b02      	ldr	r3, [pc, #8]	; (b5770 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5768:	681b      	ldr	r3, [r3, #0]
   b576a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b576c:	9301      	str	r3, [sp, #4]
   b576e:	bd08      	pop	{r3, pc}
   b5770:	00030244 	.word	0x00030244

000b5774 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   b5774:	b508      	push	{r3, lr}
   b5776:	4b02      	ldr	r3, [pc, #8]	; (b5780 <network_config+0xc>)
   b5778:	681b      	ldr	r3, [r3, #0]
   b577a:	681b      	ldr	r3, [r3, #0]
   b577c:	9301      	str	r3, [sp, #4]
   b577e:	bd08      	pop	{r3, pc}
   b5780:	00030240 	.word	0x00030240

000b5784 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5784:	b508      	push	{r3, lr}
   b5786:	4b02      	ldr	r3, [pc, #8]	; (b5790 <network_connect+0xc>)
   b5788:	681b      	ldr	r3, [r3, #0]
   b578a:	685b      	ldr	r3, [r3, #4]
   b578c:	9301      	str	r3, [sp, #4]
   b578e:	bd08      	pop	{r3, pc}
   b5790:	00030240 	.word	0x00030240

000b5794 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5794:	b508      	push	{r3, lr}
   b5796:	4b02      	ldr	r3, [pc, #8]	; (b57a0 <network_connecting+0xc>)
   b5798:	681b      	ldr	r3, [r3, #0]
   b579a:	689b      	ldr	r3, [r3, #8]
   b579c:	9301      	str	r3, [sp, #4]
   b579e:	bd08      	pop	{r3, pc}
   b57a0:	00030240 	.word	0x00030240

000b57a4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b57a4:	b508      	push	{r3, lr}
   b57a6:	4b02      	ldr	r3, [pc, #8]	; (b57b0 <network_disconnect+0xc>)
   b57a8:	681b      	ldr	r3, [r3, #0]
   b57aa:	68db      	ldr	r3, [r3, #12]
   b57ac:	9301      	str	r3, [sp, #4]
   b57ae:	bd08      	pop	{r3, pc}
   b57b0:	00030240 	.word	0x00030240

000b57b4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b57b4:	b508      	push	{r3, lr}
   b57b6:	4b02      	ldr	r3, [pc, #8]	; (b57c0 <network_ready+0xc>)
   b57b8:	681b      	ldr	r3, [r3, #0]
   b57ba:	691b      	ldr	r3, [r3, #16]
   b57bc:	9301      	str	r3, [sp, #4]
   b57be:	bd08      	pop	{r3, pc}
   b57c0:	00030240 	.word	0x00030240

000b57c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b57c4:	b508      	push	{r3, lr}
   b57c6:	4b02      	ldr	r3, [pc, #8]	; (b57d0 <network_on+0xc>)
   b57c8:	681b      	ldr	r3, [r3, #0]
   b57ca:	695b      	ldr	r3, [r3, #20]
   b57cc:	9301      	str	r3, [sp, #4]
   b57ce:	bd08      	pop	{r3, pc}
   b57d0:	00030240 	.word	0x00030240

000b57d4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b57d4:	b508      	push	{r3, lr}
   b57d6:	4b02      	ldr	r3, [pc, #8]	; (b57e0 <network_off+0xc>)
   b57d8:	681b      	ldr	r3, [r3, #0]
   b57da:	699b      	ldr	r3, [r3, #24]
   b57dc:	9301      	str	r3, [sp, #4]
   b57de:	bd08      	pop	{r3, pc}
   b57e0:	00030240 	.word	0x00030240

000b57e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b57e4:	b508      	push	{r3, lr}
   b57e6:	4b02      	ldr	r3, [pc, #8]	; (b57f0 <network_listen+0xc>)
   b57e8:	681b      	ldr	r3, [r3, #0]
   b57ea:	69db      	ldr	r3, [r3, #28]
   b57ec:	9301      	str	r3, [sp, #4]
   b57ee:	bd08      	pop	{r3, pc}
   b57f0:	00030240 	.word	0x00030240

000b57f4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b57f4:	b508      	push	{r3, lr}
   b57f6:	4b02      	ldr	r3, [pc, #8]	; (b5800 <network_listening+0xc>)
   b57f8:	681b      	ldr	r3, [r3, #0]
   b57fa:	6a1b      	ldr	r3, [r3, #32]
   b57fc:	9301      	str	r3, [sp, #4]
   b57fe:	bd08      	pop	{r3, pc}
   b5800:	00030240 	.word	0x00030240

000b5804 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5804:	b508      	push	{r3, lr}
   b5806:	4b02      	ldr	r3, [pc, #8]	; (b5810 <network_set_listen_timeout+0xc>)
   b5808:	681b      	ldr	r3, [r3, #0]
   b580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b580c:	9301      	str	r3, [sp, #4]
   b580e:	bd08      	pop	{r3, pc}
   b5810:	00030240 	.word	0x00030240

000b5814 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5814:	b508      	push	{r3, lr}
   b5816:	4b02      	ldr	r3, [pc, #8]	; (b5820 <network_get_listen_timeout+0xc>)
   b5818:	681b      	ldr	r3, [r3, #0]
   b581a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b581c:	9301      	str	r3, [sp, #4]
   b581e:	bd08      	pop	{r3, pc}
   b5820:	00030240 	.word	0x00030240

000b5824 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5824:	b508      	push	{r3, lr}
   b5826:	4b02      	ldr	r3, [pc, #8]	; (b5830 <network_is_on+0xc>)
   b5828:	681b      	ldr	r3, [r3, #0]
   b582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b582c:	9301      	str	r3, [sp, #4]
   b582e:	bd08      	pop	{r3, pc}
   b5830:	00030240 	.word	0x00030240

000b5834 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5834:	b508      	push	{r3, lr}
   b5836:	4b02      	ldr	r3, [pc, #8]	; (b5840 <network_is_off+0xc>)
   b5838:	681b      	ldr	r3, [r3, #0]
   b583a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b583c:	9301      	str	r3, [sp, #4]
   b583e:	bd08      	pop	{r3, pc}
   b5840:	00030240 	.word	0x00030240

000b5844 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5844:	b508      	push	{r3, lr}
   b5846:	4b02      	ldr	r3, [pc, #8]	; (b5850 <malloc+0xc>)
   b5848:	681b      	ldr	r3, [r3, #0]
   b584a:	681b      	ldr	r3, [r3, #0]
   b584c:	9301      	str	r3, [sp, #4]
   b584e:	bd08      	pop	{r3, pc}
   b5850:	0003021c 	.word	0x0003021c

000b5854 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5854:	b508      	push	{r3, lr}
   b5856:	4b02      	ldr	r3, [pc, #8]	; (b5860 <free+0xc>)
   b5858:	681b      	ldr	r3, [r3, #0]
   b585a:	685b      	ldr	r3, [r3, #4]
   b585c:	9301      	str	r3, [sp, #4]
   b585e:	bd08      	pop	{r3, pc}
   b5860:	0003021c 	.word	0x0003021c

000b5864 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5864:	b508      	push	{r3, lr}
   b5866:	4b02      	ldr	r3, [pc, #8]	; (b5870 <realloc+0xc>)
   b5868:	681b      	ldr	r3, [r3, #0]
   b586a:	689b      	ldr	r3, [r3, #8]
   b586c:	9301      	str	r3, [sp, #4]
   b586e:	bd08      	pop	{r3, pc}
   b5870:	0003021c 	.word	0x0003021c

000b5874 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5874:	b508      	push	{r3, lr}
   b5876:	4b02      	ldr	r3, [pc, #8]	; (b5880 <vsnprintf+0xc>)
   b5878:	681b      	ldr	r3, [r3, #0]
   b587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b587c:	9301      	str	r3, [sp, #4]
   b587e:	bd08      	pop	{r3, pc}
   b5880:	0003021c 	.word	0x0003021c

000b5884 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5884:	b508      	push	{r3, lr}
   b5886:	4b02      	ldr	r3, [pc, #8]	; (b5890 <abort+0xc>)
   b5888:	681b      	ldr	r3, [r3, #0]
   b588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b588c:	9301      	str	r3, [sp, #4]
   b588e:	bd08      	pop	{r3, pc}
   b5890:	0003021c 	.word	0x0003021c

000b5894 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5894:	b508      	push	{r3, lr}
   b5896:	4b02      	ldr	r3, [pc, #8]	; (b58a0 <_malloc_r+0xc>)
   b5898:	681b      	ldr	r3, [r3, #0]
   b589a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b589c:	9301      	str	r3, [sp, #4]
   b589e:	bd08      	pop	{r3, pc}
   b58a0:	0003021c 	.word	0x0003021c

000b58a4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b58a4:	b508      	push	{r3, lr}
   b58a6:	4b02      	ldr	r3, [pc, #8]	; (b58b0 <__errno+0xc>)
   b58a8:	681b      	ldr	r3, [r3, #0]
   b58aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b58ac:	9301      	str	r3, [sp, #4]
   b58ae:	bd08      	pop	{r3, pc}
   b58b0:	0003021c 	.word	0x0003021c

000b58b4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b58b4:	b508      	push	{r3, lr}
   b58b6:	4b02      	ldr	r3, [pc, #8]	; (b58c0 <__assert_func+0xc>)
   b58b8:	681b      	ldr	r3, [r3, #0]
   b58ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b58bc:	9301      	str	r3, [sp, #4]
   b58be:	bd08      	pop	{r3, pc}
   b58c0:	0003021c 	.word	0x0003021c

000b58c4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b58c4:	b508      	push	{r3, lr}
   b58c6:	4b02      	ldr	r3, [pc, #8]	; (b58d0 <newlib_impure_ptr_callback+0xc>)
   b58c8:	681b      	ldr	r3, [r3, #0]
   b58ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b58cc:	9301      	str	r3, [sp, #4]
   b58ce:	bd08      	pop	{r3, pc}
   b58d0:	0003021c 	.word	0x0003021c

000b58d4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b58d4:	2100      	movs	r1, #0
   b58d6:	f7ff bed7 	b.w	b5688 <system_delay_ms>

000b58da <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b58da:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b58dc:	6883      	ldr	r3, [r0, #8]
   b58de:	4604      	mov	r4, r0
   b58e0:	b90b      	cbnz	r3, b58e6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b58e2:	f002 fd7f 	bl	b83e4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b58e6:	68c3      	ldr	r3, [r0, #12]
   b58e8:	4798      	blx	r3
      if (_M_manager)
   b58ea:	68a3      	ldr	r3, [r4, #8]
   b58ec:	b11b      	cbz	r3, b58f6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b58ee:	2203      	movs	r2, #3
   b58f0:	4621      	mov	r1, r4
   b58f2:	4620      	mov	r0, r4
   b58f4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b58f6:	4620      	mov	r0, r4
   b58f8:	2110      	movs	r1, #16
}
   b58fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b58fe:	f7ff b892 	b.w	b4a26 <_ZdlPvj>

000b5902 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5902:	b510      	push	{r4, lr}
      if (_M_manager)
   b5904:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5906:	4604      	mov	r4, r0
      if (_M_manager)
   b5908:	b113      	cbz	r3, b5910 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b590a:	2203      	movs	r2, #3
   b590c:	4601      	mov	r1, r0
   b590e:	4798      	blx	r3
    }
   b5910:	4620      	mov	r0, r4
   b5912:	bd10      	pop	{r4, pc}

000b5914 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5914:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5916:	6843      	ldr	r3, [r0, #4]
   b5918:	3b01      	subs	r3, #1
    {
   b591a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b591c:	6043      	str	r3, [r0, #4]
   b591e:	b963      	cbnz	r3, b593a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5920:	6803      	ldr	r3, [r0, #0]
   b5922:	689b      	ldr	r3, [r3, #8]
   b5924:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5926:	68a3      	ldr	r3, [r4, #8]
   b5928:	3b01      	subs	r3, #1
   b592a:	60a3      	str	r3, [r4, #8]
   b592c:	b92b      	cbnz	r3, b593a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b592e:	6823      	ldr	r3, [r4, #0]
   b5930:	4620      	mov	r0, r4
   b5932:	68db      	ldr	r3, [r3, #12]
    }
   b5934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5938:	4718      	bx	r3
    }
   b593a:	bd10      	pop	{r4, pc}

000b593c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b593c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b593e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5942:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5944:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b5948:	42ae      	cmp	r6, r5
   b594a:	d004      	beq.n	b5956 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b594c:	4628      	mov	r0, r5
   b594e:	f002 f941 	bl	b7bd4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5952:	3510      	adds	r5, #16
   b5954:	e7f8      	b.n	b5948 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5956:	6820      	ldr	r0, [r4, #0]
   b5958:	f7ff ff7c 	bl	b5854 <free>
    AllocatorT::free(data_);
}
   b595c:	4620      	mov	r0, r4
   b595e:	bd70      	pop	{r4, r5, r6, pc}

000b5960 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5960:	b513      	push	{r0, r1, r4, lr}
   b5962:	460b      	mov	r3, r1
   b5964:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5966:	e9d0 0100 	ldrd	r0, r1, [r0]
   b596a:	466c      	mov	r4, sp
   b596c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5970:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5974:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5978:	e894 0003 	ldmia.w	r4, {r0, r1}
   b597c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5980:	b002      	add	sp, #8
   b5982:	bd10      	pop	{r4, pc}

000b5984 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5984:	4802      	ldr	r0, [pc, #8]	; (b5990 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5986:	2300      	movs	r3, #0
   b5988:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b598a:	f7ff bced 	b.w	b5368 <os_mutex_recursive_create>
   b598e:	bf00      	nop
   b5990:	2003e644 	.word	0x2003e644

000b5994 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b5994:	2200      	movs	r2, #0
   b5996:	6840      	ldr	r0, [r0, #4]
   b5998:	4611      	mov	r1, r2
   b599a:	f7ff bf0b 	b.w	b57b4 <network_ready>

000b599e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b599e:	2200      	movs	r2, #0
   b59a0:	6840      	ldr	r0, [r0, #4]
   b59a2:	4611      	mov	r1, r2
   b59a4:	f7ff bf26 	b.w	b57f4 <network_listening>

000b59a8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b59a8:	2200      	movs	r2, #0
   b59aa:	6840      	ldr	r0, [r0, #4]
   b59ac:	4611      	mov	r1, r2
   b59ae:	f7ff bf31 	b.w	b5814 <network_get_listen_timeout>

000b59b2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b59b2:	6840      	ldr	r0, [r0, #4]
   b59b4:	2200      	movs	r2, #0
   b59b6:	f7ff bf25 	b.w	b5804 <network_set_listen_timeout>

000b59ba <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b59ba:	6840      	ldr	r0, [r0, #4]
   b59bc:	2200      	movs	r2, #0
   b59be:	f081 0101 	eor.w	r1, r1, #1
   b59c2:	f7ff bf0f 	b.w	b57e4 <network_listen>

000b59c6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b59c6:	2300      	movs	r3, #0
   b59c8:	6840      	ldr	r0, [r0, #4]
   b59ca:	461a      	mov	r2, r3
   b59cc:	4619      	mov	r1, r3
   b59ce:	f7ff bf01 	b.w	b57d4 <network_off>

000b59d2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b59d2:	2300      	movs	r3, #0
   b59d4:	6840      	ldr	r0, [r0, #4]
   b59d6:	461a      	mov	r2, r3
   b59d8:	4619      	mov	r1, r3
   b59da:	f7ff bef3 	b.w	b57c4 <network_on>

000b59de <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b59de:	2200      	movs	r2, #0
   b59e0:	6840      	ldr	r0, [r0, #4]
   b59e2:	4611      	mov	r1, r2
   b59e4:	f7ff bed6 	b.w	b5794 <network_connecting>

000b59e8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b59e8:	6840      	ldr	r0, [r0, #4]
   b59ea:	2200      	movs	r2, #0
   b59ec:	2102      	movs	r1, #2
   b59ee:	f7ff bed9 	b.w	b57a4 <network_disconnect>

000b59f2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b59f2:	2300      	movs	r3, #0
   b59f4:	6840      	ldr	r0, [r0, #4]
   b59f6:	461a      	mov	r2, r3
   b59f8:	f7ff bec4 	b.w	b5784 <network_connect>

000b59fc <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b59fc:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b59fe:	4b13      	ldr	r3, [pc, #76]	; (b5a4c <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b5a00:	6003      	str	r3, [r0, #0]
   b5a02:	2518      	movs	r5, #24
   b5a04:	3330      	adds	r3, #48	; 0x30
   b5a06:	b086      	sub	sp, #24
   b5a08:	460e      	mov	r6, r1
   b5a0a:	6043      	str	r3, [r0, #4]
   b5a0c:	462a      	mov	r2, r5
   b5a0e:	2100      	movs	r1, #0
   b5a10:	4604      	mov	r4, r0
   b5a12:	3008      	adds	r0, #8
   b5a14:	f002 fd20 	bl	b8458 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b5a18:	2200      	movs	r2, #0
   b5a1a:	6870      	ldr	r0, [r6, #4]
   b5a1c:	4611      	mov	r1, r2
   b5a1e:	f7ff fec9 	bl	b57b4 <network_ready>
   b5a22:	b178      	cbz	r0, b5a44 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b5a24:	2100      	movs	r1, #0
   b5a26:	462a      	mov	r2, r5
   b5a28:	4668      	mov	r0, sp
   b5a2a:	f002 fd15 	bl	b8458 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b5a2e:	4669      	mov	r1, sp
   b5a30:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b5a32:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b5a36:	f7ff fc8f 	bl	b5358 <cellular_signal>
   b5a3a:	b918      	cbnz	r0, b5a44 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b5a3c:	4669      	mov	r1, sp
   b5a3e:	4620      	mov	r0, r4
   b5a40:	f000 f8b8 	bl	b5bb4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b5a44:	4620      	mov	r0, r4
   b5a46:	b006      	add	sp, #24
   b5a48:	bd70      	pop	{r4, r5, r6, pc}
   b5a4a:	bf00      	nop
   b5a4c:	000b8950 	.word	0x000b8950

000b5a50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b5a50:	4b08      	ldr	r3, [pc, #32]	; (b5a74 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b5a52:	b510      	push	{r4, lr}
   b5a54:	2428      	movs	r4, #40	; 0x28
   b5a56:	4622      	mov	r2, r4
   b5a58:	4618      	mov	r0, r3
   b5a5a:	2100      	movs	r1, #0
   b5a5c:	f002 fcfc 	bl	b8458 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5a60:	4b05      	ldr	r3, [pc, #20]	; (b5a78 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b5a62:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b5a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5a68:	6042      	str	r2, [r0, #4]
   b5a6a:	2204      	movs	r2, #4
   b5a6c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b5a6e:	4a03      	ldr	r2, [pc, #12]	; (b5a7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b5a70:	601a      	str	r2, [r3, #0]
   b5a72:	bd10      	pop	{r4, pc}
   b5a74:	2003e650 	.word	0x2003e650
   b5a78:	2003e648 	.word	0x2003e648
   b5a7c:	000b8914 	.word	0x000b8914

000b5a80 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b5a80:	4770      	bx	lr

000b5a82 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b5a82:	7b00      	ldrb	r0, [r0, #12]
   b5a84:	4770      	bx	lr

000b5a86 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b5a86:	7b03      	ldrb	r3, [r0, #12]
   b5a88:	b14b      	cbz	r3, b5a9e <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b5a8a:	6903      	ldr	r3, [r0, #16]
   b5a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b5a90:	d005      	beq.n	b5a9e <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b5a92:	6980      	ldr	r0, [r0, #24]
   b5a94:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b5a98:	bf18      	it	ne
   b5a9a:	2001      	movne	r0, #1
   b5a9c:	4770      	bx	lr
   b5a9e:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b5aa0:	4770      	bx	lr

000b5aa2 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b5aa2:	6803      	ldr	r3, [r0, #0]
   b5aa4:	6a1b      	ldr	r3, [r3, #32]
   b5aa6:	4718      	bx	r3

000b5aa8 <_ZNK14CellularSignal7printToER5Print>:
{
   b5aa8:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b5aaa:	6803      	ldr	r3, [r0, #0]
{
   b5aac:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b5aae:	691b      	ldr	r3, [r3, #16]
{
   b5ab0:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b5ab2:	4798      	blx	r3
   b5ab4:	2102      	movs	r1, #2
   b5ab6:	4628      	mov	r0, r5
   b5ab8:	f002 f864 	bl	b7b84 <_ZN5Print5printEfi>
    n += p.print(',');
   b5abc:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b5abe:	4604      	mov	r4, r0
    n += p.print(',');
   b5ac0:	4628      	mov	r0, r5
   b5ac2:	f001 ff75 	bl	b79b0 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b5ac6:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b5ac8:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b5aca:	699b      	ldr	r3, [r3, #24]
   b5acc:	4630      	mov	r0, r6
   b5ace:	4798      	blx	r3
   b5ad0:	2102      	movs	r1, #2
   b5ad2:	4628      	mov	r0, r5
   b5ad4:	f002 f856 	bl	b7b84 <_ZN5Print5printEfi>
}
   b5ad8:	4420      	add	r0, r4
   b5ada:	bd70      	pop	{r4, r5, r6, pc}

000b5adc <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b5adc:	f1a0 0004 	sub.w	r0, r0, #4
   b5ae0:	f7ff bfe2 	b.w	b5aa8 <_ZNK14CellularSignal7printToER5Print>

000b5ae4 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b5ae4:	b510      	push	{r4, lr}
   b5ae6:	2120      	movs	r1, #32
   b5ae8:	4604      	mov	r4, r0
   b5aea:	f7fe ff9c 	bl	b4a26 <_ZdlPvj>
   b5aee:	4620      	mov	r0, r4
   b5af0:	bd10      	pop	{r4, pc}
	...

000b5af4 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b5af4:	7b03      	ldrb	r3, [r0, #12]
   b5af6:	b17b      	cbz	r3, b5b18 <_ZNK14CellularSignal11getStrengthEv+0x24>
   b5af8:	6943      	ldr	r3, [r0, #20]
   b5afa:	2b00      	cmp	r3, #0
   b5afc:	db0c      	blt.n	b5b18 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b5afe:	ee07 3a90 	vmov	s15, r3
   b5b02:	ed9f 7a07 	vldr	s14, [pc, #28]	; b5b20 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b5b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5b0a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b5b0e:	eddf 7a05 	vldr	s15, [pc, #20]	; b5b24 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b5b12:	ee20 0a27 	vmul.f32	s0, s0, s15
   b5b16:	4770      	bx	lr
    return -1.0f;
   b5b18:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b5b1c:	4770      	bx	lr
   b5b1e:	bf00      	nop
   b5b20:	477fff00 	.word	0x477fff00
   b5b24:	42c80000 	.word	0x42c80000

000b5b28 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b5b28:	7b03      	ldrb	r3, [r0, #12]
   b5b2a:	b163      	cbz	r3, b5b46 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b5b2c:	6903      	ldr	r3, [r0, #16]
   b5b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b5b32:	d008      	beq.n	b5b46 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b5b34:	ee07 3a90 	vmov	s15, r3
   b5b38:	ed9f 7a04 	vldr	s14, [pc, #16]	; b5b4c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b5b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5b40:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b5b44:	4770      	bx	lr
    return 0.0f;
   b5b46:	ed9f 0a02 	vldr	s0, [pc, #8]	; b5b50 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b5b4a:	4770      	bx	lr
   b5b4c:	42c80000 	.word	0x42c80000
   b5b50:	00000000 	.word	0x00000000

000b5b54 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b5b54:	7b03      	ldrb	r3, [r0, #12]
   b5b56:	b17b      	cbz	r3, b5b78 <_ZNK14CellularSignal10getQualityEv+0x24>
   b5b58:	69c3      	ldr	r3, [r0, #28]
   b5b5a:	2b00      	cmp	r3, #0
   b5b5c:	db0c      	blt.n	b5b78 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b5b5e:	ee07 3a90 	vmov	s15, r3
   b5b62:	ed9f 7a07 	vldr	s14, [pc, #28]	; b5b80 <_ZNK14CellularSignal10getQualityEv+0x2c>
   b5b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5b6a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b5b6e:	eddf 7a05 	vldr	s15, [pc, #20]	; b5b84 <_ZNK14CellularSignal10getQualityEv+0x30>
   b5b72:	ee20 0a27 	vmul.f32	s0, s0, s15
   b5b76:	4770      	bx	lr
    return -1.0f;
   b5b78:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b5b7c:	4770      	bx	lr
   b5b7e:	bf00      	nop
   b5b80:	477fff00 	.word	0x477fff00
   b5b84:	42c80000 	.word	0x42c80000

000b5b88 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b5b88:	7b03      	ldrb	r3, [r0, #12]
   b5b8a:	b163      	cbz	r3, b5ba6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b5b8c:	6983      	ldr	r3, [r0, #24]
   b5b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b5b92:	d008      	beq.n	b5ba6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b5b94:	ee07 3a90 	vmov	s15, r3
   b5b98:	ed9f 7a04 	vldr	s14, [pc, #16]	; b5bac <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b5b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5ba0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b5ba4:	4770      	bx	lr
    return 0.0f;
   b5ba6:	ed9f 0a02 	vldr	s0, [pc, #8]	; b5bb0 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b5baa:	4770      	bx	lr
   b5bac:	42c80000 	.word	0x42c80000
   b5bb0:	00000000 	.word	0x00000000

000b5bb4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b5bb4:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b5bb6:	460d      	mov	r5, r1
   b5bb8:	f100 0408 	add.w	r4, r0, #8
   b5bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5bc0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5bc4:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b5bc8:	2001      	movs	r0, #1
   b5bca:	bd30      	pop	{r4, r5, pc}

000b5bcc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5bcc:	4770      	bx	lr

000b5bce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5bce:	2000      	movs	r0, #0
   b5bd0:	4770      	bx	lr

000b5bd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5bd2:	b510      	push	{r4, lr}
   b5bd4:	2110      	movs	r1, #16
   b5bd6:	4604      	mov	r4, r0
   b5bd8:	f7fe ff25 	bl	b4a26 <_ZdlPvj>
   b5bdc:	4620      	mov	r0, r4
   b5bde:	bd10      	pop	{r4, pc}

000b5be0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5be0:	b508      	push	{r3, lr}
      { delete this; }
   b5be2:	f7ff fff6 	bl	b5bd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b5be6:	bd08      	pop	{r3, pc}

000b5be8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5be8:	b530      	push	{r4, r5, lr}
        type_(type) {
   b5bea:	2200      	movs	r2, #0
   b5bec:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5bf0:	6002      	str	r2, [r0, #0]
   b5bf2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5bf4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b5bf6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5bf8:	680c      	ldr	r4, [r1, #0]
   b5bfa:	8085      	strh	r5, [r0, #4]
   b5bfc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5bfe:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5c00:	bd30      	pop	{r4, r5, pc}

000b5c02 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5c02:	b510      	push	{r4, lr}
   b5c04:	4604      	mov	r4, r0
    free((void*)msg_);
   b5c06:	6800      	ldr	r0, [r0, #0]
   b5c08:	f7ff fe24 	bl	b5854 <free>
}
   b5c0c:	4620      	mov	r0, r4
   b5c0e:	bd10      	pop	{r4, pc}

000b5c10 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5c10:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5c12:	68c4      	ldr	r4, [r0, #12]
   b5c14:	b1f4      	cbz	r4, b5c54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b5c16:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5c18:	2b02      	cmp	r3, #2
   b5c1a:	d103      	bne.n	b5c24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5c1c:	f104 000c 	add.w	r0, r4, #12
   b5c20:	f7ff ffef 	bl	b5c02 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5c24:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b5c26:	b135      	cbz	r5, b5c36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b5c28:	4628      	mov	r0, r5
   b5c2a:	f7ff fe6a 	bl	b5902 <_ZNSt14_Function_baseD1Ev>
   b5c2e:	2110      	movs	r1, #16
   b5c30:	4628      	mov	r0, r5
   b5c32:	f7fe fef8 	bl	b4a26 <_ZdlPvj>
   b5c36:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b5c38:	b135      	cbz	r5, b5c48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b5c3a:	4628      	mov	r0, r5
   b5c3c:	f7ff fe61 	bl	b5902 <_ZNSt14_Function_baseD1Ev>
   b5c40:	2110      	movs	r1, #16
   b5c42:	4628      	mov	r0, r5
   b5c44:	f7fe feef 	bl	b4a26 <_ZdlPvj>
   b5c48:	4620      	mov	r0, r4
   b5c4a:	2114      	movs	r1, #20
   b5c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5c50:	f7fe bee9 	b.w	b4a26 <_ZdlPvj>
   b5c54:	bd38      	pop	{r3, r4, r5, pc}

000b5c56 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b5c56:	b510      	push	{r4, lr}
   b5c58:	b088      	sub	sp, #32
   b5c5a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b5c5c:	4668      	mov	r0, sp
   b5c5e:	f002 f804 	bl	b7c6a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b5c62:	4669      	mov	r1, sp
   b5c64:	a804      	add	r0, sp, #16
   b5c66:	f002 f84b 	bl	b7d00 <_ZN6StringC1ERKS_>
   b5c6a:	a804      	add	r0, sp, #16
   b5c6c:	47a0      	blx	r4
   b5c6e:	4604      	mov	r4, r0
   b5c70:	a804      	add	r0, sp, #16
   b5c72:	f001 ffaf 	bl	b7bd4 <_ZN6StringD1Ev>
    String p(param);
   b5c76:	4668      	mov	r0, sp
   b5c78:	f001 ffac 	bl	b7bd4 <_ZN6StringD1Ev>
}
   b5c7c:	4620      	mov	r0, r4
   b5c7e:	b008      	add	sp, #32
   b5c80:	bd10      	pop	{r4, pc}

000b5c82 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b5c82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b5c84:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b5c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b5c8a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b5c8c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b5c8e:	461a      	mov	r2, r3
   b5c90:	4669      	mov	r1, sp
   b5c92:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b5c94:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b5c98:	f8ad 4000 	strh.w	r4, [sp]
   b5c9c:	f7ff fd3a 	bl	b5714 <spark_function>
}
   b5ca0:	b004      	add	sp, #16
   b5ca2:	bd10      	pop	{r4, pc}

000b5ca4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5ca4:	680b      	ldr	r3, [r1, #0]
   b5ca6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5ca8:	684b      	ldr	r3, [r1, #4]
   b5caa:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5cac:	b113      	cbz	r3, b5cb4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5cae:	685a      	ldr	r2, [r3, #4]
   b5cb0:	3201      	adds	r2, #1
   b5cb2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5cb4:	4770      	bx	lr

000b5cb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b5cb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5cb8:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5cba:	4668      	mov	r0, sp
   b5cbc:	460d      	mov	r5, r1
   b5cbe:	f7ff fff1 	bl	b5ca4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5cc2:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5cc4:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5cc6:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b5cc8:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b5cca:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5ccc:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5cce:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b5cd0:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5cd2:	f7fe ffe3 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b5cd6:	b135      	cbz	r5, b5ce6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b5cd8:	1d28      	adds	r0, r5, #4
   b5cda:	f7fe ffdf 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5cde:	2108      	movs	r1, #8
   b5ce0:	4628      	mov	r0, r5
   b5ce2:	f7fe fea0 	bl	b4a26 <_ZdlPvj>
        return p;
    }
   b5ce6:	4620      	mov	r0, r4
   b5ce8:	b003      	add	sp, #12
   b5cea:	bd30      	pop	{r4, r5, pc}

000b5cec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b5cec:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5cee:	b510      	push	{r4, lr}
      if (_M_empty())
   b5cf0:	b90a      	cbnz	r2, b5cf6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5cf2:	f002 fb77 	bl	b83e4 <_ZSt25__throw_bad_function_callv>
    }
   b5cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5cfa:	68c3      	ldr	r3, [r0, #12]
   b5cfc:	4718      	bx	r3

000b5cfe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5cfe:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5d00:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5d02:	f100 0110 	add.w	r1, r0, #16
   b5d06:	f7ff fff1 	bl	b5cec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5d0a:	bd08      	pop	{r3, pc}

000b5d0c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5d0c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5d0e:	b510      	push	{r4, lr}
      if (_M_empty())
   b5d10:	b90a      	cbnz	r2, b5d16 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5d12:	f002 fb67 	bl	b83e4 <_ZSt25__throw_bad_function_callv>
    }
   b5d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5d1a:	68c3      	ldr	r3, [r0, #12]
   b5d1c:	4718      	bx	r3

000b5d1e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5d1e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5d20:	6800      	ldr	r0, [r0, #0]
   b5d22:	f100 0110 	add.w	r1, r0, #16
   b5d26:	f7ff fff1 	bl	b5d0c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5d2a:	bd08      	pop	{r3, pc}

000b5d2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5d2c:	b538      	push	{r3, r4, r5, lr}
   b5d2e:	2300      	movs	r3, #0
   b5d30:	4604      	mov	r4, r0
   b5d32:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5d34:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b5d36:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5d38:	f7fe fe71 	bl	b4a1e <_Znwj>
   b5d3c:	b128      	cbz	r0, b5d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b5d3e:	2301      	movs	r3, #1
   b5d40:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5d44:	4b02      	ldr	r3, [pc, #8]	; (b5d50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b5d46:	6003      	str	r3, [r0, #0]
   b5d48:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5d4a:	6020      	str	r0, [r4, #0]
	}
   b5d4c:	4620      	mov	r0, r4
   b5d4e:	bd38      	pop	{r3, r4, r5, pc}
   b5d50:	000b898c 	.word	0x000b898c

000b5d54 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5d54:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5d56:	2300      	movs	r3, #0
   b5d58:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5d5a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5d5c:	4604      	mov	r4, r0
   b5d5e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5d60:	b12b      	cbz	r3, b5d6e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5d62:	2202      	movs	r2, #2
   b5d64:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5d66:	68eb      	ldr	r3, [r5, #12]
   b5d68:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5d6a:	68ab      	ldr	r3, [r5, #8]
   b5d6c:	60a3      	str	r3, [r4, #8]
    }
   b5d6e:	4620      	mov	r0, r4
   b5d70:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5d74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5d74:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5d76:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b5d78:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5d7a:	4668      	mov	r0, sp
   b5d7c:	f7ff ff34 	bl	b5be8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5d80:	f04f 0302 	mov.w	r3, #2
   b5d84:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5d88:	2a00      	cmp	r2, #0
   b5d8a:	d103      	bne.n	b5d94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5d8c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5d90:	2900      	cmp	r1, #0
   b5d92:	d1f7      	bne.n	b5d84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5d94:	d125      	bne.n	b5de2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b5d96:	f104 050c 	add.w	r5, r4, #12
   b5d9a:	4669      	mov	r1, sp
   b5d9c:	4628      	mov	r0, r5
   b5d9e:	f7ff ff23 	bl	b5be8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b5da2:	f3bf 8f5b 	dmb	ish
   b5da6:	2301      	movs	r3, #1
   b5da8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5daa:	2000      	movs	r0, #0
   b5dac:	f104 0308 	add.w	r3, r4, #8
   b5db0:	f3bf 8f5b 	dmb	ish
   b5db4:	e853 6f00 	ldrex	r6, [r3]
   b5db8:	e843 0200 	strex	r2, r0, [r3]
   b5dbc:	2a00      	cmp	r2, #0
   b5dbe:	d1f9      	bne.n	b5db4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5dc0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5dc4:	b16e      	cbz	r6, b5de2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b5dc6:	f7ff fc6f 	bl	b56a8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5dca:	b178      	cbz	r0, b5dec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5dcc:	4629      	mov	r1, r5
   b5dce:	4630      	mov	r0, r6
   b5dd0:	f7ff ff8c 	bl	b5cec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5dd4:	4630      	mov	r0, r6
   b5dd6:	f7ff fd94 	bl	b5902 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5dda:	2110      	movs	r1, #16
   b5ddc:	4630      	mov	r0, r6
   b5dde:	f7fe fe22 	bl	b4a26 <_ZdlPvj>
        p_->setError(std::move(error));
   b5de2:	4668      	mov	r0, sp
   b5de4:	f7ff ff0d 	bl	b5c02 <_ZN8particle5ErrorD1Ev>
    }
   b5de8:	b009      	add	sp, #36	; 0x24
   b5dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5dec:	4631      	mov	r1, r6
   b5dee:	a802      	add	r0, sp, #8
   b5df0:	f7ff ffb0 	bl	b5d54 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5df4:	68e0      	ldr	r0, [r4, #12]
   b5df6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5dfa:	b108      	cbz	r0, b5e00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5dfc:	f002 fb82 	bl	b8504 <strdup>
        type_(type) {
   b5e00:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5e02:	2010      	movs	r0, #16
   b5e04:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5e08:	f7fe fe09 	bl	b4a1e <_Znwj>
   b5e0c:	4605      	mov	r5, r0
   b5e0e:	b1e8      	cbz	r0, b5e4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5e10:	2700      	movs	r7, #0
   b5e12:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5e14:	2018      	movs	r0, #24
   b5e16:	f7fe fe02 	bl	b4a1e <_Znwj>
   b5e1a:	4604      	mov	r4, r0
   b5e1c:	b188      	cbz	r0, b5e42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5e1e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5e20:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5e22:	a802      	add	r0, sp, #8
   b5e24:	f7ff fd9c 	bl	b5960 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5e28:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5e2a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5e2c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5e2e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5e30:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5e32:	a906      	add	r1, sp, #24
   b5e34:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5e36:	60e3      	str	r3, [r4, #12]
   b5e38:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5e3c:	9205      	str	r2, [sp, #20]
   b5e3e:	f7ff fed3 	bl	b5be8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b5e42:	4b08      	ldr	r3, [pc, #32]	; (b5e64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5e44:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5e46:	4b08      	ldr	r3, [pc, #32]	; (b5e68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5e48:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5e4a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5e4c:	a806      	add	r0, sp, #24
   b5e4e:	f7ff fed8 	bl	b5c02 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5e52:	a802      	add	r0, sp, #8
   b5e54:	f7ff fd55 	bl	b5902 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5e58:	2200      	movs	r2, #0
   b5e5a:	4629      	mov	r1, r5
   b5e5c:	4803      	ldr	r0, [pc, #12]	; (b5e6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5e5e:	f7ff fc2b 	bl	b56b8 <application_thread_invoke>
   b5e62:	e7b7      	b.n	b5dd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5e64:	000b5cff 	.word	0x000b5cff
   b5e68:	000b5f81 	.word	0x000b5f81
   b5e6c:	000b58db 	.word	0x000b58db

000b5e70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5e74:	b08b      	sub	sp, #44	; 0x2c
   b5e76:	4605      	mov	r5, r0
   b5e78:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5e7c:	460f      	mov	r7, r1
   b5e7e:	4690      	mov	r8, r2
   b5e80:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5e82:	f7ff fc57 	bl	b5734 <spark_cloud_flag_connected>
   b5e86:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5e88:	4683      	mov	fp, r0
   b5e8a:	bb38      	cbnz	r0, b5edc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5e8c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5e90:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5e92:	a905      	add	r1, sp, #20
   b5e94:	4630      	mov	r0, r6
   b5e96:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5e9a:	f7ff fea5 	bl	b5be8 <_ZN8particle5ErrorC1EOS0_>
   b5e9e:	2014      	movs	r0, #20
   b5ea0:	f7fe fdbd 	bl	b4a1e <_Znwj>
   b5ea4:	4604      	mov	r4, r0
   b5ea6:	b148      	cbz	r0, b5ebc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5ea8:	2302      	movs	r3, #2
   b5eaa:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5eac:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5eae:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5eb2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5eb4:	4631      	mov	r1, r6
   b5eb6:	300c      	adds	r0, #12
   b5eb8:	f7ff fe96 	bl	b5be8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5ebc:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5ebe:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5ec0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5ec4:	f7ff ff32 	bl	b5d2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5ec8:	4630      	mov	r0, r6
   b5eca:	f7ff fe9a 	bl	b5c02 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5ece:	a805      	add	r0, sp, #20
   b5ed0:	f7ff fe97 	bl	b5c02 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5ed4:	4628      	mov	r0, r5
   b5ed6:	b00b      	add	sp, #44	; 0x2c
   b5ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5edc:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b5ede:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5ee0:	2014      	movs	r0, #20
   b5ee2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b5ee6:	9307      	str	r3, [sp, #28]
   b5ee8:	f7fe fd99 	bl	b4a1e <_Znwj>
   b5eec:	4601      	mov	r1, r0
   b5eee:	b118      	cbz	r0, b5ef8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5ef0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5ef4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5ef6:	7044      	strb	r4, [r0, #1]
   b5ef8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5efa:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5efc:	f7ff ff16 	bl	b5d2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5f00:	4b1e      	ldr	r3, [pc, #120]	; (b5f7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b5f02:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5f04:	2008      	movs	r0, #8
   b5f06:	f7fe fd8a 	bl	b4a1e <_Znwj>
   b5f0a:	4604      	mov	r4, r0
   b5f0c:	b110      	cbz	r0, b5f14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5f0e:	a903      	add	r1, sp, #12
   b5f10:	f7ff fec8 	bl	b5ca4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5f14:	9600      	str	r6, [sp, #0]
   b5f16:	fa5f f38a 	uxtb.w	r3, sl
   b5f1a:	464a      	mov	r2, r9
   b5f1c:	4641      	mov	r1, r8
   b5f1e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5f20:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5f22:	f7ff fc0f 	bl	b5744 <spark_send_event>
   b5f26:	b9b8      	cbnz	r0, b5f58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5f28:	9b03      	ldr	r3, [sp, #12]
   b5f2a:	785b      	ldrb	r3, [r3, #1]
   b5f2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5f30:	b993      	cbnz	r3, b5f58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b5f32:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b5f36:	a905      	add	r1, sp, #20
   b5f38:	a803      	add	r0, sp, #12
   b5f3a:	9205      	str	r2, [sp, #20]
   b5f3c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5f40:	f7ff ff18 	bl	b5d74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5f44:	a805      	add	r0, sp, #20
   b5f46:	f7ff fe5c 	bl	b5c02 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5f4a:	a805      	add	r0, sp, #20
   b5f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5f4e:	f7ff feb2 	bl	b5cb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5f52:	a806      	add	r0, sp, #24
   b5f54:	f7fe fea2 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5f58:	a903      	add	r1, sp, #12
   b5f5a:	a805      	add	r0, sp, #20
   b5f5c:	f7ff fea2 	bl	b5ca4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5f60:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5f62:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5f64:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b5f66:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5f68:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5f6a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5f6c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5f6e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5f70:	f7fe fe94 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5f74:	a804      	add	r0, sp, #16
   b5f76:	f7fe fe91 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5f7a:	e7ab      	b.n	b5ed4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5f7c:	000b5ffd 	.word	0x000b5ffd

000b5f80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5f80:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f84:	4605      	mov	r5, r0
	switch (__op)
   b5f86:	d103      	bne.n	b5f90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5f88:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5f8a:	6003      	str	r3, [r0, #0]
      }
   b5f8c:	2000      	movs	r0, #0
   b5f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5f90:	2a02      	cmp	r2, #2
   b5f92:	d010      	beq.n	b5fb6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5f94:	2a03      	cmp	r2, #3
   b5f96:	d1f9      	bne.n	b5f8c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5f98:	6804      	ldr	r4, [r0, #0]
   b5f9a:	2c00      	cmp	r4, #0
   b5f9c:	d0f6      	beq.n	b5f8c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5f9e:	f104 0010 	add.w	r0, r4, #16
   b5fa2:	f7ff fe2e 	bl	b5c02 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5fa6:	4620      	mov	r0, r4
   b5fa8:	f7ff fcab 	bl	b5902 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5fac:	2118      	movs	r1, #24
   b5fae:	4620      	mov	r0, r4
   b5fb0:	f7fe fd39 	bl	b4a26 <_ZdlPvj>
   b5fb4:	e7ea      	b.n	b5f8c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5fb6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5fb8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5fba:	f7fe fd30 	bl	b4a1e <_Znwj>
   b5fbe:	4604      	mov	r4, r0
   b5fc0:	b150      	cbz	r0, b5fd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5fc2:	4631      	mov	r1, r6
   b5fc4:	f7ff fec6 	bl	b5d54 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5fc8:	6930      	ldr	r0, [r6, #16]
   b5fca:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5fce:	b108      	cbz	r0, b5fd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5fd0:	f002 fa98 	bl	b8504 <strdup>
        type_(type) {
   b5fd4:	6120      	str	r0, [r4, #16]
   b5fd6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5fd8:	602c      	str	r4, [r5, #0]
	}
   b5fda:	e7d7      	b.n	b5f8c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5fdc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5fdc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5fde:	2300      	movs	r3, #0
   b5fe0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5fe2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5fe4:	4604      	mov	r4, r0
   b5fe6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5fe8:	b12b      	cbz	r3, b5ff6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5fea:	2202      	movs	r2, #2
   b5fec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5fee:	68eb      	ldr	r3, [r5, #12]
   b5ff0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5ff2:	68ab      	ldr	r3, [r5, #8]
   b5ff4:	60a3      	str	r3, [r4, #8]
    }
   b5ff6:	4620      	mov	r0, r4
   b5ff8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5ffc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5ffe:	b089      	sub	sp, #36	; 0x24
   b6000:	4604      	mov	r4, r0
   b6002:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6004:	a801      	add	r0, sp, #4
   b6006:	4611      	mov	r1, r2
   b6008:	f7ff fe55 	bl	b5cb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b600c:	b1a4      	cbz	r4, b6038 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b600e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6010:	b11d      	cbz	r5, b601a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6012:	4628      	mov	r0, r5
   b6014:	f002 fa76 	bl	b8504 <strdup>
   b6018:	4605      	mov	r5, r0
   b601a:	a801      	add	r0, sp, #4
   b601c:	a903      	add	r1, sp, #12
        type_(type) {
   b601e:	9503      	str	r5, [sp, #12]
   b6020:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6024:	f7ff fea6 	bl	b5d74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6028:	a803      	add	r0, sp, #12
   b602a:	f7ff fdea 	bl	b5c02 <_ZN8particle5ErrorD1Ev>
   b602e:	a802      	add	r0, sp, #8
   b6030:	f7fe fe34 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6034:	b009      	add	sp, #36	; 0x24
   b6036:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6038:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b603a:	2301      	movs	r3, #1
   b603c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6040:	2a00      	cmp	r2, #0
   b6042:	d103      	bne.n	b604c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6044:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6048:	2900      	cmp	r1, #0
   b604a:	d1f7      	bne.n	b603c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b604c:	d1ef      	bne.n	b602e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b604e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6050:	f3bf 8f5b 	dmb	ish
   b6054:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6056:	1d2b      	adds	r3, r5, #4
   b6058:	f3bf 8f5b 	dmb	ish
   b605c:	e853 6f00 	ldrex	r6, [r3]
   b6060:	e843 4200 	strex	r2, r4, [r3]
   b6064:	2a00      	cmp	r2, #0
   b6066:	d1f9      	bne.n	b605c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6068:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b606c:	2e00      	cmp	r6, #0
   b606e:	d0de      	beq.n	b602e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6070:	4620      	mov	r0, r4
   b6072:	f7ff fb19 	bl	b56a8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6076:	4607      	mov	r7, r0
   b6078:	b160      	cbz	r0, b6094 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b607a:	f105 010c 	add.w	r1, r5, #12
   b607e:	4630      	mov	r0, r6
   b6080:	f7ff fe44 	bl	b5d0c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6084:	4630      	mov	r0, r6
   b6086:	f7ff fc3c 	bl	b5902 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b608a:	2110      	movs	r1, #16
   b608c:	4630      	mov	r0, r6
   b608e:	f7fe fcca 	bl	b4a26 <_ZdlPvj>
   b6092:	e7cc      	b.n	b602e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6094:	4631      	mov	r1, r6
   b6096:	a803      	add	r0, sp, #12
   b6098:	f7ff ffa0 	bl	b5fdc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b609c:	7b2b      	ldrb	r3, [r5, #12]
   b609e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b60a2:	2010      	movs	r0, #16
   b60a4:	f7fe fcbb 	bl	b4a1e <_Znwj>
   b60a8:	4605      	mov	r5, r0
   b60aa:	b1d0      	cbz	r0, b60e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b60ac:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b60ae:	2014      	movs	r0, #20
   b60b0:	f7fe fcb5 	bl	b4a1e <_Znwj>
   b60b4:	4604      	mov	r4, r0
   b60b6:	b178      	cbz	r0, b60d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b60b8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b60ba:	4601      	mov	r1, r0
   b60bc:	a803      	add	r0, sp, #12
   b60be:	f7ff fc4f 	bl	b5960 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b60c2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b60c4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b60c6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b60c8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b60ca:	9205      	str	r2, [sp, #20]
   b60cc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b60ce:	60e3      	str	r3, [r4, #12]
   b60d0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b60d4:	9206      	str	r2, [sp, #24]
   b60d6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b60d8:	4b06      	ldr	r3, [pc, #24]	; (b60f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b60da:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b60dc:	4b06      	ldr	r3, [pc, #24]	; (b60f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b60de:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b60e0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b60e2:	a803      	add	r0, sp, #12
   b60e4:	f7ff fc0d 	bl	b5902 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b60e8:	2200      	movs	r2, #0
   b60ea:	4629      	mov	r1, r5
   b60ec:	4803      	ldr	r0, [pc, #12]	; (b60fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b60ee:	f7ff fae3 	bl	b56b8 <application_thread_invoke>
   b60f2:	e7c7      	b.n	b6084 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b60f4:	000b5d1f 	.word	0x000b5d1f
   b60f8:	000b6101 	.word	0x000b6101
   b60fc:	000b58db 	.word	0x000b58db

000b6100 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6100:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6102:	b570      	push	{r4, r5, r6, lr}
   b6104:	4604      	mov	r4, r0
	switch (__op)
   b6106:	d103      	bne.n	b6110 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6108:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b610a:	6003      	str	r3, [r0, #0]
      }
   b610c:	2000      	movs	r0, #0
   b610e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6110:	2a02      	cmp	r2, #2
   b6112:	d00c      	beq.n	b612e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6114:	2a03      	cmp	r2, #3
   b6116:	d1f9      	bne.n	b610c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6118:	6804      	ldr	r4, [r0, #0]
   b611a:	2c00      	cmp	r4, #0
   b611c:	d0f6      	beq.n	b610c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b611e:	4620      	mov	r0, r4
   b6120:	f7ff fbef 	bl	b5902 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6124:	2114      	movs	r1, #20
   b6126:	4620      	mov	r0, r4
   b6128:	f7fe fc7d 	bl	b4a26 <_ZdlPvj>
   b612c:	e7ee      	b.n	b610c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b612e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6130:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6132:	f7fe fc74 	bl	b4a1e <_Znwj>
   b6136:	4605      	mov	r5, r0
   b6138:	b120      	cbz	r0, b6144 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b613a:	4631      	mov	r1, r6
   b613c:	f7ff ff4e 	bl	b5fdc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6140:	7c33      	ldrb	r3, [r6, #16]
   b6142:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6144:	6025      	str	r5, [r4, #0]
	}
   b6146:	e7e1      	b.n	b610c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b6148 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6148:	2200      	movs	r2, #0
   b614a:	6840      	ldr	r0, [r0, #4]
   b614c:	4611      	mov	r1, r2
   b614e:	f7ff bb51 	b.w	b57f4 <network_listening>

000b6152 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6152:	2200      	movs	r2, #0
   b6154:	6840      	ldr	r0, [r0, #4]
   b6156:	4611      	mov	r1, r2
   b6158:	f7ff bb5c 	b.w	b5814 <network_get_listen_timeout>

000b615c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b615c:	6840      	ldr	r0, [r0, #4]
   b615e:	2200      	movs	r2, #0
   b6160:	f7ff bb50 	b.w	b5804 <network_set_listen_timeout>

000b6164 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6164:	6840      	ldr	r0, [r0, #4]
   b6166:	2200      	movs	r2, #0
   b6168:	f081 0101 	eor.w	r1, r1, #1
   b616c:	f7ff bb3a 	b.w	b57e4 <network_listen>

000b6170 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6170:	2300      	movs	r3, #0
   b6172:	6840      	ldr	r0, [r0, #4]
   b6174:	461a      	mov	r2, r3
   b6176:	4619      	mov	r1, r3
   b6178:	f7ff bb2c 	b.w	b57d4 <network_off>

000b617c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b617c:	2300      	movs	r3, #0
   b617e:	6840      	ldr	r0, [r0, #4]
   b6180:	461a      	mov	r2, r3
   b6182:	4619      	mov	r1, r3
   b6184:	f7ff bb1e 	b.w	b57c4 <network_on>

000b6188 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6188:	2200      	movs	r2, #0
   b618a:	6840      	ldr	r0, [r0, #4]
   b618c:	4611      	mov	r1, r2
   b618e:	f7ff bb11 	b.w	b57b4 <network_ready>

000b6192 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6192:	2200      	movs	r2, #0
   b6194:	6840      	ldr	r0, [r0, #4]
   b6196:	4611      	mov	r1, r2
   b6198:	f7ff bafc 	b.w	b5794 <network_connecting>

000b619c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b619c:	6840      	ldr	r0, [r0, #4]
   b619e:	2200      	movs	r2, #0
   b61a0:	2102      	movs	r1, #2
   b61a2:	f7ff baff 	b.w	b57a4 <network_disconnect>

000b61a6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b61a6:	2300      	movs	r3, #0
   b61a8:	6840      	ldr	r0, [r0, #4]
   b61aa:	461a      	mov	r2, r3
   b61ac:	f7ff baea 	b.w	b5784 <network_connect>

000b61b0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b61b0:	4b02      	ldr	r3, [pc, #8]	; (b61bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b61b2:	2203      	movs	r2, #3
   b61b4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b61b6:	4a02      	ldr	r2, [pc, #8]	; (b61c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b61b8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b61ba:	4770      	bx	lr
   b61bc:	2003e678 	.word	0x2003e678
   b61c0:	000b89a8 	.word	0x000b89a8

000b61c4 <_ZN8particle6detail9_getVCellEhh>:
namespace particle {
namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   b61c4:	0909      	lsrs	r1, r1, #4
   b61c6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   b61ca:	ee07 1a90 	vmov	s15, r1
        return value / 800.0;
    }
   b61ce:	ed9f 0a03 	vldr	s0, [pc, #12]	; b61dc <_ZN8particle6detail9_getVCellEhh+0x18>
        float value = (float)((MSB << 4) | (LSB >> 4));
   b61d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
   b61d6:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b61da:	4770      	bx	lr
   b61dc:	44480000 	.word	0x44480000

000b61e0 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b61e0:	6800      	ldr	r0, [r0, #0]
   b61e2:	f000 b8ee 	b.w	b63c2 <_ZN7TwoWire4lockEv>

000b61e6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b61e6:	b510      	push	{r4, lr}
   b61e8:	4604      	mov	r4, r0
      lock_(_lock) {
   b61ea:	6001      	str	r1, [r0, #0]
   b61ec:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b61ee:	b10a      	cbz	r2, b61f4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b61f0:	f7ff fff6 	bl	b61e0 <_ZN9FuelGauge4lockEv>
}
   b61f4:	4620      	mov	r0, r4
   b61f6:	bd10      	pop	{r4, pc}

000b61f8 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b61f8:	b513      	push	{r0, r1, r4, lr}
   b61fa:	4604      	mov	r4, r0
   b61fc:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b61fe:	f002 f889 	bl	b8314 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b6202:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b6204:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b6206:	4620      	mov	r0, r4
   b6208:	f7ff ffed 	bl	b61e6 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b620c:	4620      	mov	r0, r4
   b620e:	b002      	add	sp, #8
   b6210:	bd10      	pop	{r4, pc}

000b6212 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b6212:	6800      	ldr	r0, [r0, #0]
   b6214:	f000 b8de 	b.w	b63d4 <_ZN7TwoWire6unlockEv>

000b6218 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   b6218:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b621c:	4604      	mov	r4, r0
   b621e:	460d      	mov	r5, r1
   b6220:	4617      	mov	r7, r2
   b6222:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b6224:	f7ff ffdc 	bl	b61e0 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6228:	2236      	movs	r2, #54	; 0x36
   b622a:	2300      	movs	r3, #0
   b622c:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b6230:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b6232:	230a      	movs	r3, #10
   b6234:	f04f 0801 	mov.w	r8, #1
   b6238:	4669      	mov	r1, sp
   b623a:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b623e:	f000 f8a4 	bl	b638a <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   b6242:	6820      	ldr	r0, [r4, #0]
   b6244:	6803      	ldr	r3, [r0, #0]
   b6246:	4629      	mov	r1, r5
   b6248:	689b      	ldr	r3, [r3, #8]
   b624a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b624c:	6820      	ldr	r0, [r4, #0]
   b624e:	4641      	mov	r1, r8
   b6250:	f000 f8b3 	bl	b63ba <_ZN7TwoWire15endTransmissionEh>
   b6254:	4605      	mov	r5, r0
   b6256:	b140      	cbz	r0, b626a <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   b6258:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   b625c:	4620      	mov	r0, r4
   b625e:	f7ff ffd8 	bl	b6212 <_ZN9FuelGauge6unlockEv>
}
   b6262:	4628      	mov	r0, r5
   b6264:	b004      	add	sp, #16
   b6266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   b626a:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   b626c:	6820      	ldr	r0, [r4, #0]
   b626e:	9301      	str	r3, [sp, #4]
   b6270:	4669      	mov	r1, sp
   b6272:	f000 f873 	bl	b635c <_ZN7TwoWire11requestFromERK16WireTransmission>
   b6276:	2802      	cmp	r0, #2
   b6278:	d1ee      	bne.n	b6258 <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   b627a:	6820      	ldr	r0, [r4, #0]
   b627c:	6803      	ldr	r3, [r0, #0]
   b627e:	695b      	ldr	r3, [r3, #20]
   b6280:	4798      	blx	r3
   b6282:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   b6284:	6820      	ldr	r0, [r4, #0]
   b6286:	6803      	ldr	r3, [r0, #0]
   b6288:	695b      	ldr	r3, [r3, #20]
   b628a:	4798      	blx	r3
   b628c:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   b628e:	e7e5      	b.n	b625c <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000b6290 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   b6290:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   b6292:	2300      	movs	r3, #0
   b6294:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   b6298:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b629c:	f10d 0206 	add.w	r2, sp, #6
   b62a0:	f10d 0307 	add.w	r3, sp, #7
   b62a4:	2102      	movs	r1, #2
   b62a6:	f7ff ffb7 	bl	b6218 <_ZN9FuelGauge12readRegisterEhRhS0_>
   b62aa:	b940      	cbnz	r0, b62be <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   b62ac:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b62b0:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   b62b4:	b003      	add	sp, #12
   b62b6:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   b62ba:	f7ff bf83 	b.w	b61c4 <_ZN8particle6detail9_getVCellEhh>
}
   b62be:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b62c2:	b003      	add	sp, #12
   b62c4:	f85d fb04 	ldr.w	pc, [sp], #4

000b62c8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b62c8:	4770      	bx	lr

000b62ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b62ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b62cc:	4606      	mov	r6, r0
   b62ce:	4615      	mov	r5, r2
   b62d0:	460c      	mov	r4, r1
   b62d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b62d4:	42bc      	cmp	r4, r7
   b62d6:	d006      	beq.n	b62e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b62d8:	6833      	ldr	r3, [r6, #0]
   b62da:	f814 1b01 	ldrb.w	r1, [r4], #1
   b62de:	689b      	ldr	r3, [r3, #8]
   b62e0:	4630      	mov	r0, r6
   b62e2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b62e4:	e7f6      	b.n	b62d4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b62e6:	4628      	mov	r0, r5
   b62e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b62ea <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b62ea:	7c00      	ldrb	r0, [r0, #16]
   b62ec:	2200      	movs	r2, #0
   b62ee:	f7ff b89b 	b.w	b5428 <hal_i2c_write>

000b62f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b62f2:	7c00      	ldrb	r0, [r0, #16]
   b62f4:	2100      	movs	r1, #0
   b62f6:	f7ff b89f 	b.w	b5438 <hal_i2c_available>

000b62fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b62fa:	7c00      	ldrb	r0, [r0, #16]
   b62fc:	2100      	movs	r1, #0
   b62fe:	f7ff b8a3 	b.w	b5448 <hal_i2c_read>

000b6302 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6302:	7c00      	ldrb	r0, [r0, #16]
   b6304:	2100      	movs	r1, #0
   b6306:	f7ff b8a7 	b.w	b5458 <hal_i2c_peek>

000b630a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b630a:	7c00      	ldrb	r0, [r0, #16]
   b630c:	2100      	movs	r1, #0
   b630e:	f7ff b8ab 	b.w	b5468 <hal_i2c_flush>

000b6312 <_ZN7TwoWireD0Ev>:
   b6312:	b510      	push	{r4, lr}
   b6314:	2114      	movs	r1, #20
   b6316:	4604      	mov	r4, r0
   b6318:	f7fe fb85 	bl	b4a26 <_ZdlPvj>
   b631c:	4620      	mov	r0, r4
   b631e:	bd10      	pop	{r4, pc}

000b6320 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6320:	b538      	push	{r3, r4, r5, lr}
   b6322:	4604      	mov	r4, r0
   b6324:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b632a:	2200      	movs	r2, #0
   b632c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6330:	4b09      	ldr	r3, [pc, #36]	; (b6358 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6332:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6334:	4608      	mov	r0, r1
   b6336:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6338:	4629      	mov	r1, r5
   b633a:	f7ff f8a5 	bl	b5488 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b633e:	30bf      	adds	r0, #191	; 0xbf
   b6340:	d108      	bne.n	b6354 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6342:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6344:	07db      	lsls	r3, r3, #31
   b6346:	d505      	bpl.n	b6354 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6348:	6868      	ldr	r0, [r5, #4]
   b634a:	f7ff fa83 	bl	b5854 <free>
    free(conf.tx_buffer);
   b634e:	68e8      	ldr	r0, [r5, #12]
   b6350:	f7ff fa80 	bl	b5854 <free>
}
   b6354:	4620      	mov	r0, r4
   b6356:	bd38      	pop	{r3, r4, r5, pc}
   b6358:	000b89e4 	.word	0x000b89e4

000b635c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b635c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b635e:	2200      	movs	r2, #0
   b6360:	2314      	movs	r3, #20
   b6362:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6366:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b636a:	780b      	ldrb	r3, [r1, #0]
   b636c:	f88d 3008 	strb.w	r3, [sp, #8]
   b6370:	684b      	ldr	r3, [r1, #4]
   b6372:	9303      	str	r3, [sp, #12]
   b6374:	68cb      	ldr	r3, [r1, #12]
   b6376:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6378:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b637a:	7a0b      	ldrb	r3, [r1, #8]
   b637c:	9305      	str	r3, [sp, #20]
   b637e:	a901      	add	r1, sp, #4
   b6380:	f7ff f89a 	bl	b54b8 <hal_i2c_request_ex>
}
   b6384:	b007      	add	sp, #28
   b6386:	f85d fb04 	ldr.w	pc, [sp], #4

000b638a <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b638a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b638c:	2300      	movs	r3, #0
   b638e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b6392:	684a      	ldr	r2, [r1, #4]
   b6394:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b6396:	2314      	movs	r3, #20
    };
   b6398:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b639a:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b639e:	780b      	ldrb	r3, [r1, #0]
    };
   b63a0:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b63a2:	7a0a      	ldrb	r2, [r1, #8]
   b63a4:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b63a6:	7c00      	ldrb	r0, [r0, #16]
    };
   b63a8:	f88d 3008 	strb.w	r3, [sp, #8]
   b63ac:	aa01      	add	r2, sp, #4
   b63ae:	4619      	mov	r1, r3
   b63b0:	f7ff f82a 	bl	b5408 <hal_i2c_begin_transmission>
}
   b63b4:	b007      	add	sp, #28
   b63b6:	f85d fb04 	ldr.w	pc, [sp], #4

000b63ba <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b63ba:	7c00      	ldrb	r0, [r0, #16]
   b63bc:	2200      	movs	r2, #0
   b63be:	f7ff b82b 	b.w	b5418 <hal_i2c_end_transmission>

000b63c2 <_ZN7TwoWire4lockEv>:
{
  return hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b63c2:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b63c4:	2100      	movs	r1, #0
   b63c6:	7c00      	ldrb	r0, [r0, #16]
   b63c8:	f7ff f866 	bl	b5498 <hal_i2c_lock>
}
   b63cc:	fab0 f080 	clz	r0, r0
   b63d0:	0940      	lsrs	r0, r0, #5
   b63d2:	bd08      	pop	{r3, pc}

000b63d4 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b63d4:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b63d6:	2100      	movs	r1, #0
   b63d8:	7c00      	ldrb	r0, [r0, #16]
   b63da:	f7ff f865 	bl	b54a8 <hal_i2c_unlock>
}
   b63de:	fab0 f080 	clz	r0, r0
   b63e2:	0940      	lsrs	r0, r0, #5
   b63e4:	bd08      	pop	{r3, pc}

000b63e6 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b63e6:	4770      	bx	lr

000b63e8 <_ZN9IPAddressD0Ev>:
   b63e8:	b510      	push	{r4, lr}
   b63ea:	2118      	movs	r1, #24
   b63ec:	4604      	mov	r4, r0
   b63ee:	f7fe fb1a 	bl	b4a26 <_ZdlPvj>
   b63f2:	4620      	mov	r0, r4
   b63f4:	bd10      	pop	{r4, pc}

000b63f6 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b63f6:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b63f8:	7d03      	ldrb	r3, [r0, #20]
   b63fa:	2b06      	cmp	r3, #6
{
   b63fc:	b08d      	sub	sp, #52	; 0x34
   b63fe:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6400:	f100 0704 	add.w	r7, r0, #4
   b6404:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6408:	d012      	beq.n	b6430 <_ZNK9IPAddress7printToER5Print+0x3a>
   b640a:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b640e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6412:	220a      	movs	r2, #10
   b6414:	4630      	mov	r0, r6
   b6416:	f001 face 	bl	b79b6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b641a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b641c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b641e:	d019      	beq.n	b6454 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6420:	2c00      	cmp	r4, #0
   b6422:	d0f4      	beq.n	b640e <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6424:	212e      	movs	r1, #46	; 0x2e
   b6426:	4630      	mov	r0, r6
   b6428:	f001 fac2 	bl	b79b0 <_ZN5Print5printEc>
   b642c:	4404      	add	r4, r0
   b642e:	e7ee      	b.n	b640e <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6430:	232f      	movs	r3, #47	; 0x2f
   b6432:	466a      	mov	r2, sp
   b6434:	4639      	mov	r1, r7
   b6436:	200a      	movs	r0, #10
		buf[0] = 0;
   b6438:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b643c:	f7ff f844 	bl	b54c8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6440:	4668      	mov	r0, sp
   b6442:	f7fe faa9 	bl	b4998 <strlen>
   b6446:	6833      	ldr	r3, [r6, #0]
   b6448:	4602      	mov	r2, r0
   b644a:	68db      	ldr	r3, [r3, #12]
   b644c:	4669      	mov	r1, sp
   b644e:	4630      	mov	r0, r6
   b6450:	4798      	blx	r3
   b6452:	4604      	mov	r4, r0
    }
    return n;
}
   b6454:	4620      	mov	r0, r4
   b6456:	b00d      	add	sp, #52	; 0x34
   b6458:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b645c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b645c:	b510      	push	{r4, lr}
   b645e:	4b05      	ldr	r3, [pc, #20]	; (b6474 <_ZN9IPAddressC1Ev+0x18>)
   b6460:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6462:	2211      	movs	r2, #17
   b6464:	f840 3b04 	str.w	r3, [r0], #4
   b6468:	2100      	movs	r1, #0
   b646a:	f001 fff5 	bl	b8458 <memset>
}
   b646e:	4620      	mov	r0, r4
   b6470:	bd10      	pop	{r4, pc}
   b6472:	bf00      	nop
   b6474:	000b8a0c 	.word	0x000b8a0c

000b6478 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6478:	4603      	mov	r3, r0
   b647a:	4a07      	ldr	r2, [pc, #28]	; (b6498 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b647c:	b510      	push	{r4, lr}
   b647e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6482:	f101 0210 	add.w	r2, r1, #16
   b6486:	f851 4b04 	ldr.w	r4, [r1], #4
   b648a:	f843 4b04 	str.w	r4, [r3], #4
   b648e:	4291      	cmp	r1, r2
   b6490:	d1f9      	bne.n	b6486 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6492:	780a      	ldrb	r2, [r1, #0]
   b6494:	701a      	strb	r2, [r3, #0]
}
   b6496:	bd10      	pop	{r4, pc}
   b6498:	000b8a0c 	.word	0x000b8a0c

000b649c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b649c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b649e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b64a2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b64a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b64aa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b64ae:	2304      	movs	r3, #4
   b64b0:	6041      	str	r1, [r0, #4]
   b64b2:	7503      	strb	r3, [r0, #20]
}
   b64b4:	bd10      	pop	{r4, pc}
	...

000b64b8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b64b8:	b507      	push	{r0, r1, r2, lr}
   b64ba:	4b06      	ldr	r3, [pc, #24]	; (b64d4 <_ZN9IPAddressC1EPKh+0x1c>)
   b64bc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b64be:	78cb      	ldrb	r3, [r1, #3]
   b64c0:	9300      	str	r3, [sp, #0]
   b64c2:	788b      	ldrb	r3, [r1, #2]
   b64c4:	784a      	ldrb	r2, [r1, #1]
   b64c6:	7809      	ldrb	r1, [r1, #0]
   b64c8:	f7ff ffe8 	bl	b649c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b64cc:	b003      	add	sp, #12
   b64ce:	f85d fb04 	ldr.w	pc, [sp], #4
   b64d2:	bf00      	nop
   b64d4:	000b8a0c 	.word	0x000b8a0c

000b64d8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b64d8:	f100 0310 	add.w	r3, r0, #16
   b64dc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b64de:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b64e2:	2901      	cmp	r1, #1
   b64e4:	4618      	mov	r0, r3
   b64e6:	d108      	bne.n	b64fa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b64e8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b64ec:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b64f0:	3a01      	subs	r2, #1
   b64f2:	f103 0310 	add.w	r3, r3, #16
   b64f6:	d1f2      	bne.n	b64de <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b64f8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b64fa:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b64fc:	bf04      	itt	eq
   b64fe:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b6502:	1852      	addeq	r2, r2, r1
   b6504:	e7f4      	b.n	b64f0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b6506 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b6506:	b40e      	push	{r1, r2, r3}
   b6508:	b5f0      	push	{r4, r5, r6, r7, lr}
   b650a:	b088      	sub	sp, #32
   b650c:	af00      	add	r7, sp, #0
   b650e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6512:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6514:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6518:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b651a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b651c:	462b      	mov	r3, r5
   b651e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b6520:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6522:	f7ff f9a7 	bl	b5874 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b6526:	280f      	cmp	r0, #15
   b6528:	687a      	ldr	r2, [r7, #4]
   b652a:	d91a      	bls.n	b6562 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b652c:	f100 0308 	add.w	r3, r0, #8
   b6530:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b6534:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b6536:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b653a:	1c41      	adds	r1, r0, #1
   b653c:	462b      	mov	r3, r5
   b653e:	4668      	mov	r0, sp
        va_start(args, fmt);
   b6540:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6542:	f7ff f997 	bl	b5874 <vsnprintf>
        if (n > 0) {
   b6546:	1e02      	subs	r2, r0, #0
   b6548:	dd04      	ble.n	b6554 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b654a:	6823      	ldr	r3, [r4, #0]
   b654c:	4669      	mov	r1, sp
   b654e:	689b      	ldr	r3, [r3, #8]
   b6550:	4620      	mov	r0, r4
   b6552:	4798      	blx	r3
   b6554:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b6556:	3720      	adds	r7, #32
   b6558:	46bd      	mov	sp, r7
   b655a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b655e:	b003      	add	sp, #12
   b6560:	4770      	bx	lr
    } else if (n > 0) {
   b6562:	2800      	cmp	r0, #0
   b6564:	d0f7      	beq.n	b6556 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b6566:	6823      	ldr	r3, [r4, #0]
   b6568:	4602      	mov	r2, r0
   b656a:	689b      	ldr	r3, [r3, #8]
   b656c:	f107 0110 	add.w	r1, r7, #16
   b6570:	4620      	mov	r0, r4
   b6572:	4798      	blx	r3
}
   b6574:	e7ef      	b.n	b6556 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b6576 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6576:	b538      	push	{r3, r4, r5, lr}
   b6578:	680b      	ldr	r3, [r1, #0]
   b657a:	6003      	str	r3, [r0, #0]
   b657c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b657e:	6843      	ldr	r3, [r0, #4]
   b6580:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6582:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b6584:	d008      	beq.n	b6598 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b6586:	b115      	cbz	r5, b658e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b6588:	686b      	ldr	r3, [r5, #4]
   b658a:	3301      	adds	r3, #1
   b658c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b658e:	6860      	ldr	r0, [r4, #4]
   b6590:	b108      	cbz	r0, b6596 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b6592:	f7ff f9bf 	bl	b5914 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b6596:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6598:	bd38      	pop	{r3, r4, r5, pc}

000b659a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b659a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b659c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b659e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b65a2:	689b      	ldr	r3, [r3, #8]
   b65a4:	2201      	movs	r2, #1
   b65a6:	f10d 0107 	add.w	r1, sp, #7
   b65aa:	4798      	blx	r3
}
   b65ac:	b003      	add	sp, #12
   b65ae:	f85d fb04 	ldr.w	pc, [sp], #4

000b65b2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b65b2:	460b      	mov	r3, r1
   b65b4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b65b6:	2200      	movs	r2, #0
   b65b8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b65ba:	e9c0 2200 	strd	r2, r2, [r0]
   b65be:	4604      	mov	r4, r0
        t_ = t;
   b65c0:	6083      	str	r3, [r0, #8]
    if (t) {
   b65c2:	b90b      	cbnz	r3, b65c8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b65c4:	4620      	mov	r0, r4
   b65c6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b65c8:	f7ff ffd5 	bl	b6576 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b65cc:	e7fa      	b.n	b65c4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b65ce <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b65ce:	6883      	ldr	r3, [r0, #8]
   b65d0:	b1eb      	cbz	r3, b660e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b65d2:	781a      	ldrb	r2, [r3, #0]
   b65d4:	2a03      	cmp	r2, #3
   b65d6:	d81a      	bhi.n	b660e <_ZNK5spark9JSONValue4typeEv+0x40>
   b65d8:	e8df f002 	tbb	[pc, r2]
   b65dc:	1b021704 	.word	0x1b021704
   b65e0:	2005      	movs	r0, #5
   b65e2:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b65e4:	6802      	ldr	r2, [r0, #0]
   b65e6:	685b      	ldr	r3, [r3, #4]
   b65e8:	6852      	ldr	r2, [r2, #4]
   b65ea:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b65ec:	282d      	cmp	r0, #45	; 0x2d
   b65ee:	d012      	beq.n	b6616 <_ZNK5spark9JSONValue4typeEv+0x48>
   b65f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b65f4:	2b09      	cmp	r3, #9
   b65f6:	d90e      	bls.n	b6616 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b65f8:	2874      	cmp	r0, #116	; 0x74
   b65fa:	d00e      	beq.n	b661a <_ZNK5spark9JSONValue4typeEv+0x4c>
   b65fc:	2866      	cmp	r0, #102	; 0x66
   b65fe:	d00c      	beq.n	b661a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b6600:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b6604:	4258      	negs	r0, r3
   b6606:	4158      	adcs	r0, r3
   b6608:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b660a:	2006      	movs	r0, #6
   b660c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b660e:	2000      	movs	r0, #0
   b6610:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b6612:	2004      	movs	r0, #4
   b6614:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b6616:	2003      	movs	r0, #3
   b6618:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b661a:	2002      	movs	r0, #2
}
   b661c:	4770      	bx	lr

000b661e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b661e:	b510      	push	{r4, lr}
   b6620:	4604      	mov	r4, r0
    switch (type()) {
   b6622:	f7ff ffd4 	bl	b65ce <_ZNK5spark9JSONValue4typeEv>
   b6626:	2802      	cmp	r0, #2
   b6628:	d00e      	beq.n	b6648 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b662a:	1ec3      	subs	r3, r0, #3
   b662c:	b2db      	uxtb	r3, r3
   b662e:	2b01      	cmp	r3, #1
   b6630:	d814      	bhi.n	b665c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b6632:	6822      	ldr	r2, [r4, #0]
   b6634:	68a3      	ldr	r3, [r4, #8]
   b6636:	6850      	ldr	r0, [r2, #4]
   b6638:	685b      	ldr	r3, [r3, #4]
}
   b663a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b663e:	220a      	movs	r2, #10
   b6640:	2100      	movs	r1, #0
   b6642:	4418      	add	r0, r3
   b6644:	f002 b826 	b.w	b8694 <strtol>
        const char* const s = d_->json + t_->start;
   b6648:	6822      	ldr	r2, [r4, #0]
   b664a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b664c:	6852      	ldr	r2, [r2, #4]
   b664e:	685b      	ldr	r3, [r3, #4]
   b6650:	5cd0      	ldrb	r0, [r2, r3]
   b6652:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b6656:	4258      	negs	r0, r3
   b6658:	4158      	adcs	r0, r3
}
   b665a:	bd10      	pop	{r4, pc}
    switch (type()) {
   b665c:	2000      	movs	r0, #0
   b665e:	e7fc      	b.n	b665a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b6660 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6660:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6662:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b6664:	e9c0 3300 	strd	r3, r3, [r0]
   b6668:	4604      	mov	r4, r0
        n_(0) {
   b666a:	480e      	ldr	r0, [pc, #56]	; (b66a4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b666c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b6670:	b1a9      	cbz	r1, b669e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b6672:	780b      	ldrb	r3, [r1, #0]
   b6674:	2b03      	cmp	r3, #3
   b6676:	d006      	beq.n	b6686 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b6678:	b98b      	cbnz	r3, b669e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b667a:	6813      	ldr	r3, [r2, #0]
   b667c:	6858      	ldr	r0, [r3, #4]
   b667e:	684b      	ldr	r3, [r1, #4]
   b6680:	5cc3      	ldrb	r3, [r0, r3]
   b6682:	2b6e      	cmp	r3, #110	; 0x6e
   b6684:	d007      	beq.n	b6696 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b6686:	6813      	ldr	r3, [r2, #0]
   b6688:	684d      	ldr	r5, [r1, #4]
   b668a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b668c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b668e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b6690:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b6692:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b6694:	60e3      	str	r3, [r4, #12]
   b6696:	4611      	mov	r1, r2
   b6698:	4620      	mov	r0, r4
   b669a:	f7ff ff6c 	bl	b6576 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b669e:	4620      	mov	r0, r4
   b66a0:	bd38      	pop	{r3, r4, r5, pc}
   b66a2:	bf00      	nop
   b66a4:	000b8a7b 	.word	0x000b8a7b

000b66a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b66a8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b66aa:	2500      	movs	r5, #0
   b66ac:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b66ae:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b66b2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b66b6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b66ba:	4604      	mov	r4, r0
   b66bc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b66be:	b14b      	cbz	r3, b66d4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b66c0:	781a      	ldrb	r2, [r3, #0]
   b66c2:	2a01      	cmp	r2, #1
   b66c4:	d106      	bne.n	b66d4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b66c6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b66ca:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b66cc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b66ce:	6143      	str	r3, [r0, #20]
   b66d0:	f7ff ff51 	bl	b6576 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b66d4:	4620      	mov	r0, r4
   b66d6:	bd38      	pop	{r3, r4, r5, pc}

000b66d8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b66d8:	b510      	push	{r4, lr}
    if (!n_) {
   b66da:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b66dc:	4604      	mov	r4, r0
    if (!n_) {
   b66de:	b163      	cbz	r3, b66fa <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b66e0:	6880      	ldr	r0, [r0, #8]
   b66e2:	60e0      	str	r0, [r4, #12]
    --n_;
   b66e4:	3b01      	subs	r3, #1
    ++t_;
   b66e6:	3010      	adds	r0, #16
   b66e8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b66ea:	6120      	str	r0, [r4, #16]
    --n_;
   b66ec:	6163      	str	r3, [r4, #20]
    if (n_) {
   b66ee:	b113      	cbz	r3, b66f6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b66f0:	f7ff fef2 	bl	b64d8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b66f4:	60a0      	str	r0, [r4, #8]
    return true;
   b66f6:	2001      	movs	r0, #1
   b66f8:	e000      	b.n	b66fc <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b66fa:	4618      	mov	r0, r3
}
   b66fc:	bd10      	pop	{r4, pc}

000b66fe <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b66fe:	b510      	push	{r4, lr}
    write('}');
   b6700:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6702:	4604      	mov	r4, r0
    write('}');
   b6704:	f7ff ff49 	bl	b659a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b6708:	2301      	movs	r3, #1
   b670a:	7123      	strb	r3, [r4, #4]
}
   b670c:	4620      	mov	r0, r4
   b670e:	bd10      	pop	{r4, pc}

000b6710 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b6710:	b508      	push	{r3, lr}
    switch (state_) {
   b6712:	7903      	ldrb	r3, [r0, #4]
   b6714:	2b01      	cmp	r3, #1
   b6716:	d002      	beq.n	b671e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b6718:	2b02      	cmp	r3, #2
   b671a:	d004      	beq.n	b6726 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b671c:	bd08      	pop	{r3, pc}
        write(',');
   b671e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b6720:	f7ff ff3b 	bl	b659a <_ZN5spark10JSONWriter5writeEc>
}
   b6724:	e7fa      	b.n	b671c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b6726:	213a      	movs	r1, #58	; 0x3a
   b6728:	e7fa      	b.n	b6720 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b672a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b672a:	b510      	push	{r4, lr}
   b672c:	4604      	mov	r4, r0
    writeSeparator();
   b672e:	f7ff ffef 	bl	b6710 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b6732:	4620      	mov	r0, r4
   b6734:	217b      	movs	r1, #123	; 0x7b
   b6736:	f7ff ff30 	bl	b659a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b673a:	2300      	movs	r3, #0
   b673c:	7123      	strb	r3, [r4, #4]
}
   b673e:	4620      	mov	r0, r4
   b6740:	bd10      	pop	{r4, pc}
	...

000b6744 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b6744:	b513      	push	{r0, r1, r4, lr}
   b6746:	4604      	mov	r4, r0
   b6748:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b674a:	f7ff ffe1 	bl	b6710 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b674e:	6823      	ldr	r3, [r4, #0]
   b6750:	9a01      	ldr	r2, [sp, #4]
   b6752:	68db      	ldr	r3, [r3, #12]
   b6754:	4903      	ldr	r1, [pc, #12]	; (b6764 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b6756:	4620      	mov	r0, r4
   b6758:	4798      	blx	r3
    state_ = NEXT;
   b675a:	2301      	movs	r3, #1
}
   b675c:	4620      	mov	r0, r4
    state_ = NEXT;
   b675e:	7123      	strb	r3, [r4, #4]
}
   b6760:	b002      	add	sp, #8
   b6762:	bd10      	pop	{r4, pc}
   b6764:	000b8837 	.word	0x000b8837

000b6768 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b6768:	b513      	push	{r0, r1, r4, lr}
   b676a:	4604      	mov	r4, r0
   b676c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b676e:	f7ff ffcf 	bl	b6710 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b6772:	6823      	ldr	r3, [r4, #0]
   b6774:	9a01      	ldr	r2, [sp, #4]
   b6776:	68db      	ldr	r3, [r3, #12]
   b6778:	4903      	ldr	r1, [pc, #12]	; (b6788 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b677a:	4620      	mov	r0, r4
   b677c:	4798      	blx	r3
    state_ = NEXT;
   b677e:	2301      	movs	r3, #1
}
   b6780:	4620      	mov	r0, r4
    state_ = NEXT;
   b6782:	7123      	strb	r3, [r4, #4]
}
   b6784:	b002      	add	sp, #8
   b6786:	bd10      	pop	{r4, pc}
   b6788:	000b8a18 	.word	0x000b8a18

000b678c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b678c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6790:	460d      	mov	r5, r1
    write('"');
   b6792:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6794:	4690      	mov	r8, r2
   b6796:	4604      	mov	r4, r0
    write('"');
   b6798:	f7ff feff 	bl	b659a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b679c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b6844 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b67a0:	44a8      	add	r8, r5
    const char *s = str;
   b67a2:	462f      	mov	r7, r5
    while (s != end) {
   b67a4:	4547      	cmp	r7, r8
   b67a6:	46ba      	mov	sl, r7
   b67a8:	d03d      	beq.n	b6826 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b67aa:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b67ae:	2e22      	cmp	r6, #34	; 0x22
   b67b0:	d006      	beq.n	b67c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b67b2:	2e5c      	cmp	r6, #92	; 0x5c
   b67b4:	d004      	beq.n	b67c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b67b6:	4630      	mov	r0, r6
   b67b8:	f001 fe1e 	bl	b83f8 <isprint>
   b67bc:	2800      	cmp	r0, #0
   b67be:	d1f1      	bne.n	b67a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b67c0:	6823      	ldr	r3, [r4, #0]
   b67c2:	ebaa 0205 	sub.w	r2, sl, r5
   b67c6:	689b      	ldr	r3, [r3, #8]
   b67c8:	4629      	mov	r1, r5
   b67ca:	4620      	mov	r0, r4
   b67cc:	4798      	blx	r3
            write('\\');
   b67ce:	215c      	movs	r1, #92	; 0x5c
   b67d0:	4620      	mov	r0, r4
   b67d2:	f7ff fee2 	bl	b659a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b67d6:	2e0d      	cmp	r6, #13
   b67d8:	d80a      	bhi.n	b67f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b67da:	2e07      	cmp	r6, #7
   b67dc:	d91c      	bls.n	b6818 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b67de:	f1a6 0308 	sub.w	r3, r6, #8
   b67e2:	2b05      	cmp	r3, #5
   b67e4:	d818      	bhi.n	b6818 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b67e6:	e8df f003 	tbb	[pc, r3]
   b67ea:	0f0d      	.short	0x0f0d
   b67ec:	15131711 	.word	0x15131711
   b67f0:	2e22      	cmp	r6, #34	; 0x22
   b67f2:	d001      	beq.n	b67f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b67f4:	2e5c      	cmp	r6, #92	; 0x5c
   b67f6:	d10f      	bne.n	b6818 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b67f8:	4631      	mov	r1, r6
                write('b');
   b67fa:	4620      	mov	r0, r4
   b67fc:	f7ff fecd 	bl	b659a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b6800:	463d      	mov	r5, r7
    while (s != end) {
   b6802:	e7cf      	b.n	b67a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b6804:	2162      	movs	r1, #98	; 0x62
   b6806:	e7f8      	b.n	b67fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b6808:	2174      	movs	r1, #116	; 0x74
   b680a:	e7f6      	b.n	b67fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b680c:	216e      	movs	r1, #110	; 0x6e
   b680e:	e7f4      	b.n	b67fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b6810:	2166      	movs	r1, #102	; 0x66
   b6812:	e7f2      	b.n	b67fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b6814:	2172      	movs	r1, #114	; 0x72
   b6816:	e7f0      	b.n	b67fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b6818:	6823      	ldr	r3, [r4, #0]
   b681a:	4632      	mov	r2, r6
   b681c:	68db      	ldr	r3, [r3, #12]
   b681e:	4649      	mov	r1, r9
   b6820:	4620      	mov	r0, r4
   b6822:	4798      	blx	r3
                break;
   b6824:	e7ec      	b.n	b6800 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b6826:	42bd      	cmp	r5, r7
   b6828:	d005      	beq.n	b6836 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b682a:	6823      	ldr	r3, [r4, #0]
   b682c:	1b7a      	subs	r2, r7, r5
   b682e:	689b      	ldr	r3, [r3, #8]
   b6830:	4629      	mov	r1, r5
   b6832:	4620      	mov	r0, r4
   b6834:	4798      	blx	r3
    }
    write('"');
   b6836:	2122      	movs	r1, #34	; 0x22
   b6838:	4620      	mov	r0, r4
   b683a:	f7ff feae 	bl	b659a <_ZN5spark10JSONWriter5writeEc>
}
   b683e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6842:	bf00      	nop
   b6844:	000b8a1b 	.word	0x000b8a1b

000b6848 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b6848:	b513      	push	{r0, r1, r4, lr}
   b684a:	4604      	mov	r4, r0
   b684c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b6850:	f7ff ff5e 	bl	b6710 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b6854:	4620      	mov	r0, r4
   b6856:	e9dd 2100 	ldrd	r2, r1, [sp]
   b685a:	f7ff ff97 	bl	b678c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b685e:	2302      	movs	r3, #2
}
   b6860:	4620      	mov	r0, r4
    state_ = VALUE;
   b6862:	7123      	strb	r3, [r4, #4]
}
   b6864:	b002      	add	sp, #8
   b6866:	bd10      	pop	{r4, pc}

000b6868 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b6868:	b513      	push	{r0, r1, r4, lr}
   b686a:	4604      	mov	r4, r0
   b686c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b6870:	f7ff ff4e 	bl	b6710 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b6874:	4620      	mov	r0, r4
   b6876:	e9dd 2100 	ldrd	r2, r1, [sp]
   b687a:	f7ff ff87 	bl	b678c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b687e:	2301      	movs	r3, #1
}
   b6880:	4620      	mov	r0, r4
    state_ = NEXT;
   b6882:	7123      	strb	r3, [r4, #4]
}
   b6884:	b002      	add	sp, #8
   b6886:	bd10      	pop	{r4, pc}

000b6888 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b6888:	6880      	ldr	r0, [r0, #8]
   b688a:	6803      	ldr	r3, [r0, #0]
   b688c:	68db      	ldr	r3, [r3, #12]
   b688e:	4718      	bx	r3

000b6890 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b6890:	4770      	bx	lr

000b6892 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b6892:	4608      	mov	r0, r1
   b6894:	b111      	cbz	r1, b689c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b6896:	680b      	ldr	r3, [r1, #0]
   b6898:	685b      	ldr	r3, [r3, #4]
   b689a:	4718      	bx	r3
}
   b689c:	4770      	bx	lr

000b689e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b689e:	4770      	bx	lr

000b68a0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b68a0:	4770      	bx	lr

000b68a2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b68a2:	4770      	bx	lr

000b68a4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b68a4:	4770      	bx	lr

000b68a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b68a6:	b538      	push	{r3, r4, r5, lr}
   b68a8:	4604      	mov	r4, r0
   b68aa:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b68ac:	6800      	ldr	r0, [r0, #0]
   b68ae:	212e      	movs	r1, #46	; 0x2e
   b68b0:	f001 fe15 	bl	b84de <strchrnul>
    size = s - category;
   b68b4:	6823      	ldr	r3, [r4, #0]
   b68b6:	1ac3      	subs	r3, r0, r3
   b68b8:	602b      	str	r3, [r5, #0]
    if (size) {
   b68ba:	b123      	cbz	r3, b68c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b68bc:	7803      	ldrb	r3, [r0, #0]
   b68be:	b103      	cbz	r3, b68c2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b68c0:	3001      	adds	r0, #1
   b68c2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b68c4:	6020      	str	r0, [r4, #0]
}
   b68c6:	4618      	mov	r0, r3
   b68c8:	bd38      	pop	{r3, r4, r5, pc}

000b68ca <_ZN5spark16JSONStreamWriterD0Ev>:
   b68ca:	b510      	push	{r4, lr}
   b68cc:	210c      	movs	r1, #12
   b68ce:	4604      	mov	r4, r0
   b68d0:	f7fe f8a9 	bl	b4a26 <_ZdlPvj>
   b68d4:	4620      	mov	r0, r4
   b68d6:	bd10      	pop	{r4, pc}

000b68d8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b68d8:	b510      	push	{r4, lr}
   b68da:	2104      	movs	r1, #4
   b68dc:	4604      	mov	r4, r0
   b68de:	f7fe f8a2 	bl	b4a26 <_ZdlPvj>
   b68e2:	4620      	mov	r0, r4
   b68e4:	bd10      	pop	{r4, pc}

000b68e6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b68e6:	b510      	push	{r4, lr}
   b68e8:	2104      	movs	r1, #4
   b68ea:	4604      	mov	r4, r0
   b68ec:	f7fe f89b 	bl	b4a26 <_ZdlPvj>
   b68f0:	4620      	mov	r0, r4
   b68f2:	bd10      	pop	{r4, pc}

000b68f4 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b68f4:	f7fe bd48 	b.w	b5388 <os_mutex_recursive_lock>

000b68f8 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b68f8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b68fa:	f7fe f843 	bl	b4984 <strcmp>
}
   b68fe:	fab0 f080 	clz	r0, r0
   b6902:	0940      	lsrs	r0, r0, #5
   b6904:	bd08      	pop	{r3, pc}

000b6906 <__tcf_1>:
   b6906:	4770      	bx	lr

000b6908 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b6908:	b510      	push	{r4, lr}
   b690a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b690c:	f001 fb7e 	bl	b800c <_Z16_fetch_usbserialv>
   b6910:	4284      	cmp	r4, r0
   b6912:	d010      	beq.n	b6936 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b6914:	f001 fd3e 	bl	b8394 <_Z22__fetch_global_Serial1v>
   b6918:	4284      	cmp	r4, r0
   b691a:	d105      	bne.n	b6928 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b691c:	f001 fd3a 	bl	b8394 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b6920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b6924:	f001 bb0d 	b.w	b7f42 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b6928:	b12c      	cbz	r4, b6936 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b692a:	6823      	ldr	r3, [r4, #0]
   b692c:	4620      	mov	r0, r4
   b692e:	685b      	ldr	r3, [r3, #4]
}
   b6930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6934:	4718      	bx	r3
   b6936:	bd10      	pop	{r4, pc}

000b6938 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6938:	680b      	ldr	r3, [r1, #0]
   b693a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b693c:	684b      	ldr	r3, [r1, #4]
   b693e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6940:	b113      	cbz	r3, b6948 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b6942:	685a      	ldr	r2, [r3, #4]
   b6944:	3201      	adds	r2, #1
   b6946:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6948:	4770      	bx	lr

000b694a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b694a:	b513      	push	{r0, r1, r4, lr}
   b694c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b694e:	4608      	mov	r0, r1
   b6950:	9101      	str	r1, [sp, #4]
   b6952:	f7fe f821 	bl	b4998 <strlen>
   b6956:	9901      	ldr	r1, [sp, #4]
   b6958:	4602      	mov	r2, r0
   b695a:	4620      	mov	r0, r4
}
   b695c:	b002      	add	sp, #8
   b695e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b6962:	f7ff bf81 	b.w	b6868 <_ZN5spark10JSONWriter5valueEPKcj>

000b6966 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b6966:	b513      	push	{r0, r1, r4, lr}
   b6968:	4604      	mov	r4, r0
    write(str, strlen(str));
   b696a:	4608      	mov	r0, r1
   b696c:	9101      	str	r1, [sp, #4]
   b696e:	f7fe f813 	bl	b4998 <strlen>
   b6972:	6823      	ldr	r3, [r4, #0]
   b6974:	9901      	ldr	r1, [sp, #4]
   b6976:	68db      	ldr	r3, [r3, #12]
   b6978:	4602      	mov	r2, r0
   b697a:	4620      	mov	r0, r4
}
   b697c:	b002      	add	sp, #8
   b697e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b6982:	4718      	bx	r3

000b6984 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b6984:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6986:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b6988:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b698c:	68db      	ldr	r3, [r3, #12]
   b698e:	2201      	movs	r2, #1
   b6990:	f10d 0107 	add.w	r1, sp, #7
   b6994:	4798      	blx	r3
}
   b6996:	b003      	add	sp, #12
   b6998:	f85d fb04 	ldr.w	pc, [sp], #4

000b699c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b699c:	680a      	ldr	r2, [r1, #0]
   b699e:	6002      	str	r2, [r0, #0]
   b69a0:	684a      	ldr	r2, [r1, #4]
   b69a2:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b69a4:	2200      	movs	r2, #0
   b69a6:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b69aa:	b510      	push	{r4, lr}
   b69ac:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b69ae:	688c      	ldr	r4, [r1, #8]
   b69b0:	6084      	str	r4, [r0, #8]
   b69b2:	68cc      	ldr	r4, [r1, #12]
   b69b4:	60c4      	str	r4, [r0, #12]
   b69b6:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b69b8:	608a      	str	r2, [r1, #8]
   b69ba:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b69bc:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b69be:	610a      	str	r2, [r1, #16]
   b69c0:	bd10      	pop	{r4, pc}
	...

000b69c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b69c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b69c8:	e9d0 8400 	ldrd	r8, r4, [r0]
   b69cc:	f04f 0a14 	mov.w	sl, #20
   b69d0:	9300      	str	r3, [sp, #0]
   b69d2:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b69d6:	4b18      	ldr	r3, [pc, #96]	; (b6a38 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b69d8:	10a4      	asrs	r4, r4, #2
   b69da:	4617      	mov	r7, r2
   b69dc:	435c      	muls	r4, r3
   b69de:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b69e0:	2c00      	cmp	r4, #0
   b69e2:	dd21      	ble.n	b6a28 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b69e4:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b69e6:	fb0a f006 	mul.w	r0, sl, r6
   b69ea:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b69ee:	463a      	mov	r2, r7
   b69f0:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b69f4:	5828      	ldr	r0, [r5, r0]
   b69f6:	9101      	str	r1, [sp, #4]
   b69f8:	455f      	cmp	r7, fp
   b69fa:	bf28      	it	cs
   b69fc:	465a      	movcs	r2, fp
   b69fe:	f001 fd9e 	bl	b853e <strncmp>
                if (cmp == 0) {
   b6a02:	2800      	cmp	r0, #0
   b6a04:	9901      	ldr	r1, [sp, #4]
   b6a06:	f04f 0301 	mov.w	r3, #1
   b6a0a:	d10b      	bne.n	b6a24 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b6a0c:	455f      	cmp	r7, fp
   b6a0e:	d103      	bne.n	b6a18 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b6a10:	9a00      	ldr	r2, [sp, #0]
   b6a12:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6a14:	4634      	mov	r4, r6
   b6a16:	e7e3      	b.n	b69e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b6a18:	d9fc      	bls.n	b6a14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b6a1a:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b6a1c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b6a20:	3e01      	subs	r6, #1
   b6a22:	e7f7      	b.n	b6a14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b6a24:	dbf9      	blt.n	b6a1a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b6a26:	e7f5      	b.n	b6a14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b6a28:	eba5 0508 	sub.w	r5, r5, r8
}
   b6a2c:	4802      	ldr	r0, [pc, #8]	; (b6a38 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b6a2e:	10ad      	asrs	r5, r5, #2
   b6a30:	4368      	muls	r0, r5
   b6a32:	b003      	add	sp, #12
   b6a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6a38:	cccccccd 	.word	0xcccccccd

000b6a3c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b6a3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b6a3e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b6a40:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b6a42:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b6a44:	b303      	cbz	r3, b6a88 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b6a46:	b1f9      	cbz	r1, b6a88 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b6a48:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b6a4a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b6a4e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b6a50:	a903      	add	r1, sp, #12
   b6a52:	a801      	add	r0, sp, #4
   b6a54:	f7ff ff27 	bl	b68a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6a58:	4601      	mov	r1, r0
   b6a5a:	b1a8      	cbz	r0, b6a88 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b6a5c:	f10d 030b 	add.w	r3, sp, #11
   b6a60:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b6a62:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6a66:	4620      	mov	r0, r4
   b6a68:	f7ff ffac 	bl	b69c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b6a6c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b6a70:	b153      	cbz	r3, b6a88 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b6a72:	6823      	ldr	r3, [r4, #0]
   b6a74:	2414      	movs	r4, #20
   b6a76:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b6a7a:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b6a7c:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b6a80:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b6a82:	bfa8      	it	ge
   b6a84:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b6a86:	e7e3      	b.n	b6a50 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b6a88:	4628      	mov	r0, r5
   b6a8a:	b004      	add	sp, #16
   b6a8c:	bd70      	pop	{r4, r5, r6, pc}

000b6a8e <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b6a8e:	b40e      	push	{r1, r2, r3}
   b6a90:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6a92:	b08c      	sub	sp, #48	; 0x30
   b6a94:	af00      	add	r7, sp, #0
   b6a96:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b6a9a:	4604      	mov	r4, r0
   b6a9c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6aa0:	607a      	str	r2, [r7, #4]
   b6aa2:	462b      	mov	r3, r5
   b6aa4:	2120      	movs	r1, #32
   b6aa6:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b6aaa:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6aac:	f7fe fee2 	bl	b5874 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b6ab0:	281f      	cmp	r0, #31
   b6ab2:	687a      	ldr	r2, [r7, #4]
   b6ab4:	d91a      	bls.n	b6aec <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b6ab6:	f100 0308 	add.w	r3, r0, #8
   b6aba:	f023 0307 	bic.w	r3, r3, #7
        }
   b6abe:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b6ac0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6ac4:	1c41      	adds	r1, r0, #1
   b6ac6:	462b      	mov	r3, r5
   b6ac8:	4668      	mov	r0, sp
        va_start(args, fmt);
   b6aca:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6acc:	f7fe fed2 	bl	b5874 <vsnprintf>
        if (n > 0) {
   b6ad0:	1e02      	subs	r2, r0, #0
   b6ad2:	dd04      	ble.n	b6ade <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b6ad4:	6823      	ldr	r3, [r4, #0]
   b6ad6:	4669      	mov	r1, sp
   b6ad8:	68db      	ldr	r3, [r3, #12]
   b6ada:	4620      	mov	r0, r4
   b6adc:	4798      	blx	r3
   b6ade:	46b5      	mov	sp, r6
}
   b6ae0:	3730      	adds	r7, #48	; 0x30
   b6ae2:	46bd      	mov	sp, r7
   b6ae4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6ae8:	b003      	add	sp, #12
   b6aea:	4770      	bx	lr
    } else if (n > 0) {
   b6aec:	2800      	cmp	r0, #0
   b6aee:	d0f7      	beq.n	b6ae0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b6af0:	6823      	ldr	r3, [r4, #0]
   b6af2:	4602      	mov	r2, r0
   b6af4:	68db      	ldr	r3, [r3, #12]
   b6af6:	f107 0110 	add.w	r1, r7, #16
   b6afa:	4620      	mov	r0, r4
   b6afc:	4798      	blx	r3
}
   b6afe:	e7ef      	b.n	b6ae0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b6b00 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b6b00:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b6b02:	4c09      	ldr	r4, [pc, #36]	; (b6b28 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b6b04:	7823      	ldrb	r3, [r4, #0]
   b6b06:	f3bf 8f5b 	dmb	ish
   b6b0a:	07db      	lsls	r3, r3, #31
   b6b0c:	d409      	bmi.n	b6b22 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b6b0e:	4620      	mov	r0, r4
   b6b10:	f7fd ff98 	bl	b4a44 <__cxa_guard_acquire>
   b6b14:	b128      	cbz	r0, b6b22 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b6b16:	4620      	mov	r0, r4
   b6b18:	f7fd ff99 	bl	b4a4e <__cxa_guard_release>
   b6b1c:	4803      	ldr	r0, [pc, #12]	; (b6b2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b6b1e:	f001 fc64 	bl	b83ea <atexit>
}
   b6b22:	4803      	ldr	r0, [pc, #12]	; (b6b30 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b6b24:	bd10      	pop	{r4, pc}
   b6b26:	bf00      	nop
   b6b28:	2003e684 	.word	0x2003e684
   b6b2c:	000b689f 	.word	0x000b689f
   b6b30:	2003e554 	.word	0x2003e554

000b6b34 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b6b34:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b6b36:	4c09      	ldr	r4, [pc, #36]	; (b6b5c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b6b38:	7823      	ldrb	r3, [r4, #0]
   b6b3a:	f3bf 8f5b 	dmb	ish
   b6b3e:	07db      	lsls	r3, r3, #31
   b6b40:	d409      	bmi.n	b6b56 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b6b42:	4620      	mov	r0, r4
   b6b44:	f7fd ff7e 	bl	b4a44 <__cxa_guard_acquire>
   b6b48:	b128      	cbz	r0, b6b56 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b6b4a:	4620      	mov	r0, r4
   b6b4c:	f7fd ff7f 	bl	b4a4e <__cxa_guard_release>
   b6b50:	4803      	ldr	r0, [pc, #12]	; (b6b60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b6b52:	f001 fc4a 	bl	b83ea <atexit>
    return &factory;
}
   b6b56:	4803      	ldr	r0, [pc, #12]	; (b6b64 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b6b58:	bd10      	pop	{r4, pc}
   b6b5a:	bf00      	nop
   b6b5c:	2003e688 	.word	0x2003e688
   b6b60:	000b6907 	.word	0x000b6907
   b6b64:	2003e558 	.word	0x2003e558

000b6b68 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b6b68:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b6b6a:	2500      	movs	r5, #0
   b6b6c:	4604      	mov	r4, r0
   b6b6e:	e9c0 5500 	strd	r5, r5, [r0]
   b6b72:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b6b76:	6085      	str	r5, [r0, #8]
   b6b78:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b6b7a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b6b7e:	f7fe fbf3 	bl	b5368 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b6b82:	f7ff ffbd 	bl	b6b00 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b6b86:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b6b88:	f7ff ffd4 	bl	b6b34 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b6b8c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b6b8e:	6220      	str	r0, [r4, #32]
}
   b6b90:	4620      	mov	r0, r4
   b6b92:	bd38      	pop	{r3, r4, r5, pc}

000b6b94 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b6b94:	b510      	push	{r4, lr}
    static LogManager mgr;
   b6b96:	4c0a      	ldr	r4, [pc, #40]	; (b6bc0 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b6b98:	7823      	ldrb	r3, [r4, #0]
   b6b9a:	f3bf 8f5b 	dmb	ish
   b6b9e:	07db      	lsls	r3, r3, #31
   b6ba0:	d40c      	bmi.n	b6bbc <_ZN5spark10LogManager8instanceEv+0x28>
   b6ba2:	4620      	mov	r0, r4
   b6ba4:	f7fd ff4e 	bl	b4a44 <__cxa_guard_acquire>
   b6ba8:	b140      	cbz	r0, b6bbc <_ZN5spark10LogManager8instanceEv+0x28>
   b6baa:	4806      	ldr	r0, [pc, #24]	; (b6bc4 <_ZN5spark10LogManager8instanceEv+0x30>)
   b6bac:	f7ff ffdc 	bl	b6b68 <_ZN5spark10LogManagerC1Ev>
   b6bb0:	4620      	mov	r0, r4
   b6bb2:	f7fd ff4c 	bl	b4a4e <__cxa_guard_release>
   b6bb6:	4804      	ldr	r0, [pc, #16]	; (b6bc8 <_ZN5spark10LogManager8instanceEv+0x34>)
   b6bb8:	f001 fc17 	bl	b83ea <atexit>
    return &mgr;
}
   b6bbc:	4801      	ldr	r0, [pc, #4]	; (b6bc4 <_ZN5spark10LogManager8instanceEv+0x30>)
   b6bbe:	bd10      	pop	{r4, pc}
   b6bc0:	2003e680 	.word	0x2003e680
   b6bc4:	2003e690 	.word	0x2003e690
   b6bc8:	000b70e9 	.word	0x000b70e9

000b6bcc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b6bcc:	4a02      	ldr	r2, [pc, #8]	; (b6bd8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b6bce:	4903      	ldr	r1, [pc, #12]	; (b6bdc <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b6bd0:	4803      	ldr	r0, [pc, #12]	; (b6be0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b6bd2:	2300      	movs	r3, #0
   b6bd4:	f7fe bd48 	b.w	b5668 <log_set_callbacks>
   b6bd8:	000b6ecd 	.word	0x000b6ecd
   b6bdc:	000b6e59 	.word	0x000b6e59
   b6be0:	000b6dd9 	.word	0x000b6dd9

000b6be4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b6be4:	2300      	movs	r3, #0
   b6be6:	461a      	mov	r2, r3
   b6be8:	4619      	mov	r1, r3
   b6bea:	4618      	mov	r0, r3
   b6bec:	f7fe bd3c 	b.w	b5668 <log_set_callbacks>

000b6bf0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b6bf2:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6bf4:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6bf6:	4668      	mov	r0, sp
   b6bf8:	f7ff fe9e 	bl	b6938 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b6bfc:	466a      	mov	r2, sp
   b6bfe:	4629      	mov	r1, r5
   b6c00:	4620      	mov	r0, r4
   b6c02:	f7ff fd51 	bl	b66a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b6c06:	a801      	add	r0, sp, #4
   b6c08:	f7fe f848 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6c0c:	4620      	mov	r0, r4
   b6c0e:	b003      	add	sp, #12
   b6c10:	bd30      	pop	{r4, r5, pc}

000b6c12 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6c12:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b6c14:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6c16:	4604      	mov	r4, r0
   b6c18:	4668      	mov	r0, sp
   b6c1a:	f7ff fe8d 	bl	b6938 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b6c1e:	466a      	mov	r2, sp
   b6c20:	4629      	mov	r1, r5
   b6c22:	4620      	mov	r0, r4
   b6c24:	f7ff fd1c 	bl	b6660 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b6c28:	a801      	add	r0, sp, #4
   b6c2a:	f7fe f837 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6c2e:	4620      	mov	r0, r4
   b6c30:	b003      	add	sp, #12
   b6c32:	bd30      	pop	{r4, r5, pc}

000b6c34 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b6c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b6c36:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b6c38:	4604      	mov	r4, r0
   b6c3a:	4668      	mov	r0, sp
   b6c3c:	f7ff fe7c 	bl	b6938 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b6c40:	466a      	mov	r2, sp
   b6c42:	4629      	mov	r1, r5
   b6c44:	4620      	mov	r0, r4
   b6c46:	f7ff fcb4 	bl	b65b2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b6c4a:	a801      	add	r0, sp, #4
   b6c4c:	f7fe f826 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6c50:	4620      	mov	r0, r4
   b6c52:	b003      	add	sp, #12
   b6c54:	bd30      	pop	{r4, r5, pc}
	...

000b6c58 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b6c58:	b570      	push	{r4, r5, r6, lr}
   b6c5a:	b08a      	sub	sp, #40	; 0x28
   b6c5c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b6c5e:	4601      	mov	r1, r0
   b6c60:	a804      	add	r0, sp, #16
   b6c62:	f7ff ffc5 	bl	b6bf0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b6c66:	4e14      	ldr	r6, [pc, #80]	; (b6cb8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b6c68:	a804      	add	r0, sp, #16
   b6c6a:	f7ff fd35 	bl	b66d8 <_ZN5spark18JSONObjectIterator4nextEv>
   b6c6e:	b1e8      	cbz	r0, b6cac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b6c70:	a904      	add	r1, sp, #16
   b6c72:	4668      	mov	r0, sp
   b6c74:	f7ff ffcd 	bl	b6c12 <_ZNK5spark18JSONObjectIterator4nameEv>
   b6c78:	9802      	ldr	r0, [sp, #8]
   b6c7a:	4631      	mov	r1, r6
   b6c7c:	f7ff fe3c 	bl	b68f8 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b6c80:	4604      	mov	r4, r0
   b6c82:	b110      	cbz	r0, b6c8a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b6c84:	1e2c      	subs	r4, r5, #0
   b6c86:	bf18      	it	ne
   b6c88:	2401      	movne	r4, #1
   b6c8a:	a801      	add	r0, sp, #4
   b6c8c:	f7fe f806 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6c90:	2c00      	cmp	r4, #0
   b6c92:	d0e9      	beq.n	b6c68 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b6c94:	a904      	add	r1, sp, #16
   b6c96:	4668      	mov	r0, sp
   b6c98:	f7ff ffcc 	bl	b6c34 <_ZNK5spark18JSONObjectIterator5valueEv>
   b6c9c:	4668      	mov	r0, sp
   b6c9e:	f7ff fcbe 	bl	b661e <_ZNK5spark9JSONValue5toIntEv>
   b6ca2:	6028      	str	r0, [r5, #0]
   b6ca4:	a801      	add	r0, sp, #4
   b6ca6:	f7fd fff9 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6caa:	e7dd      	b.n	b6c68 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b6cac:	a805      	add	r0, sp, #20
   b6cae:	f7fd fff5 	bl	b4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6cb2:	b00a      	add	sp, #40	; 0x28
   b6cb4:	bd70      	pop	{r4, r5, r6, pc}
   b6cb6:	bf00      	nop
   b6cb8:	000b8a21 	.word	0x000b8a21

000b6cbc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6cbe:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b6cc0:	4620      	mov	r0, r4
   b6cc2:	4913      	ldr	r1, [pc, #76]	; (b6d10 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6cc4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b6cc6:	f7fd fe5d 	bl	b4984 <strcmp>
   b6cca:	b950      	cbnz	r0, b6ce2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b6ccc:	f001 f99e 	bl	b800c <_Z16_fetch_usbserialv>
   b6cd0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6cd4:	f001 f98a 	bl	b7fec <_ZN9USBSerial5beginEl>
}
   b6cd8:	b003      	add	sp, #12
   b6cda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b6cde:	f001 b995 	b.w	b800c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b6ce2:	490c      	ldr	r1, [pc, #48]	; (b6d14 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b6ce4:	4620      	mov	r0, r4
   b6ce6:	f7fd fe4d 	bl	b4984 <strcmp>
   b6cea:	b978      	cbnz	r0, b6d0c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b6cec:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b6cf0:	a901      	add	r1, sp, #4
   b6cf2:	4628      	mov	r0, r5
        int baud = 9600;
   b6cf4:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b6cf6:	f7ff ffaf 	bl	b6c58 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b6cfa:	f001 fb4b 	bl	b8394 <_Z22__fetch_global_Serial1v>
   b6cfe:	9901      	ldr	r1, [sp, #4]
   b6d00:	f001 f91c 	bl	b7f3c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b6d04:	f001 fb46 	bl	b8394 <_Z22__fetch_global_Serial1v>
}
   b6d08:	b003      	add	sp, #12
   b6d0a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b6d0c:	2000      	movs	r0, #0
   b6d0e:	e7fb      	b.n	b6d08 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b6d10:	000b8a26 	.word	0x000b8a26
   b6d14:	000b8a2d 	.word	0x000b8a2d

000b6d18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6d18:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6d1a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b6d1e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6d20:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6d22:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6d26:	42ae      	cmp	r6, r5
   b6d28:	d005      	beq.n	b6d36 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b6d2a:	f105 0008 	add.w	r0, r5, #8
   b6d2e:	f7ff fff3 	bl	b6d18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6d32:	3514      	adds	r5, #20
   b6d34:	e7f7      	b.n	b6d26 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6d36:	6820      	ldr	r0, [r4, #0]
   b6d38:	f7fe fd8c 	bl	b5854 <free>
}
   b6d3c:	4620      	mov	r0, r4
   b6d3e:	bd70      	pop	{r4, r5, r6, pc}

000b6d40 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b6d40:	b510      	push	{r4, lr}
   b6d42:	4604      	mov	r4, r0
   b6d44:	300c      	adds	r0, #12
   b6d46:	f7ff ffe7 	bl	b6d18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6d4a:	4620      	mov	r0, r4
   b6d4c:	f7fe fdf6 	bl	b593c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b6d50:	4620      	mov	r0, r4
   b6d52:	bd10      	pop	{r4, pc}

000b6d54 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b6d54:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b6d56:	4b04      	ldr	r3, [pc, #16]	; (b6d68 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b6d58:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b6d5a:	f840 3b04 	str.w	r3, [r0], #4
   b6d5e:	f7ff ffef 	bl	b6d40 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b6d62:	4620      	mov	r0, r4
   b6d64:	bd10      	pop	{r4, pc}
   b6d66:	bf00      	nop
   b6d68:	000b88e4 	.word	0x000b88e4

000b6d6c <_ZN5spark16StreamLogHandlerD0Ev>:
   b6d6c:	b510      	push	{r4, lr}
   b6d6e:	4604      	mov	r4, r0
   b6d70:	f7ff fff0 	bl	b6d54 <_ZN5spark16StreamLogHandlerD1Ev>
   b6d74:	4620      	mov	r0, r4
   b6d76:	2124      	movs	r1, #36	; 0x24
   b6d78:	f7fd fe55 	bl	b4a26 <_ZdlPvj>
   b6d7c:	4620      	mov	r0, r4
   b6d7e:	bd10      	pop	{r4, pc}

000b6d80 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b6d80:	b510      	push	{r4, lr}
   b6d82:	4b03      	ldr	r3, [pc, #12]	; (b6d90 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b6d84:	6003      	str	r3, [r0, #0]
   b6d86:	4604      	mov	r4, r0
   b6d88:	f7ff ffe4 	bl	b6d54 <_ZN5spark16StreamLogHandlerD1Ev>
   b6d8c:	4620      	mov	r0, r4
   b6d8e:	bd10      	pop	{r4, pc}
   b6d90:	000b8acc 	.word	0x000b8acc

000b6d94 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b6d94:	b510      	push	{r4, lr}
   b6d96:	4604      	mov	r4, r0
   b6d98:	f7ff fff2 	bl	b6d80 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b6d9c:	4620      	mov	r0, r4
   b6d9e:	2124      	movs	r1, #36	; 0x24
   b6da0:	f7fd fe41 	bl	b4a26 <_ZdlPvj>
   b6da4:	4620      	mov	r0, r4
   b6da6:	bd10      	pop	{r4, pc}

000b6da8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b6da8:	2200      	movs	r2, #0
   b6daa:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b6dae:	b510      	push	{r4, lr}
        capacity_(0) {
   b6db0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6db2:	680c      	ldr	r4, [r1, #0]
   b6db4:	6004      	str	r4, [r0, #0]
   b6db6:	684c      	ldr	r4, [r1, #4]
   b6db8:	6044      	str	r4, [r0, #4]
   b6dba:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6dbc:	600a      	str	r2, [r1, #0]
   b6dbe:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6dc0:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6dc2:	608a      	str	r2, [r1, #8]
}
   b6dc4:	bd10      	pop	{r4, pc}

000b6dc6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b6dc6:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6dc8:	6803      	ldr	r3, [r0, #0]
   b6dca:	4604      	mov	r4, r0
   b6dcc:	6818      	ldr	r0, [r3, #0]
   b6dce:	f7fe fae3 	bl	b5398 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b6dd2:	4620      	mov	r0, r4
   b6dd4:	bd10      	pop	{r4, pc}
	...

000b6dd8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b6dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ddc:	b087      	sub	sp, #28
   b6dde:	4680      	mov	r8, r0
   b6de0:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b6de2:	4b1c      	ldr	r3, [pc, #112]	; (b6e54 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b6de4:	685b      	ldr	r3, [r3, #4]
   b6de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6dea:	4689      	mov	r9, r1
   b6dec:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b6dee:	b96b      	cbnz	r3, b6e0c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b6df0:	f7ff fed0 	bl	b6b94 <_ZN5spark10LogManager8instanceEv>
   b6df4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b6df6:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b6dfa:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6dfc:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b6dfe:	f7ff fd79 	bl	b68f4 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b6e02:	7b23      	ldrb	r3, [r4, #12]
   b6e04:	b12b      	cbz	r3, b6e12 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b6e06:	a805      	add	r0, sp, #20
   b6e08:	f7ff ffdd 	bl	b6dc6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b6e0c:	b007      	add	sp, #28
   b6e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b6e12:	2301      	movs	r3, #1
   b6e14:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b6e16:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b6e1a:	fa5f f989 	uxtb.w	r9, r9
   b6e1e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b6e22:	45aa      	cmp	sl, r5
   b6e24:	d012      	beq.n	b6e4c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b6e26:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b6e2a:	4631      	mov	r1, r6
   b6e2c:	1d38      	adds	r0, r7, #4
   b6e2e:	f7ff fe05 	bl	b6a3c <_ZNK5spark6detail9LogFilter5levelEPKc>
   b6e32:	4581      	cmp	r9, r0
   b6e34:	d3f5      	bcc.n	b6e22 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b6e36:	683b      	ldr	r3, [r7, #0]
   b6e38:	9a03      	ldr	r2, [sp, #12]
   b6e3a:	9200      	str	r2, [sp, #0]
   b6e3c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b6e40:	464a      	mov	r2, r9
   b6e42:	4633      	mov	r3, r6
   b6e44:	4641      	mov	r1, r8
   b6e46:	4638      	mov	r0, r7
   b6e48:	47d8      	blx	fp
   b6e4a:	e7ea      	b.n	b6e22 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b6e4c:	2300      	movs	r3, #0
   b6e4e:	7323      	strb	r3, [r4, #12]
   b6e50:	e7d9      	b.n	b6e06 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b6e52:	bf00      	nop
   b6e54:	e000ed00 	.word	0xe000ed00

000b6e58 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b6e58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6e5c:	469b      	mov	fp, r3
   b6e5e:	4b1a      	ldr	r3, [pc, #104]	; (b6ec8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b6e60:	685b      	ldr	r3, [r3, #4]
   b6e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6e66:	4680      	mov	r8, r0
   b6e68:	4689      	mov	r9, r1
   b6e6a:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b6e6c:	b96b      	cbnz	r3, b6e8a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b6e6e:	f7ff fe91 	bl	b6b94 <_ZN5spark10LogManager8instanceEv>
   b6e72:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b6e74:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b6e78:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6e7a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6e7c:	f7ff fd3a 	bl	b68f4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b6e80:	7b23      	ldrb	r3, [r4, #12]
   b6e82:	b12b      	cbz	r3, b6e90 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b6e84:	a801      	add	r0, sp, #4
   b6e86:	f7ff ff9e 	bl	b6dc6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b6e8a:	b003      	add	sp, #12
   b6e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b6e90:	2301      	movs	r3, #1
   b6e92:	7323      	strb	r3, [r4, #12]
   b6e94:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b6e98:	b2f6      	uxtb	r6, r6
   b6e9a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b6e9e:	4555      	cmp	r5, sl
   b6ea0:	d00e      	beq.n	b6ec0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b6ea2:	f855 7b04 	ldr.w	r7, [r5], #4
   b6ea6:	4659      	mov	r1, fp
   b6ea8:	1d38      	adds	r0, r7, #4
   b6eaa:	f7ff fdc7 	bl	b6a3c <_ZNK5spark6detail9LogFilter5levelEPKc>
   b6eae:	4286      	cmp	r6, r0
   b6eb0:	d3f5      	bcc.n	b6e9e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b6eb2:	683b      	ldr	r3, [r7, #0]
   b6eb4:	464a      	mov	r2, r9
   b6eb6:	68db      	ldr	r3, [r3, #12]
   b6eb8:	4641      	mov	r1, r8
   b6eba:	4638      	mov	r0, r7
   b6ebc:	4798      	blx	r3
   b6ebe:	e7ee      	b.n	b6e9e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b6ec0:	2300      	movs	r3, #0
   b6ec2:	7323      	strb	r3, [r4, #12]
   b6ec4:	e7de      	b.n	b6e84 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b6ec6:	bf00      	nop
   b6ec8:	e000ed00 	.word	0xe000ed00

000b6ecc <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b6ecc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6ed0:	4b16      	ldr	r3, [pc, #88]	; (b6f2c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b6ed2:	685b      	ldr	r3, [r3, #4]
   b6ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6ed8:	4605      	mov	r5, r0
   b6eda:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b6edc:	bb1b      	cbnz	r3, b6f26 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b6ede:	f7ff fe59 	bl	b6b94 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b6ee2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b6ee6:	4604      	mov	r4, r0
   b6ee8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6eea:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6eec:	f7ff fd02 	bl	b68f4 <_ZN14RecursiveMutex4lockEv.isra.0>
   b6ef0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b6ef4:	2446      	movs	r4, #70	; 0x46
   b6ef6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b6efa:	45b0      	cmp	r8, r6
   b6efc:	d109      	bne.n	b6f12 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b6efe:	a801      	add	r0, sp, #4
   b6f00:	f7ff ff61 	bl	b6dc6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b6f04:	42a5      	cmp	r5, r4
   b6f06:	bfb4      	ite	lt
   b6f08:	2000      	movlt	r0, #0
   b6f0a:	2001      	movge	r0, #1
}
   b6f0c:	b002      	add	sp, #8
   b6f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b6f12:	f856 0b04 	ldr.w	r0, [r6], #4
   b6f16:	4639      	mov	r1, r7
   b6f18:	3004      	adds	r0, #4
   b6f1a:	f7ff fd8f 	bl	b6a3c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b6f1e:	4284      	cmp	r4, r0
   b6f20:	bfa8      	it	ge
   b6f22:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b6f24:	e7e9      	b.n	b6efa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b6f26:	2000      	movs	r0, #0
   b6f28:	e7f0      	b.n	b6f0c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b6f2a:	bf00      	nop
   b6f2c:	e000ed00 	.word	0xe000ed00

000b6f30 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6f32:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b6f36:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6f38:	4604      	mov	r4, r0
   b6f3a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6f3c:	db0d      	blt.n	b6f5a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b6f3e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b6f40:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6f42:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6f44:	dd04      	ble.n	b6f50 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b6f46:	00b9      	lsls	r1, r7, #2
   b6f48:	f7fe fc8c 	bl	b5864 <realloc>
            if (!d) {
   b6f4c:	b918      	cbnz	r0, b6f56 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b6f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b6f50:	f7fe fc80 	bl	b5854 <free>
        T* d = nullptr;
   b6f54:	2000      	movs	r0, #0
        data_ = d;
   b6f56:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6f58:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b6f5a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6f5c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6f5e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b6f62:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6f64:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b6f68:	1d08      	adds	r0, r1, #4
   b6f6a:	f001 fa5b 	bl	b8424 <memmove>
    new(p) T(std::move(value));
   b6f6e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b6f72:	6863      	ldr	r3, [r4, #4]
   b6f74:	3301      	adds	r3, #1
   b6f76:	6063      	str	r3, [r4, #4]
    return true;
   b6f78:	2001      	movs	r0, #1
   b6f7a:	e7e8      	b.n	b6f4e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b6f7c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b6f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b6f7e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b6f82:	4604      	mov	r4, r0
   b6f84:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6f86:	9301      	str	r3, [sp, #4]
   b6f88:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b6f8a:	f7ff fcb3 	bl	b68f4 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b6f8e:	e9d4 3200 	ldrd	r3, r2, [r4]
   b6f92:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b6f96:	4293      	cmp	r3, r2
   b6f98:	4619      	mov	r1, r3
   b6f9a:	d00b      	beq.n	b6fb4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b6f9c:	6809      	ldr	r1, [r1, #0]
   b6f9e:	42a9      	cmp	r1, r5
   b6fa0:	f103 0304 	add.w	r3, r3, #4
   b6fa4:	d1f7      	bne.n	b6f96 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b6fa6:	a801      	add	r0, sp, #4
   b6fa8:	f7ff ff0d 	bl	b6dc6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6fac:	2500      	movs	r5, #0
}
   b6fae:	4628      	mov	r0, r5
   b6fb0:	b003      	add	sp, #12
   b6fb2:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b6fb4:	4629      	mov	r1, r5
   b6fb6:	4620      	mov	r0, r4
   b6fb8:	f7ff ffba 	bl	b6f30 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b6fbc:	4605      	mov	r5, r0
   b6fbe:	2800      	cmp	r0, #0
   b6fc0:	d0f1      	beq.n	b6fa6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b6fc2:	6863      	ldr	r3, [r4, #4]
   b6fc4:	2b01      	cmp	r3, #1
   b6fc6:	d101      	bne.n	b6fcc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b6fc8:	f7ff fe00 	bl	b6bcc <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6fcc:	a801      	add	r0, sp, #4
   b6fce:	f7ff fefa 	bl	b6dc6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6fd2:	e7ec      	b.n	b6fae <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b6fd4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6fd4:	b570      	push	{r4, r5, r6, lr}
   b6fd6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b6fd8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6fdc:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b6fde:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b6fe2:	4282      	cmp	r2, r0
   b6fe4:	d00f      	beq.n	b7006 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b6fe6:	4601      	mov	r1, r0
            if (*p == value) {
   b6fe8:	681d      	ldr	r5, [r3, #0]
   b6fea:	f851 6b04 	ldr.w	r6, [r1], #4
   b6fee:	42ae      	cmp	r6, r5
   b6ff0:	d107      	bne.n	b7002 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6ff2:	1a52      	subs	r2, r2, r1
   b6ff4:	f001 fa16 	bl	b8424 <memmove>
    --size_;
   b6ff8:	6863      	ldr	r3, [r4, #4]
   b6ffa:	3b01      	subs	r3, #1
   b6ffc:	6063      	str	r3, [r4, #4]
    return true;
   b6ffe:	2001      	movs	r0, #1
}
   b7000:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b7002:	4608      	mov	r0, r1
   b7004:	e7ed      	b.n	b6fe2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b7006:	2000      	movs	r0, #0
   b7008:	e7fa      	b.n	b7000 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b700a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b700a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b700c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b7010:	4604      	mov	r4, r0
   b7012:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7014:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7016:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b7018:	f7ff fc6c 	bl	b68f4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b701c:	a901      	add	r1, sp, #4
   b701e:	4620      	mov	r0, r4
   b7020:	f7ff ffd8 	bl	b6fd4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b7024:	b118      	cbz	r0, b702e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b7026:	6863      	ldr	r3, [r4, #4]
   b7028:	b90b      	cbnz	r3, b702e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b702a:	f7ff fddb 	bl	b6be4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b702e:	a803      	add	r0, sp, #12
   b7030:	f7ff fec9 	bl	b6dc6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b7034:	b004      	add	sp, #16
   b7036:	bd10      	pop	{r4, pc}

000b7038 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b7038:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b703a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b703e:	2318      	movs	r3, #24
   b7040:	4604      	mov	r4, r0
   b7042:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b7046:	42ae      	cmp	r6, r5
   b7048:	d015      	beq.n	b7076 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b704a:	f105 0110 	add.w	r1, r5, #16
   b704e:	4620      	mov	r0, r4
   b7050:	f7ff ffc0 	bl	b6fd4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b7054:	6863      	ldr	r3, [r4, #4]
   b7056:	b90b      	cbnz	r3, b705c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b7058:	f7ff fdc4 	bl	b6be4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b705c:	69e0      	ldr	r0, [r4, #28]
   b705e:	6929      	ldr	r1, [r5, #16]
   b7060:	6803      	ldr	r3, [r0, #0]
   b7062:	68db      	ldr	r3, [r3, #12]
   b7064:	4798      	blx	r3
        if (h.stream) {
   b7066:	6969      	ldr	r1, [r5, #20]
   b7068:	b119      	cbz	r1, b7072 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b706a:	6a20      	ldr	r0, [r4, #32]
   b706c:	6803      	ldr	r3, [r0, #0]
   b706e:	68db      	ldr	r3, [r3, #12]
   b7070:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b7072:	3518      	adds	r5, #24
   b7074:	e7e7      	b.n	b7046 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b7076:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b707a:	2618      	movs	r6, #24
   b707c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7080:	42ae      	cmp	r6, r5
   b7082:	d004      	beq.n	b708e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b7084:	4628      	mov	r0, r5
   b7086:	f000 fda5 	bl	b7bd4 <_ZN6StringD1Ev>
   b708a:	3518      	adds	r5, #24
   b708c:	e7f8      	b.n	b7080 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b708e:	2300      	movs	r3, #0
   b7090:	6163      	str	r3, [r4, #20]
}
   b7092:	bd70      	pop	{r4, r5, r6, pc}

000b7094 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b7094:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7096:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b7098:	f7ff fda4 	bl	b6be4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b709c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b70a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b70a2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b70a4:	f7ff fc26 	bl	b68f4 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b70a8:	4620      	mov	r0, r4
   b70aa:	f7ff ffc5 	bl	b7038 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b70ae:	a801      	add	r0, sp, #4
   b70b0:	f7ff fe89 	bl	b6dc6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b70b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b70b6:	b108      	cbz	r0, b70bc <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b70b8:	f7fe f95e 	bl	b5378 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b70bc:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b70c0:	2618      	movs	r6, #24
   b70c2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b70c6:	42ae      	cmp	r6, r5
   b70c8:	d004      	beq.n	b70d4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b70ca:	4628      	mov	r0, r5
   b70cc:	f000 fd82 	bl	b7bd4 <_ZN6StringD1Ev>
   b70d0:	3518      	adds	r5, #24
   b70d2:	e7f8      	b.n	b70c6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b70d4:	6920      	ldr	r0, [r4, #16]
   b70d6:	f7fe fbbd 	bl	b5854 <free>
   b70da:	6820      	ldr	r0, [r4, #0]
   b70dc:	f7fe fbba 	bl	b5854 <free>
}
   b70e0:	4620      	mov	r0, r4
   b70e2:	b002      	add	sp, #8
   b70e4:	bd70      	pop	{r4, r5, r6, pc}
	...

000b70e8 <__tcf_2>:
    static LogManager mgr;
   b70e8:	4801      	ldr	r0, [pc, #4]	; (b70f0 <__tcf_2+0x8>)
   b70ea:	f7ff bfd3 	b.w	b7094 <_ZN5spark10LogManagerD1Ev>
   b70ee:	bf00      	nop
   b70f0:	2003e690 	.word	0x2003e690

000b70f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b70f4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b70f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b70f8:	4604      	mov	r4, r0
   b70fa:	460d      	mov	r5, r1
   b70fc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b70fe:	d915      	bls.n	b712c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b7100:	4290      	cmp	r0, r2
   b7102:	d214      	bcs.n	b712e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b7104:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b7108:	1a75      	subs	r5, r6, r1
   b710a:	f1a1 0714 	sub.w	r7, r1, #20
   b710e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7110:	42b7      	cmp	r7, r6
   b7112:	d01a      	beq.n	b714a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b7114:	b11c      	cbz	r4, b711e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b7116:	4631      	mov	r1, r6
   b7118:	4620      	mov	r0, r4
   b711a:	f7ff fc3f 	bl	b699c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b711e:	f106 0008 	add.w	r0, r6, #8
   b7122:	f7ff fdf9 	bl	b6d18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b7126:	3e14      	subs	r6, #20
   b7128:	3c14      	subs	r4, #20
   b712a:	e7f1      	b.n	b7110 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b712c:	d00d      	beq.n	b714a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b712e:	42b5      	cmp	r5, r6
   b7130:	d00b      	beq.n	b714a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b7132:	b11c      	cbz	r4, b713c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b7134:	4629      	mov	r1, r5
   b7136:	4620      	mov	r0, r4
   b7138:	f7ff fc30 	bl	b699c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b713c:	f105 0008 	add.w	r0, r5, #8
   b7140:	f7ff fdea 	bl	b6d18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b7144:	3514      	adds	r5, #20
   b7146:	3414      	adds	r4, #20
   b7148:	e7f1      	b.n	b712e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b714a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b714c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b714c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b714e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7150:	4604      	mov	r4, r0
   b7152:	460d      	mov	r5, r1
   b7154:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7156:	d914      	bls.n	b7182 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b7158:	4290      	cmp	r0, r2
   b715a:	d213      	bcs.n	b7184 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b715c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b7160:	1a75      	subs	r5, r6, r1
   b7162:	f1a1 0710 	sub.w	r7, r1, #16
   b7166:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7168:	42b7      	cmp	r7, r6
   b716a:	d018      	beq.n	b719e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b716c:	b11c      	cbz	r4, b7176 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b716e:	4631      	mov	r1, r6
   b7170:	4620      	mov	r0, r4
   b7172:	f000 fdab 	bl	b7ccc <_ZN6StringC1EOS_>
                end->~T();
   b7176:	4630      	mov	r0, r6
   b7178:	f000 fd2c 	bl	b7bd4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b717c:	3e10      	subs	r6, #16
   b717e:	3c10      	subs	r4, #16
   b7180:	e7f2      	b.n	b7168 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b7182:	d00c      	beq.n	b719e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b7184:	42b5      	cmp	r5, r6
   b7186:	d00a      	beq.n	b719e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b7188:	b11c      	cbz	r4, b7192 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b718a:	4629      	mov	r1, r5
   b718c:	4620      	mov	r0, r4
   b718e:	f000 fd9d 	bl	b7ccc <_ZN6StringC1EOS_>
                p->~T();
   b7192:	4628      	mov	r0, r5
   b7194:	f000 fd1e 	bl	b7bd4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b7198:	3510      	adds	r5, #16
   b719a:	3410      	adds	r4, #16
   b719c:	e7f2      	b.n	b7184 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b719e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b71a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b71a0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b71a2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b71a4:	4605      	mov	r5, r0
        if (n > 0) {
   b71a6:	dd11      	ble.n	b71cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b71a8:	0130      	lsls	r0, r6, #4
   b71aa:	f7fe fb4b 	bl	b5844 <malloc>
            if (!d) {
   b71ae:	4604      	mov	r4, r0
   b71b0:	b158      	cbz	r0, b71ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b71b2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b71b6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b71ba:	f7ff ffc7 	bl	b714c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b71be:	6828      	ldr	r0, [r5, #0]
   b71c0:	f7fe fb48 	bl	b5854 <free>
        data_ = d;
   b71c4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b71c6:	60ae      	str	r6, [r5, #8]
        return true;
   b71c8:	2001      	movs	r0, #1
    }
   b71ca:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b71cc:	2400      	movs	r4, #0
   b71ce:	e7f6      	b.n	b71be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b71d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b71d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b71d4:	4690      	mov	r8, r2
   b71d6:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b71d8:	2300      	movs	r3, #0
   b71da:	9103      	str	r1, [sp, #12]
    return size_;
   b71dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b71e0:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b71e2:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b71e4:	4299      	cmp	r1, r3
        capacity_(0) {
   b71e6:	e9c0 3300 	strd	r3, r3, [r0]
   b71ea:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b71ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b71f2:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b71f6:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b71f8:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b71fa:	dc23      	bgt.n	b7244 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b71fc:	e9d8 5700 	ldrd	r5, r7, [r8]
   b7200:	2314      	movs	r3, #20
   b7202:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b7206:	42af      	cmp	r7, r5
   b7208:	d03b      	beq.n	b7282 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b720a:	4629      	mov	r1, r5
   b720c:	a80b      	add	r0, sp, #44	; 0x2c
   b720e:	f000 fd5d 	bl	b7ccc <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b7212:	a90b      	add	r1, sp, #44	; 0x2c
   b7214:	a80f      	add	r0, sp, #60	; 0x3c
   b7216:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b7218:	f000 fd58 	bl	b7ccc <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b721c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b7220:	4299      	cmp	r1, r3
   b7222:	da1b      	bge.n	b725c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b7224:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b7226:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b7228:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b722c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b7230:	4631      	mov	r1, r6
   b7232:	f106 0010 	add.w	r0, r6, #16
   b7236:	f7ff ff89 	bl	b714c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b723a:	b9ee      	cbnz	r6, b7278 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b723c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b723e:	3301      	adds	r3, #1
   b7240:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b7242:	e011      	b.n	b7268 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b7244:	a808      	add	r0, sp, #32
   b7246:	f7ff ffab 	bl	b71a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b724a:	2800      	cmp	r0, #0
   b724c:	d1d6      	bne.n	b71fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b724e:	a808      	add	r0, sp, #32
   b7250:	f7fe fb74 	bl	b593c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b7254:	4620      	mov	r0, r4
   b7256:	b015      	add	sp, #84	; 0x54
   b7258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b725c:	3101      	adds	r1, #1
   b725e:	a808      	add	r0, sp, #32
   b7260:	f7ff ff9e 	bl	b71a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b7264:	2800      	cmp	r0, #0
   b7266:	d1dd      	bne.n	b7224 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b7268:	a80f      	add	r0, sp, #60	; 0x3c
   b726a:	f000 fcb3 	bl	b7bd4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b726e:	a80b      	add	r0, sp, #44	; 0x2c
   b7270:	f000 fcb0 	bl	b7bd4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b7274:	3514      	adds	r5, #20
   b7276:	e7c6      	b.n	b7206 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b7278:	a90f      	add	r1, sp, #60	; 0x3c
   b727a:	4630      	mov	r0, r6
   b727c:	f000 fd26 	bl	b7ccc <_ZN6StringC1EOS_>
   b7280:	e7dc      	b.n	b723c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b7282:	2600      	movs	r6, #0
   b7284:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b7288:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b728a:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b728e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b7292:	429e      	cmp	r6, r3
   b7294:	da7c      	bge.n	b7390 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b7296:	0133      	lsls	r3, r6, #4
   b7298:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b729a:	9306      	str	r3, [sp, #24]
        if (!category) {
   b729c:	b90b      	cbnz	r3, b72a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b729e:	3601      	adds	r6, #1
   b72a0:	e7f5      	b.n	b728e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b72a2:	2300      	movs	r3, #0
   b72a4:	9307      	str	r3, [sp, #28]
   b72a6:	fb09 f306 	mul.w	r3, r9, r6
   b72aa:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b72ac:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b72ae:	a907      	add	r1, sp, #28
   b72b0:	a806      	add	r0, sp, #24
   b72b2:	f7ff faf8 	bl	b68a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b72b6:	4682      	mov	sl, r0
   b72b8:	2800      	cmp	r0, #0
   b72ba:	d0f0      	beq.n	b729e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b72bc:	f04f 0300 	mov.w	r3, #0
   b72c0:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b72c4:	4601      	mov	r1, r0
   b72c6:	9a07      	ldr	r2, [sp, #28]
   b72c8:	f10d 0317 	add.w	r3, sp, #23
   b72cc:	4628      	mov	r0, r5
   b72ce:	f7ff fb79 	bl	b69c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b72d2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b72d6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b72d8:	2f00      	cmp	r7, #0
   b72da:	d14a      	bne.n	b7372 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b72dc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b72e0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b72e4:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b72e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b72ec:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b72f0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b72f4:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b72f6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b72fa:	4293      	cmp	r3, r2
   b72fc:	db17      	blt.n	b732e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b72fe:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b7302:	f1ba 0f00 	cmp.w	sl, #0
   b7306:	dd30      	ble.n	b736a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b7308:	fb09 f00a 	mul.w	r0, r9, sl
   b730c:	f7fe fa9a 	bl	b5844 <malloc>
            if (!d) {
   b7310:	4683      	mov	fp, r0
   b7312:	b360      	cbz	r0, b736e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b7314:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7318:	fb09 1202 	mla	r2, r9, r2, r1
   b731c:	f7ff feea 	bl	b70f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b7320:	6828      	ldr	r0, [r5, #0]
   b7322:	f7fe fa97 	bl	b5854 <free>
        data_ = d;
   b7326:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b732a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b732e:	682b      	ldr	r3, [r5, #0]
   b7330:	9a01      	ldr	r2, [sp, #4]
   b7332:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b7336:	686a      	ldr	r2, [r5, #4]
   b7338:	4651      	mov	r1, sl
   b733a:	fb09 3202 	mla	r2, r9, r2, r3
   b733e:	f10a 0014 	add.w	r0, sl, #20
   b7342:	f7ff fed7 	bl	b70f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b7346:	f1ba 0f00 	cmp.w	sl, #0
   b734a:	d003      	beq.n	b7354 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b734c:	a90f      	add	r1, sp, #60	; 0x3c
   b734e:	4650      	mov	r0, sl
   b7350:	f7ff fb24 	bl	b699c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b7354:	686b      	ldr	r3, [r5, #4]
   b7356:	3301      	adds	r3, #1
   b7358:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b735a:	a811      	add	r0, sp, #68	; 0x44
   b735c:	f7ff fcdc 	bl	b6d18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7360:	b13f      	cbz	r7, b7372 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b7362:	a80b      	add	r0, sp, #44	; 0x2c
   b7364:	f7ff fcd8 	bl	b6d18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b7368:	e771      	b.n	b724e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b736a:	46bb      	mov	fp, r7
   b736c:	e7d8      	b.n	b7320 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b736e:	2701      	movs	r7, #1
   b7370:	e7f3      	b.n	b735a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b7372:	9b01      	ldr	r3, [sp, #4]
   b7374:	682d      	ldr	r5, [r5, #0]
   b7376:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b737a:	9b06      	ldr	r3, [sp, #24]
   b737c:	781b      	ldrb	r3, [r3, #0]
   b737e:	b92b      	cbnz	r3, b738c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b7380:	f8d8 3000 	ldr.w	r3, [r8]
   b7384:	9a02      	ldr	r2, [sp, #8]
   b7386:	4413      	add	r3, r2
   b7388:	7c1b      	ldrb	r3, [r3, #16]
   b738a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b738c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b738e:	e78e      	b.n	b72ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7390:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b7392:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7394:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7396:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7398:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b739a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b739c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b739e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b73a0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b73a2:	60a2      	str	r2, [r4, #8]
   b73a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b73a6:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b73a8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b73aa:	60e2      	str	r2, [r4, #12]
   b73ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b73ae:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b73b0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b73b2:	6122      	str	r2, [r4, #16]
   b73b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b73b6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b73b8:	9b03      	ldr	r3, [sp, #12]
   b73ba:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b73bc:	6162      	str	r2, [r4, #20]
   b73be:	7623      	strb	r3, [r4, #24]
   b73c0:	e7cf      	b.n	b7362 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b73c4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b73c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b73c6:	4604      	mov	r4, r0
   b73c8:	b087      	sub	sp, #28
   b73ca:	460d      	mov	r5, r1
        filter_(level, filters) {
   b73cc:	4626      	mov	r6, r4
        stream_(&stream) {
   b73ce:	4619      	mov	r1, r3
   b73d0:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b73d2:	4617      	mov	r7, r2
        stream_(&stream) {
   b73d4:	f7fd fee6 	bl	b51a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b73d8:	4b0b      	ldr	r3, [pc, #44]	; (b7408 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b73da:	f846 3b04 	str.w	r3, [r6], #4
   b73de:	4669      	mov	r1, sp
   b73e0:	a803      	add	r0, sp, #12
   b73e2:	f7fd fedf 	bl	b51a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b73e6:	aa03      	add	r2, sp, #12
   b73e8:	4639      	mov	r1, r7
   b73ea:	4630      	mov	r0, r6
   b73ec:	f7ff fef0 	bl	b71d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b73f0:	a803      	add	r0, sp, #12
   b73f2:	f7fd fc69 	bl	b4cc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b73f6:	4668      	mov	r0, sp
   b73f8:	f7fd fc66 	bl	b4cc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b73fc:	4b03      	ldr	r3, [pc, #12]	; (b740c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b73fe:	6023      	str	r3, [r4, #0]
}
   b7400:	4620      	mov	r0, r4
        stream_(&stream) {
   b7402:	6225      	str	r5, [r4, #32]
}
   b7404:	b007      	add	sp, #28
   b7406:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7408:	000b88e4 	.word	0x000b88e4
   b740c:	000b8ab4 	.word	0x000b8ab4

000b7410 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b7410:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7412:	460f      	mov	r7, r1
   b7414:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b7416:	491d      	ldr	r1, [pc, #116]	; (b748c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b7418:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b741a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b741c:	4616      	mov	r6, r2
   b741e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b7420:	f7fd fab0 	bl	b4984 <strcmp>
   b7424:	b9c0      	cbnz	r0, b7458 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b7426:	b1a4      	cbz	r4, b7452 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b7428:	4629      	mov	r1, r5
   b742a:	a801      	add	r0, sp, #4
   b742c:	f7ff fcbc 	bl	b6da8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b7430:	4917      	ldr	r1, [pc, #92]	; (b7490 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b7432:	2024      	movs	r0, #36	; 0x24
   b7434:	f000 ffd2 	bl	b83dc <_ZnwjRKSt9nothrow_t>
   b7438:	4605      	mov	r5, r0
   b743a:	b130      	cbz	r0, b744a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b743c:	ab01      	add	r3, sp, #4
   b743e:	4632      	mov	r2, r6
   b7440:	4621      	mov	r1, r4
   b7442:	f7ff ffbf 	bl	b73c4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7446:	4b13      	ldr	r3, [pc, #76]	; (b7494 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b7448:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b744a:	a801      	add	r0, sp, #4
   b744c:	f7fd fc3c 	bl	b4cc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b7450:	462c      	mov	r4, r5
}
   b7452:	4620      	mov	r0, r4
   b7454:	b005      	add	sp, #20
   b7456:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b7458:	490f      	ldr	r1, [pc, #60]	; (b7498 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b745a:	4638      	mov	r0, r7
   b745c:	f7fd fa92 	bl	b4984 <strcmp>
   b7460:	b990      	cbnz	r0, b7488 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b7462:	2c00      	cmp	r4, #0
   b7464:	d0f5      	beq.n	b7452 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b7466:	4629      	mov	r1, r5
   b7468:	a801      	add	r0, sp, #4
   b746a:	f7ff fc9d 	bl	b6da8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b746e:	4908      	ldr	r1, [pc, #32]	; (b7490 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b7470:	2024      	movs	r0, #36	; 0x24
   b7472:	f000 ffb3 	bl	b83dc <_ZnwjRKSt9nothrow_t>
   b7476:	4605      	mov	r5, r0
   b7478:	2800      	cmp	r0, #0
   b747a:	d0e6      	beq.n	b744a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b747c:	ab01      	add	r3, sp, #4
   b747e:	4632      	mov	r2, r6
   b7480:	4621      	mov	r1, r4
   b7482:	f7ff ff9f 	bl	b73c4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7486:	e7e0      	b.n	b744a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b7488:	2400      	movs	r4, #0
   b748a:	e7e2      	b.n	b7452 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b748c:	000b8a35 	.word	0x000b8a35
   b7490:	000b8bec 	.word	0x000b8bec
   b7494:	000b8acc 	.word	0x000b8acc
   b7498:	000b8a39 	.word	0x000b8a39

000b749c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b749c:	4b01      	ldr	r3, [pc, #4]	; (b74a4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b749e:	4a02      	ldr	r2, [pc, #8]	; (b74a8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b74a0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b74a2:	4770      	bx	lr
   b74a4:	2003e68c 	.word	0x2003e68c
   b74a8:	000b8a4a 	.word	0x000b8a4a

000b74ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b74ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b74b0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b74b2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b74b6:	4604      	mov	r4, r0
   b74b8:	460e      	mov	r6, r1
   b74ba:	4617      	mov	r7, r2
   b74bc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b74be:	f000 fda5 	bl	b800c <_Z16_fetch_usbserialv>
   b74c2:	4581      	cmp	r9, r0
   b74c4:	d04c      	beq.n	b7560 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b74c6:	792b      	ldrb	r3, [r5, #4]
   b74c8:	0719      	lsls	r1, r3, #28
   b74ca:	d504      	bpl.n	b74d6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b74cc:	696a      	ldr	r2, [r5, #20]
   b74ce:	4954      	ldr	r1, [pc, #336]	; (b7620 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b74d0:	4620      	mov	r0, r4
   b74d2:	f7ff fadc 	bl	b6a8e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b74d6:	f1b8 0f00 	cmp.w	r8, #0
   b74da:	d00d      	beq.n	b74f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b74dc:	215b      	movs	r1, #91	; 0x5b
   b74de:	4620      	mov	r0, r4
   b74e0:	f7ff fa50 	bl	b6984 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b74e4:	4641      	mov	r1, r8
   b74e6:	4620      	mov	r0, r4
   b74e8:	f7ff fa3d 	bl	b6966 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b74ec:	6823      	ldr	r3, [r4, #0]
   b74ee:	494d      	ldr	r1, [pc, #308]	; (b7624 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b74f0:	68db      	ldr	r3, [r3, #12]
   b74f2:	2202      	movs	r2, #2
   b74f4:	4620      	mov	r0, r4
   b74f6:	4798      	blx	r3
    if (attr.has_file) {
   b74f8:	792b      	ldrb	r3, [r5, #4]
   b74fa:	07da      	lsls	r2, r3, #31
   b74fc:	d523      	bpl.n	b7546 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b74fe:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b7502:	212f      	movs	r1, #47	; 0x2f
   b7504:	4640      	mov	r0, r8
   b7506:	f001 f82e 	bl	b8566 <strrchr>
    if (s1) {
   b750a:	b108      	cbz	r0, b7510 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b750c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b7510:	4641      	mov	r1, r8
   b7512:	4620      	mov	r0, r4
   b7514:	f7ff fa27 	bl	b6966 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b7518:	792b      	ldrb	r3, [r5, #4]
   b751a:	079b      	lsls	r3, r3, #30
   b751c:	d508      	bpl.n	b7530 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b751e:	213a      	movs	r1, #58	; 0x3a
   b7520:	4620      	mov	r0, r4
   b7522:	f7ff fa2f 	bl	b6984 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b7526:	68ea      	ldr	r2, [r5, #12]
   b7528:	493f      	ldr	r1, [pc, #252]	; (b7628 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b752a:	4620      	mov	r0, r4
   b752c:	f7ff faaf 	bl	b6a8e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b7530:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b7532:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b7534:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b7538:	68db      	ldr	r3, [r3, #12]
   b753a:	bf14      	ite	ne
   b753c:	493b      	ldrne	r1, [pc, #236]	; (b762c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b753e:	493c      	ldreq	r1, [pc, #240]	; (b7630 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b7540:	2202      	movs	r2, #2
            write(": ", 2);
   b7542:	4620      	mov	r0, r4
   b7544:	4798      	blx	r3
    if (attr.has_function) {
   b7546:	792b      	ldrb	r3, [r5, #4]
   b7548:	0758      	lsls	r0, r3, #29
   b754a:	d51d      	bpl.n	b7588 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b754c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b754e:	460b      	mov	r3, r1
   b7550:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b7552:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7556:	b160      	cbz	r0, b7572 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b7558:	2820      	cmp	r0, #32
   b755a:	d108      	bne.n	b756e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b755c:	4619      	mov	r1, r3
   b755e:	e7f7      	b.n	b7550 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b7560:	4834      	ldr	r0, [pc, #208]	; (b7634 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b7562:	f000 f982 	bl	b786a <_ZN5spark12NetworkClass9listeningEv>
   b7566:	2800      	cmp	r0, #0
   b7568:	d0ad      	beq.n	b74c6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b756a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b756e:	2828      	cmp	r0, #40	; 0x28
   b7570:	d1ee      	bne.n	b7550 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b7572:	6823      	ldr	r3, [r4, #0]
   b7574:	1a52      	subs	r2, r2, r1
   b7576:	68db      	ldr	r3, [r3, #12]
   b7578:	4620      	mov	r0, r4
   b757a:	4798      	blx	r3
        write("(): ", 4);
   b757c:	6823      	ldr	r3, [r4, #0]
   b757e:	492e      	ldr	r1, [pc, #184]	; (b7638 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b7580:	68db      	ldr	r3, [r3, #12]
   b7582:	2204      	movs	r2, #4
   b7584:	4620      	mov	r0, r4
   b7586:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b7588:	2100      	movs	r1, #0
   b758a:	4638      	mov	r0, r7
   b758c:	f7fe f864 	bl	b5658 <log_level_name>
   b7590:	4601      	mov	r1, r0
    write(s);
   b7592:	4620      	mov	r0, r4
   b7594:	f7ff f9e7 	bl	b6966 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b7598:	6823      	ldr	r3, [r4, #0]
   b759a:	4925      	ldr	r1, [pc, #148]	; (b7630 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b759c:	68db      	ldr	r3, [r3, #12]
   b759e:	2202      	movs	r2, #2
   b75a0:	4620      	mov	r0, r4
   b75a2:	4798      	blx	r3
    if (msg) {
   b75a4:	b11e      	cbz	r6, b75ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b75a6:	4631      	mov	r1, r6
   b75a8:	4620      	mov	r0, r4
   b75aa:	f7ff f9dc 	bl	b6966 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b75ae:	792b      	ldrb	r3, [r5, #4]
   b75b0:	f013 0f30 	tst.w	r3, #48	; 0x30
   b75b4:	d02c      	beq.n	b7610 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b75b6:	6823      	ldr	r3, [r4, #0]
   b75b8:	4920      	ldr	r1, [pc, #128]	; (b763c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b75ba:	68db      	ldr	r3, [r3, #12]
   b75bc:	2202      	movs	r2, #2
   b75be:	4620      	mov	r0, r4
   b75c0:	4798      	blx	r3
        if (attr.has_code) {
   b75c2:	792b      	ldrb	r3, [r5, #4]
   b75c4:	06d9      	lsls	r1, r3, #27
   b75c6:	d50a      	bpl.n	b75de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b75c8:	6823      	ldr	r3, [r4, #0]
   b75ca:	491d      	ldr	r1, [pc, #116]	; (b7640 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b75cc:	68db      	ldr	r3, [r3, #12]
   b75ce:	2207      	movs	r2, #7
   b75d0:	4620      	mov	r0, r4
   b75d2:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b75d4:	69aa      	ldr	r2, [r5, #24]
   b75d6:	491b      	ldr	r1, [pc, #108]	; (b7644 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b75d8:	4620      	mov	r0, r4
   b75da:	f7ff fa58 	bl	b6a8e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b75de:	792b      	ldrb	r3, [r5, #4]
   b75e0:	069a      	lsls	r2, r3, #26
   b75e2:	d511      	bpl.n	b7608 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b75e4:	06db      	lsls	r3, r3, #27
   b75e6:	d505      	bpl.n	b75f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b75e8:	6823      	ldr	r3, [r4, #0]
   b75ea:	4910      	ldr	r1, [pc, #64]	; (b762c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b75ec:	68db      	ldr	r3, [r3, #12]
   b75ee:	2202      	movs	r2, #2
   b75f0:	4620      	mov	r0, r4
   b75f2:	4798      	blx	r3
            write("details = ", 10);
   b75f4:	6823      	ldr	r3, [r4, #0]
   b75f6:	4914      	ldr	r1, [pc, #80]	; (b7648 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b75f8:	68db      	ldr	r3, [r3, #12]
   b75fa:	4620      	mov	r0, r4
   b75fc:	220a      	movs	r2, #10
   b75fe:	4798      	blx	r3
            write(attr.details);
   b7600:	69e9      	ldr	r1, [r5, #28]
   b7602:	4620      	mov	r0, r4
   b7604:	f7ff f9af 	bl	b6966 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b7608:	215d      	movs	r1, #93	; 0x5d
   b760a:	4620      	mov	r0, r4
   b760c:	f7ff f9ba 	bl	b6984 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b7610:	6823      	ldr	r3, [r4, #0]
   b7612:	490e      	ldr	r1, [pc, #56]	; (b764c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b7614:	68db      	ldr	r3, [r3, #12]
   b7616:	4620      	mov	r0, r4
   b7618:	2202      	movs	r2, #2
}
   b761a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b761e:	4718      	bx	r3
   b7620:	000b8a4e 	.word	0x000b8a4e
   b7624:	000b8a55 	.word	0x000b8a55
   b7628:	000b8837 	.word	0x000b8837
   b762c:	000b8a58 	.word	0x000b8a58
   b7630:	000b8a5d 	.word	0x000b8a5d
   b7634:	2003e6b8 	.word	0x2003e6b8
   b7638:	000b8a5b 	.word	0x000b8a5b
   b763c:	000b8a60 	.word	0x000b8a60
   b7640:	000b8a63 	.word	0x000b8a63
   b7644:	000b8a6b 	.word	0x000b8a6b
   b7648:	000b8a6e 	.word	0x000b8a6e
   b764c:	000b8a79 	.word	0x000b8a79

000b7650 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b7650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7654:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b7656:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b7658:	460d      	mov	r5, r1
   b765a:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b765c:	f000 fcd6 	bl	b800c <_Z16_fetch_usbserialv>
   b7660:	4287      	cmp	r7, r0
   b7662:	d007      	beq.n	b7674 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b7664:	6a20      	ldr	r0, [r4, #32]
   b7666:	6803      	ldr	r3, [r0, #0]
   b7668:	4632      	mov	r2, r6
   b766a:	4629      	mov	r1, r5
   b766c:	68db      	ldr	r3, [r3, #12]
}
   b766e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b7672:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b7674:	4803      	ldr	r0, [pc, #12]	; (b7684 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b7676:	f000 f8f8 	bl	b786a <_ZN5spark12NetworkClass9listeningEv>
   b767a:	2800      	cmp	r0, #0
   b767c:	d0f2      	beq.n	b7664 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b767e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7682:	bf00      	nop
   b7684:	2003e6b8 	.word	0x2003e6b8

000b7688 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b7688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b768c:	b085      	sub	sp, #20
    return stream_;
   b768e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b7692:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b7694:	4605      	mov	r5, r0
   b7696:	460f      	mov	r7, r1
   b7698:	4690      	mov	r8, r2
   b769a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b769c:	f000 fcb6 	bl	b800c <_Z16_fetch_usbserialv>
   b76a0:	4581      	cmp	r9, r0
   b76a2:	d105      	bne.n	b76b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b76a4:	4849      	ldr	r0, [pc, #292]	; (b77cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b76a6:	f000 f8e0 	bl	b786a <_ZN5spark12NetworkClass9listeningEv>
   b76aa:	2800      	cmp	r0, #0
   b76ac:	f040 808a 	bne.w	b77c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b76b0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b76b2:	4a47      	ldr	r2, [pc, #284]	; (b77d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b76b4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b76b6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b76ba:	a801      	add	r0, sp, #4
        strm_(stream) {
   b76bc:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b76be:	f88d 9008 	strb.w	r9, [sp, #8]
   b76c2:	f7ff f832 	bl	b672a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b76c6:	4649      	mov	r1, r9
   b76c8:	4640      	mov	r0, r8
   b76ca:	f7fd ffc5 	bl	b5658 <log_level_name>
    json.name("l", 1).value(s);
   b76ce:	4941      	ldr	r1, [pc, #260]	; (b77d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b76d0:	4680      	mov	r8, r0
   b76d2:	2201      	movs	r2, #1
   b76d4:	a801      	add	r0, sp, #4
   b76d6:	f7ff f8b7 	bl	b6848 <_ZN5spark10JSONWriter4nameEPKcj>
   b76da:	4641      	mov	r1, r8
   b76dc:	f7ff f935 	bl	b694a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b76e0:	b13f      	cbz	r7, b76f2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b76e2:	493d      	ldr	r1, [pc, #244]	; (b77d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b76e4:	2201      	movs	r2, #1
   b76e6:	a801      	add	r0, sp, #4
   b76e8:	f7ff f8ae 	bl	b6848 <_ZN5spark10JSONWriter4nameEPKcj>
   b76ec:	4639      	mov	r1, r7
   b76ee:	f7ff f92c 	bl	b694a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b76f2:	b13e      	cbz	r6, b7704 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b76f4:	4939      	ldr	r1, [pc, #228]	; (b77dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b76f6:	2201      	movs	r2, #1
   b76f8:	a801      	add	r0, sp, #4
   b76fa:	f7ff f8a5 	bl	b6848 <_ZN5spark10JSONWriter4nameEPKcj>
   b76fe:	4631      	mov	r1, r6
   b7700:	f7ff f923 	bl	b694a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b7704:	7923      	ldrb	r3, [r4, #4]
   b7706:	07df      	lsls	r7, r3, #31
   b7708:	d50e      	bpl.n	b7728 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b770a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b770c:	212f      	movs	r1, #47	; 0x2f
   b770e:	4630      	mov	r0, r6
   b7710:	f000 ff29 	bl	b8566 <strrchr>
    if (s1) {
   b7714:	b100      	cbz	r0, b7718 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b7716:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b7718:	4931      	ldr	r1, [pc, #196]	; (b77e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b771a:	2201      	movs	r2, #1
   b771c:	a801      	add	r0, sp, #4
   b771e:	f7ff f893 	bl	b6848 <_ZN5spark10JSONWriter4nameEPKcj>
   b7722:	4631      	mov	r1, r6
   b7724:	f7ff f911 	bl	b694a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b7728:	7923      	ldrb	r3, [r4, #4]
   b772a:	079e      	lsls	r6, r3, #30
   b772c:	d507      	bpl.n	b773e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b772e:	492d      	ldr	r1, [pc, #180]	; (b77e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b7730:	2202      	movs	r2, #2
   b7732:	a801      	add	r0, sp, #4
   b7734:	f7ff f888 	bl	b6848 <_ZN5spark10JSONWriter4nameEPKcj>
   b7738:	68e1      	ldr	r1, [r4, #12]
   b773a:	f7ff f803 	bl	b6744 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b773e:	7923      	ldrb	r3, [r4, #4]
   b7740:	0758      	lsls	r0, r3, #29
   b7742:	d514      	bpl.n	b776e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b7744:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b7746:	4633      	mov	r3, r6
   b7748:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b774a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b774e:	b12a      	cbz	r2, b775c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b7750:	2a20      	cmp	r2, #32
   b7752:	d101      	bne.n	b7758 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b7754:	461e      	mov	r6, r3
   b7756:	e7f7      	b.n	b7748 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b7758:	2a28      	cmp	r2, #40	; 0x28
   b775a:	d1f5      	bne.n	b7748 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b775c:	4922      	ldr	r1, [pc, #136]	; (b77e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b775e:	2202      	movs	r2, #2
   b7760:	a801      	add	r0, sp, #4
   b7762:	f7ff f871 	bl	b6848 <_ZN5spark10JSONWriter4nameEPKcj>
   b7766:	1bba      	subs	r2, r7, r6
   b7768:	4631      	mov	r1, r6
   b776a:	f7ff f87d 	bl	b6868 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b776e:	7923      	ldrb	r3, [r4, #4]
   b7770:	0719      	lsls	r1, r3, #28
   b7772:	d507      	bpl.n	b7784 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b7774:	491d      	ldr	r1, [pc, #116]	; (b77ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b7776:	2201      	movs	r2, #1
   b7778:	a801      	add	r0, sp, #4
   b777a:	f7ff f865 	bl	b6848 <_ZN5spark10JSONWriter4nameEPKcj>
   b777e:	6961      	ldr	r1, [r4, #20]
   b7780:	f7fe fff2 	bl	b6768 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b7784:	7923      	ldrb	r3, [r4, #4]
   b7786:	06da      	lsls	r2, r3, #27
   b7788:	d508      	bpl.n	b779c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b778a:	2204      	movs	r2, #4
   b778c:	4918      	ldr	r1, [pc, #96]	; (b77f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b778e:	eb0d 0002 	add.w	r0, sp, r2
   b7792:	f7ff f859 	bl	b6848 <_ZN5spark10JSONWriter4nameEPKcj>
   b7796:	69a1      	ldr	r1, [r4, #24]
   b7798:	f7fe ffd4 	bl	b6744 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b779c:	7923      	ldrb	r3, [r4, #4]
   b779e:	069b      	lsls	r3, r3, #26
   b77a0:	d507      	bpl.n	b77b2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b77a2:	4914      	ldr	r1, [pc, #80]	; (b77f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b77a4:	2206      	movs	r2, #6
   b77a6:	a801      	add	r0, sp, #4
   b77a8:	f7ff f84e 	bl	b6848 <_ZN5spark10JSONWriter4nameEPKcj>
   b77ac:	69e1      	ldr	r1, [r4, #28]
   b77ae:	f7ff f8cc 	bl	b694a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b77b2:	a801      	add	r0, sp, #4
   b77b4:	f7fe ffa3 	bl	b66fe <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b77b8:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b77ba:	490f      	ldr	r1, [pc, #60]	; (b77f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b77bc:	6803      	ldr	r3, [r0, #0]
   b77be:	2202      	movs	r2, #2
   b77c0:	68db      	ldr	r3, [r3, #12]
   b77c2:	4798      	blx	r3
}
   b77c4:	b005      	add	sp, #20
   b77c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b77ca:	bf00      	nop
   b77cc:	2003e6b8 	.word	0x2003e6b8
   b77d0:	000b8a9c 	.word	0x000b8a9c
   b77d4:	000b8a2b 	.word	0x000b8a2b
   b77d8:	000b8a7c 	.word	0x000b8a7c
   b77dc:	000b8c5b 	.word	0x000b8c5b
   b77e0:	000b8814 	.word	0x000b8814
   b77e4:	000b8a7e 	.word	0x000b8a7e
   b77e8:	000b8a81 	.word	0x000b8a81
   b77ec:	000b8a84 	.word	0x000b8a84
   b77f0:	000b8a86 	.word	0x000b8a86
   b77f4:	000b8a8b 	.word	0x000b8a8b
   b77f8:	000b8a79 	.word	0x000b8a79

000b77fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b77fc:	2300      	movs	r3, #0
   b77fe:	6840      	ldr	r0, [r0, #4]
   b7800:	461a      	mov	r2, r3
   b7802:	f7fd bfbf 	b.w	b5784 <network_connect>

000b7806 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7806:	6840      	ldr	r0, [r0, #4]
   b7808:	2200      	movs	r2, #0
   b780a:	2102      	movs	r1, #2
   b780c:	f7fd bfca 	b.w	b57a4 <network_disconnect>

000b7810 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7810:	2200      	movs	r2, #0
   b7812:	6840      	ldr	r0, [r0, #4]
   b7814:	4611      	mov	r1, r2
   b7816:	f7fd bfbd 	b.w	b5794 <network_connecting>

000b781a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b781a:	2200      	movs	r2, #0
   b781c:	6840      	ldr	r0, [r0, #4]
   b781e:	4611      	mov	r1, r2
   b7820:	f7fd bfc8 	b.w	b57b4 <network_ready>

000b7824 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7824:	2300      	movs	r3, #0
   b7826:	6840      	ldr	r0, [r0, #4]
   b7828:	461a      	mov	r2, r3
   b782a:	4619      	mov	r1, r3
   b782c:	f7fd bfca 	b.w	b57c4 <network_on>

000b7830 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7830:	2300      	movs	r3, #0
   b7832:	6840      	ldr	r0, [r0, #4]
   b7834:	461a      	mov	r2, r3
   b7836:	4619      	mov	r1, r3
   b7838:	f7fd bfcc 	b.w	b57d4 <network_off>

000b783c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b783c:	6840      	ldr	r0, [r0, #4]
   b783e:	2100      	movs	r1, #0
   b7840:	f7fd bff0 	b.w	b5824 <network_is_on>

000b7844 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7844:	6840      	ldr	r0, [r0, #4]
   b7846:	2100      	movs	r1, #0
   b7848:	f7fd bff4 	b.w	b5834 <network_is_off>

000b784c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b784c:	6840      	ldr	r0, [r0, #4]
   b784e:	2200      	movs	r2, #0
   b7850:	f081 0101 	eor.w	r1, r1, #1
   b7854:	f7fd bfc6 	b.w	b57e4 <network_listen>

000b7858 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7858:	6840      	ldr	r0, [r0, #4]
   b785a:	2200      	movs	r2, #0
   b785c:	f7fd bfd2 	b.w	b5804 <network_set_listen_timeout>

000b7860 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7860:	2200      	movs	r2, #0
   b7862:	6840      	ldr	r0, [r0, #4]
   b7864:	4611      	mov	r1, r2
   b7866:	f7fd bfd5 	b.w	b5814 <network_get_listen_timeout>

000b786a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b786a:	2200      	movs	r2, #0
   b786c:	6840      	ldr	r0, [r0, #4]
   b786e:	4611      	mov	r1, r2
   b7870:	f7fd bfc0 	b.w	b57f4 <network_listening>

000b7874 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7878:	b095      	sub	sp, #84	; 0x54
   b787a:	4614      	mov	r4, r2
   b787c:	460d      	mov	r5, r1
   b787e:	4607      	mov	r7, r0
    IPAddress addr;
   b7880:	f7fe fdec 	bl	b645c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7884:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7886:	221c      	movs	r2, #28
   b7888:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b788a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b788c:	f000 fde4 	bl	b8458 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7890:	2340      	movs	r3, #64	; 0x40
   b7892:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7894:	4620      	mov	r0, r4
   b7896:	466b      	mov	r3, sp
   b7898:	aa0c      	add	r2, sp, #48	; 0x30
   b789a:	2100      	movs	r1, #0
   b789c:	f7fd fe24 	bl	b54e8 <netdb_getaddrinfo>
    if (!r) {
   b78a0:	4604      	mov	r4, r0
   b78a2:	2800      	cmp	r0, #0
   b78a4:	d14b      	bne.n	b793e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b78a6:	4602      	mov	r2, r0
   b78a8:	2101      	movs	r1, #1
   b78aa:	6868      	ldr	r0, [r5, #4]
   b78ac:	f7fd ff82 	bl	b57b4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b78b0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b78b2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b78b4:	4622      	mov	r2, r4
   b78b6:	6868      	ldr	r0, [r5, #4]
   b78b8:	f7fd ff7c 	bl	b57b4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b78bc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b78be:	4681      	mov	r9, r0
        bool ok = false;
   b78c0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b78c2:	2e00      	cmp	r6, #0
   b78c4:	d03b      	beq.n	b793e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b78c6:	2900      	cmp	r1, #0
   b78c8:	d139      	bne.n	b793e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b78ca:	6873      	ldr	r3, [r6, #4]
   b78cc:	2b02      	cmp	r3, #2
   b78ce:	d003      	beq.n	b78d8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b78d0:	2b0a      	cmp	r3, #10
   b78d2:	d011      	beq.n	b78f8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b78d4:	69f6      	ldr	r6, [r6, #28]
   b78d6:	e7f4      	b.n	b78c2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b78d8:	f1b8 0f00 	cmp.w	r8, #0
   b78dc:	d0fa      	beq.n	b78d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b78de:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b78e0:	a806      	add	r0, sp, #24
   b78e2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b78e4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b78e6:	f7fe fde7 	bl	b64b8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b78ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b78ec:	1d3c      	adds	r4, r7, #4
   b78ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b78f0:	682b      	ldr	r3, [r5, #0]
   b78f2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b78f4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b78f6:	e7ed      	b.n	b78d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b78f8:	f1b9 0f00 	cmp.w	r9, #0
   b78fc:	d0ea      	beq.n	b78d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b78fe:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7900:	2210      	movs	r2, #16
   b7902:	a801      	add	r0, sp, #4
   b7904:	f000 fda8 	bl	b8458 <memset>
                    a.v = 6;
   b7908:	2306      	movs	r3, #6
   b790a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b790e:	ad01      	add	r5, sp, #4
   b7910:	f104 0308 	add.w	r3, r4, #8
   b7914:	3418      	adds	r4, #24
   b7916:	6818      	ldr	r0, [r3, #0]
   b7918:	6859      	ldr	r1, [r3, #4]
   b791a:	462a      	mov	r2, r5
   b791c:	c203      	stmia	r2!, {r0, r1}
   b791e:	3308      	adds	r3, #8
   b7920:	42a3      	cmp	r3, r4
   b7922:	4615      	mov	r5, r2
   b7924:	d1f7      	bne.n	b7916 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7926:	a901      	add	r1, sp, #4
   b7928:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b792a:	ad07      	add	r5, sp, #28
   b792c:	f7fe fda4 	bl	b6478 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7932:	1d3c      	adds	r4, r7, #4
   b7934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7936:	682b      	ldr	r3, [r5, #0]
   b7938:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b793a:	4649      	mov	r1, r9
   b793c:	e7ca      	b.n	b78d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b793e:	9800      	ldr	r0, [sp, #0]
   b7940:	f7fd fdca 	bl	b54d8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7944:	4638      	mov	r0, r7
   b7946:	b015      	add	sp, #84	; 0x54
   b7948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b794c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b794c:	4b02      	ldr	r3, [pc, #8]	; (b7958 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b794e:	4a03      	ldr	r2, [pc, #12]	; (b795c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7950:	601a      	str	r2, [r3, #0]
   b7952:	2200      	movs	r2, #0
   b7954:	605a      	str	r2, [r3, #4]

} // spark
   b7956:	4770      	bx	lr
   b7958:	2003e6b8 	.word	0x2003e6b8
   b795c:	000b8b14 	.word	0x000b8b14

000b7960 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7962:	4606      	mov	r6, r0
   b7964:	460d      	mov	r5, r1
  size_t n = 0;
   b7966:	188f      	adds	r7, r1, r2
   b7968:	2400      	movs	r4, #0
  while (size--) {
   b796a:	42bd      	cmp	r5, r7
   b796c:	d00c      	beq.n	b7988 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b796e:	6833      	ldr	r3, [r6, #0]
   b7970:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7974:	689b      	ldr	r3, [r3, #8]
   b7976:	4630      	mov	r0, r6
   b7978:	4798      	blx	r3
     if (chunk>=0)
   b797a:	1e03      	subs	r3, r0, #0
   b797c:	db01      	blt.n	b7982 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b797e:	441c      	add	r4, r3
  while (size--) {
   b7980:	e7f3      	b.n	b796a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7982:	2c00      	cmp	r4, #0
   b7984:	bf08      	it	eq
   b7986:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7988:	4620      	mov	r0, r4
   b798a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b798c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b798c:	b513      	push	{r0, r1, r4, lr}
   b798e:	4604      	mov	r4, r0
    }
   b7990:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7992:	b159      	cbz	r1, b79ac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7994:	9101      	str	r1, [sp, #4]
   b7996:	f7fc ffff 	bl	b4998 <strlen>
   b799a:	6823      	ldr	r3, [r4, #0]
   b799c:	9901      	ldr	r1, [sp, #4]
   b799e:	68db      	ldr	r3, [r3, #12]
   b79a0:	4602      	mov	r2, r0
   b79a2:	4620      	mov	r0, r4
    }
   b79a4:	b002      	add	sp, #8
   b79a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b79aa:	4718      	bx	r3
    }
   b79ac:	b002      	add	sp, #8
   b79ae:	bd10      	pop	{r4, pc}

000b79b0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b79b0:	6803      	ldr	r3, [r0, #0]
   b79b2:	689b      	ldr	r3, [r3, #8]
   b79b4:	4718      	bx	r3

000b79b6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b79b6:	b530      	push	{r4, r5, lr}
   b79b8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b79ba:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b79bc:	2a01      	cmp	r2, #1
  *str = '\0';
   b79be:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b79c2:	bf98      	it	ls
   b79c4:	220a      	movls	r2, #10
   b79c6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b79c8:	460d      	mov	r5, r1
   b79ca:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b79ce:	fb01 5312 	mls	r3, r1, r2, r5
   b79d2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b79d6:	2b09      	cmp	r3, #9
   b79d8:	bf94      	ite	ls
   b79da:	3330      	addls	r3, #48	; 0x30
   b79dc:	3337      	addhi	r3, #55	; 0x37
   b79de:	b2db      	uxtb	r3, r3
  } while(n);
   b79e0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b79e2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b79e6:	d9ef      	bls.n	b79c8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b79e8:	4621      	mov	r1, r4
   b79ea:	f7ff ffcf 	bl	b798c <_ZN5Print5writeEPKc>
}
   b79ee:	b00b      	add	sp, #44	; 0x2c
   b79f0:	bd30      	pop	{r4, r5, pc}
	...

000b79f4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b79f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b79f8:	ec55 4b10 	vmov	r4, r5, d0
   b79fc:	4606      	mov	r6, r0
   b79fe:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b7a00:	ee10 2a10 	vmov	r2, s0
   b7a04:	ee10 0a10 	vmov	r0, s0
   b7a08:	462b      	mov	r3, r5
   b7a0a:	4629      	mov	r1, r5
   b7a0c:	f7fc ff5c 	bl	b48c8 <__aeabi_dcmpun>
   b7a10:	b140      	cbz	r0, b7a24 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b7a12:	4953      	ldr	r1, [pc, #332]	; (b7b60 <_ZN5Print10printFloatEdh+0x16c>)
   b7a14:	4630      	mov	r0, r6
   b7a16:	f7ff ffb9 	bl	b798c <_ZN5Print5writeEPKc>
   b7a1a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b7a1c:	4650      	mov	r0, sl
   b7a1e:	b003      	add	sp, #12
   b7a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b7a24:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b7a28:	4b4e      	ldr	r3, [pc, #312]	; (b7b64 <_ZN5Print10printFloatEdh+0x170>)
   b7a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7a2e:	4620      	mov	r0, r4
   b7a30:	4649      	mov	r1, r9
   b7a32:	f7fc ff49 	bl	b48c8 <__aeabi_dcmpun>
   b7a36:	b948      	cbnz	r0, b7a4c <_ZN5Print10printFloatEdh+0x58>
   b7a38:	4b4a      	ldr	r3, [pc, #296]	; (b7b64 <_ZN5Print10printFloatEdh+0x170>)
   b7a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7a3e:	4620      	mov	r0, r4
   b7a40:	4649      	mov	r1, r9
   b7a42:	f7fc ff23 	bl	b488c <__aeabi_dcmple>
   b7a46:	b908      	cbnz	r0, b7a4c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b7a48:	4947      	ldr	r1, [pc, #284]	; (b7b68 <_ZN5Print10printFloatEdh+0x174>)
   b7a4a:	e7e3      	b.n	b7a14 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b7a4c:	4b47      	ldr	r3, [pc, #284]	; (b7b6c <_ZN5Print10printFloatEdh+0x178>)
   b7a4e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b7a52:	4620      	mov	r0, r4
   b7a54:	4629      	mov	r1, r5
   b7a56:	f7fc ff2d 	bl	b48b4 <__aeabi_dcmpgt>
   b7a5a:	b108      	cbz	r0, b7a60 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b7a5c:	4944      	ldr	r1, [pc, #272]	; (b7b70 <_ZN5Print10printFloatEdh+0x17c>)
   b7a5e:	e7d9      	b.n	b7a14 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b7a60:	4b44      	ldr	r3, [pc, #272]	; (b7b74 <_ZN5Print10printFloatEdh+0x180>)
   b7a62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b7a66:	4620      	mov	r0, r4
   b7a68:	4629      	mov	r1, r5
   b7a6a:	f7fc ff05 	bl	b4878 <__aeabi_dcmplt>
   b7a6e:	2800      	cmp	r0, #0
   b7a70:	d1f4      	bne.n	b7a5c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b7a72:	2200      	movs	r2, #0
   b7a74:	2300      	movs	r3, #0
   b7a76:	4620      	mov	r0, r4
   b7a78:	4629      	mov	r1, r5
   b7a7a:	f7fc fefd 	bl	b4878 <__aeabi_dcmplt>
   b7a7e:	b1d0      	cbz	r0, b7ab6 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b7a80:	212d      	movs	r1, #45	; 0x2d
   b7a82:	4630      	mov	r0, r6
   b7a84:	f7ff ff94 	bl	b79b0 <_ZN5Print5printEc>
     number = -number;
   b7a88:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b7a8c:	4682      	mov	sl, r0
     number = -number;
   b7a8e:	461d      	mov	r5, r3
  double rounding = 0.5;
   b7a90:	4939      	ldr	r1, [pc, #228]	; (b7b78 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b7a92:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b7b80 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b7a96:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b7a9a:	2000      	movs	r0, #0
    rounding /= 10.0;
   b7a9c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b7aa0:	fa5f f38b 	uxtb.w	r3, fp
   b7aa4:	429f      	cmp	r7, r3
   b7aa6:	d908      	bls.n	b7aba <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b7aa8:	4642      	mov	r2, r8
   b7aaa:	464b      	mov	r3, r9
   b7aac:	f7fc fd9c 	bl	b45e8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b7ab0:	f10b 0b01 	add.w	fp, fp, #1
   b7ab4:	e7f4      	b.n	b7aa0 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b7ab6:	4682      	mov	sl, r0
   b7ab8:	e7ea      	b.n	b7a90 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b7aba:	4622      	mov	r2, r4
   b7abc:	462b      	mov	r3, r5
   b7abe:	f7fc fab3 	bl	b4028 <__adddf3>
   b7ac2:	460d      	mov	r5, r1
   b7ac4:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b7ac6:	f7fc ff3d 	bl	b4944 <__aeabi_d2uiz>
   b7aca:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b7acc:	f7fc fbe8 	bl	b42a0 <__aeabi_ui2d>
   b7ad0:	4602      	mov	r2, r0
   b7ad2:	460b      	mov	r3, r1
   b7ad4:	4620      	mov	r0, r4
   b7ad6:	4629      	mov	r1, r5
   b7ad8:	f7fc faa4 	bl	b4024 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b7adc:	220a      	movs	r2, #10
   b7ade:	4604      	mov	r4, r0
   b7ae0:	460d      	mov	r5, r1
   b7ae2:	4630      	mov	r0, r6
   b7ae4:	4641      	mov	r1, r8
   b7ae6:	f7ff ff66 	bl	b79b6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b7aea:	4482      	add	sl, r0
  if (digits > 0) {
   b7aec:	2f00      	cmp	r7, #0
   b7aee:	d095      	beq.n	b7a1c <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b7af0:	4922      	ldr	r1, [pc, #136]	; (b7b7c <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b7af2:	f8df 908c 	ldr.w	r9, [pc, #140]	; b7b80 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b7af6:	4630      	mov	r0, r6
   b7af8:	f7ff ff48 	bl	b798c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b7afc:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b7b00:	4482      	add	sl, r0
  while (digits-- > 0)
   b7b02:	2f00      	cmp	r7, #0
   b7b04:	d08a      	beq.n	b7a1c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b7b06:	4642      	mov	r2, r8
   b7b08:	464b      	mov	r3, r9
   b7b0a:	4620      	mov	r0, r4
   b7b0c:	4629      	mov	r1, r5
   b7b0e:	f7fc fc41 	bl	b4394 <__aeabi_dmul>
   b7b12:	4604      	mov	r4, r0
   b7b14:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b7b16:	f7fc feed 	bl	b48f4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b7b1a:	f1b0 0b00 	subs.w	fp, r0, #0
   b7b1e:	da1c      	bge.n	b7b5a <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b7b20:	212d      	movs	r1, #45	; 0x2d
   b7b22:	4630      	mov	r0, r6
   b7b24:	f7ff ff44 	bl	b79b0 <_ZN5Print5printEc>
            val = -n;
   b7b28:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b7b2c:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b7b2e:	220a      	movs	r2, #10
   b7b30:	4630      	mov	r0, r6
   b7b32:	9301      	str	r3, [sp, #4]
   b7b34:	f7ff ff3f 	bl	b79b6 <_ZN5Print11printNumberEmh>
   b7b38:	9b01      	ldr	r3, [sp, #4]
   b7b3a:	4418      	add	r0, r3
    n += print(toPrint);
   b7b3c:	4482      	add	sl, r0
    remainder -= toPrint;
   b7b3e:	4658      	mov	r0, fp
   b7b40:	f7fc fbbe 	bl	b42c0 <__aeabi_i2d>
   b7b44:	4602      	mov	r2, r0
   b7b46:	460b      	mov	r3, r1
   b7b48:	4620      	mov	r0, r4
   b7b4a:	4629      	mov	r1, r5
   b7b4c:	f7fc fa6a 	bl	b4024 <__aeabi_dsub>
   b7b50:	3f01      	subs	r7, #1
   b7b52:	4604      	mov	r4, r0
   b7b54:	460d      	mov	r5, r1
   b7b56:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b7b58:	e7d3      	b.n	b7b02 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b7b5a:	4659      	mov	r1, fp
        size_t t = 0;
   b7b5c:	2300      	movs	r3, #0
   b7b5e:	e7e6      	b.n	b7b2e <_ZN5Print10printFloatEdh+0x13a>
   b7b60:	000b8b48 	.word	0x000b8b48
   b7b64:	7fefffff 	.word	0x7fefffff
   b7b68:	000b8b4c 	.word	0x000b8b4c
   b7b6c:	41efffff 	.word	0x41efffff
   b7b70:	000b8b50 	.word	0x000b8b50
   b7b74:	c1efffff 	.word	0xc1efffff
   b7b78:	3fe00000 	.word	0x3fe00000
   b7b7c:	000b8b54 	.word	0x000b8b54
   b7b80:	40240000 	.word	0x40240000

000b7b84 <_ZN5Print5printEfi>:
{
   b7b84:	b538      	push	{r3, r4, r5, lr}
   b7b86:	4604      	mov	r4, r0
   b7b88:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b7b8c:	b2cd      	uxtb	r5, r1
   b7b8e:	f7fc fba9 	bl	b42e4 <__aeabi_f2d>
   b7b92:	ec41 0b10 	vmov	d0, r0, r1
   b7b96:	4629      	mov	r1, r5
   b7b98:	4620      	mov	r0, r4
}
   b7b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b7b9e:	f7ff bf29 	b.w	b79f4 <_ZN5Print10printFloatEdh>
	...

000b7ba4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7ba4:	4b01      	ldr	r3, [pc, #4]	; (b7bac <_GLOBAL__sub_I_RGB+0x8>)
   b7ba6:	2200      	movs	r2, #0
   b7ba8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7baa:	4770      	bx	lr
   b7bac:	2003e6c0 	.word	0x2003e6c0

000b7bb0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7bb0:	b510      	push	{r4, lr}
   b7bb2:	4604      	mov	r4, r0
   b7bb4:	4608      	mov	r0, r1
{
    _spi = spi;
   b7bb6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7bb8:	f7fd fc9e 	bl	b54f8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7bbc:	2300      	movs	r3, #0
   b7bbe:	6063      	str	r3, [r4, #4]
}
   b7bc0:	4620      	mov	r0, r4
   b7bc2:	bd10      	pop	{r4, pc}

000b7bc4 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   b7bc4:	4770      	bx	lr

000b7bc6 <_ZN21StringPrintableHelperD0Ev>:
   b7bc6:	b510      	push	{r4, lr}
   b7bc8:	210c      	movs	r1, #12
   b7bca:	4604      	mov	r4, r0
   b7bcc:	f7fc ff2b 	bl	b4a26 <_ZdlPvj>
   b7bd0:	4620      	mov	r0, r4
   b7bd2:	bd10      	pop	{r4, pc}

000b7bd4 <_ZN6StringD1Ev>:
String::~String()
   b7bd4:	b510      	push	{r4, lr}
   b7bd6:	4604      	mov	r4, r0
	free(buffer);
   b7bd8:	6800      	ldr	r0, [r0, #0]
   b7bda:	f7fd fe3b 	bl	b5854 <free>
}
   b7bde:	4620      	mov	r0, r4
   b7be0:	bd10      	pop	{r4, pc}

000b7be2 <_ZN6String10invalidateEv>:
{
   b7be2:	b510      	push	{r4, lr}
   b7be4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7be6:	6800      	ldr	r0, [r0, #0]
   b7be8:	b108      	cbz	r0, b7bee <_ZN6String10invalidateEv+0xc>
   b7bea:	f7fd fe33 	bl	b5854 <free>
	buffer = NULL;
   b7bee:	2300      	movs	r3, #0
	capacity = len = 0;
   b7bf0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7bf4:	6023      	str	r3, [r4, #0]
}
   b7bf6:	bd10      	pop	{r4, pc}

000b7bf8 <_ZN6String12changeBufferEj>:
{
   b7bf8:	b538      	push	{r3, r4, r5, lr}
   b7bfa:	4604      	mov	r4, r0
   b7bfc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7bfe:	6800      	ldr	r0, [r0, #0]
   b7c00:	3101      	adds	r1, #1
   b7c02:	f7fd fe2f 	bl	b5864 <realloc>
	if (newbuffer) {
   b7c06:	b110      	cbz	r0, b7c0e <_ZN6String12changeBufferEj+0x16>
		capacity = maxStrLen;
   b7c08:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7c0c:	2001      	movs	r0, #1
}
   b7c0e:	bd38      	pop	{r3, r4, r5, pc}

000b7c10 <_ZN6String7reserveEj>:
{
   b7c10:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7c12:	6803      	ldr	r3, [r0, #0]
{
   b7c14:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7c16:	b123      	cbz	r3, b7c22 <_ZN6String7reserveEj+0x12>
   b7c18:	6843      	ldr	r3, [r0, #4]
   b7c1a:	428b      	cmp	r3, r1
   b7c1c:	d301      	bcc.n	b7c22 <_ZN6String7reserveEj+0x12>
   b7c1e:	2001      	movs	r0, #1
}
   b7c20:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7c22:	4620      	mov	r0, r4
   b7c24:	f7ff ffe8 	bl	b7bf8 <_ZN6String12changeBufferEj>
   b7c28:	2800      	cmp	r0, #0
   b7c2a:	d0f9      	beq.n	b7c20 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7c2c:	68a3      	ldr	r3, [r4, #8]
   b7c2e:	2b00      	cmp	r3, #0
   b7c30:	d1f5      	bne.n	b7c1e <_ZN6String7reserveEj+0xe>
   b7c32:	6822      	ldr	r2, [r4, #0]
   b7c34:	7013      	strb	r3, [r2, #0]
   b7c36:	e7f2      	b.n	b7c1e <_ZN6String7reserveEj+0xe>

000b7c38 <_ZN6String4copyEPKcj>:
{
   b7c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7c3a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7c3c:	4611      	mov	r1, r2
   b7c3e:	9201      	str	r2, [sp, #4]
{
   b7c40:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7c42:	f7ff ffe5 	bl	b7c10 <_ZN6String7reserveEj>
   b7c46:	9a01      	ldr	r2, [sp, #4]
   b7c48:	b928      	cbnz	r0, b7c56 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7c4a:	4620      	mov	r0, r4
   b7c4c:	f7ff ffc9 	bl	b7be2 <_ZN6String10invalidateEv>
}
   b7c50:	4620      	mov	r0, r4
   b7c52:	b003      	add	sp, #12
   b7c54:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7c56:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7c58:	4629      	mov	r1, r5
   b7c5a:	6820      	ldr	r0, [r4, #0]
   b7c5c:	f000 fbd4 	bl	b8408 <memcpy>
	buffer[len] = 0;
   b7c60:	6822      	ldr	r2, [r4, #0]
   b7c62:	68a3      	ldr	r3, [r4, #8]
   b7c64:	2100      	movs	r1, #0
   b7c66:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7c68:	e7f2      	b.n	b7c50 <_ZN6String4copyEPKcj+0x18>

000b7c6a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7c6a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7c6c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7c6e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7c72:	4604      	mov	r4, r0
	len = 0;
   b7c74:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7c76:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7c78:	b141      	cbz	r1, b7c8c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7c7a:	4608      	mov	r0, r1
   b7c7c:	9101      	str	r1, [sp, #4]
   b7c7e:	f7fc fe8b 	bl	b4998 <strlen>
   b7c82:	9901      	ldr	r1, [sp, #4]
   b7c84:	4602      	mov	r2, r0
   b7c86:	4620      	mov	r0, r4
   b7c88:	f7ff ffd6 	bl	b7c38 <_ZN6String4copyEPKcj>
}
   b7c8c:	4620      	mov	r0, r4
   b7c8e:	b002      	add	sp, #8
   b7c90:	bd10      	pop	{r4, pc}

000b7c92 <_ZN6String4moveERS_>:
{
   b7c92:	b538      	push	{r3, r4, r5, lr}
   b7c94:	4605      	mov	r5, r0
	if (buffer) {
   b7c96:	6800      	ldr	r0, [r0, #0]
{
   b7c98:	460c      	mov	r4, r1
	if (buffer) {
   b7c9a:	b168      	cbz	r0, b7cb8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b7c9c:	686a      	ldr	r2, [r5, #4]
   b7c9e:	688b      	ldr	r3, [r1, #8]
   b7ca0:	429a      	cmp	r2, r3
   b7ca2:	d307      	bcc.n	b7cb4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b7ca4:	6809      	ldr	r1, [r1, #0]
   b7ca6:	f000 fc24 	bl	b84f2 <strcpy>
			len = rhs.len;
   b7caa:	68a3      	ldr	r3, [r4, #8]
   b7cac:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b7cae:	2300      	movs	r3, #0
	rhs.len = 0;
   b7cb0:	60a3      	str	r3, [r4, #8]
}
   b7cb2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b7cb4:	f7fd fdce 	bl	b5854 <free>
	buffer = rhs.buffer;
   b7cb8:	6823      	ldr	r3, [r4, #0]
   b7cba:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b7cbc:	6863      	ldr	r3, [r4, #4]
   b7cbe:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b7cc0:	68a3      	ldr	r3, [r4, #8]
   b7cc2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b7cc4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b7cc6:	e9c4 3300 	strd	r3, r3, [r4]
   b7cca:	e7f1      	b.n	b7cb0 <_ZN6String4moveERS_+0x1e>

000b7ccc <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b7ccc:	b510      	push	{r4, lr}
	buffer = NULL;
   b7cce:	2300      	movs	r3, #0
	capacity = 0;
   b7cd0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b7cd4:	4604      	mov	r4, r0
	len = 0;
   b7cd6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7cd8:	7303      	strb	r3, [r0, #12]
	move(rval);
   b7cda:	f7ff ffda 	bl	b7c92 <_ZN6String4moveERS_>
}
   b7cde:	4620      	mov	r0, r4
   b7ce0:	bd10      	pop	{r4, pc}

000b7ce2 <_ZN6StringaSERKS_>:
	if (this == &rhs) return *this;
   b7ce2:	4288      	cmp	r0, r1
{
   b7ce4:	b510      	push	{r4, lr}
   b7ce6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7ce8:	d005      	beq.n	b7cf6 <_ZN6StringaSERKS_+0x14>
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7cea:	680b      	ldr	r3, [r1, #0]
   b7cec:	b12b      	cbz	r3, b7cfa <_ZN6StringaSERKS_+0x18>
   b7cee:	688a      	ldr	r2, [r1, #8]
   b7cf0:	4619      	mov	r1, r3
   b7cf2:	f7ff ffa1 	bl	b7c38 <_ZN6String4copyEPKcj>
}
   b7cf6:	4620      	mov	r0, r4
   b7cf8:	bd10      	pop	{r4, pc}
	else invalidate();
   b7cfa:	f7ff ff72 	bl	b7be2 <_ZN6String10invalidateEv>
   b7cfe:	e7fa      	b.n	b7cf6 <_ZN6StringaSERKS_+0x14>

000b7d00 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7d00:	b510      	push	{r4, lr}
	buffer = NULL;
   b7d02:	2300      	movs	r3, #0
String::String(const String &value)
   b7d04:	4604      	mov	r4, r0
	capacity = 0;
   b7d06:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7d0a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7d0c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b7d0e:	f7ff ffe8 	bl	b7ce2 <_ZN6StringaSERKS_>
}
   b7d12:	4620      	mov	r0, r4
   b7d14:	bd10      	pop	{r4, pc}

000b7d16 <_ZN6StringaSEOS_>:
	if (this != &rval) move(rval);
   b7d16:	4288      	cmp	r0, r1
{
   b7d18:	b510      	push	{r4, lr}
   b7d1a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b7d1c:	d001      	beq.n	b7d22 <_ZN6StringaSEOS_+0xc>
   b7d1e:	f7ff ffb8 	bl	b7c92 <_ZN6String4moveERS_>
}
   b7d22:	4620      	mov	r0, r4
   b7d24:	bd10      	pop	{r4, pc}

000b7d26 <_ZN6StringaSEPKc>:
{
   b7d26:	b513      	push	{r0, r1, r4, lr}
   b7d28:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7d2a:	b159      	cbz	r1, b7d44 <_ZN6StringaSEPKc+0x1e>
   b7d2c:	4608      	mov	r0, r1
   b7d2e:	9101      	str	r1, [sp, #4]
   b7d30:	f7fc fe32 	bl	b4998 <strlen>
   b7d34:	9901      	ldr	r1, [sp, #4]
   b7d36:	4602      	mov	r2, r0
   b7d38:	4620      	mov	r0, r4
   b7d3a:	f7ff ff7d 	bl	b7c38 <_ZN6String4copyEPKcj>
}
   b7d3e:	4620      	mov	r0, r4
   b7d40:	b002      	add	sp, #8
   b7d42:	bd10      	pop	{r4, pc}
	else invalidate();
   b7d44:	f7ff ff4d 	bl	b7be2 <_ZN6String10invalidateEv>
   b7d48:	e7f9      	b.n	b7d3e <_ZN6StringaSEPKc+0x18>

000b7d4a <_ZN6String6concatEPKcj>:
{
   b7d4a:	b570      	push	{r4, r5, r6, lr}
   b7d4c:	4605      	mov	r5, r0
	if (!cstr) return 0;
   b7d4e:	460e      	mov	r6, r1
   b7d50:	b909      	cbnz	r1, b7d56 <_ZN6String6concatEPKcj+0xc>
   b7d52:	2000      	movs	r0, #0
}
   b7d54:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b7d56:	b16a      	cbz	r2, b7d74 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b7d58:	6884      	ldr	r4, [r0, #8]
   b7d5a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b7d5c:	4621      	mov	r1, r4
   b7d5e:	f7ff ff57 	bl	b7c10 <_ZN6String7reserveEj>
   b7d62:	2800      	cmp	r0, #0
   b7d64:	d0f5      	beq.n	b7d52 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7d66:	6828      	ldr	r0, [r5, #0]
   b7d68:	68ab      	ldr	r3, [r5, #8]
   b7d6a:	4631      	mov	r1, r6
   b7d6c:	4418      	add	r0, r3
   b7d6e:	f000 fbc0 	bl	b84f2 <strcpy>
	len = newlen;
   b7d72:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b7d74:	2001      	movs	r0, #1
   b7d76:	e7ed      	b.n	b7d54 <_ZN6String6concatEPKcj+0xa>

000b7d78 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   b7d78:	b538      	push	{r3, r4, r5, lr}
   b7d7a:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   b7d7c:	6880      	ldr	r0, [r0, #8]
	inline unsigned int length(void) const {return len;}
   b7d7e:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   b7d80:	f7ff ffe3 	bl	b7d4a <_ZN6String6concatEPKcj>
   b7d84:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   b7d86:	6898      	ldr	r0, [r3, #8]
    }
   b7d88:	1b40      	subs	r0, r0, r5
   b7d8a:	bd38      	pop	{r3, r4, r5, pc}

000b7d8c <_ZN6String6concatEc>:
{
   b7d8c:	b507      	push	{r0, r1, r2, lr}
	buf[1] = 0;
   b7d8e:	2300      	movs	r3, #0
	buf[0] = c;
   b7d90:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b7d94:	2201      	movs	r2, #1
   b7d96:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b7d98:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b7d9c:	f7ff ffd5 	bl	b7d4a <_ZN6String6concatEPKcj>
}
   b7da0:	b003      	add	sp, #12
   b7da2:	f85d fb04 	ldr.w	pc, [sp], #4

000b7da6 <_ZN21StringPrintableHelper5writeEh>:

    virtual size_t write(uint8_t c) override
   b7da6:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   b7da8:	6880      	ldr	r0, [r0, #8]
   b7daa:	f7ff ffef 	bl	b7d8c <_ZN6String6concatEc>
    }
   b7dae:	bd08      	pop	{r3, pc}

000b7db0 <_ZNK6String6equalsEPKc>:
{
   b7db0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b7db2:	6882      	ldr	r2, [r0, #8]
   b7db4:	b93a      	cbnz	r2, b7dc6 <_ZNK6String6equalsEPKc+0x16>
   b7db6:	b121      	cbz	r1, b7dc2 <_ZNK6String6equalsEPKc+0x12>
   b7db8:	7808      	ldrb	r0, [r1, #0]
	return strcmp(buffer, cstr) == 0;
   b7dba:	fab0 f080 	clz	r0, r0
   b7dbe:	0940      	lsrs	r0, r0, #5
   b7dc0:	e000      	b.n	b7dc4 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b7dc2:	2001      	movs	r0, #1
}
   b7dc4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b7dc6:	6800      	ldr	r0, [r0, #0]
   b7dc8:	b909      	cbnz	r1, b7dce <_ZNK6String6equalsEPKc+0x1e>
   b7dca:	7800      	ldrb	r0, [r0, #0]
   b7dcc:	e7f5      	b.n	b7dba <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b7dce:	f7fc fdd9 	bl	b4984 <strcmp>
   b7dd2:	e7f2      	b.n	b7dba <_ZNK6String6equalsEPKc+0xa>

000b7dd4 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   b7dd4:	b530      	push	{r4, r5, lr}
   b7dd6:	b085      	sub	sp, #20
	buffer = NULL;
   b7dd8:	2300      	movs	r3, #0
String::String(const Printable& printable)
   b7dda:	460d      	mov	r5, r1
    Print() : write_error(0) {}
   b7ddc:	9302      	str	r3, [sp, #8]
	capacity = 0;
   b7dde:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7de2:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7de4:	7303      	strb	r3, [r0, #12]
        s.reserve(20);
   b7de6:	2114      	movs	r1, #20
    StringPrintableHelper(String& s_) : s(s_) {
   b7de8:	4b06      	ldr	r3, [pc, #24]	; (b7e04 <_ZN6StringC1ERK9Printable+0x30>)
   b7dea:	9301      	str	r3, [sp, #4]
String::String(const Printable& printable)
   b7dec:	4604      	mov	r4, r0
    StringPrintableHelper(String& s_) : s(s_) {
   b7dee:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   b7df0:	f7ff ff0e 	bl	b7c10 <_ZN6String7reserveEj>
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   b7df4:	682b      	ldr	r3, [r5, #0]
   b7df6:	a901      	add	r1, sp, #4
   b7df8:	681b      	ldr	r3, [r3, #0]
   b7dfa:	4628      	mov	r0, r5
   b7dfc:	4798      	blx	r3
}
   b7dfe:	4620      	mov	r0, r4
   b7e00:	b005      	add	sp, #20
   b7e02:	bd30      	pop	{r4, r5, pc}
   b7e04:	000b8b60 	.word	0x000b8b60

000b7e08 <_ZN6String6formatEPKcz>:

String String::format(const char* fmt, ...)
{
   b7e08:	b40e      	push	{r1, r2, r3}
   b7e0a:	b570      	push	{r4, r5, r6, lr}
   b7e0c:	b087      	sub	sp, #28
   b7e0e:	ad0b      	add	r5, sp, #44	; 0x2c
   b7e10:	4604      	mov	r4, r0
   b7e12:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7e16:	9201      	str	r2, [sp, #4]
   b7e18:	462b      	mov	r3, r5
   b7e1a:	2105      	movs	r1, #5
   b7e1c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b7e1e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7e20:	f7fd fd28 	bl	b5874 <vsnprintf>
    va_end(marker);

    String result;
   b7e24:	490b      	ldr	r1, [pc, #44]	; (b7e54 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7e26:	4606      	mov	r6, r0
    String result;
   b7e28:	4620      	mov	r0, r4
   b7e2a:	f7ff ff1e 	bl	b7c6a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b7e2e:	4631      	mov	r1, r6
   b7e30:	4620      	mov	r0, r4
   b7e32:	f7ff feed 	bl	b7c10 <_ZN6String7reserveEj>
    if (result.buffer) {
   b7e36:	6820      	ldr	r0, [r4, #0]
   b7e38:	b130      	cbz	r0, b7e48 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b7e3a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b7e3c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b7e3e:	462b      	mov	r3, r5
   b7e40:	1c71      	adds	r1, r6, #1
   b7e42:	f7fd fd17 	bl	b5874 <vsnprintf>
        va_end(marker);
        result.len = n;
   b7e46:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b7e48:	4620      	mov	r0, r4
   b7e4a:	b007      	add	sp, #28
   b7e4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7e50:	b003      	add	sp, #12
   b7e52:	4770      	bx	lr
   b7e54:	000b8a7b 	.word	0x000b8a7b

000b7e58 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7e58:	4b05      	ldr	r3, [pc, #20]	; (b7e70 <_GLOBAL__sub_I_System+0x18>)
   b7e5a:	2202      	movs	r2, #2
   b7e5c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7e5e:	4b05      	ldr	r3, [pc, #20]	; (b7e74 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7e60:	4a05      	ldr	r2, [pc, #20]	; (b7e78 <_GLOBAL__sub_I_System+0x20>)
   b7e62:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7e64:	2000      	movs	r0, #0
   b7e66:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7e6a:	f7fd bc05 	b.w	b5678 <set_system_mode>
   b7e6e:	bf00      	nop
   b7e70:	2003e6dc 	.word	0x2003e6dc
   b7e74:	2003e6d0 	.word	0x2003e6d0
   b7e78:	ffff0000 	.word	0xffff0000

000b7e7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7e7c:	4b02      	ldr	r3, [pc, #8]	; (b7e88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7e7e:	681a      	ldr	r2, [r3, #0]
   b7e80:	4b02      	ldr	r3, [pc, #8]	; (b7e8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7e82:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7e84:	4770      	bx	lr
   b7e86:	bf00      	nop
   b7e88:	2003e55c 	.word	0x2003e55c
   b7e8c:	2003e6e0 	.word	0x2003e6e0

000b7e90 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7e90:	4770      	bx	lr

000b7e92 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7e92:	7441      	strb	r1, [r0, #17]
}
   b7e94:	4770      	bx	lr

000b7e96 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7e96:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7e98:	7c00      	ldrb	r0, [r0, #16]
   b7e9a:	f7fd fb75 	bl	b5588 <hal_usart_available_data_for_write>
}
   b7e9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7ea2:	bd08      	pop	{r3, pc}

000b7ea4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7ea4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7ea6:	7c00      	ldrb	r0, [r0, #16]
   b7ea8:	f7fd fb46 	bl	b5538 <hal_usart_available>
}
   b7eac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7eb0:	bd08      	pop	{r3, pc}

000b7eb2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7eb2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7eb4:	7c00      	ldrb	r0, [r0, #16]
   b7eb6:	f7fd fb4f 	bl	b5558 <hal_usart_peek>
}
   b7eba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7ebe:	bd08      	pop	{r3, pc}

000b7ec0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7ec0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7ec2:	7c00      	ldrb	r0, [r0, #16]
   b7ec4:	f7fd fb40 	bl	b5548 <hal_usart_read>
}
   b7ec8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7ecc:	bd08      	pop	{r3, pc}

000b7ece <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7ece:	7c00      	ldrb	r0, [r0, #16]
   b7ed0:	f7fd bb4a 	b.w	b5568 <hal_usart_flush>

000b7ed4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7ed6:	7c45      	ldrb	r5, [r0, #17]
{
   b7ed8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7eda:	b12d      	cbz	r5, b7ee8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7edc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7ede:	b003      	add	sp, #12
   b7ee0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7ee4:	f7fd bb20 	b.w	b5528 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7ee8:	7c00      	ldrb	r0, [r0, #16]
   b7eea:	9101      	str	r1, [sp, #4]
   b7eec:	f7fd fb4c 	bl	b5588 <hal_usart_available_data_for_write>
   b7ef0:	2800      	cmp	r0, #0
   b7ef2:	9901      	ldr	r1, [sp, #4]
   b7ef4:	dcf2      	bgt.n	b7edc <_ZN11USARTSerial5writeEh+0x8>
}
   b7ef6:	4628      	mov	r0, r5
   b7ef8:	b003      	add	sp, #12
   b7efa:	bd30      	pop	{r4, r5, pc}

000b7efc <_ZN11USARTSerialD0Ev>:
   b7efc:	b510      	push	{r4, lr}
   b7efe:	2114      	movs	r1, #20
   b7f00:	4604      	mov	r4, r0
   b7f02:	f7fc fd90 	bl	b4a26 <_ZdlPvj>
   b7f06:	4620      	mov	r0, r4
   b7f08:	bd10      	pop	{r4, pc}
	...

000b7f0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7f0c:	b510      	push	{r4, lr}
   b7f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7f12:	4604      	mov	r4, r0
   b7f14:	4608      	mov	r0, r1
   b7f16:	4611      	mov	r1, r2
   b7f18:	2200      	movs	r2, #0
   b7f1a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7f1e:	4b04      	ldr	r3, [pc, #16]	; (b7f30 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7f20:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7f22:	2301      	movs	r3, #1
  _serial = serial;
   b7f24:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7f26:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7f28:	f7fd fb3e 	bl	b55a8 <hal_usart_init_ex>
}
   b7f2c:	4620      	mov	r0, r4
   b7f2e:	bd10      	pop	{r4, pc}
   b7f30:	000b8b94 	.word	0x000b8b94

000b7f34 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b7f34:	7c00      	ldrb	r0, [r0, #16]
   b7f36:	2300      	movs	r3, #0
   b7f38:	f7fd bb2e 	b.w	b5598 <hal_usart_begin_config>

000b7f3c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b7f3c:	2200      	movs	r2, #0
   b7f3e:	f7ff bff9 	b.w	b7f34 <_ZN11USARTSerial5beginEmm>

000b7f42 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b7f42:	7c00      	ldrb	r0, [r0, #16]
   b7f44:	f7fd bae8 	b.w	b5518 <hal_usart_end>

000b7f48 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7f48:	7441      	strb	r1, [r0, #17]
}
   b7f4a:	4770      	bx	lr

000b7f4c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7f4c:	4770      	bx	lr

000b7f4e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7f4e:	4770      	bx	lr

000b7f50 <_ZN9USBSerial4readEv>:
{
   b7f50:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7f52:	2100      	movs	r1, #0
   b7f54:	7c00      	ldrb	r0, [r0, #16]
   b7f56:	f7fd fb57 	bl	b5608 <HAL_USB_USART_Receive_Data>
}
   b7f5a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7f5e:	bd08      	pop	{r3, pc}

000b7f60 <_ZN9USBSerial4peekEv>:
{
   b7f60:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7f62:	2101      	movs	r1, #1
   b7f64:	7c00      	ldrb	r0, [r0, #16]
   b7f66:	f7fd fb4f 	bl	b5608 <HAL_USB_USART_Receive_Data>
}
   b7f6a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7f6e:	bd08      	pop	{r3, pc}

000b7f70 <_ZN9USBSerial17availableForWriteEv>:
{
   b7f70:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7f72:	7c00      	ldrb	r0, [r0, #16]
   b7f74:	f7fd fb40 	bl	b55f8 <HAL_USB_USART_Available_Data_For_Write>
}
   b7f78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7f7c:	bd08      	pop	{r3, pc}

000b7f7e <_ZN9USBSerial9availableEv>:
{
   b7f7e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7f80:	7c00      	ldrb	r0, [r0, #16]
   b7f82:	f7fd fb31 	bl	b55e8 <HAL_USB_USART_Available_Data>
}
   b7f86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7f8a:	bd08      	pop	{r3, pc}

000b7f8c <_ZN9USBSerial5writeEh>:
{
   b7f8c:	b513      	push	{r0, r1, r4, lr}
   b7f8e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7f90:	7c00      	ldrb	r0, [r0, #16]
{
   b7f92:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7f94:	f7fd fb30 	bl	b55f8 <HAL_USB_USART_Available_Data_For_Write>
   b7f98:	2800      	cmp	r0, #0
   b7f9a:	9901      	ldr	r1, [sp, #4]
   b7f9c:	dc01      	bgt.n	b7fa2 <_ZN9USBSerial5writeEh+0x16>
   b7f9e:	7c60      	ldrb	r0, [r4, #17]
   b7fa0:	b120      	cbz	r0, b7fac <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7fa2:	7c20      	ldrb	r0, [r4, #16]
   b7fa4:	f7fd fb38 	bl	b5618 <HAL_USB_USART_Send_Data>
   b7fa8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7fac:	b002      	add	sp, #8
   b7fae:	bd10      	pop	{r4, pc}

000b7fb0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7fb0:	7c00      	ldrb	r0, [r0, #16]
   b7fb2:	f7fd bb39 	b.w	b5628 <HAL_USB_USART_Flush_Data>

000b7fb6 <_ZN9USBSerialD0Ev>:
   b7fb6:	b510      	push	{r4, lr}
   b7fb8:	2114      	movs	r1, #20
   b7fba:	4604      	mov	r4, r0
   b7fbc:	f7fc fd33 	bl	b4a26 <_ZdlPvj>
   b7fc0:	4620      	mov	r0, r4
   b7fc2:	bd10      	pop	{r4, pc}

000b7fc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7fc4:	b510      	push	{r4, lr}
   b7fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7fca:	4604      	mov	r4, r0
   b7fcc:	4608      	mov	r0, r1
   b7fce:	2100      	movs	r1, #0
   b7fd0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7fd4:	4b04      	ldr	r3, [pc, #16]	; (b7fe8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7fd6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7fd8:	2301      	movs	r3, #1
  _serial = serial;
   b7fda:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7fdc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7fde:	4611      	mov	r1, r2
   b7fe0:	f7fd faea 	bl	b55b8 <HAL_USB_USART_Init>
}
   b7fe4:	4620      	mov	r0, r4
   b7fe6:	bd10      	pop	{r4, pc}
   b7fe8:	000b8bc4 	.word	0x000b8bc4

000b7fec <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7fec:	7c00      	ldrb	r0, [r0, #16]
   b7fee:	2200      	movs	r2, #0
   b7ff0:	f7fd baea 	b.w	b55c8 <HAL_USB_USART_Begin>

000b7ff4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b7ff4:	7c00      	ldrb	r0, [r0, #16]
   b7ff6:	f7fd baef 	b.w	b55d8 <HAL_USB_USART_End>

000b7ffa <_Z19acquireSerialBufferv>:
{
   b7ffa:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7ffc:	2214      	movs	r2, #20
{
   b7ffe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8000:	2100      	movs	r1, #0
   b8002:	f000 fa29 	bl	b8458 <memset>
}
   b8006:	4620      	mov	r0, r4
   b8008:	bd10      	pop	{r4, pc}
	...

000b800c <_Z16_fetch_usbserialv>:
{
   b800c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b800e:	4c0f      	ldr	r4, [pc, #60]	; (b804c <_Z16_fetch_usbserialv+0x40>)
{
   b8010:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8012:	a803      	add	r0, sp, #12
   b8014:	f7ff fff1 	bl	b7ffa <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8018:	7821      	ldrb	r1, [r4, #0]
   b801a:	f3bf 8f5b 	dmb	ish
   b801e:	f011 0101 	ands.w	r1, r1, #1
   b8022:	d10f      	bne.n	b8044 <_Z16_fetch_usbserialv+0x38>
   b8024:	4620      	mov	r0, r4
   b8026:	9101      	str	r1, [sp, #4]
   b8028:	f7fc fd0c 	bl	b4a44 <__cxa_guard_acquire>
   b802c:	9901      	ldr	r1, [sp, #4]
   b802e:	b148      	cbz	r0, b8044 <_Z16_fetch_usbserialv+0x38>
   b8030:	aa03      	add	r2, sp, #12
   b8032:	4807      	ldr	r0, [pc, #28]	; (b8050 <_Z16_fetch_usbserialv+0x44>)
   b8034:	f7ff ffc6 	bl	b7fc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8038:	4620      	mov	r0, r4
   b803a:	f7fc fd08 	bl	b4a4e <__cxa_guard_release>
   b803e:	4805      	ldr	r0, [pc, #20]	; (b8054 <_Z16_fetch_usbserialv+0x48>)
   b8040:	f000 f9d3 	bl	b83ea <atexit>
	return _usbserial;
}
   b8044:	4802      	ldr	r0, [pc, #8]	; (b8050 <_Z16_fetch_usbserialv+0x44>)
   b8046:	b008      	add	sp, #32
   b8048:	bd10      	pop	{r4, pc}
   b804a:	bf00      	nop
   b804c:	2003e6e4 	.word	0x2003e6e4
   b8050:	2003e6e8 	.word	0x2003e6e8
   b8054:	000b7f4d 	.word	0x000b7f4d

000b8058 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8058:	4b01      	ldr	r3, [pc, #4]	; (b8060 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b805a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b805c:	4770      	bx	lr
   b805e:	bf00      	nop
   b8060:	2003e560 	.word	0x2003e560

000b8064 <serialEventRun>:
{
   b8064:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8066:	4b0b      	ldr	r3, [pc, #44]	; (b8094 <serialEventRun+0x30>)
   b8068:	b143      	cbz	r3, b807c <serialEventRun+0x18>
   b806a:	f7ff ffcf 	bl	b800c <_Z16_fetch_usbserialv>
   b806e:	6803      	ldr	r3, [r0, #0]
   b8070:	691b      	ldr	r3, [r3, #16]
   b8072:	4798      	blx	r3
   b8074:	2800      	cmp	r0, #0
   b8076:	dd01      	ble.n	b807c <serialEventRun+0x18>
        serialEvent();
   b8078:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b807c:	4b06      	ldr	r3, [pc, #24]	; (b8098 <serialEventRun+0x34>)
   b807e:	b143      	cbz	r3, b8092 <serialEventRun+0x2e>
   b8080:	f000 f988 	bl	b8394 <_Z22__fetch_global_Serial1v>
   b8084:	6803      	ldr	r3, [r0, #0]
   b8086:	691b      	ldr	r3, [r3, #16]
   b8088:	4798      	blx	r3
   b808a:	2800      	cmp	r0, #0
   b808c:	dd01      	ble.n	b8092 <serialEventRun+0x2e>
        serialEvent1();
   b808e:	f3af 8000 	nop.w
}
   b8092:	bd08      	pop	{r3, pc}
	...

000b809c <_post_loop>:
{
   b809c:	b508      	push	{r3, lr}
	serialEventRun();
   b809e:	f7ff ffe1 	bl	b8064 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b80a2:	f7fd f991 	bl	b53c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b80a6:	4b01      	ldr	r3, [pc, #4]	; (b80ac <_post_loop+0x10>)
   b80a8:	6018      	str	r0, [r3, #0]
}
   b80aa:	bd08      	pop	{r3, pc}
   b80ac:	2003e710 	.word	0x2003e710

000b80b0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b80b0:	4805      	ldr	r0, [pc, #20]	; (b80c8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b80b2:	4a06      	ldr	r2, [pc, #24]	; (b80cc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b80b4:	4906      	ldr	r1, [pc, #24]	; (b80d0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b80b6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b80b8:	1a12      	subs	r2, r2, r0
   b80ba:	f000 f9a5 	bl	b8408 <memcpy>
    __backup_sram_signature = signature;
   b80be:	4b05      	ldr	r3, [pc, #20]	; (b80d4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b80c0:	4a05      	ldr	r2, [pc, #20]	; (b80d8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b80c2:	601a      	str	r2, [r3, #0]
}
   b80c4:	bd08      	pop	{r3, pc}
   b80c6:	bf00      	nop
   b80c8:	2003f400 	.word	0x2003f400
   b80cc:	2003f404 	.word	0x2003f404
   b80d0:	000b8e24 	.word	0x000b8e24
   b80d4:	2003f400 	.word	0x2003f400
   b80d8:	9a271c1e 	.word	0x9a271c1e

000b80dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b80dc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b80de:	2300      	movs	r3, #0
   b80e0:	9300      	str	r3, [sp, #0]
   b80e2:	461a      	mov	r2, r3
   b80e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b80e8:	f7fd fb02 	bl	b56f0 <system_ctrl_set_result>
}
   b80ec:	b003      	add	sp, #12
   b80ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b80f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b80f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b80f6:	8843      	ldrh	r3, [r0, #2]
   b80f8:	2b0a      	cmp	r3, #10
   b80fa:	d008      	beq.n	b810e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b80fc:	2b50      	cmp	r3, #80	; 0x50
   b80fe:	d10b      	bne.n	b8118 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8100:	4b09      	ldr	r3, [pc, #36]	; (b8128 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8102:	681b      	ldr	r3, [r3, #0]
   b8104:	b14b      	cbz	r3, b811a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8106:	b003      	add	sp, #12
   b8108:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b810c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b810e:	f7ff ffe5 	bl	b80dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8112:	b003      	add	sp, #12
   b8114:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8118:	2300      	movs	r3, #0
   b811a:	9300      	str	r3, [sp, #0]
   b811c:	461a      	mov	r2, r3
   b811e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8122:	f7fd fae5 	bl	b56f0 <system_ctrl_set_result>
}
   b8126:	e7f4      	b.n	b8112 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8128:	2003e700 	.word	0x2003e700

000b812c <module_user_init_hook>:
{
   b812c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b812e:	4812      	ldr	r0, [pc, #72]	; (b8178 <module_user_init_hook+0x4c>)
   b8130:	2100      	movs	r1, #0
   b8132:	f7fd fbc7 	bl	b58c4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8136:	4b11      	ldr	r3, [pc, #68]	; (b817c <module_user_init_hook+0x50>)
   b8138:	681a      	ldr	r2, [r3, #0]
   b813a:	4b11      	ldr	r3, [pc, #68]	; (b8180 <module_user_init_hook+0x54>)
   b813c:	429a      	cmp	r2, r3
   b813e:	4b11      	ldr	r3, [pc, #68]	; (b8184 <module_user_init_hook+0x58>)
   b8140:	bf0c      	ite	eq
   b8142:	2201      	moveq	r2, #1
   b8144:	2200      	movne	r2, #0
   b8146:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8148:	d001      	beq.n	b814e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b814a:	f7ff ffb1 	bl	b80b0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b814e:	f7fd f92b 	bl	b53a8 <HAL_RNG_GetRandomNumber>
   b8152:	4604      	mov	r4, r0
    srand(seed);
   b8154:	f000 f988 	bl	b8468 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8158:	4b0b      	ldr	r3, [pc, #44]	; (b8188 <module_user_init_hook+0x5c>)
   b815a:	b113      	cbz	r3, b8162 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b815c:	4620      	mov	r0, r4
   b815e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8162:	2100      	movs	r1, #0
   b8164:	4808      	ldr	r0, [pc, #32]	; (b8188 <module_user_init_hook+0x5c>)
   b8166:	f7fd fafd 	bl	b5764 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b816a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b816e:	4807      	ldr	r0, [pc, #28]	; (b818c <module_user_init_hook+0x60>)
   b8170:	2100      	movs	r1, #0
   b8172:	f7fd bab3 	b.w	b56dc <system_ctrl_set_app_request_handler>
   b8176:	bf00      	nop
   b8178:	000b8059 	.word	0x000b8059
   b817c:	2003f400 	.word	0x2003f400
   b8180:	9a271c1e 	.word	0x9a271c1e
   b8184:	2003e6fc 	.word	0x2003e6fc
   b8188:	00000000 	.word	0x00000000
   b818c:	000b80f5 	.word	0x000b80f5

000b8190 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8190:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8192:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8194:	d902      	bls.n	b819c <pinAvailable+0xc>
    return false;
   b8196:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8198:	b002      	add	sp, #8
   b819a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b819c:	f1a0 030b 	sub.w	r3, r0, #11
   b81a0:	2b02      	cmp	r3, #2
   b81a2:	d81a      	bhi.n	b81da <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b81a4:	4c17      	ldr	r4, [pc, #92]	; (b8204 <pinAvailable+0x74>)
   b81a6:	7821      	ldrb	r1, [r4, #0]
   b81a8:	f3bf 8f5b 	dmb	ish
   b81ac:	f011 0101 	ands.w	r1, r1, #1
   b81b0:	d10b      	bne.n	b81ca <pinAvailable+0x3a>
   b81b2:	4620      	mov	r0, r4
   b81b4:	9101      	str	r1, [sp, #4]
   b81b6:	f7fc fc45 	bl	b4a44 <__cxa_guard_acquire>
   b81ba:	9901      	ldr	r1, [sp, #4]
   b81bc:	b128      	cbz	r0, b81ca <pinAvailable+0x3a>
   b81be:	4812      	ldr	r0, [pc, #72]	; (b8208 <pinAvailable+0x78>)
   b81c0:	f7ff fcf6 	bl	b7bb0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b81c4:	4620      	mov	r0, r4
   b81c6:	f7fc fc42 	bl	b4a4e <__cxa_guard_release>
   b81ca:	4b0f      	ldr	r3, [pc, #60]	; (b8208 <pinAvailable+0x78>)
   b81cc:	7818      	ldrb	r0, [r3, #0]
   b81ce:	f7fd f99b 	bl	b5508 <hal_spi_is_enabled>
   b81d2:	2800      	cmp	r0, #0
   b81d4:	d1df      	bne.n	b8196 <pinAvailable+0x6>
  return true; // 'pin' is available
   b81d6:	2001      	movs	r0, #1
   b81d8:	e7de      	b.n	b8198 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b81da:	2801      	cmp	r0, #1
   b81dc:	d809      	bhi.n	b81f2 <pinAvailable+0x62>
   b81de:	f000 f875 	bl	b82cc <_Z19__fetch_global_Wirev>
   b81e2:	2100      	movs	r1, #0
   b81e4:	7c00      	ldrb	r0, [r0, #16]
   b81e6:	f7fd f947 	bl	b5478 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b81ea:	f080 0001 	eor.w	r0, r0, #1
   b81ee:	b2c0      	uxtb	r0, r0
   b81f0:	e7d2      	b.n	b8198 <pinAvailable+0x8>
   b81f2:	3809      	subs	r0, #9
   b81f4:	2801      	cmp	r0, #1
   b81f6:	d8ee      	bhi.n	b81d6 <pinAvailable+0x46>
   b81f8:	f000 f8cc 	bl	b8394 <_Z22__fetch_global_Serial1v>
   b81fc:	7c00      	ldrb	r0, [r0, #16]
   b81fe:	f7fd f9bb 	bl	b5578 <hal_usart_is_enabled>
   b8202:	e7f2      	b.n	b81ea <pinAvailable+0x5a>
   b8204:	2003e704 	.word	0x2003e704
   b8208:	2003e708 	.word	0x2003e708

000b820c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b820c:	2823      	cmp	r0, #35	; 0x23
{
   b820e:	b538      	push	{r3, r4, r5, lr}
   b8210:	4604      	mov	r4, r0
   b8212:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8214:	d80a      	bhi.n	b822c <pinMode+0x20>
   b8216:	29ff      	cmp	r1, #255	; 0xff
   b8218:	d008      	beq.n	b822c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b821a:	f7ff ffb9 	bl	b8190 <pinAvailable>
   b821e:	b128      	cbz	r0, b822c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b8220:	4629      	mov	r1, r5
   b8222:	4620      	mov	r0, r4
}
   b8224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b8228:	f7fd b8d6 	b.w	b53d8 <hal_gpio_mode>
}
   b822c:	bd38      	pop	{r3, r4, r5, pc}

000b822e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b822e:	b538      	push	{r3, r4, r5, lr}
   b8230:	4604      	mov	r4, r0
   b8232:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b8234:	f7fd f8d8 	bl	b53e8 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8238:	28ff      	cmp	r0, #255	; 0xff
   b823a:	d010      	beq.n	b825e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b823c:	2806      	cmp	r0, #6
   b823e:	d804      	bhi.n	b824a <digitalWrite+0x1c>
   b8240:	234d      	movs	r3, #77	; 0x4d
   b8242:	fa23 f000 	lsr.w	r0, r3, r0
   b8246:	07c3      	lsls	r3, r0, #31
   b8248:	d409      	bmi.n	b825e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b824a:	4620      	mov	r0, r4
   b824c:	f7ff ffa0 	bl	b8190 <pinAvailable>
   b8250:	b128      	cbz	r0, b825e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b8252:	4629      	mov	r1, r5
   b8254:	4620      	mov	r0, r4
}
   b8256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b825a:	f7fd b8cd 	b.w	b53f8 <hal_gpio_write>
}
   b825e:	bd38      	pop	{r3, r4, r5, pc}

000b8260 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8260:	4770      	bx	lr

000b8262 <__tcf_1>:
   b8262:	4770      	bx	lr

000b8264 <_Z17acquireWireBufferv>:
{
   b8264:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8266:	4b0a      	ldr	r3, [pc, #40]	; (b8290 <_Z17acquireWireBufferv+0x2c>)
   b8268:	6003      	str	r3, [r0, #0]
   b826a:	2301      	movs	r3, #1
{
   b826c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b826e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8270:	4908      	ldr	r1, [pc, #32]	; (b8294 <_Z17acquireWireBufferv+0x30>)
   b8272:	2020      	movs	r0, #32
   b8274:	f000 f8b4 	bl	b83e0 <_ZnajRKSt9nothrow_t>
	};
   b8278:	2520      	movs	r5, #32
   b827a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b827c:	4905      	ldr	r1, [pc, #20]	; (b8294 <_Z17acquireWireBufferv+0x30>)
	};
   b827e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8280:	4628      	mov	r0, r5
   b8282:	f000 f8ad 	bl	b83e0 <_ZnajRKSt9nothrow_t>
	};
   b8286:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b828a:	4620      	mov	r0, r4
   b828c:	bd38      	pop	{r3, r4, r5, pc}
   b828e:	bf00      	nop
   b8290:	00010018 	.word	0x00010018
   b8294:	000b8bec 	.word	0x000b8bec

000b8298 <_Z18acquireWire1Bufferv>:
{
   b8298:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b829a:	4b0a      	ldr	r3, [pc, #40]	; (b82c4 <_Z18acquireWire1Bufferv+0x2c>)
   b829c:	6003      	str	r3, [r0, #0]
   b829e:	2301      	movs	r3, #1
{
   b82a0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b82a2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b82a4:	4908      	ldr	r1, [pc, #32]	; (b82c8 <_Z18acquireWire1Bufferv+0x30>)
   b82a6:	2020      	movs	r0, #32
   b82a8:	f000 f89a 	bl	b83e0 <_ZnajRKSt9nothrow_t>
	};
   b82ac:	2520      	movs	r5, #32
   b82ae:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b82b0:	4905      	ldr	r1, [pc, #20]	; (b82c8 <_Z18acquireWire1Bufferv+0x30>)
	};
   b82b2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b82b4:	4628      	mov	r0, r5
   b82b6:	f000 f893 	bl	b83e0 <_ZnajRKSt9nothrow_t>
	};
   b82ba:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b82be:	4620      	mov	r0, r4
   b82c0:	bd38      	pop	{r3, r4, r5, pc}
   b82c2:	bf00      	nop
   b82c4:	00010018 	.word	0x00010018
   b82c8:	000b8bec 	.word	0x000b8bec

000b82cc <_Z19__fetch_global_Wirev>:
{
   b82cc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b82ce:	4d0e      	ldr	r5, [pc, #56]	; (b8308 <_Z19__fetch_global_Wirev+0x3c>)
   b82d0:	7829      	ldrb	r1, [r5, #0]
   b82d2:	f3bf 8f5b 	dmb	ish
   b82d6:	f011 0401 	ands.w	r4, r1, #1
{
   b82da:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b82dc:	d111      	bne.n	b8302 <_Z19__fetch_global_Wirev+0x36>
   b82de:	4628      	mov	r0, r5
   b82e0:	f7fc fbb0 	bl	b4a44 <__cxa_guard_acquire>
   b82e4:	b168      	cbz	r0, b8302 <_Z19__fetch_global_Wirev+0x36>
   b82e6:	4668      	mov	r0, sp
   b82e8:	f7ff ffbc 	bl	b8264 <_Z17acquireWireBufferv>
   b82ec:	466a      	mov	r2, sp
   b82ee:	4621      	mov	r1, r4
   b82f0:	4806      	ldr	r0, [pc, #24]	; (b830c <_Z19__fetch_global_Wirev+0x40>)
   b82f2:	f7fe f815 	bl	b6320 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b82f6:	4628      	mov	r0, r5
   b82f8:	f7fc fba9 	bl	b4a4e <__cxa_guard_release>
   b82fc:	4804      	ldr	r0, [pc, #16]	; (b8310 <_Z19__fetch_global_Wirev+0x44>)
   b82fe:	f000 f874 	bl	b83ea <atexit>
	return wire;
}
   b8302:	4802      	ldr	r0, [pc, #8]	; (b830c <_Z19__fetch_global_Wirev+0x40>)
   b8304:	b007      	add	sp, #28
   b8306:	bd30      	pop	{r4, r5, pc}
   b8308:	2003e714 	.word	0x2003e714
   b830c:	2003e71c 	.word	0x2003e71c
   b8310:	000b8261 	.word	0x000b8261

000b8314 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b8314:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b8316:	4c0e      	ldr	r4, [pc, #56]	; (b8350 <_Z20__fetch_global_Wire1v+0x3c>)
   b8318:	7823      	ldrb	r3, [r4, #0]
   b831a:	f3bf 8f5b 	dmb	ish
   b831e:	07db      	lsls	r3, r3, #31
{
   b8320:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b8322:	d411      	bmi.n	b8348 <_Z20__fetch_global_Wire1v+0x34>
   b8324:	4620      	mov	r0, r4
   b8326:	f7fc fb8d 	bl	b4a44 <__cxa_guard_acquire>
   b832a:	b168      	cbz	r0, b8348 <_Z20__fetch_global_Wire1v+0x34>
   b832c:	4668      	mov	r0, sp
   b832e:	f7ff ffb3 	bl	b8298 <_Z18acquireWire1Bufferv>
   b8332:	466a      	mov	r2, sp
   b8334:	2101      	movs	r1, #1
   b8336:	4807      	ldr	r0, [pc, #28]	; (b8354 <_Z20__fetch_global_Wire1v+0x40>)
   b8338:	f7fd fff2 	bl	b6320 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b833c:	4620      	mov	r0, r4
   b833e:	f7fc fb86 	bl	b4a4e <__cxa_guard_release>
   b8342:	4805      	ldr	r0, [pc, #20]	; (b8358 <_Z20__fetch_global_Wire1v+0x44>)
   b8344:	f000 f851 	bl	b83ea <atexit>
	return wire;
}
   b8348:	4802      	ldr	r0, [pc, #8]	; (b8354 <_Z20__fetch_global_Wire1v+0x40>)
   b834a:	b006      	add	sp, #24
   b834c:	bd10      	pop	{r4, pc}
   b834e:	bf00      	nop
   b8350:	2003e718 	.word	0x2003e718
   b8354:	2003e730 	.word	0x2003e730
   b8358:	000b8263 	.word	0x000b8263

000b835c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b835c:	4770      	bx	lr
	...

000b8360 <_Z20acquireSerial1Bufferv>:
{
   b8360:	b538      	push	{r3, r4, r5, lr}
   b8362:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8364:	2514      	movs	r5, #20
   b8366:	462a      	mov	r2, r5
   b8368:	2100      	movs	r1, #0
   b836a:	f000 f875 	bl	b8458 <memset>
   b836e:	8025      	strh	r5, [r4, #0]
   b8370:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8372:	4907      	ldr	r1, [pc, #28]	; (b8390 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8374:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8376:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8378:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b837a:	f000 f831 	bl	b83e0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b837e:	4904      	ldr	r1, [pc, #16]	; (b8390 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8380:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8382:	4628      	mov	r0, r5
   b8384:	f000 f82c 	bl	b83e0 <_ZnajRKSt9nothrow_t>
    };
   b8388:	60e0      	str	r0, [r4, #12]
}
   b838a:	4620      	mov	r0, r4
   b838c:	bd38      	pop	{r3, r4, r5, pc}
   b838e:	bf00      	nop
   b8390:	000b8bec 	.word	0x000b8bec

000b8394 <_Z22__fetch_global_Serial1v>:
{
   b8394:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8396:	4d0e      	ldr	r5, [pc, #56]	; (b83d0 <_Z22__fetch_global_Serial1v+0x3c>)
   b8398:	7829      	ldrb	r1, [r5, #0]
   b839a:	f3bf 8f5b 	dmb	ish
   b839e:	f011 0401 	ands.w	r4, r1, #1
{
   b83a2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b83a4:	d111      	bne.n	b83ca <_Z22__fetch_global_Serial1v+0x36>
   b83a6:	4628      	mov	r0, r5
   b83a8:	f7fc fb4c 	bl	b4a44 <__cxa_guard_acquire>
   b83ac:	b168      	cbz	r0, b83ca <_Z22__fetch_global_Serial1v+0x36>
   b83ae:	a801      	add	r0, sp, #4
   b83b0:	f7ff ffd6 	bl	b8360 <_Z20acquireSerial1Bufferv>
   b83b4:	aa01      	add	r2, sp, #4
   b83b6:	4621      	mov	r1, r4
   b83b8:	4806      	ldr	r0, [pc, #24]	; (b83d4 <_Z22__fetch_global_Serial1v+0x40>)
   b83ba:	f7ff fda7 	bl	b7f0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b83be:	4628      	mov	r0, r5
   b83c0:	f7fc fb45 	bl	b4a4e <__cxa_guard_release>
   b83c4:	4804      	ldr	r0, [pc, #16]	; (b83d8 <_Z22__fetch_global_Serial1v+0x44>)
   b83c6:	f000 f810 	bl	b83ea <atexit>
    return serial1;
}
   b83ca:	4802      	ldr	r0, [pc, #8]	; (b83d4 <_Z22__fetch_global_Serial1v+0x40>)
   b83cc:	b007      	add	sp, #28
   b83ce:	bd30      	pop	{r4, r5, pc}
   b83d0:	2003e744 	.word	0x2003e744
   b83d4:	2003e748 	.word	0x2003e748
   b83d8:	000b835d 	.word	0x000b835d

000b83dc <_ZnwjRKSt9nothrow_t>:
   b83dc:	f7fc bb1f 	b.w	b4a1e <_Znwj>

000b83e0 <_ZnajRKSt9nothrow_t>:
   b83e0:	f7fc bb1f 	b.w	b4a22 <_Znaj>

000b83e4 <_ZSt25__throw_bad_function_callv>:
   b83e4:	b508      	push	{r3, lr}
   b83e6:	f7fd fa4d 	bl	b5884 <abort>

000b83ea <atexit>:
   b83ea:	2300      	movs	r3, #0
   b83ec:	4601      	mov	r1, r0
   b83ee:	461a      	mov	r2, r3
   b83f0:	4618      	mov	r0, r3
   b83f2:	f000 b959 	b.w	b86a8 <__register_exitproc>
	...

000b83f8 <isprint>:
   b83f8:	4b02      	ldr	r3, [pc, #8]	; (b8404 <isprint+0xc>)
   b83fa:	4418      	add	r0, r3
   b83fc:	7840      	ldrb	r0, [r0, #1]
   b83fe:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b8402:	4770      	bx	lr
   b8404:	000b8c5d 	.word	0x000b8c5d

000b8408 <memcpy>:
   b8408:	440a      	add	r2, r1
   b840a:	4291      	cmp	r1, r2
   b840c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8410:	d100      	bne.n	b8414 <memcpy+0xc>
   b8412:	4770      	bx	lr
   b8414:	b510      	push	{r4, lr}
   b8416:	f811 4b01 	ldrb.w	r4, [r1], #1
   b841a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b841e:	4291      	cmp	r1, r2
   b8420:	d1f9      	bne.n	b8416 <memcpy+0xe>
   b8422:	bd10      	pop	{r4, pc}

000b8424 <memmove>:
   b8424:	4288      	cmp	r0, r1
   b8426:	b510      	push	{r4, lr}
   b8428:	eb01 0402 	add.w	r4, r1, r2
   b842c:	d902      	bls.n	b8434 <memmove+0x10>
   b842e:	4284      	cmp	r4, r0
   b8430:	4623      	mov	r3, r4
   b8432:	d807      	bhi.n	b8444 <memmove+0x20>
   b8434:	1e43      	subs	r3, r0, #1
   b8436:	42a1      	cmp	r1, r4
   b8438:	d008      	beq.n	b844c <memmove+0x28>
   b843a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b843e:	f803 2f01 	strb.w	r2, [r3, #1]!
   b8442:	e7f8      	b.n	b8436 <memmove+0x12>
   b8444:	4402      	add	r2, r0
   b8446:	4601      	mov	r1, r0
   b8448:	428a      	cmp	r2, r1
   b844a:	d100      	bne.n	b844e <memmove+0x2a>
   b844c:	bd10      	pop	{r4, pc}
   b844e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b8452:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b8456:	e7f7      	b.n	b8448 <memmove+0x24>

000b8458 <memset>:
   b8458:	4402      	add	r2, r0
   b845a:	4603      	mov	r3, r0
   b845c:	4293      	cmp	r3, r2
   b845e:	d100      	bne.n	b8462 <memset+0xa>
   b8460:	4770      	bx	lr
   b8462:	f803 1b01 	strb.w	r1, [r3], #1
   b8466:	e7f9      	b.n	b845c <memset+0x4>

000b8468 <srand>:
   b8468:	b538      	push	{r3, r4, r5, lr}
   b846a:	4b10      	ldr	r3, [pc, #64]	; (b84ac <srand+0x44>)
   b846c:	681d      	ldr	r5, [r3, #0]
   b846e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8470:	4604      	mov	r4, r0
   b8472:	b9b3      	cbnz	r3, b84a2 <srand+0x3a>
   b8474:	2018      	movs	r0, #24
   b8476:	f7fd f9e5 	bl	b5844 <malloc>
   b847a:	4602      	mov	r2, r0
   b847c:	63a8      	str	r0, [r5, #56]	; 0x38
   b847e:	b920      	cbnz	r0, b848a <srand+0x22>
   b8480:	4b0b      	ldr	r3, [pc, #44]	; (b84b0 <srand+0x48>)
   b8482:	480c      	ldr	r0, [pc, #48]	; (b84b4 <srand+0x4c>)
   b8484:	2142      	movs	r1, #66	; 0x42
   b8486:	f7fd fa15 	bl	b58b4 <__assert_func>
   b848a:	490b      	ldr	r1, [pc, #44]	; (b84b8 <srand+0x50>)
   b848c:	4b0b      	ldr	r3, [pc, #44]	; (b84bc <srand+0x54>)
   b848e:	e9c0 1300 	strd	r1, r3, [r0]
   b8492:	4b0b      	ldr	r3, [pc, #44]	; (b84c0 <srand+0x58>)
   b8494:	6083      	str	r3, [r0, #8]
   b8496:	230b      	movs	r3, #11
   b8498:	8183      	strh	r3, [r0, #12]
   b849a:	2100      	movs	r1, #0
   b849c:	2001      	movs	r0, #1
   b849e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b84a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b84a4:	2200      	movs	r2, #0
   b84a6:	611c      	str	r4, [r3, #16]
   b84a8:	615a      	str	r2, [r3, #20]
   b84aa:	bd38      	pop	{r3, r4, r5, pc}
   b84ac:	2003e560 	.word	0x2003e560
   b84b0:	000b8bed 	.word	0x000b8bed
   b84b4:	000b8c04 	.word	0x000b8c04
   b84b8:	abcd330e 	.word	0xabcd330e
   b84bc:	e66d1234 	.word	0xe66d1234
   b84c0:	0005deec 	.word	0x0005deec

000b84c4 <strchr>:
   b84c4:	b2c9      	uxtb	r1, r1
   b84c6:	4603      	mov	r3, r0
   b84c8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b84cc:	b11a      	cbz	r2, b84d6 <strchr+0x12>
   b84ce:	428a      	cmp	r2, r1
   b84d0:	d1f9      	bne.n	b84c6 <strchr+0x2>
   b84d2:	4618      	mov	r0, r3
   b84d4:	4770      	bx	lr
   b84d6:	2900      	cmp	r1, #0
   b84d8:	bf18      	it	ne
   b84da:	2300      	movne	r3, #0
   b84dc:	e7f9      	b.n	b84d2 <strchr+0xe>

000b84de <strchrnul>:
   b84de:	b510      	push	{r4, lr}
   b84e0:	4604      	mov	r4, r0
   b84e2:	f7ff ffef 	bl	b84c4 <strchr>
   b84e6:	b918      	cbnz	r0, b84f0 <strchrnul+0x12>
   b84e8:	4620      	mov	r0, r4
   b84ea:	f7fc fa55 	bl	b4998 <strlen>
   b84ee:	4420      	add	r0, r4
   b84f0:	bd10      	pop	{r4, pc}

000b84f2 <strcpy>:
   b84f2:	4603      	mov	r3, r0
   b84f4:	f811 2b01 	ldrb.w	r2, [r1], #1
   b84f8:	f803 2b01 	strb.w	r2, [r3], #1
   b84fc:	2a00      	cmp	r2, #0
   b84fe:	d1f9      	bne.n	b84f4 <strcpy+0x2>
   b8500:	4770      	bx	lr
	...

000b8504 <strdup>:
   b8504:	4b02      	ldr	r3, [pc, #8]	; (b8510 <strdup+0xc>)
   b8506:	4601      	mov	r1, r0
   b8508:	6818      	ldr	r0, [r3, #0]
   b850a:	f000 b803 	b.w	b8514 <_strdup_r>
   b850e:	bf00      	nop
   b8510:	2003e560 	.word	0x2003e560

000b8514 <_strdup_r>:
   b8514:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8516:	4604      	mov	r4, r0
   b8518:	4608      	mov	r0, r1
   b851a:	460d      	mov	r5, r1
   b851c:	f7fc fa3c 	bl	b4998 <strlen>
   b8520:	1c42      	adds	r2, r0, #1
   b8522:	4611      	mov	r1, r2
   b8524:	4620      	mov	r0, r4
   b8526:	9201      	str	r2, [sp, #4]
   b8528:	f7fd f9b4 	bl	b5894 <_malloc_r>
   b852c:	4604      	mov	r4, r0
   b852e:	b118      	cbz	r0, b8538 <_strdup_r+0x24>
   b8530:	9a01      	ldr	r2, [sp, #4]
   b8532:	4629      	mov	r1, r5
   b8534:	f7ff ff68 	bl	b8408 <memcpy>
   b8538:	4620      	mov	r0, r4
   b853a:	b003      	add	sp, #12
   b853c:	bd30      	pop	{r4, r5, pc}

000b853e <strncmp>:
   b853e:	b510      	push	{r4, lr}
   b8540:	b17a      	cbz	r2, b8562 <strncmp+0x24>
   b8542:	4603      	mov	r3, r0
   b8544:	3901      	subs	r1, #1
   b8546:	1884      	adds	r4, r0, r2
   b8548:	f813 0b01 	ldrb.w	r0, [r3], #1
   b854c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8550:	4290      	cmp	r0, r2
   b8552:	d101      	bne.n	b8558 <strncmp+0x1a>
   b8554:	42a3      	cmp	r3, r4
   b8556:	d101      	bne.n	b855c <strncmp+0x1e>
   b8558:	1a80      	subs	r0, r0, r2
   b855a:	bd10      	pop	{r4, pc}
   b855c:	2800      	cmp	r0, #0
   b855e:	d1f3      	bne.n	b8548 <strncmp+0xa>
   b8560:	e7fa      	b.n	b8558 <strncmp+0x1a>
   b8562:	4610      	mov	r0, r2
   b8564:	e7f9      	b.n	b855a <strncmp+0x1c>

000b8566 <strrchr>:
   b8566:	b538      	push	{r3, r4, r5, lr}
   b8568:	4603      	mov	r3, r0
   b856a:	460c      	mov	r4, r1
   b856c:	b969      	cbnz	r1, b858a <strrchr+0x24>
   b856e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8572:	f7ff bfa7 	b.w	b84c4 <strchr>
   b8576:	1c43      	adds	r3, r0, #1
   b8578:	4605      	mov	r5, r0
   b857a:	4621      	mov	r1, r4
   b857c:	4618      	mov	r0, r3
   b857e:	f7ff ffa1 	bl	b84c4 <strchr>
   b8582:	2800      	cmp	r0, #0
   b8584:	d1f7      	bne.n	b8576 <strrchr+0x10>
   b8586:	4628      	mov	r0, r5
   b8588:	bd38      	pop	{r3, r4, r5, pc}
   b858a:	2500      	movs	r5, #0
   b858c:	e7f5      	b.n	b857a <strrchr+0x14>
	...

000b8590 <_strtol_l.constprop.0>:
   b8590:	2b01      	cmp	r3, #1
   b8592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8596:	d001      	beq.n	b859c <_strtol_l.constprop.0+0xc>
   b8598:	2b24      	cmp	r3, #36	; 0x24
   b859a:	d906      	bls.n	b85aa <_strtol_l.constprop.0+0x1a>
   b859c:	f7fd f982 	bl	b58a4 <__errno>
   b85a0:	2316      	movs	r3, #22
   b85a2:	6003      	str	r3, [r0, #0]
   b85a4:	2000      	movs	r0, #0
   b85a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b85aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8690 <_strtol_l.constprop.0+0x100>
   b85ae:	460d      	mov	r5, r1
   b85b0:	462e      	mov	r6, r5
   b85b2:	f815 4b01 	ldrb.w	r4, [r5], #1
   b85b6:	f814 700c 	ldrb.w	r7, [r4, ip]
   b85ba:	f017 0708 	ands.w	r7, r7, #8
   b85be:	d1f7      	bne.n	b85b0 <_strtol_l.constprop.0+0x20>
   b85c0:	2c2d      	cmp	r4, #45	; 0x2d
   b85c2:	d132      	bne.n	b862a <_strtol_l.constprop.0+0x9a>
   b85c4:	782c      	ldrb	r4, [r5, #0]
   b85c6:	2701      	movs	r7, #1
   b85c8:	1cb5      	adds	r5, r6, #2
   b85ca:	2b00      	cmp	r3, #0
   b85cc:	d05b      	beq.n	b8686 <_strtol_l.constprop.0+0xf6>
   b85ce:	2b10      	cmp	r3, #16
   b85d0:	d109      	bne.n	b85e6 <_strtol_l.constprop.0+0x56>
   b85d2:	2c30      	cmp	r4, #48	; 0x30
   b85d4:	d107      	bne.n	b85e6 <_strtol_l.constprop.0+0x56>
   b85d6:	782c      	ldrb	r4, [r5, #0]
   b85d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b85dc:	2c58      	cmp	r4, #88	; 0x58
   b85de:	d14d      	bne.n	b867c <_strtol_l.constprop.0+0xec>
   b85e0:	786c      	ldrb	r4, [r5, #1]
   b85e2:	2310      	movs	r3, #16
   b85e4:	3502      	adds	r5, #2
   b85e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b85ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b85ee:	f04f 0c00 	mov.w	ip, #0
   b85f2:	fbb8 f9f3 	udiv	r9, r8, r3
   b85f6:	4666      	mov	r6, ip
   b85f8:	fb03 8a19 	mls	sl, r3, r9, r8
   b85fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8600:	f1be 0f09 	cmp.w	lr, #9
   b8604:	d816      	bhi.n	b8634 <_strtol_l.constprop.0+0xa4>
   b8606:	4674      	mov	r4, lr
   b8608:	42a3      	cmp	r3, r4
   b860a:	dd24      	ble.n	b8656 <_strtol_l.constprop.0+0xc6>
   b860c:	f1bc 0f00 	cmp.w	ip, #0
   b8610:	db1e      	blt.n	b8650 <_strtol_l.constprop.0+0xc0>
   b8612:	45b1      	cmp	r9, r6
   b8614:	d31c      	bcc.n	b8650 <_strtol_l.constprop.0+0xc0>
   b8616:	d101      	bne.n	b861c <_strtol_l.constprop.0+0x8c>
   b8618:	45a2      	cmp	sl, r4
   b861a:	db19      	blt.n	b8650 <_strtol_l.constprop.0+0xc0>
   b861c:	fb06 4603 	mla	r6, r6, r3, r4
   b8620:	f04f 0c01 	mov.w	ip, #1
   b8624:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8628:	e7e8      	b.n	b85fc <_strtol_l.constprop.0+0x6c>
   b862a:	2c2b      	cmp	r4, #43	; 0x2b
   b862c:	bf04      	itt	eq
   b862e:	782c      	ldrbeq	r4, [r5, #0]
   b8630:	1cb5      	addeq	r5, r6, #2
   b8632:	e7ca      	b.n	b85ca <_strtol_l.constprop.0+0x3a>
   b8634:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8638:	f1be 0f19 	cmp.w	lr, #25
   b863c:	d801      	bhi.n	b8642 <_strtol_l.constprop.0+0xb2>
   b863e:	3c37      	subs	r4, #55	; 0x37
   b8640:	e7e2      	b.n	b8608 <_strtol_l.constprop.0+0x78>
   b8642:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8646:	f1be 0f19 	cmp.w	lr, #25
   b864a:	d804      	bhi.n	b8656 <_strtol_l.constprop.0+0xc6>
   b864c:	3c57      	subs	r4, #87	; 0x57
   b864e:	e7db      	b.n	b8608 <_strtol_l.constprop.0+0x78>
   b8650:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8654:	e7e6      	b.n	b8624 <_strtol_l.constprop.0+0x94>
   b8656:	f1bc 0f00 	cmp.w	ip, #0
   b865a:	da05      	bge.n	b8668 <_strtol_l.constprop.0+0xd8>
   b865c:	2322      	movs	r3, #34	; 0x22
   b865e:	6003      	str	r3, [r0, #0]
   b8660:	4646      	mov	r6, r8
   b8662:	b942      	cbnz	r2, b8676 <_strtol_l.constprop.0+0xe6>
   b8664:	4630      	mov	r0, r6
   b8666:	e79e      	b.n	b85a6 <_strtol_l.constprop.0+0x16>
   b8668:	b107      	cbz	r7, b866c <_strtol_l.constprop.0+0xdc>
   b866a:	4276      	negs	r6, r6
   b866c:	2a00      	cmp	r2, #0
   b866e:	d0f9      	beq.n	b8664 <_strtol_l.constprop.0+0xd4>
   b8670:	f1bc 0f00 	cmp.w	ip, #0
   b8674:	d000      	beq.n	b8678 <_strtol_l.constprop.0+0xe8>
   b8676:	1e69      	subs	r1, r5, #1
   b8678:	6011      	str	r1, [r2, #0]
   b867a:	e7f3      	b.n	b8664 <_strtol_l.constprop.0+0xd4>
   b867c:	2430      	movs	r4, #48	; 0x30
   b867e:	2b00      	cmp	r3, #0
   b8680:	d1b1      	bne.n	b85e6 <_strtol_l.constprop.0+0x56>
   b8682:	2308      	movs	r3, #8
   b8684:	e7af      	b.n	b85e6 <_strtol_l.constprop.0+0x56>
   b8686:	2c30      	cmp	r4, #48	; 0x30
   b8688:	d0a5      	beq.n	b85d6 <_strtol_l.constprop.0+0x46>
   b868a:	230a      	movs	r3, #10
   b868c:	e7ab      	b.n	b85e6 <_strtol_l.constprop.0+0x56>
   b868e:	bf00      	nop
   b8690:	000b8c5e 	.word	0x000b8c5e

000b8694 <strtol>:
   b8694:	4613      	mov	r3, r2
   b8696:	460a      	mov	r2, r1
   b8698:	4601      	mov	r1, r0
   b869a:	4802      	ldr	r0, [pc, #8]	; (b86a4 <strtol+0x10>)
   b869c:	6800      	ldr	r0, [r0, #0]
   b869e:	f7ff bf77 	b.w	b8590 <_strtol_l.constprop.0>
   b86a2:	bf00      	nop
   b86a4:	2003e560 	.word	0x2003e560

000b86a8 <__register_exitproc>:
   b86a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b86ac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8768 <__register_exitproc+0xc0>
   b86b0:	4606      	mov	r6, r0
   b86b2:	f8d8 0000 	ldr.w	r0, [r8]
   b86b6:	461f      	mov	r7, r3
   b86b8:	460d      	mov	r5, r1
   b86ba:	4691      	mov	r9, r2
   b86bc:	f000 f856 	bl	b876c <__retarget_lock_acquire_recursive>
   b86c0:	4b25      	ldr	r3, [pc, #148]	; (b8758 <__register_exitproc+0xb0>)
   b86c2:	681c      	ldr	r4, [r3, #0]
   b86c4:	b934      	cbnz	r4, b86d4 <__register_exitproc+0x2c>
   b86c6:	4c25      	ldr	r4, [pc, #148]	; (b875c <__register_exitproc+0xb4>)
   b86c8:	601c      	str	r4, [r3, #0]
   b86ca:	4b25      	ldr	r3, [pc, #148]	; (b8760 <__register_exitproc+0xb8>)
   b86cc:	b113      	cbz	r3, b86d4 <__register_exitproc+0x2c>
   b86ce:	681b      	ldr	r3, [r3, #0]
   b86d0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b86d4:	6863      	ldr	r3, [r4, #4]
   b86d6:	2b1f      	cmp	r3, #31
   b86d8:	dd07      	ble.n	b86ea <__register_exitproc+0x42>
   b86da:	f8d8 0000 	ldr.w	r0, [r8]
   b86de:	f000 f847 	bl	b8770 <__retarget_lock_release_recursive>
   b86e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b86e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b86ea:	b34e      	cbz	r6, b8740 <__register_exitproc+0x98>
   b86ec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b86f0:	b988      	cbnz	r0, b8716 <__register_exitproc+0x6e>
   b86f2:	4b1c      	ldr	r3, [pc, #112]	; (b8764 <__register_exitproc+0xbc>)
   b86f4:	b923      	cbnz	r3, b8700 <__register_exitproc+0x58>
   b86f6:	f8d8 0000 	ldr.w	r0, [r8]
   b86fa:	f000 f838 	bl	b876e <__retarget_lock_release>
   b86fe:	e7f0      	b.n	b86e2 <__register_exitproc+0x3a>
   b8700:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8704:	f7fd f89e 	bl	b5844 <malloc>
   b8708:	2800      	cmp	r0, #0
   b870a:	d0f4      	beq.n	b86f6 <__register_exitproc+0x4e>
   b870c:	2300      	movs	r3, #0
   b870e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8712:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8716:	6863      	ldr	r3, [r4, #4]
   b8718:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b871c:	2201      	movs	r2, #1
   b871e:	409a      	lsls	r2, r3
   b8720:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8724:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8728:	4313      	orrs	r3, r2
   b872a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b872e:	2e02      	cmp	r6, #2
   b8730:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8734:	bf02      	ittt	eq
   b8736:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b873a:	4313      	orreq	r3, r2
   b873c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8740:	6863      	ldr	r3, [r4, #4]
   b8742:	f8d8 0000 	ldr.w	r0, [r8]
   b8746:	1c5a      	adds	r2, r3, #1
   b8748:	3302      	adds	r3, #2
   b874a:	6062      	str	r2, [r4, #4]
   b874c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8750:	f000 f80e 	bl	b8770 <__retarget_lock_release_recursive>
   b8754:	2000      	movs	r0, #0
   b8756:	e7c6      	b.n	b86e6 <__register_exitproc+0x3e>
   b8758:	2003e7e8 	.word	0x2003e7e8
   b875c:	2003e75c 	.word	0x2003e75c
   b8760:	00000000 	.word	0x00000000
   b8764:	000b5845 	.word	0x000b5845
   b8768:	2003e5c4 	.word	0x2003e5c4

000b876c <__retarget_lock_acquire_recursive>:
   b876c:	4770      	bx	lr

000b876e <__retarget_lock_release>:
   b876e:	4770      	bx	lr

000b8770 <__retarget_lock_release_recursive>:
   b8770:	4770      	bx	lr

000b8772 <link_code_end>:
	...

000b8774 <dynalib_user>:
   b8774:	49a9 000b 49e5 000b 4a0d 000b 4a11 000b     .I...I...J...J..
   b8784:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8794:	7620 7269 7574 6c61 6f00 006e 666f 0066      virtual.on.off.
   b87a4:	6162 7474 7265 5f79 6f76 746c 6761 0065     battery_voltage.
   b87b4:	656c 0064 6543 6c6c 6c75 7261 7220 6165     led.Cellular rea
   b87c4:	7964 6120 2074 7473 7261 7574 3a70 2520     dy at startup: %
   b87d4:	2066 7473 6572 676e 6874 6120 646e 2520     f strength and %
   b87e4:	2066 7571 6c61 7469 0079 6f6c 6163 496c     f quality.localI
   b87f4:	3a50 2520 0073 7543 7272 6e65 2074 6162     P: %s.Current ba
   b8804:	7474 7265 2079 6f76 746c 6761 3a65 2520     ttery voltage: %
   b8814:	0066 6f70 6577 2072 7273 2063 7473 3a72     f.power src str:
   b8824:	2520 0073 6f70 6577 2072 7273 2063 4e49      %s.power src IN
   b8834:	3a54 2520 0064 6f50 6574 746e 6169 206c     T: %d.Potential 
   b8844:	6f50 6577 2072 6f73 7275 6563 6320 6168     Power source cha
   b8854:	676e 3a65 2520 0073 6f43 666e 7269 656d     nge: %s.Confirme
   b8864:	2064 6f50 6577 2072 6f73 7275 6563 6320     d Power source c
   b8874:	6168 676e 3a65 2520 0073 4f50 4557 2052     hange: %s.POWER 
   b8884:	4f4c 5353 4120 2054 4d44 434f 7b00 7022     LOSS AT DMOC.{"p
   b8894:	776f 7265 6f53 7275 6563 3a22 2522 2273     owerSource":"%s"
   b88a4:	007d 6f70 6577 5f72 6863 6e61 6567 5000     }.power_change.P
   b88b4:	574f 5245 5220 5345 4f54 4552 2044 5441     OWER RESTORED AT
   b88c4:	4420 4f4d 0043 6f70 6577 5f72 6863 6e61      DMOC.power_chan
   b88d4:	6567 7320 0000 0000                         ge s....

000b88dc <_ZTVN5spark10LogHandlerE>:
	...
   b88ec:	4a2d 000b 4a55 000b                         -J..UJ..

000b88f4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b88fc:	4a85 000b 4ab9 000b 74ad 000b 7651 000b     .J...J...t..Qv..

000b890c <_ZTVN5spark13CellularClassE>:
	...
   b8914:	59f3 000b 59e9 000b 59df 000b 5995 000b     .Y...Y...Y...Y..
   b8924:	59d3 000b 59c7 000b 783d 000b 7845 000b     .Y...Y..=x..Ex..
   b8934:	59bb 000b 59b3 000b 59a9 000b 599f 000b     .Y...Y...Y...Y..
   b8944:	7875 000b                                   ux..

000b8948 <_ZTV14CellularSignal>:
	...
   b8950:	5a81 000b 5ae5 000b 5a83 000b 5af5 000b     .Z...Z...Z...Z..
   b8960:	5b29 000b 5b55 000b 5b89 000b 5aa9 000b     )[..U[...[...Z..
   b8970:	5a87 000b 5aa3 000b fffc ffff 0000 0000     .Z...Z..........
   b8980:	5add 000b                                   .Z..

000b8984 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b898c:	5bcd 000b 5bd3 000b 5c11 000b 5be1 000b     .[...[...\...[..
   b899c:	5bcf 000b                                   .[..

000b89a0 <_ZTVN5spark13EthernetClassE>:
	...
   b89a8:	61a7 000b 619d 000b 6193 000b 6189 000b     .a...a...a...a..
   b89b8:	617d 000b 6171 000b 783d 000b 7845 000b     }a..qa..=x..Ex..
   b89c8:	6165 000b 615d 000b 6153 000b 6149 000b     ea..]a..Sa..Ia..
   b89d8:	7875 000b                                   ux..

000b89dc <_ZTV7TwoWire>:
	...
   b89e4:	62c9 000b 6313 000b 62eb 000b 62cb 000b     .b...c...b...b..
   b89f4:	62f3 000b 62fb 000b 6303 000b 630b 000b     .b...b...c...c..

000b8a04 <_ZTV9IPAddress>:
	...
   b8a0c:	63f7 000b 63e7 000b 63e9 000b 7525 7500     .c...c...c..%u.u
   b8a1c:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   b8a2c:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   b8a3c:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   b8a4c:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   b8a5c:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   b8a6c:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   b8a7c:	006d 6e6c 6600 006e 0074 6f63 6564 6400     m.ln.fn.t.code.d
   b8a8c:	7465 6961 006c 0000                         etail...

000b8a94 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b8a9c:	68a5 000b 68cb 000b 6889 000b 6507 000b     .h...h...h...e..

000b8aac <_ZTVN5spark16StreamLogHandlerE>:
	...
   b8ab4:	6d55 000b 6d6d 000b 74ad 000b 7651 000b     Um..mm...t..Qv..

000b8ac4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b8acc:	6d81 000b 6d95 000b 7689 000b 6891 000b     .m...m...v...h..

000b8adc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b8ae4:	68a3 000b 68d9 000b 7411 000b 6893 000b     .h...h...t...h..

000b8af4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b8afc:	68a1 000b 68e7 000b 6cbd 000b 6909 000b     .h...h...l...i..

000b8b0c <_ZTVN5spark12NetworkClassE>:
	...
   b8b14:	77fd 000b 7807 000b 7811 000b 781b 000b     .w...x...x...x..
   b8b24:	7825 000b 7831 000b 783d 000b 7845 000b     %x..1x..=x..Ex..
   b8b34:	784d 000b 7859 000b 7861 000b 786b 000b     Mx..Yx..ax..kx..
   b8b44:	7875 000b 616e 006e 6e69 0066 766f 0066     ux..nan.inf.ovf.
   b8b54:	002e 0000                                   ....

000b8b58 <_ZTV21StringPrintableHelper>:
	...
   b8b60:	7bc5 000b 7bc7 000b 7da7 000b 7d79 000b     .{...{...}..y}..
   b8b70:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b8b80:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b8b8c <_ZTV11USARTSerial>:
	...
   b8b94:	7e91 000b 7efd 000b 7ed5 000b 7961 000b     .~...~...~..ay..
   b8ba4:	7ea5 000b 7ec1 000b 7eb3 000b 7ecf 000b     .~...~...~...~..
   b8bb4:	7e93 000b 7e97 000b                         .~...~..

000b8bbc <_ZTV9USBSerial>:
	...
   b8bc4:	7f4f 000b 7fb7 000b 7f8d 000b 7961 000b     O...........ay..
   b8bd4:	7f7f 000b 7f51 000b 7f61 000b 7fb1 000b     ....Q...a.......
   b8be4:	7f71 000b 7f49 000b                         q...I...

000b8bec <_ZSt7nothrow>:
   b8bec:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b8bfc:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b8c0c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8c1c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8c2c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b8c3c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8c4c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b8c5d <_ctype_>:
   b8c5d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b8c6d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b8c7d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b8c8d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b8c9d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b8cad:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b8cbd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b8ccd:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b8cdd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b8d5e <link_const_data_end>:
	...

000b8d60 <link_constructors_location>:
   b8d60:	000b5209 	.word	0x000b5209
   b8d64:	000b5985 	.word	0x000b5985
   b8d68:	000b5a51 	.word	0x000b5a51
   b8d6c:	000b61b1 	.word	0x000b61b1
   b8d70:	000b749d 	.word	0x000b749d
   b8d74:	000b794d 	.word	0x000b794d
   b8d78:	000b7ba5 	.word	0x000b7ba5
   b8d7c:	000b7e59 	.word	0x000b7e59
   b8d80:	000b7e7d 	.word	0x000b7e7d
