
/Users/christopherkosik/Documents/particle_deviceos/705-power-loss-detection/target/5.2.0/boron/705-power-loss-detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004868  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8884  000b8884  00008884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000078  2003e578  000b88a8  0000e578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000200  2003e5f0  2003e5f0  0001e5f0  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b8920  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b8924  000b8924  00018924  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b892a  000b892a  0001892a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b894e  000b894e  0001894e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001348a3  00000000  00000000  00018952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00015040  00000000  00000000  0014d1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003d299  00000000  00000000  00162235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003098  00000000  00000000  0019f4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000ae98  00000000  00000000  001a2566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003a548  00000000  00000000  001ad3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004403b  00000000  00000000  001e7946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013b168  00000000  00000000  0022b981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008ad4  00000000  00000000  00366aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <__aeabi_drsub>:
   b401c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4020:	e002      	b.n	b4028 <__adddf3>
   b4022:	bf00      	nop

000b4024 <__aeabi_dsub>:
   b4024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b4028 <__adddf3>:
   b4028:	b530      	push	{r4, r5, lr}
   b402a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b402e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4032:	ea94 0f05 	teq	r4, r5
   b4036:	bf08      	it	eq
   b4038:	ea90 0f02 	teqeq	r0, r2
   b403c:	bf1f      	itttt	ne
   b403e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4042:	ea55 0c02 	orrsne.w	ip, r5, r2
   b4046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b404e:	f000 80e2 	beq.w	b4216 <__adddf3+0x1ee>
   b4052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b4056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405a:	bfb8      	it	lt
   b405c:	426d      	neglt	r5, r5
   b405e:	dd0c      	ble.n	b407a <__adddf3+0x52>
   b4060:	442c      	add	r4, r5
   b4062:	ea80 0202 	eor.w	r2, r0, r2
   b4066:	ea81 0303 	eor.w	r3, r1, r3
   b406a:	ea82 0000 	eor.w	r0, r2, r0
   b406e:	ea83 0101 	eor.w	r1, r3, r1
   b4072:	ea80 0202 	eor.w	r2, r0, r2
   b4076:	ea81 0303 	eor.w	r3, r1, r3
   b407a:	2d36      	cmp	r5, #54	; 0x36
   b407c:	bf88      	it	hi
   b407e:	bd30      	pophi	{r4, r5, pc}
   b4080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b408c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4090:	d002      	beq.n	b4098 <__adddf3+0x70>
   b4092:	4240      	negs	r0, r0
   b4094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b409c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a4:	d002      	beq.n	b40ac <__adddf3+0x84>
   b40a6:	4252      	negs	r2, r2
   b40a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40ac:	ea94 0f05 	teq	r4, r5
   b40b0:	f000 80a7 	beq.w	b4202 <__adddf3+0x1da>
   b40b4:	f1a4 0401 	sub.w	r4, r4, #1
   b40b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b40bc:	db0d      	blt.n	b40da <__adddf3+0xb2>
   b40be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c2:	fa22 f205 	lsr.w	r2, r2, r5
   b40c6:	1880      	adds	r0, r0, r2
   b40c8:	f141 0100 	adc.w	r1, r1, #0
   b40cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d0:	1880      	adds	r0, r0, r2
   b40d2:	fa43 f305 	asr.w	r3, r3, r5
   b40d6:	4159      	adcs	r1, r3
   b40d8:	e00e      	b.n	b40f8 <__adddf3+0xd0>
   b40da:	f1a5 0520 	sub.w	r5, r5, #32
   b40de:	f10e 0e20 	add.w	lr, lr, #32
   b40e2:	2a01      	cmp	r2, #1
   b40e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40e8:	bf28      	it	cs
   b40ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40ee:	fa43 f305 	asr.w	r3, r3, r5
   b40f2:	18c0      	adds	r0, r0, r3
   b40f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b40fc:	d507      	bpl.n	b410e <__adddf3+0xe6>
   b40fe:	f04f 0e00 	mov.w	lr, #0
   b4102:	f1dc 0c00 	rsbs	ip, ip, #0
   b4106:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410a:	eb6e 0101 	sbc.w	r1, lr, r1
   b410e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4112:	d31b      	bcc.n	b414c <__adddf3+0x124>
   b4114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b4118:	d30c      	bcc.n	b4134 <__adddf3+0x10c>
   b411a:	0849      	lsrs	r1, r1, #1
   b411c:	ea5f 0030 	movs.w	r0, r0, rrx
   b4120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4124:	f104 0401 	add.w	r4, r4, #1
   b4128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b412c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4130:	f080 809a 	bcs.w	b4268 <__adddf3+0x240>
   b4134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4138:	bf08      	it	eq
   b413a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b413e:	f150 0000 	adcs.w	r0, r0, #0
   b4142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4146:	ea41 0105 	orr.w	r1, r1, r5
   b414a:	bd30      	pop	{r4, r5, pc}
   b414c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4150:	4140      	adcs	r0, r0
   b4152:	eb41 0101 	adc.w	r1, r1, r1
   b4156:	3c01      	subs	r4, #1
   b4158:	bf28      	it	cs
   b415a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b415e:	d2e9      	bcs.n	b4134 <__adddf3+0x10c>
   b4160:	f091 0f00 	teq	r1, #0
   b4164:	bf04      	itt	eq
   b4166:	4601      	moveq	r1, r0
   b4168:	2000      	moveq	r0, #0
   b416a:	fab1 f381 	clz	r3, r1
   b416e:	bf08      	it	eq
   b4170:	3320      	addeq	r3, #32
   b4172:	f1a3 030b 	sub.w	r3, r3, #11
   b4176:	f1b3 0220 	subs.w	r2, r3, #32
   b417a:	da0c      	bge.n	b4196 <__adddf3+0x16e>
   b417c:	320c      	adds	r2, #12
   b417e:	dd08      	ble.n	b4192 <__adddf3+0x16a>
   b4180:	f102 0c14 	add.w	ip, r2, #20
   b4184:	f1c2 020c 	rsb	r2, r2, #12
   b4188:	fa01 f00c 	lsl.w	r0, r1, ip
   b418c:	fa21 f102 	lsr.w	r1, r1, r2
   b4190:	e00c      	b.n	b41ac <__adddf3+0x184>
   b4192:	f102 0214 	add.w	r2, r2, #20
   b4196:	bfd8      	it	le
   b4198:	f1c2 0c20 	rsble	ip, r2, #32
   b419c:	fa01 f102 	lsl.w	r1, r1, r2
   b41a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a4:	bfdc      	itt	le
   b41a6:	ea41 010c 	orrle.w	r1, r1, ip
   b41aa:	4090      	lslle	r0, r2
   b41ac:	1ae4      	subs	r4, r4, r3
   b41ae:	bfa2      	ittt	ge
   b41b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b4:	4329      	orrge	r1, r5
   b41b6:	bd30      	popge	{r4, r5, pc}
   b41b8:	ea6f 0404 	mvn.w	r4, r4
   b41bc:	3c1f      	subs	r4, #31
   b41be:	da1c      	bge.n	b41fa <__adddf3+0x1d2>
   b41c0:	340c      	adds	r4, #12
   b41c2:	dc0e      	bgt.n	b41e2 <__adddf3+0x1ba>
   b41c4:	f104 0414 	add.w	r4, r4, #20
   b41c8:	f1c4 0220 	rsb	r2, r4, #32
   b41cc:	fa20 f004 	lsr.w	r0, r0, r4
   b41d0:	fa01 f302 	lsl.w	r3, r1, r2
   b41d4:	ea40 0003 	orr.w	r0, r0, r3
   b41d8:	fa21 f304 	lsr.w	r3, r1, r4
   b41dc:	ea45 0103 	orr.w	r1, r5, r3
   b41e0:	bd30      	pop	{r4, r5, pc}
   b41e2:	f1c4 040c 	rsb	r4, r4, #12
   b41e6:	f1c4 0220 	rsb	r2, r4, #32
   b41ea:	fa20 f002 	lsr.w	r0, r0, r2
   b41ee:	fa01 f304 	lsl.w	r3, r1, r4
   b41f2:	ea40 0003 	orr.w	r0, r0, r3
   b41f6:	4629      	mov	r1, r5
   b41f8:	bd30      	pop	{r4, r5, pc}
   b41fa:	fa21 f004 	lsr.w	r0, r1, r4
   b41fe:	4629      	mov	r1, r5
   b4200:	bd30      	pop	{r4, r5, pc}
   b4202:	f094 0f00 	teq	r4, #0
   b4206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420a:	bf06      	itte	eq
   b420c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4210:	3401      	addeq	r4, #1
   b4212:	3d01      	subne	r5, #1
   b4214:	e74e      	b.n	b40b4 <__adddf3+0x8c>
   b4216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421a:	bf18      	it	ne
   b421c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4220:	d029      	beq.n	b4276 <__adddf3+0x24e>
   b4222:	ea94 0f05 	teq	r4, r5
   b4226:	bf08      	it	eq
   b4228:	ea90 0f02 	teqeq	r0, r2
   b422c:	d005      	beq.n	b423a <__adddf3+0x212>
   b422e:	ea54 0c00 	orrs.w	ip, r4, r0
   b4232:	bf04      	itt	eq
   b4234:	4619      	moveq	r1, r3
   b4236:	4610      	moveq	r0, r2
   b4238:	bd30      	pop	{r4, r5, pc}
   b423a:	ea91 0f03 	teq	r1, r3
   b423e:	bf1e      	ittt	ne
   b4240:	2100      	movne	r1, #0
   b4242:	2000      	movne	r0, #0
   b4244:	bd30      	popne	{r4, r5, pc}
   b4246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424a:	d105      	bne.n	b4258 <__adddf3+0x230>
   b424c:	0040      	lsls	r0, r0, #1
   b424e:	4149      	adcs	r1, r1
   b4250:	bf28      	it	cs
   b4252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b4256:	bd30      	pop	{r4, r5, pc}
   b4258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b425c:	bf3c      	itt	cc
   b425e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4262:	bd30      	popcc	{r4, r5, pc}
   b4264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4270:	f04f 0000 	mov.w	r0, #0
   b4274:	bd30      	pop	{r4, r5, pc}
   b4276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427a:	bf1a      	itte	ne
   b427c:	4619      	movne	r1, r3
   b427e:	4610      	movne	r0, r2
   b4280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4284:	bf1c      	itt	ne
   b4286:	460b      	movne	r3, r1
   b4288:	4602      	movne	r2, r0
   b428a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b428e:	bf06      	itte	eq
   b4290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4294:	ea91 0f03 	teqeq	r1, r3
   b4298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b429c:	bd30      	pop	{r4, r5, pc}
   b429e:	bf00      	nop

000b42a0 <__aeabi_ui2d>:
   b42a0:	f090 0f00 	teq	r0, #0
   b42a4:	bf04      	itt	eq
   b42a6:	2100      	moveq	r1, #0
   b42a8:	4770      	bxeq	lr
   b42aa:	b530      	push	{r4, r5, lr}
   b42ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b4:	f04f 0500 	mov.w	r5, #0
   b42b8:	f04f 0100 	mov.w	r1, #0
   b42bc:	e750      	b.n	b4160 <__adddf3+0x138>
   b42be:	bf00      	nop

000b42c0 <__aeabi_i2d>:
   b42c0:	f090 0f00 	teq	r0, #0
   b42c4:	bf04      	itt	eq
   b42c6:	2100      	moveq	r1, #0
   b42c8:	4770      	bxeq	lr
   b42ca:	b530      	push	{r4, r5, lr}
   b42cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42d8:	bf48      	it	mi
   b42da:	4240      	negmi	r0, r0
   b42dc:	f04f 0100 	mov.w	r1, #0
   b42e0:	e73e      	b.n	b4160 <__adddf3+0x138>
   b42e2:	bf00      	nop

000b42e4 <__aeabi_f2d>:
   b42e4:	0042      	lsls	r2, r0, #1
   b42e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b42ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f2:	bf1f      	itttt	ne
   b42f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b42fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4300:	4770      	bxne	lr
   b4302:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b4306:	bf08      	it	eq
   b4308:	4770      	bxeq	lr
   b430a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b430e:	bf04      	itt	eq
   b4310:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4314:	4770      	bxeq	lr
   b4316:	b530      	push	{r4, r5, lr}
   b4318:	f44f 7460 	mov.w	r4, #896	; 0x380
   b431c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4324:	e71c      	b.n	b4160 <__adddf3+0x138>
   b4326:	bf00      	nop

000b4328 <__aeabi_ul2d>:
   b4328:	ea50 0201 	orrs.w	r2, r0, r1
   b432c:	bf08      	it	eq
   b432e:	4770      	bxeq	lr
   b4330:	b530      	push	{r4, r5, lr}
   b4332:	f04f 0500 	mov.w	r5, #0
   b4336:	e00a      	b.n	b434e <__aeabi_l2d+0x16>

000b4338 <__aeabi_l2d>:
   b4338:	ea50 0201 	orrs.w	r2, r0, r1
   b433c:	bf08      	it	eq
   b433e:	4770      	bxeq	lr
   b4340:	b530      	push	{r4, r5, lr}
   b4342:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b4346:	d502      	bpl.n	b434e <__aeabi_l2d+0x16>
   b4348:	4240      	negs	r0, r0
   b434a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b434e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4352:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b4356:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435a:	f43f aed8 	beq.w	b410e <__adddf3+0xe6>
   b435e:	f04f 0203 	mov.w	r2, #3
   b4362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4366:	bf18      	it	ne
   b4368:	3203      	addne	r2, #3
   b436a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436e:	bf18      	it	ne
   b4370:	3203      	addne	r2, #3
   b4372:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b4376:	f1c2 0320 	rsb	r3, r2, #32
   b437a:	fa00 fc03 	lsl.w	ip, r0, r3
   b437e:	fa20 f002 	lsr.w	r0, r0, r2
   b4382:	fa01 fe03 	lsl.w	lr, r1, r3
   b4386:	ea40 000e 	orr.w	r0, r0, lr
   b438a:	fa21 f102 	lsr.w	r1, r1, r2
   b438e:	4414      	add	r4, r2
   b4390:	e6bd      	b.n	b410e <__adddf3+0xe6>
   b4392:	bf00      	nop

000b4394 <__aeabi_dmul>:
   b4394:	b570      	push	{r4, r5, r6, lr}
   b4396:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b439e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a2:	bf1d      	ittte	ne
   b43a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43a8:	ea94 0f0c 	teqne	r4, ip
   b43ac:	ea95 0f0c 	teqne	r5, ip
   b43b0:	f000 f8de 	bleq	b4570 <__aeabi_dmul+0x1dc>
   b43b4:	442c      	add	r4, r5
   b43b6:	ea81 0603 	eor.w	r6, r1, r3
   b43ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43c6:	bf18      	it	ne
   b43c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d4:	d038      	beq.n	b4448 <__aeabi_dmul+0xb4>
   b43d6:	fba0 ce02 	umull	ip, lr, r0, r2
   b43da:	f04f 0500 	mov.w	r5, #0
   b43de:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ea:	f04f 0600 	mov.w	r6, #0
   b43ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f2:	f09c 0f00 	teq	ip, #0
   b43f6:	bf18      	it	ne
   b43f8:	f04e 0e01 	orrne.w	lr, lr, #1
   b43fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4400:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4404:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b4408:	d204      	bcs.n	b4414 <__aeabi_dmul+0x80>
   b440a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b440e:	416d      	adcs	r5, r5
   b4410:	eb46 0606 	adc.w	r6, r6, r6
   b4414:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b4418:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b441c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4420:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4424:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b4428:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b442c:	bf88      	it	hi
   b442e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4432:	d81e      	bhi.n	b4472 <__aeabi_dmul+0xde>
   b4434:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b4438:	bf08      	it	eq
   b443a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b443e:	f150 0000 	adcs.w	r0, r0, #0
   b4442:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4446:	bd70      	pop	{r4, r5, r6, pc}
   b4448:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b444c:	ea46 0101 	orr.w	r1, r6, r1
   b4450:	ea40 0002 	orr.w	r0, r0, r2
   b4454:	ea81 0103 	eor.w	r1, r1, r3
   b4458:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b445c:	bfc2      	ittt	gt
   b445e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4462:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4466:	bd70      	popgt	{r4, r5, r6, pc}
   b4468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b446c:	f04f 0e00 	mov.w	lr, #0
   b4470:	3c01      	subs	r4, #1
   b4472:	f300 80ab 	bgt.w	b45cc <__aeabi_dmul+0x238>
   b4476:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447a:	bfde      	ittt	le
   b447c:	2000      	movle	r0, #0
   b447e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4482:	bd70      	pople	{r4, r5, r6, pc}
   b4484:	f1c4 0400 	rsb	r4, r4, #0
   b4488:	3c20      	subs	r4, #32
   b448a:	da35      	bge.n	b44f8 <__aeabi_dmul+0x164>
   b448c:	340c      	adds	r4, #12
   b448e:	dc1b      	bgt.n	b44c8 <__aeabi_dmul+0x134>
   b4490:	f104 0414 	add.w	r4, r4, #20
   b4494:	f1c4 0520 	rsb	r5, r4, #32
   b4498:	fa00 f305 	lsl.w	r3, r0, r5
   b449c:	fa20 f004 	lsr.w	r0, r0, r4
   b44a0:	fa01 f205 	lsl.w	r2, r1, r5
   b44a4:	ea40 0002 	orr.w	r0, r0, r2
   b44a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b4:	fa21 f604 	lsr.w	r6, r1, r4
   b44b8:	eb42 0106 	adc.w	r1, r2, r6
   b44bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c0:	bf08      	it	eq
   b44c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44c6:	bd70      	pop	{r4, r5, r6, pc}
   b44c8:	f1c4 040c 	rsb	r4, r4, #12
   b44cc:	f1c4 0520 	rsb	r5, r4, #32
   b44d0:	fa00 f304 	lsl.w	r3, r0, r4
   b44d4:	fa20 f005 	lsr.w	r0, r0, r5
   b44d8:	fa01 f204 	lsl.w	r2, r1, r4
   b44dc:	ea40 0002 	orr.w	r0, r0, r2
   b44e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44e8:	f141 0100 	adc.w	r1, r1, #0
   b44ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f0:	bf08      	it	eq
   b44f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44f6:	bd70      	pop	{r4, r5, r6, pc}
   b44f8:	f1c4 0520 	rsb	r5, r4, #32
   b44fc:	fa00 f205 	lsl.w	r2, r0, r5
   b4500:	ea4e 0e02 	orr.w	lr, lr, r2
   b4504:	fa20 f304 	lsr.w	r3, r0, r4
   b4508:	fa01 f205 	lsl.w	r2, r1, r5
   b450c:	ea43 0302 	orr.w	r3, r3, r2
   b4510:	fa21 f004 	lsr.w	r0, r1, r4
   b4514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4518:	fa21 f204 	lsr.w	r2, r1, r4
   b451c:	ea20 0002 	bic.w	r0, r0, r2
   b4520:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4524:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b4528:	bf08      	it	eq
   b452a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b452e:	bd70      	pop	{r4, r5, r6, pc}
   b4530:	f094 0f00 	teq	r4, #0
   b4534:	d10f      	bne.n	b4556 <__aeabi_dmul+0x1c2>
   b4536:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453a:	0040      	lsls	r0, r0, #1
   b453c:	eb41 0101 	adc.w	r1, r1, r1
   b4540:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4544:	bf08      	it	eq
   b4546:	3c01      	subeq	r4, #1
   b4548:	d0f7      	beq.n	b453a <__aeabi_dmul+0x1a6>
   b454a:	ea41 0106 	orr.w	r1, r1, r6
   b454e:	f095 0f00 	teq	r5, #0
   b4552:	bf18      	it	ne
   b4554:	4770      	bxne	lr
   b4556:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455a:	0052      	lsls	r2, r2, #1
   b455c:	eb43 0303 	adc.w	r3, r3, r3
   b4560:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4564:	bf08      	it	eq
   b4566:	3d01      	subeq	r5, #1
   b4568:	d0f7      	beq.n	b455a <__aeabi_dmul+0x1c6>
   b456a:	ea43 0306 	orr.w	r3, r3, r6
   b456e:	4770      	bx	lr
   b4570:	ea94 0f0c 	teq	r4, ip
   b4574:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b4578:	bf18      	it	ne
   b457a:	ea95 0f0c 	teqne	r5, ip
   b457e:	d00c      	beq.n	b459a <__aeabi_dmul+0x206>
   b4580:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4584:	bf18      	it	ne
   b4586:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458a:	d1d1      	bne.n	b4530 <__aeabi_dmul+0x19c>
   b458c:	ea81 0103 	eor.w	r1, r1, r3
   b4590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4594:	f04f 0000 	mov.w	r0, #0
   b4598:	bd70      	pop	{r4, r5, r6, pc}
   b459a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b459e:	bf06      	itte	eq
   b45a0:	4610      	moveq	r0, r2
   b45a2:	4619      	moveq	r1, r3
   b45a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45a8:	d019      	beq.n	b45de <__aeabi_dmul+0x24a>
   b45aa:	ea94 0f0c 	teq	r4, ip
   b45ae:	d102      	bne.n	b45b6 <__aeabi_dmul+0x222>
   b45b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b4:	d113      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45b6:	ea95 0f0c 	teq	r5, ip
   b45ba:	d105      	bne.n	b45c8 <__aeabi_dmul+0x234>
   b45bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c0:	bf1c      	itt	ne
   b45c2:	4610      	movne	r0, r2
   b45c4:	4619      	movne	r1, r3
   b45c6:	d10a      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45c8:	ea81 0103 	eor.w	r1, r1, r3
   b45cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45d8:	f04f 0000 	mov.w	r0, #0
   b45dc:	bd70      	pop	{r4, r5, r6, pc}
   b45de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45e6:	bd70      	pop	{r4, r5, r6, pc}

000b45e8 <__aeabi_ddiv>:
   b45e8:	b570      	push	{r4, r5, r6, lr}
   b45ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45f6:	bf1d      	ittte	ne
   b45f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b45fc:	ea94 0f0c 	teqne	r4, ip
   b4600:	ea95 0f0c 	teqne	r5, ip
   b4604:	f000 f8a7 	bleq	b4756 <__aeabi_ddiv+0x16e>
   b4608:	eba4 0405 	sub.w	r4, r4, r5
   b460c:	ea81 0e03 	eor.w	lr, r1, r3
   b4610:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4614:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4618:	f000 8088 	beq.w	b472c <__aeabi_ddiv+0x144>
   b461c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4620:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4624:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b4628:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b462c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4630:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4634:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b4638:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b463c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4640:	429d      	cmp	r5, r3
   b4642:	bf08      	it	eq
   b4644:	4296      	cmpeq	r6, r2
   b4646:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b464e:	d202      	bcs.n	b4656 <__aeabi_ddiv+0x6e>
   b4650:	085b      	lsrs	r3, r3, #1
   b4652:	ea4f 0232 	mov.w	r2, r2, rrx
   b4656:	1ab6      	subs	r6, r6, r2
   b4658:	eb65 0503 	sbc.w	r5, r5, r3
   b465c:	085b      	lsrs	r3, r3, #1
   b465e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4662:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b4666:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466a:	ebb6 0e02 	subs.w	lr, r6, r2
   b466e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4672:	bf22      	ittt	cs
   b4674:	1ab6      	subcs	r6, r6, r2
   b4676:	4675      	movcs	r5, lr
   b4678:	ea40 000c 	orrcs.w	r0, r0, ip
   b467c:	085b      	lsrs	r3, r3, #1
   b467e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4682:	ebb6 0e02 	subs.w	lr, r6, r2
   b4686:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468a:	bf22      	ittt	cs
   b468c:	1ab6      	subcs	r6, r6, r2
   b468e:	4675      	movcs	r5, lr
   b4690:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4694:	085b      	lsrs	r3, r3, #1
   b4696:	ea4f 0232 	mov.w	r2, r2, rrx
   b469a:	ebb6 0e02 	subs.w	lr, r6, r2
   b469e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a2:	bf22      	ittt	cs
   b46a4:	1ab6      	subcs	r6, r6, r2
   b46a6:	4675      	movcs	r5, lr
   b46a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46ac:	085b      	lsrs	r3, r3, #1
   b46ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b46b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46ba:	bf22      	ittt	cs
   b46bc:	1ab6      	subcs	r6, r6, r2
   b46be:	4675      	movcs	r5, lr
   b46c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c4:	ea55 0e06 	orrs.w	lr, r5, r6
   b46c8:	d018      	beq.n	b46fc <__aeabi_ddiv+0x114>
   b46ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46e6:	d1c0      	bne.n	b466a <__aeabi_ddiv+0x82>
   b46e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46ec:	d10b      	bne.n	b4706 <__aeabi_ddiv+0x11e>
   b46ee:	ea41 0100 	orr.w	r1, r1, r0
   b46f2:	f04f 0000 	mov.w	r0, #0
   b46f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fa:	e7b6      	b.n	b466a <__aeabi_ddiv+0x82>
   b46fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4700:	bf04      	itt	eq
   b4702:	4301      	orreq	r1, r0
   b4704:	2000      	moveq	r0, #0
   b4706:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470a:	bf88      	it	hi
   b470c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4710:	f63f aeaf 	bhi.w	b4472 <__aeabi_dmul+0xde>
   b4714:	ebb5 0c03 	subs.w	ip, r5, r3
   b4718:	bf04      	itt	eq
   b471a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b471e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4722:	f150 0000 	adcs.w	r0, r0, #0
   b4726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472a:	bd70      	pop	{r4, r5, r6, pc}
   b472c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4730:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4734:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b4738:	bfc2      	ittt	gt
   b473a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b473e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4742:	bd70      	popgt	{r4, r5, r6, pc}
   b4744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4748:	f04f 0e00 	mov.w	lr, #0
   b474c:	3c01      	subs	r4, #1
   b474e:	e690      	b.n	b4472 <__aeabi_dmul+0xde>
   b4750:	ea45 0e06 	orr.w	lr, r5, r6
   b4754:	e68d      	b.n	b4472 <__aeabi_dmul+0xde>
   b4756:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475a:	ea94 0f0c 	teq	r4, ip
   b475e:	bf08      	it	eq
   b4760:	ea95 0f0c 	teqeq	r5, ip
   b4764:	f43f af3b 	beq.w	b45de <__aeabi_dmul+0x24a>
   b4768:	ea94 0f0c 	teq	r4, ip
   b476c:	d10a      	bne.n	b4784 <__aeabi_ddiv+0x19c>
   b476e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4772:	f47f af34 	bne.w	b45de <__aeabi_dmul+0x24a>
   b4776:	ea95 0f0c 	teq	r5, ip
   b477a:	f47f af25 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b477e:	4610      	mov	r0, r2
   b4780:	4619      	mov	r1, r3
   b4782:	e72c      	b.n	b45de <__aeabi_dmul+0x24a>
   b4784:	ea95 0f0c 	teq	r5, ip
   b4788:	d106      	bne.n	b4798 <__aeabi_ddiv+0x1b0>
   b478a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b478e:	f43f aefd 	beq.w	b458c <__aeabi_dmul+0x1f8>
   b4792:	4610      	mov	r0, r2
   b4794:	4619      	mov	r1, r3
   b4796:	e722      	b.n	b45de <__aeabi_dmul+0x24a>
   b4798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b479c:	bf18      	it	ne
   b479e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a2:	f47f aec5 	bne.w	b4530 <__aeabi_dmul+0x19c>
   b47a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47aa:	f47f af0d 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b47ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b2:	f47f aeeb 	bne.w	b458c <__aeabi_dmul+0x1f8>
   b47b6:	e712      	b.n	b45de <__aeabi_dmul+0x24a>

000b47b8 <__gedf2>:
   b47b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47bc:	e006      	b.n	b47cc <__cmpdf2+0x4>
   b47be:	bf00      	nop

000b47c0 <__ledf2>:
   b47c0:	f04f 0c01 	mov.w	ip, #1
   b47c4:	e002      	b.n	b47cc <__cmpdf2+0x4>
   b47c6:	bf00      	nop

000b47c8 <__cmpdf2>:
   b47c8:	f04f 0c01 	mov.w	ip, #1
   b47cc:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47dc:	bf18      	it	ne
   b47de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e2:	d01b      	beq.n	b481c <__cmpdf2+0x54>
   b47e4:	b001      	add	sp, #4
   b47e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ea:	bf0c      	ite	eq
   b47ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f0:	ea91 0f03 	teqne	r1, r3
   b47f4:	bf02      	ittt	eq
   b47f6:	ea90 0f02 	teqeq	r0, r2
   b47fa:	2000      	moveq	r0, #0
   b47fc:	4770      	bxeq	lr
   b47fe:	f110 0f00 	cmn.w	r0, #0
   b4802:	ea91 0f03 	teq	r1, r3
   b4806:	bf58      	it	pl
   b4808:	4299      	cmppl	r1, r3
   b480a:	bf08      	it	eq
   b480c:	4290      	cmpeq	r0, r2
   b480e:	bf2c      	ite	cs
   b4810:	17d8      	asrcs	r0, r3, #31
   b4812:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b4816:	f040 0001 	orr.w	r0, r0, #1
   b481a:	4770      	bx	lr
   b481c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4824:	d102      	bne.n	b482c <__cmpdf2+0x64>
   b4826:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482a:	d107      	bne.n	b483c <__cmpdf2+0x74>
   b482c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4834:	d1d6      	bne.n	b47e4 <__cmpdf2+0x1c>
   b4836:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483a:	d0d3      	beq.n	b47e4 <__cmpdf2+0x1c>
   b483c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4840:	4770      	bx	lr
   b4842:	bf00      	nop

000b4844 <__aeabi_cdrcmple>:
   b4844:	4684      	mov	ip, r0
   b4846:	4610      	mov	r0, r2
   b4848:	4662      	mov	r2, ip
   b484a:	468c      	mov	ip, r1
   b484c:	4619      	mov	r1, r3
   b484e:	4663      	mov	r3, ip
   b4850:	e000      	b.n	b4854 <__aeabi_cdcmpeq>
   b4852:	bf00      	nop

000b4854 <__aeabi_cdcmpeq>:
   b4854:	b501      	push	{r0, lr}
   b4856:	f7ff ffb7 	bl	b47c8 <__cmpdf2>
   b485a:	2800      	cmp	r0, #0
   b485c:	bf48      	it	mi
   b485e:	f110 0f00 	cmnmi.w	r0, #0
   b4862:	bd01      	pop	{r0, pc}

000b4864 <__aeabi_dcmpeq>:
   b4864:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4868:	f7ff fff4 	bl	b4854 <__aeabi_cdcmpeq>
   b486c:	bf0c      	ite	eq
   b486e:	2001      	moveq	r0, #1
   b4870:	2000      	movne	r0, #0
   b4872:	f85d fb08 	ldr.w	pc, [sp], #8
   b4876:	bf00      	nop

000b4878 <__aeabi_dcmplt>:
   b4878:	f84d ed08 	str.w	lr, [sp, #-8]!
   b487c:	f7ff ffea 	bl	b4854 <__aeabi_cdcmpeq>
   b4880:	bf34      	ite	cc
   b4882:	2001      	movcc	r0, #1
   b4884:	2000      	movcs	r0, #0
   b4886:	f85d fb08 	ldr.w	pc, [sp], #8
   b488a:	bf00      	nop

000b488c <__aeabi_dcmple>:
   b488c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4890:	f7ff ffe0 	bl	b4854 <__aeabi_cdcmpeq>
   b4894:	bf94      	ite	ls
   b4896:	2001      	movls	r0, #1
   b4898:	2000      	movhi	r0, #0
   b489a:	f85d fb08 	ldr.w	pc, [sp], #8
   b489e:	bf00      	nop

000b48a0 <__aeabi_dcmpge>:
   b48a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a4:	f7ff ffce 	bl	b4844 <__aeabi_cdrcmple>
   b48a8:	bf94      	ite	ls
   b48aa:	2001      	movls	r0, #1
   b48ac:	2000      	movhi	r0, #0
   b48ae:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b2:	bf00      	nop

000b48b4 <__aeabi_dcmpgt>:
   b48b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48b8:	f7ff ffc4 	bl	b4844 <__aeabi_cdrcmple>
   b48bc:	bf34      	ite	cc
   b48be:	2001      	movcc	r0, #1
   b48c0:	2000      	movcs	r0, #0
   b48c2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48c6:	bf00      	nop

000b48c8 <__aeabi_dcmpun>:
   b48c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d0:	d102      	bne.n	b48d8 <__aeabi_dcmpun+0x10>
   b48d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48d6:	d10a      	bne.n	b48ee <__aeabi_dcmpun+0x26>
   b48d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e0:	d102      	bne.n	b48e8 <__aeabi_dcmpun+0x20>
   b48e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48e6:	d102      	bne.n	b48ee <__aeabi_dcmpun+0x26>
   b48e8:	f04f 0000 	mov.w	r0, #0
   b48ec:	4770      	bx	lr
   b48ee:	f04f 0001 	mov.w	r0, #1
   b48f2:	4770      	bx	lr

000b48f4 <__aeabi_d2iz>:
   b48f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48fc:	d215      	bcs.n	b492a <__aeabi_d2iz+0x36>
   b48fe:	d511      	bpl.n	b4924 <__aeabi_d2iz+0x30>
   b4900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4908:	d912      	bls.n	b4930 <__aeabi_d2iz+0x3c>
   b490a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b490e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b4916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491a:	fa23 f002 	lsr.w	r0, r3, r2
   b491e:	bf18      	it	ne
   b4920:	4240      	negne	r0, r0
   b4922:	4770      	bx	lr
   b4924:	f04f 0000 	mov.w	r0, #0
   b4928:	4770      	bx	lr
   b492a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b492e:	d105      	bne.n	b493c <__aeabi_d2iz+0x48>
   b4930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4934:	bf08      	it	eq
   b4936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493a:	4770      	bx	lr
   b493c:	f04f 0000 	mov.w	r0, #0
   b4940:	4770      	bx	lr
   b4942:	bf00      	nop

000b4944 <__aeabi_d2uiz>:
   b4944:	004a      	lsls	r2, r1, #1
   b4946:	d211      	bcs.n	b496c <__aeabi_d2uiz+0x28>
   b4948:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b494c:	d211      	bcs.n	b4972 <__aeabi_d2uiz+0x2e>
   b494e:	d50d      	bpl.n	b496c <__aeabi_d2uiz+0x28>
   b4950:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4958:	d40e      	bmi.n	b4978 <__aeabi_d2uiz+0x34>
   b495a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b495e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b4966:	fa23 f002 	lsr.w	r0, r3, r2
   b496a:	4770      	bx	lr
   b496c:	f04f 0000 	mov.w	r0, #0
   b4970:	4770      	bx	lr
   b4972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4976:	d102      	bne.n	b497e <__aeabi_d2uiz+0x3a>
   b4978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b497c:	4770      	bx	lr
   b497e:	f04f 0000 	mov.w	r0, #0
   b4982:	4770      	bx	lr

000b4984 <strcmp>:
   b4984:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4988:	f811 3b01 	ldrb.w	r3, [r1], #1
   b498c:	2a01      	cmp	r2, #1
   b498e:	bf28      	it	cs
   b4990:	429a      	cmpcs	r2, r3
   b4992:	d0f7      	beq.n	b4984 <strcmp>
   b4994:	1ad0      	subs	r0, r2, r3
   b4996:	4770      	bx	lr

000b4998 <strlen>:
   b4998:	4603      	mov	r3, r0
   b499a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b499e:	2a00      	cmp	r2, #0
   b49a0:	d1fb      	bne.n	b499a <strlen+0x2>
   b49a2:	1a18      	subs	r0, r3, r0
   b49a4:	3801      	subs	r0, #1
   b49a6:	4770      	bx	lr

000b49a8 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49a8:	4809      	ldr	r0, [pc, #36]	; (b49d0 <module_user_pre_init+0x28>)
   b49aa:	490a      	ldr	r1, [pc, #40]	; (b49d4 <module_user_pre_init+0x2c>)
   b49ac:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b49ae:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49b0:	d005      	beq.n	b49be <module_user_pre_init+0x16>
   b49b2:	4a09      	ldr	r2, [pc, #36]	; (b49d8 <module_user_pre_init+0x30>)
   b49b4:	4282      	cmp	r2, r0
   b49b6:	d002      	beq.n	b49be <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b49b8:	1a12      	subs	r2, r2, r0
   b49ba:	f003 fb03 	bl	b7fc4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b49be:	4807      	ldr	r0, [pc, #28]	; (b49dc <module_user_pre_init+0x34>)
   b49c0:	4a07      	ldr	r2, [pc, #28]	; (b49e0 <module_user_pre_init+0x38>)
   b49c2:	2100      	movs	r1, #0
   b49c4:	1a12      	subs	r2, r2, r0
   b49c6:	f003 fb25 	bl	b8014 <memset>
    return &link_global_data_start;
}
   b49ca:	4801      	ldr	r0, [pc, #4]	; (b49d0 <module_user_pre_init+0x28>)
   b49cc:	bd08      	pop	{r3, pc}
   b49ce:	bf00      	nop
   b49d0:	2003e578 	.word	0x2003e578
   b49d4:	000b88a8 	.word	0x000b88a8
   b49d8:	2003e5f0 	.word	0x2003e5f0
   b49dc:	2003e5f0 	.word	0x2003e5f0
   b49e0:	2003e7f0 	.word	0x2003e7f0

000b49e4 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b49e4:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49e6:	4e07      	ldr	r6, [pc, #28]	; (b4a04 <module_user_init+0x20>)
   b49e8:	4c07      	ldr	r4, [pc, #28]	; (b4a08 <module_user_init+0x24>)
    module_user_init_hook();
   b49ea:	f003 f97d 	bl	b7ce8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49ee:	1ba4      	subs	r4, r4, r6
   b49f0:	08a4      	lsrs	r4, r4, #2
   b49f2:	2500      	movs	r5, #0
   b49f4:	42ac      	cmp	r4, r5
   b49f6:	d100      	bne.n	b49fa <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b49f8:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b49fa:	f856 3b04 	ldr.w	r3, [r6], #4
   b49fe:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a00:	3501      	adds	r5, #1
   b4a02:	e7f7      	b.n	b49f4 <module_user_init+0x10>
   b4a04:	000b8860 	.word	0x000b8860
   b4a08:	000b8884 	.word	0x000b8884

000b4a0c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4a0c:	f000 b876 	b.w	b4afc <setup>

000b4a10 <module_user_loop>:
}

void module_user_loop() {
   b4a10:	b508      	push	{r3, lr}
    loop();
   b4a12:	f000 f937 	bl	b4c84 <loop>
    _post_loop();
}
   b4a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4a1a:	f003 b91d 	b.w	b7c58 <_post_loop>

000b4a1e <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4a1e:	f000 bd29 	b.w	b5474 <malloc>

000b4a22 <_Znaj>:
   b4a22:	f000 bd27 	b.w	b5474 <malloc>

000b4a26 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4a26:	f000 bd2d 	b.w	b5484 <free>
	...

000b4a2c <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4a2c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4a2e:	4a03      	ldr	r2, [pc, #12]	; (b4a3c <__cxa_pure_virtual+0x10>)
   b4a30:	4903      	ldr	r1, [pc, #12]	; (b4a40 <__cxa_pure_virtual+0x14>)
   b4a32:	200c      	movs	r0, #12
   b4a34:	f000 fc20 	bl	b5278 <panic_>
  while (1);
   b4a38:	e7fe      	b.n	b4a38 <__cxa_pure_virtual+0xc>
   b4a3a:	bf00      	nop
   b4a3c:	000b4ff9 	.word	0x000b4ff9
   b4a40:	000b8344 	.word	0x000b8344

000b4a44 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4a44:	7800      	ldrb	r0, [r0, #0]
   b4a46:	fab0 f080 	clz	r0, r0
   b4a4a:	0940      	lsrs	r0, r0, #5
   b4a4c:	4770      	bx	lr

000b4a4e <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4a4e:	2301      	movs	r3, #1
   b4a50:	7003      	strb	r3, [r0, #0]
   b4a52:	4770      	bx	lr

000b4a54 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b4a54:	4770      	bx	lr
	...

000b4a58 <_Z9ledToggle6String>:
}

/*
  Example "Particle" cloud event handler function. We use the standard connotation for return value success or failures.
*/
int ledToggle(String command) {
   b4a58:	b510      	push	{r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4a5a:	4908      	ldr	r1, [pc, #32]	; (b4a7c <_Z9ledToggle6String+0x24>)
   b4a5c:	4604      	mov	r4, r0
   b4a5e:	f002 ffad 	bl	b79bc <_ZNK6String6equalsEPKc>
    Then, the function returns a value to us to let us know what happened.
    In this case, it will return 1 for the LEDs turning on, 0 for the LEDs turning off,
    and -1 if we received a totally bogus command that didn't do anything to the LEDs.
    */

    if (command=="on") {
   b4a62:	b940      	cbnz	r0, b4a76 <_Z9ledToggle6String+0x1e>
   b4a64:	4906      	ldr	r1, [pc, #24]	; (b4a80 <_Z9ledToggle6String+0x28>)
   b4a66:	4620      	mov	r0, r4
   b4a68:	f002 ffa8 	bl	b79bc <_ZNK6String6equalsEPKc>
        //digitalWrite(led1,HIGH);
        //digitalWrite(led2,HIGH);
        return 1;
    }
    else if (command=="off") {
   b4a6c:	fab0 f080 	clz	r0, r0
   b4a70:	0940      	lsrs	r0, r0, #5
   b4a72:	4240      	negs	r0, r0
        return 0;
    }
    else {
        return -1;
    }
   b4a74:	bd10      	pop	{r4, pc}
        return 1;
   b4a76:	2001      	movs	r0, #1
   b4a78:	e7fc      	b.n	b4a74 <_Z9ledToggle6String+0x1c>
   b4a7a:	bf00      	nop
   b4a7c:	000b8359 	.word	0x000b8359
   b4a80:	000b835c 	.word	0x000b835c

000b4a84 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4a84:	4b0a      	ldr	r3, [pc, #40]	; (b4ab0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4a86:	b510      	push	{r4, lr}
   b4a88:	4604      	mov	r4, r0
   b4a8a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4a8c:	f001 fea2 	bl	b67d4 <_ZN5spark10LogManager8instanceEv>
   b4a90:	4621      	mov	r1, r4
   b4a92:	f002 f8da 	bl	b6c4a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4a96:	f003 f897 	bl	b7bc8 <_Z16_fetch_usbserialv>
   b4a9a:	f003 f889 	bl	b7bb0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4a9e:	4620      	mov	r0, r4
   b4aa0:	4b04      	ldr	r3, [pc, #16]	; (b4ab4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4aa2:	f840 3b04 	str.w	r3, [r0], #4
   b4aa6:	f001 ff6b 	bl	b6980 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4aaa:	4620      	mov	r0, r4
   b4aac:	bd10      	pop	{r4, pc}
   b4aae:	bf00      	nop
   b4ab0:	000b83f8 	.word	0x000b83f8
   b4ab4:	000b83e0 	.word	0x000b83e0

000b4ab8 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4ab8:	b510      	push	{r4, lr}
   b4aba:	4604      	mov	r4, r0
    }
   b4abc:	f7ff ffe2 	bl	b4a84 <_ZN5spark16SerialLogHandlerD1Ev>
   b4ac0:	4620      	mov	r0, r4
   b4ac2:	2124      	movs	r1, #36	; 0x24
   b4ac4:	f7ff ffaf 	bl	b4a26 <_ZdlPvj>
   b4ac8:	4620      	mov	r0, r4
   b4aca:	bd10      	pop	{r4, pc}

000b4acc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4acc:	b40e      	push	{r1, r2, r3}
   b4ace:	b500      	push	{lr}
   b4ad0:	b08c      	sub	sp, #48	; 0x30
   b4ad2:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4ad4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4ad8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4adc:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4ade:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4ae2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4ae4:	6801      	ldr	r1, [r0, #0]
   b4ae6:	aa04      	add	r2, sp, #16
   b4ae8:	201e      	movs	r0, #30
    attr.flags = 0;
   b4aea:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4aee:	f000 fbcb 	bl	b5288 <log_message_v>
}
   b4af2:	b00c      	add	sp, #48	; 0x30
   b4af4:	f85d eb04 	ldr.w	lr, [sp], #4
   b4af8:	b003      	add	sp, #12
   b4afa:	4770      	bx	lr

000b4afc <setup>:
void setup() {
   b4afc:	b5f0      	push	{r4, r5, r6, r7, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4afe:	4e2f      	ldr	r6, [pc, #188]	; (b4bbc <setup+0xc0>)
   b4b00:	482f      	ldr	r0, [pc, #188]	; (b4bc0 <setup+0xc4>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4b02:	4d30      	ldr	r5, [pc, #192]	; (b4bc4 <setup+0xc8>)
   b4b04:	b097      	sub	sp, #92	; 0x5c
   b4b06:	2202      	movs	r2, #2
   b4b08:	2300      	movs	r3, #0
   b4b0a:	4631      	mov	r1, r6
   b4b0c:	f000 fc1a 	bl	b5344 <spark_variable>
  pinMode(LED1, OUTPUT);               // sets pin as output
   b4b10:	4b2d      	ldr	r3, [pc, #180]	; (b4bc8 <setup+0xcc>)
   b4b12:	2101      	movs	r1, #1
   b4b14:	8818      	ldrh	r0, [r3, #0]
   b4b16:	f003 f957 	bl	b7dc8 <pinMode>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b4b1a:	4a2c      	ldr	r2, [pc, #176]	; (b4bcc <setup+0xd0>)
   b4b1c:	492c      	ldr	r1, [pc, #176]	; (b4bd0 <setup+0xd4>)
   b4b1e:	482d      	ldr	r0, [pc, #180]	; (b4bd4 <setup+0xd8>)
  debug = 1; // 0  represents no debug, 1 represents debug
   b4b20:	2301      	movs	r3, #1
   b4b22:	6033      	str	r3, [r6, #0]
   b4b24:	f000 fecd 	bl	b58c2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4b28:	2200      	movs	r2, #0
   b4b2a:	6868      	ldr	r0, [r5, #4]
   b4b2c:	4611      	mov	r1, r2
   b4b2e:	f000 fc59 	bl	b53e4 <network_ready>
  if (Cellular.ready()) {
   b4b32:	2800      	cmp	r0, #0
   b4b34:	d040      	beq.n	b4bb8 <setup+0xbc>
      CellularSignal sig = Cellular.RSSI();
   b4b36:	4629      	mov	r1, r5
   b4b38:	a80e      	add	r0, sp, #56	; 0x38
   b4b3a:	f000 fd7f 	bl	b563c <_ZN5spark13CellularClass4RSSIEv>
      cell_sig_str = sig.getStrength();
   b4b3e:	a80e      	add	r0, sp, #56	; 0x38
   b4b40:	f000 fdf8 	bl	b5734 <_ZNK14CellularSignal11getStrengthEv>
   b4b44:	4f24      	ldr	r7, [pc, #144]	; (b4bd8 <setup+0xdc>)
      cell_sig_qual = sig.getQuality();
   b4b46:	a80e      	add	r0, sp, #56	; 0x38
      cell_sig_str = sig.getStrength();
   b4b48:	ed87 0a00 	vstr	s0, [r7]
      cell_sig_qual = sig.getQuality();
   b4b4c:	f000 fe22 	bl	b5794 <_ZNK14CellularSignal10getQualityEv>
   b4b50:	4b22      	ldr	r3, [pc, #136]	; (b4bdc <setup+0xe0>)
   b4b52:	ed83 0a00 	vstr	s0, [r3]
      if(debug){
   b4b56:	6833      	ldr	r3, [r6, #0]
      cell_sig_qual = sig.getQuality();
   b4b58:	ee10 4a10 	vmov	r4, s0
      if(debug){
   b4b5c:	b363      	cbz	r3, b4bb8 <setup+0xbc>
        Log.info("Cellular ready at startup: %f strength and %f quality", cell_sig_str, cell_sig_qual);
   b4b5e:	6838      	ldr	r0, [r7, #0]
   b4b60:	f7ff fbc0 	bl	b42e4 <__aeabi_f2d>
   b4b64:	4602      	mov	r2, r0
   b4b66:	460b      	mov	r3, r1
   b4b68:	4620      	mov	r0, r4
   b4b6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b4b6e:	f7ff fbb9 	bl	b42e4 <__aeabi_f2d>
   b4b72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4b76:	e9cd 0100 	strd	r0, r1, [sp]
   b4b7a:	4919      	ldr	r1, [pc, #100]	; (b4be0 <setup+0xe4>)
   b4b7c:	4819      	ldr	r0, [pc, #100]	; (b4be4 <setup+0xe8>)
   b4b7e:	f7ff ffa5 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
   b4b82:	2200      	movs	r2, #0
   b4b84:	4611      	mov	r1, r2
   b4b86:	6868      	ldr	r0, [r5, #4]
   b4b88:	f000 fc0c 	bl	b53a4 <network_config>
   b4b8c:	1c81      	adds	r1, r0, #2
   b4b8e:	a808      	add	r0, sp, #32
   b4b90:	f001 fa92 	bl	b60b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   b4b94:	a908      	add	r1, sp, #32
   b4b96:	a804      	add	r0, sp, #16
   b4b98:	f002 ff22 	bl	b79e0 <_ZN6StringC1ERK9Printable>
        Log.info("localIP: %s", Cellular.localIP().toString().c_str());
   b4b9c:	4912      	ldr	r1, [pc, #72]	; (b4be8 <setup+0xec>)
   b4b9e:	9a04      	ldr	r2, [sp, #16]
   b4ba0:	4810      	ldr	r0, [pc, #64]	; (b4be4 <setup+0xe8>)
   b4ba2:	f7ff ff93 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
   b4ba6:	a804      	add	r0, sp, #16
   b4ba8:	f002 fe34 	bl	b7814 <_ZN6StringD1Ev>
        Serial.begin(9600);
   b4bac:	f003 f80c 	bl	b7bc8 <_Z16_fetch_usbserialv>
   b4bb0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4bb4:	f002 fff8 	bl	b7ba8 <_ZN9USBSerial5beginEl>
}
   b4bb8:	b017      	add	sp, #92	; 0x5c
   b4bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4bbc:	2003e60c 	.word	0x2003e60c
   b4bc0:	000b8360 	.word	0x000b8360
   b4bc4:	2003e648 	.word	0x2003e648
   b4bc8:	2003e578 	.word	0x2003e578
   b4bcc:	000b8366 	.word	0x000b8366
   b4bd0:	000b4a59 	.word	0x000b4a59
   b4bd4:	000b5897 	.word	0x000b5897
   b4bd8:	2003e608 	.word	0x2003e608
   b4bdc:	2003e604 	.word	0x2003e604
   b4be0:	000b836a 	.word	0x000b836a
   b4be4:	2003e68c 	.word	0x2003e68c
   b4be8:	000b83a0 	.word	0x000b83a0

000b4bec <_Z19get_battery_voltagev>:
void get_battery_voltage(){
   b4bec:	b508      	push	{r3, lr}
  battery_voltage = fuel.getVCell();
   b4bee:	480a      	ldr	r0, [pc, #40]	; (b4c18 <_Z19get_battery_voltagev+0x2c>)
   b4bf0:	f001 f96e 	bl	b5ed0 <_ZN9FuelGauge8getVCellEv>
   b4bf4:	4b09      	ldr	r3, [pc, #36]	; (b4c1c <_Z19get_battery_voltagev+0x30>)
   b4bf6:	ed83 0a00 	vstr	s0, [r3]
  if(debug == 1){
   b4bfa:	4b09      	ldr	r3, [pc, #36]	; (b4c20 <_Z19get_battery_voltagev+0x34>)
   b4bfc:	681b      	ldr	r3, [r3, #0]
   b4bfe:	2b01      	cmp	r3, #1
  battery_voltage = fuel.getVCell();
   b4c00:	ee10 0a10 	vmov	r0, s0
  if(debug == 1){
   b4c04:	d107      	bne.n	b4c16 <_Z19get_battery_voltagev+0x2a>
    Log.info("Current battery voltage: %f", battery_voltage);
   b4c06:	f7ff fb6d 	bl	b42e4 <__aeabi_f2d>
   b4c0a:	4602      	mov	r2, r0
   b4c0c:	460b      	mov	r3, r1
   b4c0e:	4805      	ldr	r0, [pc, #20]	; (b4c24 <_Z19get_battery_voltagev+0x38>)
   b4c10:	4905      	ldr	r1, [pc, #20]	; (b4c28 <_Z19get_battery_voltagev+0x3c>)
   b4c12:	f7ff ff5b 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
}
   b4c16:	bd08      	pop	{r3, pc}
   b4c18:	2003e610 	.word	0x2003e610
   b4c1c:	2003e600 	.word	0x2003e600
   b4c20:	2003e60c 	.word	0x2003e60c
   b4c24:	2003e68c 	.word	0x2003e68c
   b4c28:	000b83ac 	.word	0x000b83ac

000b4c2c <_Z9flash_ledii>:
void flash_led(int LED, int time){
   b4c2c:	b538      	push	{r3, r4, r5, lr}
    digitalWrite(LED, HIGH);          // sets the LED on
   b4c2e:	b285      	uxth	r5, r0
void flash_led(int LED, int time){
   b4c30:	460c      	mov	r4, r1
    digitalWrite(LED, HIGH);          // sets the LED on
   b4c32:	4628      	mov	r0, r5
   b4c34:	2101      	movs	r1, #1
   b4c36:	f003 f8d8 	bl	b7dea <digitalWrite>
    delay(time);                      
   b4c3a:	4620      	mov	r0, r4
   b4c3c:	f000 fc62 	bl	b5504 <delay>
    digitalWrite(LED, LOW);           // sets the LED off
   b4c40:	4628      	mov	r0, r5
   b4c42:	2100      	movs	r1, #0
   b4c44:	f003 f8d1 	bl	b7dea <digitalWrite>
    delay(time);  
   b4c48:	4620      	mov	r0, r4
}
   b4c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(time);  
   b4c4e:	f000 bc59 	b.w	b5504 <delay>
	...

000b4c54 <_Z19check_day_time_syncv>:
void check_day_time_sync() {
   b4c54:	b510      	push	{r4, lr}
  if (millis() - lastSync > ONE_DAY_MILLIS) {
   b4c56:	4c09      	ldr	r4, [pc, #36]	; (b4c7c <_Z19check_day_time_syncv+0x28>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4c58:	f000 f9d6 	bl	b5008 <HAL_Timer_Get_Milli_Seconds>
   b4c5c:	6823      	ldr	r3, [r4, #0]
   b4c5e:	1ac0      	subs	r0, r0, r3
   b4c60:	4b07      	ldr	r3, [pc, #28]	; (b4c80 <_Z19check_day_time_syncv+0x2c>)
   b4c62:	4298      	cmp	r0, r3
   b4c64:	d908      	bls.n	b4c78 <_Z19check_day_time_syncv+0x24>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4c66:	f000 fb7d 	bl	b5364 <spark_cloud_flag_connected>
        if (!connected()) {
   b4c6a:	b110      	cbz	r0, b4c72 <_Z19check_day_time_syncv+0x1e>
        return spark_sync_time(NULL);
   b4c6c:	2000      	movs	r0, #0
   b4c6e:	f000 fb89 	bl	b5384 <spark_sync_time>
   b4c72:	f000 f9c9 	bl	b5008 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   b4c76:	6020      	str	r0, [r4, #0]
}
   b4c78:	bd10      	pop	{r4, pc}
   b4c7a:	bf00      	nop
   b4c7c:	2003e61c 	.word	0x2003e61c
   b4c80:	05265c00 	.word	0x05265c00

000b4c84 <loop>:
void loop() {
   b4c84:	b530      	push	{r4, r5, lr}
  int powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b4c86:	2018      	movs	r0, #24
void loop() {
   b4c88:	b08d      	sub	sp, #52	; 0x34
  int powerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
   b4c8a:	f000 f967 	bl	b4f5c <_ZN17DiagnosticsHelper8getValueEt>
   b4c8e:	4604      	mov	r4, r0
  check_day_time_sync();
   b4c90:	f7ff ffe0 	bl	b4c54 <_Z19check_day_time_syncv>
  if (powerSource != lastPowerSource) {
   b4c94:	4b2e      	ldr	r3, [pc, #184]	; (b4d50 <loop+0xcc>)
   b4c96:	681b      	ldr	r3, [r3, #0]
   b4c98:	42a3      	cmp	r3, r4
   b4c9a:	d021      	beq.n	b4ce0 <loop+0x5c>
      if(powerSource == 5) {
   b4c9c:	2c05      	cmp	r4, #5
   b4c9e:	d11f      	bne.n	b4ce0 <loop+0x5c>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4ca0:	4b2c      	ldr	r3, [pc, #176]	; (b4d54 <loop+0xd0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4ca2:	4a2d      	ldr	r2, [pc, #180]	; (b4d58 <loop+0xd4>)
   b4ca4:	781b      	ldrb	r3, [r3, #0]
   b4ca6:	f88d 3000 	strb.w	r3, [sp]
   b4caa:	492c      	ldr	r1, [pc, #176]	; (b4d5c <loop+0xd8>)
   b4cac:	233c      	movs	r3, #60	; 0x3c
   b4cae:	a804      	add	r0, sp, #16
   b4cb0:	f000 fefe 	bl	b5ab0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4cb4:	9c05      	ldr	r4, [sp, #20]
   b4cb6:	b17c      	cbz	r4, b4cd8 <loop+0x54>
      if (--_M_use_count == 0)
   b4cb8:	6863      	ldr	r3, [r4, #4]
   b4cba:	3b01      	subs	r3, #1
   b4cbc:	6063      	str	r3, [r4, #4]
   b4cbe:	b95b      	cbnz	r3, b4cd8 <loop+0x54>
          _M_dispose();
   b4cc0:	6823      	ldr	r3, [r4, #0]
   b4cc2:	4620      	mov	r0, r4
   b4cc4:	689b      	ldr	r3, [r3, #8]
   b4cc6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4cc8:	68a3      	ldr	r3, [r4, #8]
   b4cca:	3b01      	subs	r3, #1
   b4ccc:	60a3      	str	r3, [r4, #8]
   b4cce:	b91b      	cbnz	r3, b4cd8 <loop+0x54>
            _M_destroy();
   b4cd0:	6823      	ldr	r3, [r4, #0]
   b4cd2:	4620      	mov	r0, r4
   b4cd4:	68db      	ldr	r3, [r3, #12]
   b4cd6:	4798      	blx	r3
        delay(2000);
   b4cd8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4cdc:	f000 fc12 	bl	b5504 <delay>
  if(debug){
   b4ce0:	4b1f      	ldr	r3, [pc, #124]	; (b4d60 <loop+0xdc>)
   b4ce2:	681b      	ldr	r3, [r3, #0]
   b4ce4:	2b00      	cmp	r3, #0
   b4ce6:	d031      	beq.n	b4d4c <loop+0xc8>
    flash_led(LED1, 200);
   b4ce8:	4b1e      	ldr	r3, [pc, #120]	; (b4d64 <loop+0xe0>)
   b4cea:	4c1f      	ldr	r4, [pc, #124]	; (b4d68 <loop+0xe4>)
   b4cec:	6818      	ldr	r0, [r3, #0]
   b4cee:	21c8      	movs	r1, #200	; 0xc8
   b4cf0:	f7ff ff9c 	bl	b4c2c <_Z9flash_ledii>
        return network_ready(*this, 0,  NULL);
   b4cf4:	2200      	movs	r2, #0
   b4cf6:	6860      	ldr	r0, [r4, #4]
   b4cf8:	4611      	mov	r1, r2
   b4cfa:	f000 fb73 	bl	b53e4 <network_ready>
    if (Cellular.ready()) {
   b4cfe:	b328      	cbz	r0, b4d4c <loop+0xc8>
      CellularSignal sig = Cellular.RSSI();
   b4d00:	4621      	mov	r1, r4
   b4d02:	a804      	add	r0, sp, #16
   b4d04:	f000 fc9a 	bl	b563c <_ZN5spark13CellularClass4RSSIEv>
      cell_sig_str = sig.getStrength();
   b4d08:	a804      	add	r0, sp, #16
   b4d0a:	f000 fd13 	bl	b5734 <_ZNK14CellularSignal11getStrengthEv>
   b4d0e:	4d17      	ldr	r5, [pc, #92]	; (b4d6c <loop+0xe8>)
      cell_sig_qual = sig.getQuality();
   b4d10:	a804      	add	r0, sp, #16
      cell_sig_str = sig.getStrength();
   b4d12:	ed85 0a00 	vstr	s0, [r5]
      cell_sig_qual = sig.getQuality();
   b4d16:	f000 fd3d 	bl	b5794 <_ZNK14CellularSignal10getQualityEv>
   b4d1a:	4b15      	ldr	r3, [pc, #84]	; (b4d70 <loop+0xec>)
      Log.info("Cellular ready at startup: %f strength and %f quality", cell_sig_str, cell_sig_qual);
   b4d1c:	6828      	ldr	r0, [r5, #0]
      cell_sig_qual = sig.getQuality();
   b4d1e:	ed83 0a00 	vstr	s0, [r3]
   b4d22:	ee10 4a10 	vmov	r4, s0
      Log.info("Cellular ready at startup: %f strength and %f quality", cell_sig_str, cell_sig_qual);
   b4d26:	f7ff fadd 	bl	b42e4 <__aeabi_f2d>
   b4d2a:	4602      	mov	r2, r0
   b4d2c:	460b      	mov	r3, r1
   b4d2e:	4620      	mov	r0, r4
   b4d30:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b4d34:	f7ff fad6 	bl	b42e4 <__aeabi_f2d>
   b4d38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4d3c:	e9cd 0100 	strd	r0, r1, [sp]
   b4d40:	490c      	ldr	r1, [pc, #48]	; (b4d74 <loop+0xf0>)
   b4d42:	480d      	ldr	r0, [pc, #52]	; (b4d78 <loop+0xf4>)
   b4d44:	f7ff fec2 	bl	b4acc <_ZNK5spark6Logger4infoEPKcz>
      get_battery_voltage();
   b4d48:	f7ff ff50 	bl	b4bec <_Z19get_battery_voltagev>
}
   b4d4c:	b00d      	add	sp, #52	; 0x34
   b4d4e:	bd30      	pop	{r4, r5, pc}
   b4d50:	2003e618 	.word	0x2003e618
   b4d54:	2003e5fc 	.word	0x2003e5fc
   b4d58:	000b83c8 	.word	0x000b83c8
   b4d5c:	000b83cd 	.word	0x000b83cd
   b4d60:	2003e60c 	.word	0x2003e60c
   b4d64:	2003e578 	.word	0x2003e578
   b4d68:	2003e648 	.word	0x2003e648
   b4d6c:	2003e608 	.word	0x2003e608
   b4d70:	2003e604 	.word	0x2003e604
   b4d74:	000b836a 	.word	0x000b836a
   b4d78:	2003e68c 	.word	0x2003e68c

000b4d7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4d7c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4d7e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4d82:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4d84:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4d86:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4d8a:	42ae      	cmp	r6, r5
   b4d8c:	d004      	beq.n	b4d98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4d8e:	4628      	mov	r0, r5
   b4d90:	f002 fd40 	bl	b7814 <_ZN6StringD1Ev>
   b4d94:	3514      	adds	r5, #20
   b4d96:	e7f8      	b.n	b4d8a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4d98:	6820      	ldr	r0, [r4, #0]
   b4d9a:	f000 fb73 	bl	b5484 <free>
    AllocatorT::free(data_);
}
   b4d9e:	4620      	mov	r0, r4
   b4da0:	bd70      	pop	{r4, r5, r6, pc}

000b4da2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4da2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4da6:	4604      	mov	r4, r0
   b4da8:	460d      	mov	r5, r1
   b4daa:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4dac:	d916      	bls.n	b4ddc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4dae:	4290      	cmp	r0, r2
   b4db0:	d215      	bcs.n	b4dde <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4db2:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4db6:	1a75      	subs	r5, r6, r1
   b4db8:	f1a1 0714 	sub.w	r7, r1, #20
   b4dbc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4dbe:	42b7      	cmp	r7, r6
   b4dc0:	d01c      	beq.n	b4dfc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4dc2:	b12c      	cbz	r4, b4dd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4dc4:	4631      	mov	r1, r6
   b4dc6:	4620      	mov	r0, r4
   b4dc8:	f002 fda0 	bl	b790c <_ZN6StringC1EOS_>
   b4dcc:	7c33      	ldrb	r3, [r6, #16]
   b4dce:	7423      	strb	r3, [r4, #16]
   b4dd0:	4630      	mov	r0, r6
   b4dd2:	f002 fd1f 	bl	b7814 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4dd6:	3e14      	subs	r6, #20
   b4dd8:	3c14      	subs	r4, #20
   b4dda:	e7f0      	b.n	b4dbe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4ddc:	d00e      	beq.n	b4dfc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4dde:	42b5      	cmp	r5, r6
   b4de0:	d00c      	beq.n	b4dfc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4de2:	b12c      	cbz	r4, b4df0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4de4:	4629      	mov	r1, r5
   b4de6:	4620      	mov	r0, r4
   b4de8:	f002 fd90 	bl	b790c <_ZN6StringC1EOS_>
   b4dec:	7c2b      	ldrb	r3, [r5, #16]
   b4dee:	7423      	strb	r3, [r4, #16]
   b4df0:	4628      	mov	r0, r5
   b4df2:	f002 fd0f 	bl	b7814 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4df6:	3514      	adds	r5, #20
   b4df8:	3414      	adds	r4, #20
   b4dfa:	e7f0      	b.n	b4dde <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4dfe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4e02:	2300      	movs	r3, #0
   b4e04:	e9c0 3300 	strd	r3, r3, [r0]
   b4e08:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4e0a:	684f      	ldr	r7, [r1, #4]
   b4e0c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4e0e:	4604      	mov	r4, r0
   b4e10:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4e12:	dd23      	ble.n	b4e5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4e14:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4e18:	fb08 f007 	mul.w	r0, r8, r7
   b4e1c:	f000 fb2a 	bl	b5474 <malloc>
            if (!d) {
   b4e20:	4605      	mov	r5, r0
   b4e22:	b1d8      	cbz	r0, b4e5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4e24:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4e28:	fb08 1202 	mla	r2, r8, r2, r1
   b4e2c:	f7ff ffb9 	bl	b4da2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4e30:	6820      	ldr	r0, [r4, #0]
   b4e32:	f000 fb27 	bl	b5484 <free>
        data_ = d;
   b4e36:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4e38:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4e3a:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4e3e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4e42:	45b8      	cmp	r8, r7
   b4e44:	d008      	beq.n	b4e58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4e46:	4639      	mov	r1, r7
   b4e48:	4628      	mov	r0, r5
   b4e4a:	f002 fd79 	bl	b7940 <_ZN6StringC1ERKS_>
   b4e4e:	7c3b      	ldrb	r3, [r7, #16]
   b4e50:	742b      	strb	r3, [r5, #16]
   b4e52:	3714      	adds	r7, #20
   b4e54:	3514      	adds	r5, #20
   b4e56:	e7f4      	b.n	b4e42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4e58:	6873      	ldr	r3, [r6, #4]
   b4e5a:	6063      	str	r3, [r4, #4]
}
   b4e5c:	4620      	mov	r0, r4
   b4e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4e64 <_GLOBAL__sub_I_SystemMode>:
   b4e64:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b4e66:	4b2b      	ldr	r3, [pc, #172]	; (b4f14 <_GLOBAL__sub_I_SystemMode+0xb0>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b4e68:	4a2b      	ldr	r2, [pc, #172]	; (b4f18 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b4e6a:	2400      	movs	r4, #0
   b4e6c:	701c      	strb	r4, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4e6e:	4b2b      	ldr	r3, [pc, #172]	; (b4f1c <_GLOBAL__sub_I_SystemMode+0xb8>)
   b4e70:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b4e72:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4e74:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4e78:	2001      	movs	r0, #1
   b4e7a:	f000 fa1d 	bl	b52b8 <set_system_mode>
SYSTEM_THREAD(ENABLED); // handles data/ cloud messaging in a seperate thread from our setup() and loop()
   b4e7e:	4621      	mov	r1, r4
   b4e80:	2001      	movs	r0, #1
   b4e82:	f000 fa29 	bl	b52d8 <system_thread_set_state>
FuelGauge fuel; // fuel object used to access the battery monitoring circuit
   b4e86:	4621      	mov	r1, r4
   b4e88:	4825      	ldr	r0, [pc, #148]	; (b4f20 <_GLOBAL__sub_I_SystemMode+0xbc>)
   b4e8a:	f000 ffd5 	bl	b5e38 <_ZN9FuelGaugeC1Eb>
        capacity_(0) {
   b4e8e:	e9cd 4400 	strd	r4, r4, [sp]
   b4e92:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4e94:	f002 fe98 	bl	b7bc8 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4e98:	4c22      	ldr	r4, [pc, #136]	; (b4f24 <_GLOBAL__sub_I_SystemMode+0xc0>)
   b4e9a:	4605      	mov	r5, r0
   b4e9c:	4669      	mov	r1, sp
   b4e9e:	a803      	add	r0, sp, #12
   b4ea0:	f7ff ffad 	bl	b4dfe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4ea4:	4626      	mov	r6, r4
        stream_(&stream) {
   b4ea6:	a903      	add	r1, sp, #12
   b4ea8:	a806      	add	r0, sp, #24
   b4eaa:	f7ff ffa8 	bl	b4dfe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4eae:	4b1e      	ldr	r3, [pc, #120]	; (b4f28 <_GLOBAL__sub_I_SystemMode+0xc4>)
   b4eb0:	f846 3b04 	str.w	r3, [r6], #4
   b4eb4:	a906      	add	r1, sp, #24
   b4eb6:	a809      	add	r0, sp, #36	; 0x24
   b4eb8:	f7ff ffa1 	bl	b4dfe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4ebc:	aa09      	add	r2, sp, #36	; 0x24
   b4ebe:	211e      	movs	r1, #30
   b4ec0:	4630      	mov	r0, r6
   b4ec2:	f001 ffa5 	bl	b6e10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4ec6:	a809      	add	r0, sp, #36	; 0x24
   b4ec8:	f7ff ff58 	bl	b4d7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4ecc:	a806      	add	r0, sp, #24
   b4ece:	f7ff ff55 	bl	b4d7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4ed2:	4b16      	ldr	r3, [pc, #88]	; (b4f2c <_GLOBAL__sub_I_SystemMode+0xc8>)
   b4ed4:	6023      	str	r3, [r4, #0]
   b4ed6:	6225      	str	r5, [r4, #32]
   b4ed8:	a803      	add	r0, sp, #12
   b4eda:	f7ff ff4f 	bl	b4d7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4ede:	4b14      	ldr	r3, [pc, #80]	; (b4f30 <_GLOBAL__sub_I_SystemMode+0xcc>)
   b4ee0:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b4ee2:	f002 fe71 	bl	b7bc8 <_Z16_fetch_usbserialv>
   b4ee6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4eea:	f002 fe5d 	bl	b7ba8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4eee:	f001 fc71 	bl	b67d4 <_ZN5spark10LogManager8instanceEv>
   b4ef2:	4621      	mov	r1, r4
   b4ef4:	f001 fe62 	bl	b6bbc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b4ef8:	4668      	mov	r0, sp
   b4efa:	f7ff ff3f 	bl	b4d7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4efe:	f000 f883 	bl	b5008 <HAL_Timer_Get_Milli_Seconds>
unsigned long lastSync = millis();
   b4f02:	4b0c      	ldr	r3, [pc, #48]	; (b4f34 <_GLOBAL__sub_I_SystemMode+0xd0>)
   b4f04:	6018      	str	r0, [r3, #0]
int lastPowerSource = DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE); 
   b4f06:	2018      	movs	r0, #24
   b4f08:	f000 f828 	bl	b4f5c <_ZN17DiagnosticsHelper8getValueEt>
   b4f0c:	4b0a      	ldr	r3, [pc, #40]	; (b4f38 <_GLOBAL__sub_I_SystemMode+0xd4>)
   b4f0e:	6018      	str	r0, [r3, #0]
   b4f10:	b00c      	add	sp, #48	; 0x30
   b4f12:	bd70      	pop	{r4, r5, r6, pc}
   b4f14:	2003e5fc 	.word	0x2003e5fc
   b4f18:	ffff0000 	.word	0xffff0000
   b4f1c:	2003e5f0 	.word	0x2003e5f0
   b4f20:	2003e610 	.word	0x2003e610
   b4f24:	2003e620 	.word	0x2003e620
   b4f28:	000b83e0 	.word	0x000b83e0
   b4f2c:	000b85b4 	.word	0x000b85b4
   b4f30:	000b83f8 	.word	0x000b83f8
   b4f34:	2003e61c 	.word	0x2003e61c
   b4f38:	2003e618 	.word	0x2003e618

000b4f3c <_ZZN17DiagnosticsHelper8getValueEtENUt_8appenderEPvPKhj>:
	};
    Data data;
    data.offset = data.u.d.value = 0;

    struct {
        static bool appender(void* appender, const uint8_t* data, size_t size) {
   b4f3c:	b538      	push	{r3, r4, r5, lr}
   b4f3e:	4604      	mov	r4, r0
            Data *d = (Data *)appender;
            if ((d->offset + size) <= sizeof(Data::u)) {
   b4f40:	68c0      	ldr	r0, [r0, #12]
   b4f42:	1883      	adds	r3, r0, r2
   b4f44:	2b0a      	cmp	r3, #10
        static bool appender(void* appender, const uint8_t* data, size_t size) {
   b4f46:	4615      	mov	r5, r2
            if ((d->offset + size) <= sizeof(Data::u)) {
   b4f48:	d805      	bhi.n	b4f56 <_ZZN17DiagnosticsHelper8getValueEtENUt_8appenderEPvPKhj+0x1a>
                memcpy(&d->u.b[d->offset], data, size);
   b4f4a:	4420      	add	r0, r4
   b4f4c:	f003 f83a 	bl	b7fc4 <memcpy>
                d->offset += size;
   b4f50:	68e2      	ldr	r2, [r4, #12]
   b4f52:	442a      	add	r2, r5
   b4f54:	60e2      	str	r2, [r4, #12]
            }
            return true;
        }
   b4f56:	2001      	movs	r0, #1
   b4f58:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4f5c <_ZN17DiagnosticsHelper8getValueEt>:
int32_t DiagnosticsHelper::getValue(uint16_t id) {
   b4f5c:	b510      	push	{r4, lr}
   b4f5e:	b088      	sub	sp, #32
    data.offset = data.u.d.value = 0;
   b4f60:	2400      	movs	r4, #0
    } Callback;

    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   b4f62:	ab04      	add	r3, sp, #16
   b4f64:	2201      	movs	r2, #1
int32_t DiagnosticsHelper::getValue(uint16_t id) {
   b4f66:	f8ad 000e 	strh.w	r0, [sp, #14]
    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   b4f6a:	9300      	str	r3, [sp, #0]
   b4f6c:	9401      	str	r4, [sp, #4]
   b4f6e:	4b09      	ldr	r3, [pc, #36]	; (b4f94 <_ZN17DiagnosticsHelper8getValueEt+0x38>)
    data.offset = data.u.d.value = 0;
   b4f70:	f8ad 4016 	strh.w	r4, [sp, #22]
    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   b4f74:	4611      	mov	r1, r2
   b4f76:	f10d 000e 	add.w	r0, sp, #14
    data.offset = data.u.d.value = 0;
   b4f7a:	f8ad 4018 	strh.w	r4, [sp, #24]
   b4f7e:	9407      	str	r4, [sp, #28]
    system_format_diag_data(&id, 1, 1, Callback.appender, &data, nullptr);
   b4f80:	f000 f9c2 	bl	b5308 <system_format_diag_data>

    // Log.info("idSize=%u valueSize=%u id=%u value=%ld", data.u.d.idSize, data.u.d.valueSize, data.u.d.id, data.u.d.value);

    if (data.offset == sizeof(Data::u)) {
   b4f84:	9b07      	ldr	r3, [sp, #28]
   b4f86:	2b0a      	cmp	r3, #10
    	return data.u.d.value;
   b4f88:	bf0c      	ite	eq
   b4f8a:	f8dd 0016 	ldreq.w	r0, [sp, #22]
    }
    else {
        return 0;
   b4f8e:	4620      	movne	r0, r4
    }
}
   b4f90:	b008      	add	sp, #32
   b4f92:	bd10      	pop	{r4, pc}
   b4f94:	000b4f3d 	.word	0x000b4f3d

000b4f98 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b4f98:	b508      	push	{r3, lr}
   b4f9a:	4b02      	ldr	r3, [pc, #8]	; (b4fa4 <cellular_signal+0xc>)
   b4f9c:	681b      	ldr	r3, [r3, #0]
   b4f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4fa0:	9301      	str	r3, [sp, #4]
   b4fa2:	bd08      	pop	{r3, pc}
   b4fa4:	00030274 	.word	0x00030274

000b4fa8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4fa8:	b508      	push	{r3, lr}
   b4faa:	4b02      	ldr	r3, [pc, #8]	; (b4fb4 <os_mutex_recursive_create+0xc>)
   b4fac:	681b      	ldr	r3, [r3, #0]
   b4fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4fb0:	9301      	str	r3, [sp, #4]
   b4fb2:	bd08      	pop	{r3, pc}
   b4fb4:	00030248 	.word	0x00030248

000b4fb8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4fb8:	b508      	push	{r3, lr}
   b4fba:	4b02      	ldr	r3, [pc, #8]	; (b4fc4 <os_mutex_recursive_destroy+0xc>)
   b4fbc:	681b      	ldr	r3, [r3, #0]
   b4fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4fc0:	9301      	str	r3, [sp, #4]
   b4fc2:	bd08      	pop	{r3, pc}
   b4fc4:	00030248 	.word	0x00030248

000b4fc8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4fc8:	b508      	push	{r3, lr}
   b4fca:	4b02      	ldr	r3, [pc, #8]	; (b4fd4 <os_mutex_recursive_lock+0xc>)
   b4fcc:	681b      	ldr	r3, [r3, #0]
   b4fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4fd0:	9301      	str	r3, [sp, #4]
   b4fd2:	bd08      	pop	{r3, pc}
   b4fd4:	00030248 	.word	0x00030248

000b4fd8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4fd8:	b508      	push	{r3, lr}
   b4fda:	4b02      	ldr	r3, [pc, #8]	; (b4fe4 <os_mutex_recursive_unlock+0xc>)
   b4fdc:	681b      	ldr	r3, [r3, #0]
   b4fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4fe0:	9301      	str	r3, [sp, #4]
   b4fe2:	bd08      	pop	{r3, pc}
   b4fe4:	00030248 	.word	0x00030248

000b4fe8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4fe8:	b508      	push	{r3, lr}
   b4fea:	4b02      	ldr	r3, [pc, #8]	; (b4ff4 <HAL_RNG_GetRandomNumber+0xc>)
   b4fec:	681b      	ldr	r3, [r3, #0]
   b4fee:	685b      	ldr	r3, [r3, #4]
   b4ff0:	9301      	str	r3, [sp, #4]
   b4ff2:	bd08      	pop	{r3, pc}
   b4ff4:	00030218 	.word	0x00030218

000b4ff8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4ff8:	b508      	push	{r3, lr}
   b4ffa:	4b02      	ldr	r3, [pc, #8]	; (b5004 <HAL_Delay_Microseconds+0xc>)
   b4ffc:	681b      	ldr	r3, [r3, #0]
   b4ffe:	68db      	ldr	r3, [r3, #12]
   b5000:	9301      	str	r3, [sp, #4]
   b5002:	bd08      	pop	{r3, pc}
   b5004:	00030218 	.word	0x00030218

000b5008 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5008:	b508      	push	{r3, lr}
   b500a:	4b02      	ldr	r3, [pc, #8]	; (b5014 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b500c:	681b      	ldr	r3, [r3, #0]
   b500e:	695b      	ldr	r3, [r3, #20]
   b5010:	9301      	str	r3, [sp, #4]
   b5012:	bd08      	pop	{r3, pc}
   b5014:	00030218 	.word	0x00030218

000b5018 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5018:	b508      	push	{r3, lr}
   b501a:	4b02      	ldr	r3, [pc, #8]	; (b5024 <hal_gpio_mode+0xc>)
   b501c:	681b      	ldr	r3, [r3, #0]
   b501e:	689b      	ldr	r3, [r3, #8]
   b5020:	9301      	str	r3, [sp, #4]
   b5022:	bd08      	pop	{r3, pc}
   b5024:	0003022c 	.word	0x0003022c

000b5028 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b5028:	b508      	push	{r3, lr}
   b502a:	4b02      	ldr	r3, [pc, #8]	; (b5034 <hal_gpio_get_mode+0xc>)
   b502c:	681b      	ldr	r3, [r3, #0]
   b502e:	68db      	ldr	r3, [r3, #12]
   b5030:	9301      	str	r3, [sp, #4]
   b5032:	bd08      	pop	{r3, pc}
   b5034:	0003022c 	.word	0x0003022c

000b5038 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b5038:	b508      	push	{r3, lr}
   b503a:	4b02      	ldr	r3, [pc, #8]	; (b5044 <hal_gpio_write+0xc>)
   b503c:	681b      	ldr	r3, [r3, #0]
   b503e:	691b      	ldr	r3, [r3, #16]
   b5040:	9301      	str	r3, [sp, #4]
   b5042:	bd08      	pop	{r3, pc}
   b5044:	0003022c 	.word	0x0003022c

000b5048 <hal_i2c_begin_transmission>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5048:	b508      	push	{r3, lr}
   b504a:	4b02      	ldr	r3, [pc, #8]	; (b5054 <hal_i2c_begin_transmission+0xc>)
   b504c:	681b      	ldr	r3, [r3, #0]
   b504e:	699b      	ldr	r3, [r3, #24]
   b5050:	9301      	str	r3, [sp, #4]
   b5052:	bd08      	pop	{r3, pc}
   b5054:	00030228 	.word	0x00030228

000b5058 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5058:	b508      	push	{r3, lr}
   b505a:	4b02      	ldr	r3, [pc, #8]	; (b5064 <hal_i2c_end_transmission+0xc>)
   b505c:	681b      	ldr	r3, [r3, #0]
   b505e:	69db      	ldr	r3, [r3, #28]
   b5060:	9301      	str	r3, [sp, #4]
   b5062:	bd08      	pop	{r3, pc}
   b5064:	00030228 	.word	0x00030228

000b5068 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5068:	b508      	push	{r3, lr}
   b506a:	4b02      	ldr	r3, [pc, #8]	; (b5074 <hal_i2c_write+0xc>)
   b506c:	681b      	ldr	r3, [r3, #0]
   b506e:	6a1b      	ldr	r3, [r3, #32]
   b5070:	9301      	str	r3, [sp, #4]
   b5072:	bd08      	pop	{r3, pc}
   b5074:	00030228 	.word	0x00030228

000b5078 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5078:	b508      	push	{r3, lr}
   b507a:	4b02      	ldr	r3, [pc, #8]	; (b5084 <hal_i2c_available+0xc>)
   b507c:	681b      	ldr	r3, [r3, #0]
   b507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5080:	9301      	str	r3, [sp, #4]
   b5082:	bd08      	pop	{r3, pc}
   b5084:	00030228 	.word	0x00030228

000b5088 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5088:	b508      	push	{r3, lr}
   b508a:	4b02      	ldr	r3, [pc, #8]	; (b5094 <hal_i2c_read+0xc>)
   b508c:	681b      	ldr	r3, [r3, #0]
   b508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5090:	9301      	str	r3, [sp, #4]
   b5092:	bd08      	pop	{r3, pc}
   b5094:	00030228 	.word	0x00030228

000b5098 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5098:	b508      	push	{r3, lr}
   b509a:	4b02      	ldr	r3, [pc, #8]	; (b50a4 <hal_i2c_peek+0xc>)
   b509c:	681b      	ldr	r3, [r3, #0]
   b509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b50a0:	9301      	str	r3, [sp, #4]
   b50a2:	bd08      	pop	{r3, pc}
   b50a4:	00030228 	.word	0x00030228

000b50a8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b50a8:	b508      	push	{r3, lr}
   b50aa:	4b02      	ldr	r3, [pc, #8]	; (b50b4 <hal_i2c_flush+0xc>)
   b50ac:	681b      	ldr	r3, [r3, #0]
   b50ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b50b0:	9301      	str	r3, [sp, #4]
   b50b2:	bd08      	pop	{r3, pc}
   b50b4:	00030228 	.word	0x00030228

000b50b8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b50b8:	b508      	push	{r3, lr}
   b50ba:	4b02      	ldr	r3, [pc, #8]	; (b50c4 <hal_i2c_is_enabled+0xc>)
   b50bc:	681b      	ldr	r3, [r3, #0]
   b50be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b50c0:	9301      	str	r3, [sp, #4]
   b50c2:	bd08      	pop	{r3, pc}
   b50c4:	00030228 	.word	0x00030228

000b50c8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b50c8:	b508      	push	{r3, lr}
   b50ca:	4b02      	ldr	r3, [pc, #8]	; (b50d4 <hal_i2c_init+0xc>)
   b50cc:	681b      	ldr	r3, [r3, #0]
   b50ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50d0:	9301      	str	r3, [sp, #4]
   b50d2:	bd08      	pop	{r3, pc}
   b50d4:	00030228 	.word	0x00030228

000b50d8 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b50d8:	b508      	push	{r3, lr}
   b50da:	4b02      	ldr	r3, [pc, #8]	; (b50e4 <hal_i2c_lock+0xc>)
   b50dc:	681b      	ldr	r3, [r3, #0]
   b50de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b50e0:	9301      	str	r3, [sp, #4]
   b50e2:	bd08      	pop	{r3, pc}
   b50e4:	00030228 	.word	0x00030228

000b50e8 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b50e8:	b508      	push	{r3, lr}
   b50ea:	4b02      	ldr	r3, [pc, #8]	; (b50f4 <hal_i2c_unlock+0xc>)
   b50ec:	681b      	ldr	r3, [r3, #0]
   b50ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b50f0:	9301      	str	r3, [sp, #4]
   b50f2:	bd08      	pop	{r3, pc}
   b50f4:	00030228 	.word	0x00030228

000b50f8 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b50f8:	b508      	push	{r3, lr}
   b50fa:	4b02      	ldr	r3, [pc, #8]	; (b5104 <hal_i2c_request_ex+0xc>)
   b50fc:	681b      	ldr	r3, [r3, #0]
   b50fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5100:	9301      	str	r3, [sp, #4]
   b5102:	bd08      	pop	{r3, pc}
   b5104:	00030228 	.word	0x00030228

000b5108 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5108:	b508      	push	{r3, lr}
   b510a:	4b02      	ldr	r3, [pc, #8]	; (b5114 <inet_inet_ntop+0xc>)
   b510c:	681b      	ldr	r3, [r3, #0]
   b510e:	695b      	ldr	r3, [r3, #20]
   b5110:	9301      	str	r3, [sp, #4]
   b5112:	bd08      	pop	{r3, pc}
   b5114:	00030264 	.word	0x00030264

000b5118 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5118:	b508      	push	{r3, lr}
   b511a:	4b02      	ldr	r3, [pc, #8]	; (b5124 <netdb_freeaddrinfo+0xc>)
   b511c:	681b      	ldr	r3, [r3, #0]
   b511e:	689b      	ldr	r3, [r3, #8]
   b5120:	9301      	str	r3, [sp, #4]
   b5122:	bd08      	pop	{r3, pc}
   b5124:	00030268 	.word	0x00030268

000b5128 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5128:	b508      	push	{r3, lr}
   b512a:	4b02      	ldr	r3, [pc, #8]	; (b5134 <netdb_getaddrinfo+0xc>)
   b512c:	681b      	ldr	r3, [r3, #0]
   b512e:	68db      	ldr	r3, [r3, #12]
   b5130:	9301      	str	r3, [sp, #4]
   b5132:	bd08      	pop	{r3, pc}
   b5134:	00030268 	.word	0x00030268

000b5138 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5138:	b508      	push	{r3, lr}
   b513a:	4b02      	ldr	r3, [pc, #8]	; (b5144 <hal_spi_init+0xc>)
   b513c:	681b      	ldr	r3, [r3, #0]
   b513e:	69db      	ldr	r3, [r3, #28]
   b5140:	9301      	str	r3, [sp, #4]
   b5142:	bd08      	pop	{r3, pc}
   b5144:	00030230 	.word	0x00030230

000b5148 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5148:	b508      	push	{r3, lr}
   b514a:	4b02      	ldr	r3, [pc, #8]	; (b5154 <hal_spi_is_enabled+0xc>)
   b514c:	681b      	ldr	r3, [r3, #0]
   b514e:	6a1b      	ldr	r3, [r3, #32]
   b5150:	9301      	str	r3, [sp, #4]
   b5152:	bd08      	pop	{r3, pc}
   b5154:	00030230 	.word	0x00030230

000b5158 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b5158:	b508      	push	{r3, lr}
   b515a:	4b02      	ldr	r3, [pc, #8]	; (b5164 <hal_usart_end+0xc>)
   b515c:	681b      	ldr	r3, [r3, #0]
   b515e:	689b      	ldr	r3, [r3, #8]
   b5160:	9301      	str	r3, [sp, #4]
   b5162:	bd08      	pop	{r3, pc}
   b5164:	0003023c 	.word	0x0003023c

000b5168 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5168:	b508      	push	{r3, lr}
   b516a:	4b02      	ldr	r3, [pc, #8]	; (b5174 <hal_usart_write+0xc>)
   b516c:	681b      	ldr	r3, [r3, #0]
   b516e:	68db      	ldr	r3, [r3, #12]
   b5170:	9301      	str	r3, [sp, #4]
   b5172:	bd08      	pop	{r3, pc}
   b5174:	0003023c 	.word	0x0003023c

000b5178 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5178:	b508      	push	{r3, lr}
   b517a:	4b02      	ldr	r3, [pc, #8]	; (b5184 <hal_usart_available+0xc>)
   b517c:	681b      	ldr	r3, [r3, #0]
   b517e:	691b      	ldr	r3, [r3, #16]
   b5180:	9301      	str	r3, [sp, #4]
   b5182:	bd08      	pop	{r3, pc}
   b5184:	0003023c 	.word	0x0003023c

000b5188 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5188:	b508      	push	{r3, lr}
   b518a:	4b02      	ldr	r3, [pc, #8]	; (b5194 <hal_usart_read+0xc>)
   b518c:	681b      	ldr	r3, [r3, #0]
   b518e:	695b      	ldr	r3, [r3, #20]
   b5190:	9301      	str	r3, [sp, #4]
   b5192:	bd08      	pop	{r3, pc}
   b5194:	0003023c 	.word	0x0003023c

000b5198 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5198:	b508      	push	{r3, lr}
   b519a:	4b02      	ldr	r3, [pc, #8]	; (b51a4 <hal_usart_peek+0xc>)
   b519c:	681b      	ldr	r3, [r3, #0]
   b519e:	699b      	ldr	r3, [r3, #24]
   b51a0:	9301      	str	r3, [sp, #4]
   b51a2:	bd08      	pop	{r3, pc}
   b51a4:	0003023c 	.word	0x0003023c

000b51a8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b51a8:	b508      	push	{r3, lr}
   b51aa:	4b02      	ldr	r3, [pc, #8]	; (b51b4 <hal_usart_flush+0xc>)
   b51ac:	681b      	ldr	r3, [r3, #0]
   b51ae:	69db      	ldr	r3, [r3, #28]
   b51b0:	9301      	str	r3, [sp, #4]
   b51b2:	bd08      	pop	{r3, pc}
   b51b4:	0003023c 	.word	0x0003023c

000b51b8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b51b8:	b508      	push	{r3, lr}
   b51ba:	4b02      	ldr	r3, [pc, #8]	; (b51c4 <hal_usart_is_enabled+0xc>)
   b51bc:	681b      	ldr	r3, [r3, #0]
   b51be:	6a1b      	ldr	r3, [r3, #32]
   b51c0:	9301      	str	r3, [sp, #4]
   b51c2:	bd08      	pop	{r3, pc}
   b51c4:	0003023c 	.word	0x0003023c

000b51c8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b51c8:	b508      	push	{r3, lr}
   b51ca:	4b02      	ldr	r3, [pc, #8]	; (b51d4 <hal_usart_available_data_for_write+0xc>)
   b51cc:	681b      	ldr	r3, [r3, #0]
   b51ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b51d0:	9301      	str	r3, [sp, #4]
   b51d2:	bd08      	pop	{r3, pc}
   b51d4:	0003023c 	.word	0x0003023c

000b51d8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b51d8:	b508      	push	{r3, lr}
   b51da:	4b02      	ldr	r3, [pc, #8]	; (b51e4 <hal_usart_begin_config+0xc>)
   b51dc:	681b      	ldr	r3, [r3, #0]
   b51de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b51e0:	9301      	str	r3, [sp, #4]
   b51e2:	bd08      	pop	{r3, pc}
   b51e4:	0003023c 	.word	0x0003023c

000b51e8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b51e8:	b508      	push	{r3, lr}
   b51ea:	4b02      	ldr	r3, [pc, #8]	; (b51f4 <hal_usart_init_ex+0xc>)
   b51ec:	681b      	ldr	r3, [r3, #0]
   b51ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b51f0:	9301      	str	r3, [sp, #4]
   b51f2:	bd08      	pop	{r3, pc}
   b51f4:	0003023c 	.word	0x0003023c

000b51f8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b51f8:	b508      	push	{r3, lr}
   b51fa:	4b02      	ldr	r3, [pc, #8]	; (b5204 <HAL_USB_USART_Init+0xc>)
   b51fc:	681b      	ldr	r3, [r3, #0]
   b51fe:	681b      	ldr	r3, [r3, #0]
   b5200:	9301      	str	r3, [sp, #4]
   b5202:	bd08      	pop	{r3, pc}
   b5204:	0003024c 	.word	0x0003024c

000b5208 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5208:	b508      	push	{r3, lr}
   b520a:	4b02      	ldr	r3, [pc, #8]	; (b5214 <HAL_USB_USART_Begin+0xc>)
   b520c:	681b      	ldr	r3, [r3, #0]
   b520e:	685b      	ldr	r3, [r3, #4]
   b5210:	9301      	str	r3, [sp, #4]
   b5212:	bd08      	pop	{r3, pc}
   b5214:	0003024c 	.word	0x0003024c

000b5218 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b5218:	b508      	push	{r3, lr}
   b521a:	4b02      	ldr	r3, [pc, #8]	; (b5224 <HAL_USB_USART_End+0xc>)
   b521c:	681b      	ldr	r3, [r3, #0]
   b521e:	689b      	ldr	r3, [r3, #8]
   b5220:	9301      	str	r3, [sp, #4]
   b5222:	bd08      	pop	{r3, pc}
   b5224:	0003024c 	.word	0x0003024c

000b5228 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5228:	b508      	push	{r3, lr}
   b522a:	4b02      	ldr	r3, [pc, #8]	; (b5234 <HAL_USB_USART_Available_Data+0xc>)
   b522c:	681b      	ldr	r3, [r3, #0]
   b522e:	691b      	ldr	r3, [r3, #16]
   b5230:	9301      	str	r3, [sp, #4]
   b5232:	bd08      	pop	{r3, pc}
   b5234:	0003024c 	.word	0x0003024c

000b5238 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5238:	b508      	push	{r3, lr}
   b523a:	4b02      	ldr	r3, [pc, #8]	; (b5244 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b523c:	681b      	ldr	r3, [r3, #0]
   b523e:	695b      	ldr	r3, [r3, #20]
   b5240:	9301      	str	r3, [sp, #4]
   b5242:	bd08      	pop	{r3, pc}
   b5244:	0003024c 	.word	0x0003024c

000b5248 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5248:	b508      	push	{r3, lr}
   b524a:	4b02      	ldr	r3, [pc, #8]	; (b5254 <HAL_USB_USART_Receive_Data+0xc>)
   b524c:	681b      	ldr	r3, [r3, #0]
   b524e:	699b      	ldr	r3, [r3, #24]
   b5250:	9301      	str	r3, [sp, #4]
   b5252:	bd08      	pop	{r3, pc}
   b5254:	0003024c 	.word	0x0003024c

000b5258 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5258:	b508      	push	{r3, lr}
   b525a:	4b02      	ldr	r3, [pc, #8]	; (b5264 <HAL_USB_USART_Send_Data+0xc>)
   b525c:	681b      	ldr	r3, [r3, #0]
   b525e:	69db      	ldr	r3, [r3, #28]
   b5260:	9301      	str	r3, [sp, #4]
   b5262:	bd08      	pop	{r3, pc}
   b5264:	0003024c 	.word	0x0003024c

000b5268 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5268:	b508      	push	{r3, lr}
   b526a:	4b02      	ldr	r3, [pc, #8]	; (b5274 <HAL_USB_USART_Flush_Data+0xc>)
   b526c:	681b      	ldr	r3, [r3, #0]
   b526e:	6a1b      	ldr	r3, [r3, #32]
   b5270:	9301      	str	r3, [sp, #4]
   b5272:	bd08      	pop	{r3, pc}
   b5274:	0003024c 	.word	0x0003024c

000b5278 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5278:	b508      	push	{r3, lr}
   b527a:	4b02      	ldr	r3, [pc, #8]	; (b5284 <panic_+0xc>)
   b527c:	681b      	ldr	r3, [r3, #0]
   b527e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5280:	9301      	str	r3, [sp, #4]
   b5282:	bd08      	pop	{r3, pc}
   b5284:	00030260 	.word	0x00030260

000b5288 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b5288:	b508      	push	{r3, lr}
   b528a:	4b02      	ldr	r3, [pc, #8]	; (b5294 <log_message_v+0xc>)
   b528c:	681b      	ldr	r3, [r3, #0]
   b528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5290:	9301      	str	r3, [sp, #4]
   b5292:	bd08      	pop	{r3, pc}
   b5294:	00030260 	.word	0x00030260

000b5298 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b5298:	b508      	push	{r3, lr}
   b529a:	4b02      	ldr	r3, [pc, #8]	; (b52a4 <log_level_name+0xc>)
   b529c:	681b      	ldr	r3, [r3, #0]
   b529e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b52a0:	9301      	str	r3, [sp, #4]
   b52a2:	bd08      	pop	{r3, pc}
   b52a4:	00030260 	.word	0x00030260

000b52a8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b52a8:	b508      	push	{r3, lr}
   b52aa:	4b02      	ldr	r3, [pc, #8]	; (b52b4 <log_set_callbacks+0xc>)
   b52ac:	681b      	ldr	r3, [r3, #0]
   b52ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b52b0:	9301      	str	r3, [sp, #4]
   b52b2:	bd08      	pop	{r3, pc}
   b52b4:	00030260 	.word	0x00030260

000b52b8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b52b8:	b508      	push	{r3, lr}
   b52ba:	4b02      	ldr	r3, [pc, #8]	; (b52c4 <set_system_mode+0xc>)
   b52bc:	681b      	ldr	r3, [r3, #0]
   b52be:	685b      	ldr	r3, [r3, #4]
   b52c0:	9301      	str	r3, [sp, #4]
   b52c2:	bd08      	pop	{r3, pc}
   b52c4:	00030220 	.word	0x00030220

000b52c8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b52c8:	b508      	push	{r3, lr}
   b52ca:	4b02      	ldr	r3, [pc, #8]	; (b52d4 <system_delay_ms+0xc>)
   b52cc:	681b      	ldr	r3, [r3, #0]
   b52ce:	695b      	ldr	r3, [r3, #20]
   b52d0:	9301      	str	r3, [sp, #4]
   b52d2:	bd08      	pop	{r3, pc}
   b52d4:	00030220 	.word	0x00030220

000b52d8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b52d8:	b508      	push	{r3, lr}
   b52da:	4b02      	ldr	r3, [pc, #8]	; (b52e4 <system_thread_set_state+0xc>)
   b52dc:	681b      	ldr	r3, [r3, #0]
   b52de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b52e0:	9301      	str	r3, [sp, #4]
   b52e2:	bd08      	pop	{r3, pc}
   b52e4:	00030220 	.word	0x00030220

000b52e8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b52e8:	b508      	push	{r3, lr}
   b52ea:	4b02      	ldr	r3, [pc, #8]	; (b52f4 <application_thread_current+0xc>)
   b52ec:	681b      	ldr	r3, [r3, #0]
   b52ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b52f0:	9301      	str	r3, [sp, #4]
   b52f2:	bd08      	pop	{r3, pc}
   b52f4:	00030220 	.word	0x00030220

000b52f8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b52f8:	b508      	push	{r3, lr}
   b52fa:	4b02      	ldr	r3, [pc, #8]	; (b5304 <application_thread_invoke+0xc>)
   b52fc:	681b      	ldr	r3, [r3, #0]
   b52fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5300:	9301      	str	r3, [sp, #4]
   b5302:	bd08      	pop	{r3, pc}
   b5304:	00030220 	.word	0x00030220

000b5308 <system_format_diag_data>:
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))
   b5308:	b508      	push	{r3, lr}
   b530a:	4b03      	ldr	r3, [pc, #12]	; (b5318 <system_format_diag_data+0x10>)
   b530c:	681b      	ldr	r3, [r3, #0]
   b530e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b5312:	9301      	str	r3, [sp, #4]
   b5314:	bd08      	pop	{r3, pc}
   b5316:	0000      	.short	0x0000
   b5318:	00030220 	.word	0x00030220

000b531c <system_ctrl_set_app_request_handler>:

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b531c:	b508      	push	{r3, lr}
   b531e:	4b03      	ldr	r3, [pc, #12]	; (b532c <system_ctrl_set_app_request_handler+0x10>)
   b5320:	681b      	ldr	r3, [r3, #0]
   b5322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5326:	9301      	str	r3, [sp, #4]
   b5328:	bd08      	pop	{r3, pc}
   b532a:	0000      	.short	0x0000
   b532c:	00030220 	.word	0x00030220

000b5330 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5330:	b508      	push	{r3, lr}
   b5332:	4b03      	ldr	r3, [pc, #12]	; (b5340 <system_ctrl_set_result+0x10>)
   b5334:	681b      	ldr	r3, [r3, #0]
   b5336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b533a:	9301      	str	r3, [sp, #4]
   b533c:	bd08      	pop	{r3, pc}
   b533e:	0000      	.short	0x0000
   b5340:	00030220 	.word	0x00030220

000b5344 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b5344:	b508      	push	{r3, lr}
   b5346:	4b02      	ldr	r3, [pc, #8]	; (b5350 <spark_variable+0xc>)
   b5348:	681b      	ldr	r3, [r3, #0]
   b534a:	681b      	ldr	r3, [r3, #0]
   b534c:	9301      	str	r3, [sp, #4]
   b534e:	bd08      	pop	{r3, pc}
   b5350:	00030244 	.word	0x00030244

000b5354 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b5354:	b508      	push	{r3, lr}
   b5356:	4b02      	ldr	r3, [pc, #8]	; (b5360 <spark_function+0xc>)
   b5358:	681b      	ldr	r3, [r3, #0]
   b535a:	685b      	ldr	r3, [r3, #4]
   b535c:	9301      	str	r3, [sp, #4]
   b535e:	bd08      	pop	{r3, pc}
   b5360:	00030244 	.word	0x00030244

000b5364 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5364:	b508      	push	{r3, lr}
   b5366:	4b02      	ldr	r3, [pc, #8]	; (b5370 <spark_cloud_flag_connected+0xc>)
   b5368:	681b      	ldr	r3, [r3, #0]
   b536a:	695b      	ldr	r3, [r3, #20]
   b536c:	9301      	str	r3, [sp, #4]
   b536e:	bd08      	pop	{r3, pc}
   b5370:	00030244 	.word	0x00030244

000b5374 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5374:	b508      	push	{r3, lr}
   b5376:	4b02      	ldr	r3, [pc, #8]	; (b5380 <spark_send_event+0xc>)
   b5378:	681b      	ldr	r3, [r3, #0]
   b537a:	6a1b      	ldr	r3, [r3, #32]
   b537c:	9301      	str	r3, [sp, #4]
   b537e:	bd08      	pop	{r3, pc}
   b5380:	00030244 	.word	0x00030244

000b5384 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b5384:	b508      	push	{r3, lr}
   b5386:	4b02      	ldr	r3, [pc, #8]	; (b5390 <spark_sync_time+0xc>)
   b5388:	681b      	ldr	r3, [r3, #0]
   b538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b538c:	9301      	str	r3, [sp, #4]
   b538e:	bd08      	pop	{r3, pc}
   b5390:	00030244 	.word	0x00030244

000b5394 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5394:	b508      	push	{r3, lr}
   b5396:	4b02      	ldr	r3, [pc, #8]	; (b53a0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5398:	681b      	ldr	r3, [r3, #0]
   b539a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b539c:	9301      	str	r3, [sp, #4]
   b539e:	bd08      	pop	{r3, pc}
   b53a0:	00030244 	.word	0x00030244

000b53a4 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   b53a4:	b508      	push	{r3, lr}
   b53a6:	4b02      	ldr	r3, [pc, #8]	; (b53b0 <network_config+0xc>)
   b53a8:	681b      	ldr	r3, [r3, #0]
   b53aa:	681b      	ldr	r3, [r3, #0]
   b53ac:	9301      	str	r3, [sp, #4]
   b53ae:	bd08      	pop	{r3, pc}
   b53b0:	00030240 	.word	0x00030240

000b53b4 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b53b4:	b508      	push	{r3, lr}
   b53b6:	4b02      	ldr	r3, [pc, #8]	; (b53c0 <network_connect+0xc>)
   b53b8:	681b      	ldr	r3, [r3, #0]
   b53ba:	685b      	ldr	r3, [r3, #4]
   b53bc:	9301      	str	r3, [sp, #4]
   b53be:	bd08      	pop	{r3, pc}
   b53c0:	00030240 	.word	0x00030240

000b53c4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b53c4:	b508      	push	{r3, lr}
   b53c6:	4b02      	ldr	r3, [pc, #8]	; (b53d0 <network_connecting+0xc>)
   b53c8:	681b      	ldr	r3, [r3, #0]
   b53ca:	689b      	ldr	r3, [r3, #8]
   b53cc:	9301      	str	r3, [sp, #4]
   b53ce:	bd08      	pop	{r3, pc}
   b53d0:	00030240 	.word	0x00030240

000b53d4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b53d4:	b508      	push	{r3, lr}
   b53d6:	4b02      	ldr	r3, [pc, #8]	; (b53e0 <network_disconnect+0xc>)
   b53d8:	681b      	ldr	r3, [r3, #0]
   b53da:	68db      	ldr	r3, [r3, #12]
   b53dc:	9301      	str	r3, [sp, #4]
   b53de:	bd08      	pop	{r3, pc}
   b53e0:	00030240 	.word	0x00030240

000b53e4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b53e4:	b508      	push	{r3, lr}
   b53e6:	4b02      	ldr	r3, [pc, #8]	; (b53f0 <network_ready+0xc>)
   b53e8:	681b      	ldr	r3, [r3, #0]
   b53ea:	691b      	ldr	r3, [r3, #16]
   b53ec:	9301      	str	r3, [sp, #4]
   b53ee:	bd08      	pop	{r3, pc}
   b53f0:	00030240 	.word	0x00030240

000b53f4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b53f4:	b508      	push	{r3, lr}
   b53f6:	4b02      	ldr	r3, [pc, #8]	; (b5400 <network_on+0xc>)
   b53f8:	681b      	ldr	r3, [r3, #0]
   b53fa:	695b      	ldr	r3, [r3, #20]
   b53fc:	9301      	str	r3, [sp, #4]
   b53fe:	bd08      	pop	{r3, pc}
   b5400:	00030240 	.word	0x00030240

000b5404 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5404:	b508      	push	{r3, lr}
   b5406:	4b02      	ldr	r3, [pc, #8]	; (b5410 <network_off+0xc>)
   b5408:	681b      	ldr	r3, [r3, #0]
   b540a:	699b      	ldr	r3, [r3, #24]
   b540c:	9301      	str	r3, [sp, #4]
   b540e:	bd08      	pop	{r3, pc}
   b5410:	00030240 	.word	0x00030240

000b5414 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5414:	b508      	push	{r3, lr}
   b5416:	4b02      	ldr	r3, [pc, #8]	; (b5420 <network_listen+0xc>)
   b5418:	681b      	ldr	r3, [r3, #0]
   b541a:	69db      	ldr	r3, [r3, #28]
   b541c:	9301      	str	r3, [sp, #4]
   b541e:	bd08      	pop	{r3, pc}
   b5420:	00030240 	.word	0x00030240

000b5424 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5424:	b508      	push	{r3, lr}
   b5426:	4b02      	ldr	r3, [pc, #8]	; (b5430 <network_listening+0xc>)
   b5428:	681b      	ldr	r3, [r3, #0]
   b542a:	6a1b      	ldr	r3, [r3, #32]
   b542c:	9301      	str	r3, [sp, #4]
   b542e:	bd08      	pop	{r3, pc}
   b5430:	00030240 	.word	0x00030240

000b5434 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5434:	b508      	push	{r3, lr}
   b5436:	4b02      	ldr	r3, [pc, #8]	; (b5440 <network_set_listen_timeout+0xc>)
   b5438:	681b      	ldr	r3, [r3, #0]
   b543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b543c:	9301      	str	r3, [sp, #4]
   b543e:	bd08      	pop	{r3, pc}
   b5440:	00030240 	.word	0x00030240

000b5444 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5444:	b508      	push	{r3, lr}
   b5446:	4b02      	ldr	r3, [pc, #8]	; (b5450 <network_get_listen_timeout+0xc>)
   b5448:	681b      	ldr	r3, [r3, #0]
   b544a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b544c:	9301      	str	r3, [sp, #4]
   b544e:	bd08      	pop	{r3, pc}
   b5450:	00030240 	.word	0x00030240

000b5454 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5454:	b508      	push	{r3, lr}
   b5456:	4b02      	ldr	r3, [pc, #8]	; (b5460 <network_is_on+0xc>)
   b5458:	681b      	ldr	r3, [r3, #0]
   b545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b545c:	9301      	str	r3, [sp, #4]
   b545e:	bd08      	pop	{r3, pc}
   b5460:	00030240 	.word	0x00030240

000b5464 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5464:	b508      	push	{r3, lr}
   b5466:	4b02      	ldr	r3, [pc, #8]	; (b5470 <network_is_off+0xc>)
   b5468:	681b      	ldr	r3, [r3, #0]
   b546a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b546c:	9301      	str	r3, [sp, #4]
   b546e:	bd08      	pop	{r3, pc}
   b5470:	00030240 	.word	0x00030240

000b5474 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5474:	b508      	push	{r3, lr}
   b5476:	4b02      	ldr	r3, [pc, #8]	; (b5480 <malloc+0xc>)
   b5478:	681b      	ldr	r3, [r3, #0]
   b547a:	681b      	ldr	r3, [r3, #0]
   b547c:	9301      	str	r3, [sp, #4]
   b547e:	bd08      	pop	{r3, pc}
   b5480:	0003021c 	.word	0x0003021c

000b5484 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5484:	b508      	push	{r3, lr}
   b5486:	4b02      	ldr	r3, [pc, #8]	; (b5490 <free+0xc>)
   b5488:	681b      	ldr	r3, [r3, #0]
   b548a:	685b      	ldr	r3, [r3, #4]
   b548c:	9301      	str	r3, [sp, #4]
   b548e:	bd08      	pop	{r3, pc}
   b5490:	0003021c 	.word	0x0003021c

000b5494 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5494:	b508      	push	{r3, lr}
   b5496:	4b02      	ldr	r3, [pc, #8]	; (b54a0 <realloc+0xc>)
   b5498:	681b      	ldr	r3, [r3, #0]
   b549a:	689b      	ldr	r3, [r3, #8]
   b549c:	9301      	str	r3, [sp, #4]
   b549e:	bd08      	pop	{r3, pc}
   b54a0:	0003021c 	.word	0x0003021c

000b54a4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b54a4:	b508      	push	{r3, lr}
   b54a6:	4b02      	ldr	r3, [pc, #8]	; (b54b0 <vsnprintf+0xc>)
   b54a8:	681b      	ldr	r3, [r3, #0]
   b54aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b54ac:	9301      	str	r3, [sp, #4]
   b54ae:	bd08      	pop	{r3, pc}
   b54b0:	0003021c 	.word	0x0003021c

000b54b4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b54b4:	b508      	push	{r3, lr}
   b54b6:	4b02      	ldr	r3, [pc, #8]	; (b54c0 <abort+0xc>)
   b54b8:	681b      	ldr	r3, [r3, #0]
   b54ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b54bc:	9301      	str	r3, [sp, #4]
   b54be:	bd08      	pop	{r3, pc}
   b54c0:	0003021c 	.word	0x0003021c

000b54c4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b54c4:	b508      	push	{r3, lr}
   b54c6:	4b02      	ldr	r3, [pc, #8]	; (b54d0 <_malloc_r+0xc>)
   b54c8:	681b      	ldr	r3, [r3, #0]
   b54ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b54cc:	9301      	str	r3, [sp, #4]
   b54ce:	bd08      	pop	{r3, pc}
   b54d0:	0003021c 	.word	0x0003021c

000b54d4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b54d4:	b508      	push	{r3, lr}
   b54d6:	4b02      	ldr	r3, [pc, #8]	; (b54e0 <__errno+0xc>)
   b54d8:	681b      	ldr	r3, [r3, #0]
   b54da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b54dc:	9301      	str	r3, [sp, #4]
   b54de:	bd08      	pop	{r3, pc}
   b54e0:	0003021c 	.word	0x0003021c

000b54e4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b54e4:	b508      	push	{r3, lr}
   b54e6:	4b02      	ldr	r3, [pc, #8]	; (b54f0 <__assert_func+0xc>)
   b54e8:	681b      	ldr	r3, [r3, #0]
   b54ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b54ec:	9301      	str	r3, [sp, #4]
   b54ee:	bd08      	pop	{r3, pc}
   b54f0:	0003021c 	.word	0x0003021c

000b54f4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b54f4:	b508      	push	{r3, lr}
   b54f6:	4b02      	ldr	r3, [pc, #8]	; (b5500 <newlib_impure_ptr_callback+0xc>)
   b54f8:	681b      	ldr	r3, [r3, #0]
   b54fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b54fc:	9301      	str	r3, [sp, #4]
   b54fe:	bd08      	pop	{r3, pc}
   b5500:	0003021c 	.word	0x0003021c

000b5504 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5504:	2100      	movs	r1, #0
   b5506:	f7ff bedf 	b.w	b52c8 <system_delay_ms>

000b550a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b550a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b550c:	6883      	ldr	r3, [r0, #8]
   b550e:	4604      	mov	r4, r0
   b5510:	b90b      	cbnz	r3, b5516 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5512:	f002 fd45 	bl	b7fa0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5516:	68c3      	ldr	r3, [r0, #12]
   b5518:	4798      	blx	r3
      if (_M_manager)
   b551a:	68a3      	ldr	r3, [r4, #8]
   b551c:	b11b      	cbz	r3, b5526 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b551e:	2203      	movs	r2, #3
   b5520:	4621      	mov	r1, r4
   b5522:	4620      	mov	r0, r4
   b5524:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b5526:	4620      	mov	r0, r4
   b5528:	2110      	movs	r1, #16
}
   b552a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b552e:	f7ff ba7a 	b.w	b4a26 <_ZdlPvj>

000b5532 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5532:	b510      	push	{r4, lr}
      if (_M_manager)
   b5534:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5536:	4604      	mov	r4, r0
      if (_M_manager)
   b5538:	b113      	cbz	r3, b5540 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b553a:	2203      	movs	r2, #3
   b553c:	4601      	mov	r1, r0
   b553e:	4798      	blx	r3
    }
   b5540:	4620      	mov	r0, r4
   b5542:	bd10      	pop	{r4, pc}

000b5544 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5544:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5546:	6843      	ldr	r3, [r0, #4]
   b5548:	3b01      	subs	r3, #1
    {
   b554a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b554c:	6043      	str	r3, [r0, #4]
   b554e:	b963      	cbnz	r3, b556a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5550:	6803      	ldr	r3, [r0, #0]
   b5552:	689b      	ldr	r3, [r3, #8]
   b5554:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5556:	68a3      	ldr	r3, [r4, #8]
   b5558:	3b01      	subs	r3, #1
   b555a:	60a3      	str	r3, [r4, #8]
   b555c:	b92b      	cbnz	r3, b556a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b555e:	6823      	ldr	r3, [r4, #0]
   b5560:	4620      	mov	r0, r4
   b5562:	68db      	ldr	r3, [r3, #12]
    }
   b5564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5568:	4718      	bx	r3
    }
   b556a:	bd10      	pop	{r4, pc}

000b556c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b556c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b556e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5572:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5574:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b5578:	42ae      	cmp	r6, r5
   b557a:	d004      	beq.n	b5586 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b557c:	4628      	mov	r0, r5
   b557e:	f002 f949 	bl	b7814 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5582:	3510      	adds	r5, #16
   b5584:	e7f8      	b.n	b5578 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5586:	6820      	ldr	r0, [r4, #0]
   b5588:	f7ff ff7c 	bl	b5484 <free>
    AllocatorT::free(data_);
}
   b558c:	4620      	mov	r0, r4
   b558e:	bd70      	pop	{r4, r5, r6, pc}

000b5590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b5590:	b510      	push	{r4, lr}
   b5592:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5594:	6800      	ldr	r0, [r0, #0]
   b5596:	b108      	cbz	r0, b559c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b5598:	f7ff ffd4 	bl	b5544 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b559c:	4620      	mov	r0, r4
   b559e:	bd10      	pop	{r4, pc}

000b55a0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b55a0:	b513      	push	{r0, r1, r4, lr}
   b55a2:	460b      	mov	r3, r1
   b55a4:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b55a6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b55aa:	466c      	mov	r4, sp
   b55ac:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b55b0:	e893 0003 	ldmia.w	r3, {r0, r1}
   b55b4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b55b8:	e894 0003 	ldmia.w	r4, {r0, r1}
   b55bc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b55c0:	b002      	add	sp, #8
   b55c2:	bd10      	pop	{r4, pc}

000b55c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b55c4:	4802      	ldr	r0, [pc, #8]	; (b55d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b55c6:	2300      	movs	r3, #0
   b55c8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b55ca:	f7ff bced 	b.w	b4fa8 <os_mutex_recursive_create>
   b55ce:	bf00      	nop
   b55d0:	2003e644 	.word	0x2003e644

000b55d4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b55d4:	2200      	movs	r2, #0
   b55d6:	6840      	ldr	r0, [r0, #4]
   b55d8:	4611      	mov	r1, r2
   b55da:	f7ff bf03 	b.w	b53e4 <network_ready>

000b55de <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b55de:	2200      	movs	r2, #0
   b55e0:	6840      	ldr	r0, [r0, #4]
   b55e2:	4611      	mov	r1, r2
   b55e4:	f7ff bf1e 	b.w	b5424 <network_listening>

000b55e8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b55e8:	2200      	movs	r2, #0
   b55ea:	6840      	ldr	r0, [r0, #4]
   b55ec:	4611      	mov	r1, r2
   b55ee:	f7ff bf29 	b.w	b5444 <network_get_listen_timeout>

000b55f2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b55f2:	6840      	ldr	r0, [r0, #4]
   b55f4:	2200      	movs	r2, #0
   b55f6:	f7ff bf1d 	b.w	b5434 <network_set_listen_timeout>

000b55fa <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b55fa:	6840      	ldr	r0, [r0, #4]
   b55fc:	2200      	movs	r2, #0
   b55fe:	f081 0101 	eor.w	r1, r1, #1
   b5602:	f7ff bf07 	b.w	b5414 <network_listen>

000b5606 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5606:	2300      	movs	r3, #0
   b5608:	6840      	ldr	r0, [r0, #4]
   b560a:	461a      	mov	r2, r3
   b560c:	4619      	mov	r1, r3
   b560e:	f7ff bef9 	b.w	b5404 <network_off>

000b5612 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5612:	2300      	movs	r3, #0
   b5614:	6840      	ldr	r0, [r0, #4]
   b5616:	461a      	mov	r2, r3
   b5618:	4619      	mov	r1, r3
   b561a:	f7ff beeb 	b.w	b53f4 <network_on>

000b561e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b561e:	2200      	movs	r2, #0
   b5620:	6840      	ldr	r0, [r0, #4]
   b5622:	4611      	mov	r1, r2
   b5624:	f7ff bece 	b.w	b53c4 <network_connecting>

000b5628 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5628:	6840      	ldr	r0, [r0, #4]
   b562a:	2200      	movs	r2, #0
   b562c:	2102      	movs	r1, #2
   b562e:	f7ff bed1 	b.w	b53d4 <network_disconnect>

000b5632 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5632:	2300      	movs	r3, #0
   b5634:	6840      	ldr	r0, [r0, #4]
   b5636:	461a      	mov	r2, r3
   b5638:	f7ff bebc 	b.w	b53b4 <network_connect>

000b563c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b563c:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b563e:	4b13      	ldr	r3, [pc, #76]	; (b568c <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b5640:	6003      	str	r3, [r0, #0]
   b5642:	2518      	movs	r5, #24
   b5644:	3330      	adds	r3, #48	; 0x30
   b5646:	b086      	sub	sp, #24
   b5648:	460e      	mov	r6, r1
   b564a:	6043      	str	r3, [r0, #4]
   b564c:	462a      	mov	r2, r5
   b564e:	2100      	movs	r1, #0
   b5650:	4604      	mov	r4, r0
   b5652:	3008      	adds	r0, #8
   b5654:	f002 fcde 	bl	b8014 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b5658:	2200      	movs	r2, #0
   b565a:	6870      	ldr	r0, [r6, #4]
   b565c:	4611      	mov	r1, r2
   b565e:	f7ff fec1 	bl	b53e4 <network_ready>
   b5662:	b178      	cbz	r0, b5684 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b5664:	2100      	movs	r1, #0
   b5666:	462a      	mov	r2, r5
   b5668:	4668      	mov	r0, sp
   b566a:	f002 fcd3 	bl	b8014 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b566e:	4669      	mov	r1, sp
   b5670:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b5672:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b5676:	f7ff fc8f 	bl	b4f98 <cellular_signal>
   b567a:	b918      	cbnz	r0, b5684 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b567c:	4669      	mov	r1, sp
   b567e:	4620      	mov	r0, r4
   b5680:	f000 f8b8 	bl	b57f4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b5684:	4620      	mov	r0, r4
   b5686:	b006      	add	sp, #24
   b5688:	bd70      	pop	{r4, r5, r6, pc}
   b568a:	bf00      	nop
   b568c:	000b844c 	.word	0x000b844c

000b5690 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b5690:	4b08      	ldr	r3, [pc, #32]	; (b56b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b5692:	b510      	push	{r4, lr}
   b5694:	2428      	movs	r4, #40	; 0x28
   b5696:	4622      	mov	r2, r4
   b5698:	4618      	mov	r0, r3
   b569a:	2100      	movs	r1, #0
   b569c:	f002 fcba 	bl	b8014 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b56a0:	4b05      	ldr	r3, [pc, #20]	; (b56b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b56a2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b56a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b56a8:	6042      	str	r2, [r0, #4]
   b56aa:	2204      	movs	r2, #4
   b56ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b56ae:	4a03      	ldr	r2, [pc, #12]	; (b56bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b56b0:	601a      	str	r2, [r3, #0]
   b56b2:	bd10      	pop	{r4, pc}
   b56b4:	2003e650 	.word	0x2003e650
   b56b8:	2003e648 	.word	0x2003e648
   b56bc:	000b8410 	.word	0x000b8410

000b56c0 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b56c0:	4770      	bx	lr

000b56c2 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b56c2:	7b00      	ldrb	r0, [r0, #12]
   b56c4:	4770      	bx	lr

000b56c6 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b56c6:	7b03      	ldrb	r3, [r0, #12]
   b56c8:	b14b      	cbz	r3, b56de <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b56ca:	6903      	ldr	r3, [r0, #16]
   b56cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b56d0:	d005      	beq.n	b56de <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b56d2:	6980      	ldr	r0, [r0, #24]
   b56d4:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b56d8:	bf18      	it	ne
   b56da:	2001      	movne	r0, #1
   b56dc:	4770      	bx	lr
   b56de:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b56e0:	4770      	bx	lr

000b56e2 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b56e2:	6803      	ldr	r3, [r0, #0]
   b56e4:	6a1b      	ldr	r3, [r3, #32]
   b56e6:	4718      	bx	r3

000b56e8 <_ZNK14CellularSignal7printToER5Print>:
{
   b56e8:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b56ea:	6803      	ldr	r3, [r0, #0]
{
   b56ec:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b56ee:	691b      	ldr	r3, [r3, #16]
{
   b56f0:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b56f2:	4798      	blx	r3
   b56f4:	2102      	movs	r1, #2
   b56f6:	4628      	mov	r0, r5
   b56f8:	f002 f864 	bl	b77c4 <_ZN5Print5printEfi>
    n += p.print(',');
   b56fc:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b56fe:	4604      	mov	r4, r0
    n += p.print(',');
   b5700:	4628      	mov	r0, r5
   b5702:	f001 ff75 	bl	b75f0 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b5706:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b5708:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b570a:	699b      	ldr	r3, [r3, #24]
   b570c:	4630      	mov	r0, r6
   b570e:	4798      	blx	r3
   b5710:	2102      	movs	r1, #2
   b5712:	4628      	mov	r0, r5
   b5714:	f002 f856 	bl	b77c4 <_ZN5Print5printEfi>
}
   b5718:	4420      	add	r0, r4
   b571a:	bd70      	pop	{r4, r5, r6, pc}

000b571c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b571c:	f1a0 0004 	sub.w	r0, r0, #4
   b5720:	f7ff bfe2 	b.w	b56e8 <_ZNK14CellularSignal7printToER5Print>

000b5724 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b5724:	b510      	push	{r4, lr}
   b5726:	2120      	movs	r1, #32
   b5728:	4604      	mov	r4, r0
   b572a:	f7ff f97c 	bl	b4a26 <_ZdlPvj>
   b572e:	4620      	mov	r0, r4
   b5730:	bd10      	pop	{r4, pc}
	...

000b5734 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b5734:	7b03      	ldrb	r3, [r0, #12]
   b5736:	b17b      	cbz	r3, b5758 <_ZNK14CellularSignal11getStrengthEv+0x24>
   b5738:	6943      	ldr	r3, [r0, #20]
   b573a:	2b00      	cmp	r3, #0
   b573c:	db0c      	blt.n	b5758 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b573e:	ee07 3a90 	vmov	s15, r3
   b5742:	ed9f 7a07 	vldr	s14, [pc, #28]	; b5760 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b5746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b574a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b574e:	eddf 7a05 	vldr	s15, [pc, #20]	; b5764 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b5752:	ee20 0a27 	vmul.f32	s0, s0, s15
   b5756:	4770      	bx	lr
    return -1.0f;
   b5758:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b575c:	4770      	bx	lr
   b575e:	bf00      	nop
   b5760:	477fff00 	.word	0x477fff00
   b5764:	42c80000 	.word	0x42c80000

000b5768 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b5768:	7b03      	ldrb	r3, [r0, #12]
   b576a:	b163      	cbz	r3, b5786 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b576c:	6903      	ldr	r3, [r0, #16]
   b576e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b5772:	d008      	beq.n	b5786 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b5774:	ee07 3a90 	vmov	s15, r3
   b5778:	ed9f 7a04 	vldr	s14, [pc, #16]	; b578c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b577c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5780:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b5784:	4770      	bx	lr
    return 0.0f;
   b5786:	ed9f 0a02 	vldr	s0, [pc, #8]	; b5790 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b578a:	4770      	bx	lr
   b578c:	42c80000 	.word	0x42c80000
   b5790:	00000000 	.word	0x00000000

000b5794 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b5794:	7b03      	ldrb	r3, [r0, #12]
   b5796:	b17b      	cbz	r3, b57b8 <_ZNK14CellularSignal10getQualityEv+0x24>
   b5798:	69c3      	ldr	r3, [r0, #28]
   b579a:	2b00      	cmp	r3, #0
   b579c:	db0c      	blt.n	b57b8 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b579e:	ee07 3a90 	vmov	s15, r3
   b57a2:	ed9f 7a07 	vldr	s14, [pc, #28]	; b57c0 <_ZNK14CellularSignal10getQualityEv+0x2c>
   b57a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b57aa:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b57ae:	eddf 7a05 	vldr	s15, [pc, #20]	; b57c4 <_ZNK14CellularSignal10getQualityEv+0x30>
   b57b2:	ee20 0a27 	vmul.f32	s0, s0, s15
   b57b6:	4770      	bx	lr
    return -1.0f;
   b57b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b57bc:	4770      	bx	lr
   b57be:	bf00      	nop
   b57c0:	477fff00 	.word	0x477fff00
   b57c4:	42c80000 	.word	0x42c80000

000b57c8 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b57c8:	7b03      	ldrb	r3, [r0, #12]
   b57ca:	b163      	cbz	r3, b57e6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b57cc:	6983      	ldr	r3, [r0, #24]
   b57ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b57d2:	d008      	beq.n	b57e6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b57d4:	ee07 3a90 	vmov	s15, r3
   b57d8:	ed9f 7a04 	vldr	s14, [pc, #16]	; b57ec <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b57dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b57e0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b57e4:	4770      	bx	lr
    return 0.0f;
   b57e6:	ed9f 0a02 	vldr	s0, [pc, #8]	; b57f0 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b57ea:	4770      	bx	lr
   b57ec:	42c80000 	.word	0x42c80000
   b57f0:	00000000 	.word	0x00000000

000b57f4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b57f4:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b57f6:	460d      	mov	r5, r1
   b57f8:	f100 0408 	add.w	r4, r0, #8
   b57fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b57fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5800:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5804:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b5808:	2001      	movs	r0, #1
   b580a:	bd30      	pop	{r4, r5, pc}

000b580c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b580c:	4770      	bx	lr

000b580e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b580e:	2000      	movs	r0, #0
   b5810:	4770      	bx	lr

000b5812 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5812:	b510      	push	{r4, lr}
   b5814:	2110      	movs	r1, #16
   b5816:	4604      	mov	r4, r0
   b5818:	f7ff f905 	bl	b4a26 <_ZdlPvj>
   b581c:	4620      	mov	r0, r4
   b581e:	bd10      	pop	{r4, pc}

000b5820 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5820:	b508      	push	{r3, lr}
      { delete this; }
   b5822:	f7ff fff6 	bl	b5812 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b5826:	bd08      	pop	{r3, pc}

000b5828 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5828:	b530      	push	{r4, r5, lr}
        type_(type) {
   b582a:	2200      	movs	r2, #0
   b582c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5830:	6002      	str	r2, [r0, #0]
   b5832:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5834:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b5836:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5838:	680c      	ldr	r4, [r1, #0]
   b583a:	8085      	strh	r5, [r0, #4]
   b583c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b583e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5840:	bd30      	pop	{r4, r5, pc}

000b5842 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5842:	b510      	push	{r4, lr}
   b5844:	4604      	mov	r4, r0
    free((void*)msg_);
   b5846:	6800      	ldr	r0, [r0, #0]
   b5848:	f7ff fe1c 	bl	b5484 <free>
}
   b584c:	4620      	mov	r0, r4
   b584e:	bd10      	pop	{r4, pc}

000b5850 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5850:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5852:	68c4      	ldr	r4, [r0, #12]
   b5854:	b1f4      	cbz	r4, b5894 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b5856:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5858:	2b02      	cmp	r3, #2
   b585a:	d103      	bne.n	b5864 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b585c:	f104 000c 	add.w	r0, r4, #12
   b5860:	f7ff ffef 	bl	b5842 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5864:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b5866:	b135      	cbz	r5, b5876 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b5868:	4628      	mov	r0, r5
   b586a:	f7ff fe62 	bl	b5532 <_ZNSt14_Function_baseD1Ev>
   b586e:	2110      	movs	r1, #16
   b5870:	4628      	mov	r0, r5
   b5872:	f7ff f8d8 	bl	b4a26 <_ZdlPvj>
   b5876:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b5878:	b135      	cbz	r5, b5888 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b587a:	4628      	mov	r0, r5
   b587c:	f7ff fe59 	bl	b5532 <_ZNSt14_Function_baseD1Ev>
   b5880:	2110      	movs	r1, #16
   b5882:	4628      	mov	r0, r5
   b5884:	f7ff f8cf 	bl	b4a26 <_ZdlPvj>
   b5888:	4620      	mov	r0, r4
   b588a:	2114      	movs	r1, #20
   b588c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5890:	f7ff b8c9 	b.w	b4a26 <_ZdlPvj>
   b5894:	bd38      	pop	{r3, r4, r5, pc}

000b5896 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b5896:	b510      	push	{r4, lr}
   b5898:	b088      	sub	sp, #32
   b589a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b589c:	4668      	mov	r0, sp
   b589e:	f002 f804 	bl	b78aa <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b58a2:	4669      	mov	r1, sp
   b58a4:	a804      	add	r0, sp, #16
   b58a6:	f002 f84b 	bl	b7940 <_ZN6StringC1ERKS_>
   b58aa:	a804      	add	r0, sp, #16
   b58ac:	47a0      	blx	r4
   b58ae:	4604      	mov	r4, r0
   b58b0:	a804      	add	r0, sp, #16
   b58b2:	f001 ffaf 	bl	b7814 <_ZN6StringD1Ev>
    String p(param);
   b58b6:	4668      	mov	r0, sp
   b58b8:	f001 ffac 	bl	b7814 <_ZN6StringD1Ev>
}
   b58bc:	4620      	mov	r0, r4
   b58be:	b008      	add	sp, #32
   b58c0:	bd10      	pop	{r4, pc}

000b58c2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b58c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b58c4:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b58c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b58ca:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b58cc:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b58ce:	461a      	mov	r2, r3
   b58d0:	4669      	mov	r1, sp
   b58d2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b58d4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b58d8:	f8ad 4000 	strh.w	r4, [sp]
   b58dc:	f7ff fd3a 	bl	b5354 <spark_function>
}
   b58e0:	b004      	add	sp, #16
   b58e2:	bd10      	pop	{r4, pc}

000b58e4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b58e4:	680b      	ldr	r3, [r1, #0]
   b58e6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b58e8:	684b      	ldr	r3, [r1, #4]
   b58ea:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b58ec:	b113      	cbz	r3, b58f4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b58ee:	685a      	ldr	r2, [r3, #4]
   b58f0:	3201      	adds	r2, #1
   b58f2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b58f4:	4770      	bx	lr

000b58f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b58f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b58f8:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b58fa:	4668      	mov	r0, sp
   b58fc:	460d      	mov	r5, r1
   b58fe:	f7ff fff1 	bl	b58e4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5902:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5904:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5906:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b5908:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b590a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b590c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b590e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b5910:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5912:	f7ff fe3d 	bl	b5590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b5916:	b135      	cbz	r5, b5926 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b5918:	1d28      	adds	r0, r5, #4
   b591a:	f7ff fe39 	bl	b5590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b591e:	2108      	movs	r1, #8
   b5920:	4628      	mov	r0, r5
   b5922:	f7ff f880 	bl	b4a26 <_ZdlPvj>
        return p;
    }
   b5926:	4620      	mov	r0, r4
   b5928:	b003      	add	sp, #12
   b592a:	bd30      	pop	{r4, r5, pc}

000b592c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b592c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b592e:	b510      	push	{r4, lr}
      if (_M_empty())
   b5930:	b90a      	cbnz	r2, b5936 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5932:	f002 fb35 	bl	b7fa0 <_ZSt25__throw_bad_function_callv>
    }
   b5936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b593a:	68c3      	ldr	r3, [r0, #12]
   b593c:	4718      	bx	r3

000b593e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b593e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5940:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5942:	f100 0110 	add.w	r1, r0, #16
   b5946:	f7ff fff1 	bl	b592c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b594a:	bd08      	pop	{r3, pc}

000b594c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b594c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b594e:	b510      	push	{r4, lr}
      if (_M_empty())
   b5950:	b90a      	cbnz	r2, b5956 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5952:	f002 fb25 	bl	b7fa0 <_ZSt25__throw_bad_function_callv>
    }
   b5956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b595a:	68c3      	ldr	r3, [r0, #12]
   b595c:	4718      	bx	r3

000b595e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b595e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5960:	6800      	ldr	r0, [r0, #0]
   b5962:	f100 0110 	add.w	r1, r0, #16
   b5966:	f7ff fff1 	bl	b594c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b596a:	bd08      	pop	{r3, pc}

000b596c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b596c:	b538      	push	{r3, r4, r5, lr}
   b596e:	2300      	movs	r3, #0
   b5970:	4604      	mov	r4, r0
   b5972:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5974:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b5976:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5978:	f7ff f851 	bl	b4a1e <_Znwj>
   b597c:	b128      	cbz	r0, b598a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b597e:	2301      	movs	r3, #1
   b5980:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5984:	4b02      	ldr	r3, [pc, #8]	; (b5990 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b5986:	6003      	str	r3, [r0, #0]
   b5988:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b598a:	6020      	str	r0, [r4, #0]
	}
   b598c:	4620      	mov	r0, r4
   b598e:	bd38      	pop	{r3, r4, r5, pc}
   b5990:	000b8488 	.word	0x000b8488

000b5994 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5994:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5996:	2300      	movs	r3, #0
   b5998:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b599a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b599c:	4604      	mov	r4, r0
   b599e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b59a0:	b12b      	cbz	r3, b59ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b59a2:	2202      	movs	r2, #2
   b59a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b59a6:	68eb      	ldr	r3, [r5, #12]
   b59a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b59aa:	68ab      	ldr	r3, [r5, #8]
   b59ac:	60a3      	str	r3, [r4, #8]
    }
   b59ae:	4620      	mov	r0, r4
   b59b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b59b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b59b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b59b6:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b59b8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b59ba:	4668      	mov	r0, sp
   b59bc:	f7ff ff34 	bl	b5828 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b59c0:	f04f 0302 	mov.w	r3, #2
   b59c4:	e8d4 2f4f 	ldrexb	r2, [r4]
   b59c8:	2a00      	cmp	r2, #0
   b59ca:	d103      	bne.n	b59d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b59cc:	e8c4 3f41 	strexb	r1, r3, [r4]
   b59d0:	2900      	cmp	r1, #0
   b59d2:	d1f7      	bne.n	b59c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b59d4:	d125      	bne.n	b5a22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b59d6:	f104 050c 	add.w	r5, r4, #12
   b59da:	4669      	mov	r1, sp
   b59dc:	4628      	mov	r0, r5
   b59de:	f7ff ff23 	bl	b5828 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b59e2:	f3bf 8f5b 	dmb	ish
   b59e6:	2301      	movs	r3, #1
   b59e8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b59ea:	2000      	movs	r0, #0
   b59ec:	f104 0308 	add.w	r3, r4, #8
   b59f0:	f3bf 8f5b 	dmb	ish
   b59f4:	e853 6f00 	ldrex	r6, [r3]
   b59f8:	e843 0200 	strex	r2, r0, [r3]
   b59fc:	2a00      	cmp	r2, #0
   b59fe:	d1f9      	bne.n	b59f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5a00:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5a04:	b16e      	cbz	r6, b5a22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b5a06:	f7ff fc6f 	bl	b52e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5a0a:	b178      	cbz	r0, b5a2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5a0c:	4629      	mov	r1, r5
   b5a0e:	4630      	mov	r0, r6
   b5a10:	f7ff ff8c 	bl	b592c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5a14:	4630      	mov	r0, r6
   b5a16:	f7ff fd8c 	bl	b5532 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5a1a:	2110      	movs	r1, #16
   b5a1c:	4630      	mov	r0, r6
   b5a1e:	f7ff f802 	bl	b4a26 <_ZdlPvj>
        p_->setError(std::move(error));
   b5a22:	4668      	mov	r0, sp
   b5a24:	f7ff ff0d 	bl	b5842 <_ZN8particle5ErrorD1Ev>
    }
   b5a28:	b009      	add	sp, #36	; 0x24
   b5a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5a2c:	4631      	mov	r1, r6
   b5a2e:	a802      	add	r0, sp, #8
   b5a30:	f7ff ffb0 	bl	b5994 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5a34:	68e0      	ldr	r0, [r4, #12]
   b5a36:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5a3a:	b108      	cbz	r0, b5a40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5a3c:	f002 fb40 	bl	b80c0 <strdup>
        type_(type) {
   b5a40:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5a42:	2010      	movs	r0, #16
   b5a44:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5a48:	f7fe ffe9 	bl	b4a1e <_Znwj>
   b5a4c:	4605      	mov	r5, r0
   b5a4e:	b1e8      	cbz	r0, b5a8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5a50:	2700      	movs	r7, #0
   b5a52:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5a54:	2018      	movs	r0, #24
   b5a56:	f7fe ffe2 	bl	b4a1e <_Znwj>
   b5a5a:	4604      	mov	r4, r0
   b5a5c:	b188      	cbz	r0, b5a82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5a5e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5a60:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5a62:	a802      	add	r0, sp, #8
   b5a64:	f7ff fd9c 	bl	b55a0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5a68:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5a6a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5a6c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5a6e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5a70:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5a72:	a906      	add	r1, sp, #24
   b5a74:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5a76:	60e3      	str	r3, [r4, #12]
   b5a78:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5a7c:	9205      	str	r2, [sp, #20]
   b5a7e:	f7ff fed3 	bl	b5828 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b5a82:	4b08      	ldr	r3, [pc, #32]	; (b5aa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5a84:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5a86:	4b08      	ldr	r3, [pc, #32]	; (b5aa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5a88:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5a8a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5a8c:	a806      	add	r0, sp, #24
   b5a8e:	f7ff fed8 	bl	b5842 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5a92:	a802      	add	r0, sp, #8
   b5a94:	f7ff fd4d 	bl	b5532 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5a98:	2200      	movs	r2, #0
   b5a9a:	4629      	mov	r1, r5
   b5a9c:	4803      	ldr	r0, [pc, #12]	; (b5aac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5a9e:	f7ff fc2b 	bl	b52f8 <application_thread_invoke>
   b5aa2:	e7b7      	b.n	b5a14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5aa4:	000b593f 	.word	0x000b593f
   b5aa8:	000b5bc1 	.word	0x000b5bc1
   b5aac:	000b550b 	.word	0x000b550b

000b5ab0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ab4:	b08b      	sub	sp, #44	; 0x2c
   b5ab6:	4605      	mov	r5, r0
   b5ab8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5abc:	460f      	mov	r7, r1
   b5abe:	4690      	mov	r8, r2
   b5ac0:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5ac2:	f7ff fc4f 	bl	b5364 <spark_cloud_flag_connected>
   b5ac6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5ac8:	4683      	mov	fp, r0
   b5aca:	bb38      	cbnz	r0, b5b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5acc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5ad0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5ad2:	a905      	add	r1, sp, #20
   b5ad4:	4630      	mov	r0, r6
   b5ad6:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5ada:	f7ff fea5 	bl	b5828 <_ZN8particle5ErrorC1EOS0_>
   b5ade:	2014      	movs	r0, #20
   b5ae0:	f7fe ff9d 	bl	b4a1e <_Znwj>
   b5ae4:	4604      	mov	r4, r0
   b5ae6:	b148      	cbz	r0, b5afc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5ae8:	2302      	movs	r3, #2
   b5aea:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5aec:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5aee:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5af2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5af4:	4631      	mov	r1, r6
   b5af6:	300c      	adds	r0, #12
   b5af8:	f7ff fe96 	bl	b5828 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5afc:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5afe:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5b00:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5b04:	f7ff ff32 	bl	b596c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5b08:	4630      	mov	r0, r6
   b5b0a:	f7ff fe9a 	bl	b5842 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5b0e:	a805      	add	r0, sp, #20
   b5b10:	f7ff fe97 	bl	b5842 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5b14:	4628      	mov	r0, r5
   b5b16:	b00b      	add	sp, #44	; 0x2c
   b5b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5b1c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b5b1e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5b20:	2014      	movs	r0, #20
   b5b22:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b5b26:	9307      	str	r3, [sp, #28]
   b5b28:	f7fe ff79 	bl	b4a1e <_Znwj>
   b5b2c:	4601      	mov	r1, r0
   b5b2e:	b118      	cbz	r0, b5b38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5b30:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5b34:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5b36:	7044      	strb	r4, [r0, #1]
   b5b38:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5b3a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5b3c:	f7ff ff16 	bl	b596c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5b40:	4b1e      	ldr	r3, [pc, #120]	; (b5bbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b5b42:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5b44:	2008      	movs	r0, #8
   b5b46:	f7fe ff6a 	bl	b4a1e <_Znwj>
   b5b4a:	4604      	mov	r4, r0
   b5b4c:	b110      	cbz	r0, b5b54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5b4e:	a903      	add	r1, sp, #12
   b5b50:	f7ff fec8 	bl	b58e4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5b54:	9600      	str	r6, [sp, #0]
   b5b56:	fa5f f38a 	uxtb.w	r3, sl
   b5b5a:	464a      	mov	r2, r9
   b5b5c:	4641      	mov	r1, r8
   b5b5e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5b60:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5b62:	f7ff fc07 	bl	b5374 <spark_send_event>
   b5b66:	b9b8      	cbnz	r0, b5b98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5b68:	9b03      	ldr	r3, [sp, #12]
   b5b6a:	785b      	ldrb	r3, [r3, #1]
   b5b6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5b70:	b993      	cbnz	r3, b5b98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b5b72:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b5b76:	a905      	add	r1, sp, #20
   b5b78:	a803      	add	r0, sp, #12
   b5b7a:	9205      	str	r2, [sp, #20]
   b5b7c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5b80:	f7ff ff18 	bl	b59b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5b84:	a805      	add	r0, sp, #20
   b5b86:	f7ff fe5c 	bl	b5842 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5b8a:	a805      	add	r0, sp, #20
   b5b8c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5b8e:	f7ff feb2 	bl	b58f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5b92:	a806      	add	r0, sp, #24
   b5b94:	f7ff fcfc 	bl	b5590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5b98:	a903      	add	r1, sp, #12
   b5b9a:	a805      	add	r0, sp, #20
   b5b9c:	f7ff fea2 	bl	b58e4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5ba0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5ba2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5ba4:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b5ba6:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5ba8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5baa:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5bac:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5bae:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5bb0:	f7ff fcee 	bl	b5590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5bb4:	a804      	add	r0, sp, #16
   b5bb6:	f7ff fceb 	bl	b5590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5bba:	e7ab      	b.n	b5b14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5bbc:	000b5c3d 	.word	0x000b5c3d

000b5bc0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5bc0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5bc4:	4605      	mov	r5, r0
	switch (__op)
   b5bc6:	d103      	bne.n	b5bd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5bc8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5bca:	6003      	str	r3, [r0, #0]
      }
   b5bcc:	2000      	movs	r0, #0
   b5bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5bd0:	2a02      	cmp	r2, #2
   b5bd2:	d010      	beq.n	b5bf6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5bd4:	2a03      	cmp	r2, #3
   b5bd6:	d1f9      	bne.n	b5bcc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5bd8:	6804      	ldr	r4, [r0, #0]
   b5bda:	2c00      	cmp	r4, #0
   b5bdc:	d0f6      	beq.n	b5bcc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5bde:	f104 0010 	add.w	r0, r4, #16
   b5be2:	f7ff fe2e 	bl	b5842 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5be6:	4620      	mov	r0, r4
   b5be8:	f7ff fca3 	bl	b5532 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5bec:	2118      	movs	r1, #24
   b5bee:	4620      	mov	r0, r4
   b5bf0:	f7fe ff19 	bl	b4a26 <_ZdlPvj>
   b5bf4:	e7ea      	b.n	b5bcc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5bf6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5bf8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5bfa:	f7fe ff10 	bl	b4a1e <_Znwj>
   b5bfe:	4604      	mov	r4, r0
   b5c00:	b150      	cbz	r0, b5c18 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5c02:	4631      	mov	r1, r6
   b5c04:	f7ff fec6 	bl	b5994 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5c08:	6930      	ldr	r0, [r6, #16]
   b5c0a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5c0e:	b108      	cbz	r0, b5c14 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5c10:	f002 fa56 	bl	b80c0 <strdup>
        type_(type) {
   b5c14:	6120      	str	r0, [r4, #16]
   b5c16:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5c18:	602c      	str	r4, [r5, #0]
	}
   b5c1a:	e7d7      	b.n	b5bcc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5c1c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5c1c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5c1e:	2300      	movs	r3, #0
   b5c20:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5c22:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5c24:	4604      	mov	r4, r0
   b5c26:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5c28:	b12b      	cbz	r3, b5c36 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5c2a:	2202      	movs	r2, #2
   b5c2c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5c2e:	68eb      	ldr	r3, [r5, #12]
   b5c30:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5c32:	68ab      	ldr	r3, [r5, #8]
   b5c34:	60a3      	str	r3, [r4, #8]
    }
   b5c36:	4620      	mov	r0, r4
   b5c38:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5c3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5c3e:	b089      	sub	sp, #36	; 0x24
   b5c40:	4604      	mov	r4, r0
   b5c42:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5c44:	a801      	add	r0, sp, #4
   b5c46:	4611      	mov	r1, r2
   b5c48:	f7ff fe55 	bl	b58f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5c4c:	b1a4      	cbz	r4, b5c78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5c4e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5c50:	b11d      	cbz	r5, b5c5a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b5c52:	4628      	mov	r0, r5
   b5c54:	f002 fa34 	bl	b80c0 <strdup>
   b5c58:	4605      	mov	r5, r0
   b5c5a:	a801      	add	r0, sp, #4
   b5c5c:	a903      	add	r1, sp, #12
        type_(type) {
   b5c5e:	9503      	str	r5, [sp, #12]
   b5c60:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5c64:	f7ff fea6 	bl	b59b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5c68:	a803      	add	r0, sp, #12
   b5c6a:	f7ff fdea 	bl	b5842 <_ZN8particle5ErrorD1Ev>
   b5c6e:	a802      	add	r0, sp, #8
   b5c70:	f7ff fc8e 	bl	b5590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5c74:	b009      	add	sp, #36	; 0x24
   b5c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5c78:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5c7a:	2301      	movs	r3, #1
   b5c7c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5c80:	2a00      	cmp	r2, #0
   b5c82:	d103      	bne.n	b5c8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5c84:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5c88:	2900      	cmp	r1, #0
   b5c8a:	d1f7      	bne.n	b5c7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5c8c:	d1ef      	bne.n	b5c6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5c8e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5c90:	f3bf 8f5b 	dmb	ish
   b5c94:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5c96:	1d2b      	adds	r3, r5, #4
   b5c98:	f3bf 8f5b 	dmb	ish
   b5c9c:	e853 6f00 	ldrex	r6, [r3]
   b5ca0:	e843 4200 	strex	r2, r4, [r3]
   b5ca4:	2a00      	cmp	r2, #0
   b5ca6:	d1f9      	bne.n	b5c9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5ca8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5cac:	2e00      	cmp	r6, #0
   b5cae:	d0de      	beq.n	b5c6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5cb0:	4620      	mov	r0, r4
   b5cb2:	f7ff fb19 	bl	b52e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5cb6:	4607      	mov	r7, r0
   b5cb8:	b160      	cbz	r0, b5cd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5cba:	f105 010c 	add.w	r1, r5, #12
   b5cbe:	4630      	mov	r0, r6
   b5cc0:	f7ff fe44 	bl	b594c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5cc4:	4630      	mov	r0, r6
   b5cc6:	f7ff fc34 	bl	b5532 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5cca:	2110      	movs	r1, #16
   b5ccc:	4630      	mov	r0, r6
   b5cce:	f7fe feaa 	bl	b4a26 <_ZdlPvj>
   b5cd2:	e7cc      	b.n	b5c6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5cd4:	4631      	mov	r1, r6
   b5cd6:	a803      	add	r0, sp, #12
   b5cd8:	f7ff ffa0 	bl	b5c1c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5cdc:	7b2b      	ldrb	r3, [r5, #12]
   b5cde:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5ce2:	2010      	movs	r0, #16
   b5ce4:	f7fe fe9b 	bl	b4a1e <_Znwj>
   b5ce8:	4605      	mov	r5, r0
   b5cea:	b1d0      	cbz	r0, b5d22 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5cec:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5cee:	2014      	movs	r0, #20
   b5cf0:	f7fe fe95 	bl	b4a1e <_Znwj>
   b5cf4:	4604      	mov	r4, r0
   b5cf6:	b178      	cbz	r0, b5d18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5cf8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5cfa:	4601      	mov	r1, r0
   b5cfc:	a803      	add	r0, sp, #12
   b5cfe:	f7ff fc4f 	bl	b55a0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d02:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5d04:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5d06:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d08:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5d0a:	9205      	str	r2, [sp, #20]
   b5d0c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5d0e:	60e3      	str	r3, [r4, #12]
   b5d10:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5d14:	9206      	str	r2, [sp, #24]
   b5d16:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5d18:	4b06      	ldr	r3, [pc, #24]	; (b5d34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b5d1a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5d1c:	4b06      	ldr	r3, [pc, #24]	; (b5d38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5d1e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5d20:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5d22:	a803      	add	r0, sp, #12
   b5d24:	f7ff fc05 	bl	b5532 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5d28:	2200      	movs	r2, #0
   b5d2a:	4629      	mov	r1, r5
   b5d2c:	4803      	ldr	r0, [pc, #12]	; (b5d3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5d2e:	f7ff fae3 	bl	b52f8 <application_thread_invoke>
   b5d32:	e7c7      	b.n	b5cc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5d34:	000b595f 	.word	0x000b595f
   b5d38:	000b5d41 	.word	0x000b5d41
   b5d3c:	000b550b 	.word	0x000b550b

000b5d40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5d40:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5d42:	b570      	push	{r4, r5, r6, lr}
   b5d44:	4604      	mov	r4, r0
	switch (__op)
   b5d46:	d103      	bne.n	b5d50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5d48:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5d4a:	6003      	str	r3, [r0, #0]
      }
   b5d4c:	2000      	movs	r0, #0
   b5d4e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5d50:	2a02      	cmp	r2, #2
   b5d52:	d00c      	beq.n	b5d6e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5d54:	2a03      	cmp	r2, #3
   b5d56:	d1f9      	bne.n	b5d4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5d58:	6804      	ldr	r4, [r0, #0]
   b5d5a:	2c00      	cmp	r4, #0
   b5d5c:	d0f6      	beq.n	b5d4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5d5e:	4620      	mov	r0, r4
   b5d60:	f7ff fbe7 	bl	b5532 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5d64:	2114      	movs	r1, #20
   b5d66:	4620      	mov	r0, r4
   b5d68:	f7fe fe5d 	bl	b4a26 <_ZdlPvj>
   b5d6c:	e7ee      	b.n	b5d4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5d6e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5d70:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5d72:	f7fe fe54 	bl	b4a1e <_Znwj>
   b5d76:	4605      	mov	r5, r0
   b5d78:	b120      	cbz	r0, b5d84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5d7a:	4631      	mov	r1, r6
   b5d7c:	f7ff ff4e 	bl	b5c1c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5d80:	7c33      	ldrb	r3, [r6, #16]
   b5d82:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5d84:	6025      	str	r5, [r4, #0]
	}
   b5d86:	e7e1      	b.n	b5d4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5d88 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5d88:	2200      	movs	r2, #0
   b5d8a:	6840      	ldr	r0, [r0, #4]
   b5d8c:	4611      	mov	r1, r2
   b5d8e:	f7ff bb49 	b.w	b5424 <network_listening>

000b5d92 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5d92:	2200      	movs	r2, #0
   b5d94:	6840      	ldr	r0, [r0, #4]
   b5d96:	4611      	mov	r1, r2
   b5d98:	f7ff bb54 	b.w	b5444 <network_get_listen_timeout>

000b5d9c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5d9c:	6840      	ldr	r0, [r0, #4]
   b5d9e:	2200      	movs	r2, #0
   b5da0:	f7ff bb48 	b.w	b5434 <network_set_listen_timeout>

000b5da4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5da4:	6840      	ldr	r0, [r0, #4]
   b5da6:	2200      	movs	r2, #0
   b5da8:	f081 0101 	eor.w	r1, r1, #1
   b5dac:	f7ff bb32 	b.w	b5414 <network_listen>

000b5db0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5db0:	2300      	movs	r3, #0
   b5db2:	6840      	ldr	r0, [r0, #4]
   b5db4:	461a      	mov	r2, r3
   b5db6:	4619      	mov	r1, r3
   b5db8:	f7ff bb24 	b.w	b5404 <network_off>

000b5dbc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5dbc:	2300      	movs	r3, #0
   b5dbe:	6840      	ldr	r0, [r0, #4]
   b5dc0:	461a      	mov	r2, r3
   b5dc2:	4619      	mov	r1, r3
   b5dc4:	f7ff bb16 	b.w	b53f4 <network_on>

000b5dc8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5dc8:	2200      	movs	r2, #0
   b5dca:	6840      	ldr	r0, [r0, #4]
   b5dcc:	4611      	mov	r1, r2
   b5dce:	f7ff bb09 	b.w	b53e4 <network_ready>

000b5dd2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5dd2:	2200      	movs	r2, #0
   b5dd4:	6840      	ldr	r0, [r0, #4]
   b5dd6:	4611      	mov	r1, r2
   b5dd8:	f7ff baf4 	b.w	b53c4 <network_connecting>

000b5ddc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5ddc:	6840      	ldr	r0, [r0, #4]
   b5dde:	2200      	movs	r2, #0
   b5de0:	2102      	movs	r1, #2
   b5de2:	f7ff baf7 	b.w	b53d4 <network_disconnect>

000b5de6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5de6:	2300      	movs	r3, #0
   b5de8:	6840      	ldr	r0, [r0, #4]
   b5dea:	461a      	mov	r2, r3
   b5dec:	f7ff bae2 	b.w	b53b4 <network_connect>

000b5df0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b5df0:	4b02      	ldr	r3, [pc, #8]	; (b5dfc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5df2:	2203      	movs	r2, #3
   b5df4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5df6:	4a02      	ldr	r2, [pc, #8]	; (b5e00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5df8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5dfa:	4770      	bx	lr
   b5dfc:	2003e678 	.word	0x2003e678
   b5e00:	000b84a4 	.word	0x000b84a4

000b5e04 <_ZN8particle6detail9_getVCellEhh>:
namespace particle {
namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   b5e04:	0909      	lsrs	r1, r1, #4
   b5e06:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   b5e0a:	ee07 1a90 	vmov	s15, r1
        return value / 800.0;
    }
   b5e0e:	ed9f 0a03 	vldr	s0, [pc, #12]	; b5e1c <_ZN8particle6detail9_getVCellEhh+0x18>
        float value = (float)((MSB << 4) | (LSB >> 4));
   b5e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
   b5e16:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b5e1a:	4770      	bx	lr
   b5e1c:	44480000 	.word	0x44480000

000b5e20 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b5e20:	6800      	ldr	r0, [r0, #0]
   b5e22:	f000 b8ee 	b.w	b6002 <_ZN7TwoWire4lockEv>

000b5e26 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b5e26:	b510      	push	{r4, lr}
   b5e28:	4604      	mov	r4, r0
      lock_(_lock) {
   b5e2a:	6001      	str	r1, [r0, #0]
   b5e2c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b5e2e:	b10a      	cbz	r2, b5e34 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b5e30:	f7ff fff6 	bl	b5e20 <_ZN9FuelGauge4lockEv>
}
   b5e34:	4620      	mov	r0, r4
   b5e36:	bd10      	pop	{r4, pc}

000b5e38 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b5e38:	b513      	push	{r0, r1, r4, lr}
   b5e3a:	4604      	mov	r4, r0
   b5e3c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b5e3e:	f002 f847 	bl	b7ed0 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b5e42:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b5e44:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b5e46:	4620      	mov	r0, r4
   b5e48:	f7ff ffed 	bl	b5e26 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b5e4c:	4620      	mov	r0, r4
   b5e4e:	b002      	add	sp, #8
   b5e50:	bd10      	pop	{r4, pc}

000b5e52 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b5e52:	6800      	ldr	r0, [r0, #0]
   b5e54:	f000 b8de 	b.w	b6014 <_ZN7TwoWire6unlockEv>

000b5e58 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   b5e58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5e5c:	4604      	mov	r4, r0
   b5e5e:	460d      	mov	r5, r1
   b5e60:	4617      	mov	r7, r2
   b5e62:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5e64:	f7ff ffdc 	bl	b5e20 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b5e68:	2236      	movs	r2, #54	; 0x36
   b5e6a:	2300      	movs	r3, #0
   b5e6c:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b5e70:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b5e72:	230a      	movs	r3, #10
   b5e74:	f04f 0801 	mov.w	r8, #1
   b5e78:	4669      	mov	r1, sp
   b5e7a:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b5e7e:	f000 f8a4 	bl	b5fca <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   b5e82:	6820      	ldr	r0, [r4, #0]
   b5e84:	6803      	ldr	r3, [r0, #0]
   b5e86:	4629      	mov	r1, r5
   b5e88:	689b      	ldr	r3, [r3, #8]
   b5e8a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b5e8c:	6820      	ldr	r0, [r4, #0]
   b5e8e:	4641      	mov	r1, r8
   b5e90:	f000 f8b3 	bl	b5ffa <_ZN7TwoWire15endTransmissionEh>
   b5e94:	4605      	mov	r5, r0
   b5e96:	b140      	cbz	r0, b5eaa <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   b5e98:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   b5e9c:	4620      	mov	r0, r4
   b5e9e:	f7ff ffd8 	bl	b5e52 <_ZN9FuelGauge6unlockEv>
}
   b5ea2:	4628      	mov	r0, r5
   b5ea4:	b004      	add	sp, #16
   b5ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   b5eaa:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   b5eac:	6820      	ldr	r0, [r4, #0]
   b5eae:	9301      	str	r3, [sp, #4]
   b5eb0:	4669      	mov	r1, sp
   b5eb2:	f000 f873 	bl	b5f9c <_ZN7TwoWire11requestFromERK16WireTransmission>
   b5eb6:	2802      	cmp	r0, #2
   b5eb8:	d1ee      	bne.n	b5e98 <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   b5eba:	6820      	ldr	r0, [r4, #0]
   b5ebc:	6803      	ldr	r3, [r0, #0]
   b5ebe:	695b      	ldr	r3, [r3, #20]
   b5ec0:	4798      	blx	r3
   b5ec2:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   b5ec4:	6820      	ldr	r0, [r4, #0]
   b5ec6:	6803      	ldr	r3, [r0, #0]
   b5ec8:	695b      	ldr	r3, [r3, #20]
   b5eca:	4798      	blx	r3
   b5ecc:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   b5ece:	e7e5      	b.n	b5e9c <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000b5ed0 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   b5ed0:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   b5ed2:	2300      	movs	r3, #0
   b5ed4:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   b5ed8:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b5edc:	f10d 0206 	add.w	r2, sp, #6
   b5ee0:	f10d 0307 	add.w	r3, sp, #7
   b5ee4:	2102      	movs	r1, #2
   b5ee6:	f7ff ffb7 	bl	b5e58 <_ZN9FuelGauge12readRegisterEhRhS0_>
   b5eea:	b940      	cbnz	r0, b5efe <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   b5eec:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b5ef0:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   b5ef4:	b003      	add	sp, #12
   b5ef6:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   b5efa:	f7ff bf83 	b.w	b5e04 <_ZN8particle6detail9_getVCellEhh>
}
   b5efe:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b5f02:	b003      	add	sp, #12
   b5f04:	f85d fb04 	ldr.w	pc, [sp], #4

000b5f08 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5f08:	4770      	bx	lr

000b5f0a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f0c:	4606      	mov	r6, r0
   b5f0e:	4615      	mov	r5, r2
   b5f10:	460c      	mov	r4, r1
   b5f12:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5f14:	42bc      	cmp	r4, r7
   b5f16:	d006      	beq.n	b5f26 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5f18:	6833      	ldr	r3, [r6, #0]
   b5f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5f1e:	689b      	ldr	r3, [r3, #8]
   b5f20:	4630      	mov	r0, r6
   b5f22:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5f24:	e7f6      	b.n	b5f14 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5f26:	4628      	mov	r0, r5
   b5f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5f2a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5f2a:	7c00      	ldrb	r0, [r0, #16]
   b5f2c:	2200      	movs	r2, #0
   b5f2e:	f7ff b89b 	b.w	b5068 <hal_i2c_write>

000b5f32 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5f32:	7c00      	ldrb	r0, [r0, #16]
   b5f34:	2100      	movs	r1, #0
   b5f36:	f7ff b89f 	b.w	b5078 <hal_i2c_available>

000b5f3a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5f3a:	7c00      	ldrb	r0, [r0, #16]
   b5f3c:	2100      	movs	r1, #0
   b5f3e:	f7ff b8a3 	b.w	b5088 <hal_i2c_read>

000b5f42 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5f42:	7c00      	ldrb	r0, [r0, #16]
   b5f44:	2100      	movs	r1, #0
   b5f46:	f7ff b8a7 	b.w	b5098 <hal_i2c_peek>

000b5f4a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5f4a:	7c00      	ldrb	r0, [r0, #16]
   b5f4c:	2100      	movs	r1, #0
   b5f4e:	f7ff b8ab 	b.w	b50a8 <hal_i2c_flush>

000b5f52 <_ZN7TwoWireD0Ev>:
   b5f52:	b510      	push	{r4, lr}
   b5f54:	2114      	movs	r1, #20
   b5f56:	4604      	mov	r4, r0
   b5f58:	f7fe fd65 	bl	b4a26 <_ZdlPvj>
   b5f5c:	4620      	mov	r0, r4
   b5f5e:	bd10      	pop	{r4, pc}

000b5f60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5f60:	b538      	push	{r3, r4, r5, lr}
   b5f62:	4604      	mov	r4, r0
   b5f64:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5f6a:	2200      	movs	r2, #0
   b5f6c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5f70:	4b09      	ldr	r3, [pc, #36]	; (b5f98 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5f72:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5f74:	4608      	mov	r0, r1
   b5f76:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5f78:	4629      	mov	r1, r5
   b5f7a:	f7ff f8a5 	bl	b50c8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5f7e:	30bf      	adds	r0, #191	; 0xbf
   b5f80:	d108      	bne.n	b5f94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5f82:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5f84:	07db      	lsls	r3, r3, #31
   b5f86:	d505      	bpl.n	b5f94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5f88:	6868      	ldr	r0, [r5, #4]
   b5f8a:	f7ff fa7b 	bl	b5484 <free>
    free(conf.tx_buffer);
   b5f8e:	68e8      	ldr	r0, [r5, #12]
   b5f90:	f7ff fa78 	bl	b5484 <free>
}
   b5f94:	4620      	mov	r0, r4
   b5f96:	bd38      	pop	{r3, r4, r5, pc}
   b5f98:	000b84e0 	.word	0x000b84e0

000b5f9c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5f9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5f9e:	2200      	movs	r2, #0
   b5fa0:	2314      	movs	r3, #20
   b5fa2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5fa6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b5faa:	780b      	ldrb	r3, [r1, #0]
   b5fac:	f88d 3008 	strb.w	r3, [sp, #8]
   b5fb0:	684b      	ldr	r3, [r1, #4]
   b5fb2:	9303      	str	r3, [sp, #12]
   b5fb4:	68cb      	ldr	r3, [r1, #12]
   b5fb6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5fb8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b5fba:	7a0b      	ldrb	r3, [r1, #8]
   b5fbc:	9305      	str	r3, [sp, #20]
   b5fbe:	a901      	add	r1, sp, #4
   b5fc0:	f7ff f89a 	bl	b50f8 <hal_i2c_request_ex>
}
   b5fc4:	b007      	add	sp, #28
   b5fc6:	f85d fb04 	ldr.w	pc, [sp], #4

000b5fca <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b5fca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5fcc:	2300      	movs	r3, #0
   b5fce:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b5fd2:	684a      	ldr	r2, [r1, #4]
   b5fd4:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b5fd6:	2314      	movs	r3, #20
    };
   b5fd8:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b5fda:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b5fde:	780b      	ldrb	r3, [r1, #0]
    };
   b5fe0:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b5fe2:	7a0a      	ldrb	r2, [r1, #8]
   b5fe4:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b5fe6:	7c00      	ldrb	r0, [r0, #16]
    };
   b5fe8:	f88d 3008 	strb.w	r3, [sp, #8]
   b5fec:	aa01      	add	r2, sp, #4
   b5fee:	4619      	mov	r1, r3
   b5ff0:	f7ff f82a 	bl	b5048 <hal_i2c_begin_transmission>
}
   b5ff4:	b007      	add	sp, #28
   b5ff6:	f85d fb04 	ldr.w	pc, [sp], #4

000b5ffa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5ffa:	7c00      	ldrb	r0, [r0, #16]
   b5ffc:	2200      	movs	r2, #0
   b5ffe:	f7ff b82b 	b.w	b5058 <hal_i2c_end_transmission>

000b6002 <_ZN7TwoWire4lockEv>:
{
  return hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b6002:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b6004:	2100      	movs	r1, #0
   b6006:	7c00      	ldrb	r0, [r0, #16]
   b6008:	f7ff f866 	bl	b50d8 <hal_i2c_lock>
}
   b600c:	fab0 f080 	clz	r0, r0
   b6010:	0940      	lsrs	r0, r0, #5
   b6012:	bd08      	pop	{r3, pc}

000b6014 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b6014:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b6016:	2100      	movs	r1, #0
   b6018:	7c00      	ldrb	r0, [r0, #16]
   b601a:	f7ff f865 	bl	b50e8 <hal_i2c_unlock>
}
   b601e:	fab0 f080 	clz	r0, r0
   b6022:	0940      	lsrs	r0, r0, #5
   b6024:	bd08      	pop	{r3, pc}

000b6026 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6026:	4770      	bx	lr

000b6028 <_ZN9IPAddressD0Ev>:
   b6028:	b510      	push	{r4, lr}
   b602a:	2118      	movs	r1, #24
   b602c:	4604      	mov	r4, r0
   b602e:	f7fe fcfa 	bl	b4a26 <_ZdlPvj>
   b6032:	4620      	mov	r0, r4
   b6034:	bd10      	pop	{r4, pc}

000b6036 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6036:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6038:	7d03      	ldrb	r3, [r0, #20]
   b603a:	2b06      	cmp	r3, #6
{
   b603c:	b08d      	sub	sp, #52	; 0x34
   b603e:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6040:	f100 0704 	add.w	r7, r0, #4
   b6044:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6048:	d012      	beq.n	b6070 <_ZNK9IPAddress7printToER5Print+0x3a>
   b604a:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b604e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6052:	220a      	movs	r2, #10
   b6054:	4630      	mov	r0, r6
   b6056:	f001 face 	bl	b75f6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b605a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b605c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b605e:	d019      	beq.n	b6094 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6060:	2c00      	cmp	r4, #0
   b6062:	d0f4      	beq.n	b604e <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6064:	212e      	movs	r1, #46	; 0x2e
   b6066:	4630      	mov	r0, r6
   b6068:	f001 fac2 	bl	b75f0 <_ZN5Print5printEc>
   b606c:	4404      	add	r4, r0
   b606e:	e7ee      	b.n	b604e <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6070:	232f      	movs	r3, #47	; 0x2f
   b6072:	466a      	mov	r2, sp
   b6074:	4639      	mov	r1, r7
   b6076:	200a      	movs	r0, #10
		buf[0] = 0;
   b6078:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b607c:	f7ff f844 	bl	b5108 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6080:	4668      	mov	r0, sp
   b6082:	f7fe fc89 	bl	b4998 <strlen>
   b6086:	6833      	ldr	r3, [r6, #0]
   b6088:	4602      	mov	r2, r0
   b608a:	68db      	ldr	r3, [r3, #12]
   b608c:	4669      	mov	r1, sp
   b608e:	4630      	mov	r0, r6
   b6090:	4798      	blx	r3
   b6092:	4604      	mov	r4, r0
    }
    return n;
}
   b6094:	4620      	mov	r0, r4
   b6096:	b00d      	add	sp, #52	; 0x34
   b6098:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b609c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b609c:	b510      	push	{r4, lr}
   b609e:	4b05      	ldr	r3, [pc, #20]	; (b60b4 <_ZN9IPAddressC1Ev+0x18>)
   b60a0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b60a2:	2211      	movs	r2, #17
   b60a4:	f840 3b04 	str.w	r3, [r0], #4
   b60a8:	2100      	movs	r1, #0
   b60aa:	f001 ffb3 	bl	b8014 <memset>
}
   b60ae:	4620      	mov	r0, r4
   b60b0:	bd10      	pop	{r4, pc}
   b60b2:	bf00      	nop
   b60b4:	000b8508 	.word	0x000b8508

000b60b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b60b8:	4603      	mov	r3, r0
   b60ba:	4a07      	ldr	r2, [pc, #28]	; (b60d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b60bc:	b510      	push	{r4, lr}
   b60be:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b60c2:	f101 0210 	add.w	r2, r1, #16
   b60c6:	f851 4b04 	ldr.w	r4, [r1], #4
   b60ca:	f843 4b04 	str.w	r4, [r3], #4
   b60ce:	4291      	cmp	r1, r2
   b60d0:	d1f9      	bne.n	b60c6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b60d2:	780a      	ldrb	r2, [r1, #0]
   b60d4:	701a      	strb	r2, [r3, #0]
}
   b60d6:	bd10      	pop	{r4, pc}
   b60d8:	000b8508 	.word	0x000b8508

000b60dc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b60dc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b60de:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b60e2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b60e6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b60ea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b60ee:	2304      	movs	r3, #4
   b60f0:	6041      	str	r1, [r0, #4]
   b60f2:	7503      	strb	r3, [r0, #20]
}
   b60f4:	bd10      	pop	{r4, pc}
	...

000b60f8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b60f8:	b507      	push	{r0, r1, r2, lr}
   b60fa:	4b06      	ldr	r3, [pc, #24]	; (b6114 <_ZN9IPAddressC1EPKh+0x1c>)
   b60fc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b60fe:	78cb      	ldrb	r3, [r1, #3]
   b6100:	9300      	str	r3, [sp, #0]
   b6102:	788b      	ldrb	r3, [r1, #2]
   b6104:	784a      	ldrb	r2, [r1, #1]
   b6106:	7809      	ldrb	r1, [r1, #0]
   b6108:	f7ff ffe8 	bl	b60dc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b610c:	b003      	add	sp, #12
   b610e:	f85d fb04 	ldr.w	pc, [sp], #4
   b6112:	bf00      	nop
   b6114:	000b8508 	.word	0x000b8508

000b6118 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b6118:	f100 0310 	add.w	r3, r0, #16
   b611c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b611e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b6122:	2901      	cmp	r1, #1
   b6124:	4618      	mov	r0, r3
   b6126:	d108      	bne.n	b613a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b6128:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b612c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b6130:	3a01      	subs	r2, #1
   b6132:	f103 0310 	add.w	r3, r3, #16
   b6136:	d1f2      	bne.n	b611e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b6138:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b613a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b613c:	bf04      	itt	eq
   b613e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b6142:	1852      	addeq	r2, r2, r1
   b6144:	e7f4      	b.n	b6130 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b6146 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b6146:	b40e      	push	{r1, r2, r3}
   b6148:	b5f0      	push	{r4, r5, r6, r7, lr}
   b614a:	b088      	sub	sp, #32
   b614c:	af00      	add	r7, sp, #0
   b614e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6152:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6154:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6158:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b615a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b615c:	462b      	mov	r3, r5
   b615e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b6160:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6162:	f7ff f99f 	bl	b54a4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b6166:	280f      	cmp	r0, #15
   b6168:	687a      	ldr	r2, [r7, #4]
   b616a:	d91a      	bls.n	b61a2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b616c:	f100 0308 	add.w	r3, r0, #8
   b6170:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b6174:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b6176:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b617a:	1c41      	adds	r1, r0, #1
   b617c:	462b      	mov	r3, r5
   b617e:	4668      	mov	r0, sp
        va_start(args, fmt);
   b6180:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6182:	f7ff f98f 	bl	b54a4 <vsnprintf>
        if (n > 0) {
   b6186:	1e02      	subs	r2, r0, #0
   b6188:	dd04      	ble.n	b6194 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b618a:	6823      	ldr	r3, [r4, #0]
   b618c:	4669      	mov	r1, sp
   b618e:	689b      	ldr	r3, [r3, #8]
   b6190:	4620      	mov	r0, r4
   b6192:	4798      	blx	r3
   b6194:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b6196:	3720      	adds	r7, #32
   b6198:	46bd      	mov	sp, r7
   b619a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b619e:	b003      	add	sp, #12
   b61a0:	4770      	bx	lr
    } else if (n > 0) {
   b61a2:	2800      	cmp	r0, #0
   b61a4:	d0f7      	beq.n	b6196 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b61a6:	6823      	ldr	r3, [r4, #0]
   b61a8:	4602      	mov	r2, r0
   b61aa:	689b      	ldr	r3, [r3, #8]
   b61ac:	f107 0110 	add.w	r1, r7, #16
   b61b0:	4620      	mov	r0, r4
   b61b2:	4798      	blx	r3
}
   b61b4:	e7ef      	b.n	b6196 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b61b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b61b6:	b538      	push	{r3, r4, r5, lr}
   b61b8:	680b      	ldr	r3, [r1, #0]
   b61ba:	6003      	str	r3, [r0, #0]
   b61bc:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b61be:	6843      	ldr	r3, [r0, #4]
   b61c0:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b61c2:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b61c4:	d008      	beq.n	b61d8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b61c6:	b115      	cbz	r5, b61ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b61c8:	686b      	ldr	r3, [r5, #4]
   b61ca:	3301      	adds	r3, #1
   b61cc:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b61ce:	6860      	ldr	r0, [r4, #4]
   b61d0:	b108      	cbz	r0, b61d6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b61d2:	f7ff f9b7 	bl	b5544 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b61d6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b61d8:	bd38      	pop	{r3, r4, r5, pc}

000b61da <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b61da:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b61dc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b61de:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b61e2:	689b      	ldr	r3, [r3, #8]
   b61e4:	2201      	movs	r2, #1
   b61e6:	f10d 0107 	add.w	r1, sp, #7
   b61ea:	4798      	blx	r3
}
   b61ec:	b003      	add	sp, #12
   b61ee:	f85d fb04 	ldr.w	pc, [sp], #4

000b61f2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b61f2:	460b      	mov	r3, r1
   b61f4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b61f6:	2200      	movs	r2, #0
   b61f8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b61fa:	e9c0 2200 	strd	r2, r2, [r0]
   b61fe:	4604      	mov	r4, r0
        t_ = t;
   b6200:	6083      	str	r3, [r0, #8]
    if (t) {
   b6202:	b90b      	cbnz	r3, b6208 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b6204:	4620      	mov	r0, r4
   b6206:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b6208:	f7ff ffd5 	bl	b61b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b620c:	e7fa      	b.n	b6204 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b620e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b620e:	6883      	ldr	r3, [r0, #8]
   b6210:	b1eb      	cbz	r3, b624e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b6212:	781a      	ldrb	r2, [r3, #0]
   b6214:	2a03      	cmp	r2, #3
   b6216:	d81a      	bhi.n	b624e <_ZNK5spark9JSONValue4typeEv+0x40>
   b6218:	e8df f002 	tbb	[pc, r2]
   b621c:	1b021704 	.word	0x1b021704
   b6220:	2005      	movs	r0, #5
   b6222:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b6224:	6802      	ldr	r2, [r0, #0]
   b6226:	685b      	ldr	r3, [r3, #4]
   b6228:	6852      	ldr	r2, [r2, #4]
   b622a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b622c:	282d      	cmp	r0, #45	; 0x2d
   b622e:	d012      	beq.n	b6256 <_ZNK5spark9JSONValue4typeEv+0x48>
   b6230:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6234:	2b09      	cmp	r3, #9
   b6236:	d90e      	bls.n	b6256 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b6238:	2874      	cmp	r0, #116	; 0x74
   b623a:	d00e      	beq.n	b625a <_ZNK5spark9JSONValue4typeEv+0x4c>
   b623c:	2866      	cmp	r0, #102	; 0x66
   b623e:	d00c      	beq.n	b625a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b6240:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b6244:	4258      	negs	r0, r3
   b6246:	4158      	adcs	r0, r3
   b6248:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b624a:	2006      	movs	r0, #6
   b624c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b624e:	2000      	movs	r0, #0
   b6250:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b6252:	2004      	movs	r0, #4
   b6254:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b6256:	2003      	movs	r0, #3
   b6258:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b625a:	2002      	movs	r0, #2
}
   b625c:	4770      	bx	lr

000b625e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b625e:	b510      	push	{r4, lr}
   b6260:	4604      	mov	r4, r0
    switch (type()) {
   b6262:	f7ff ffd4 	bl	b620e <_ZNK5spark9JSONValue4typeEv>
   b6266:	2802      	cmp	r0, #2
   b6268:	d00e      	beq.n	b6288 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b626a:	1ec3      	subs	r3, r0, #3
   b626c:	b2db      	uxtb	r3, r3
   b626e:	2b01      	cmp	r3, #1
   b6270:	d814      	bhi.n	b629c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b6272:	6822      	ldr	r2, [r4, #0]
   b6274:	68a3      	ldr	r3, [r4, #8]
   b6276:	6850      	ldr	r0, [r2, #4]
   b6278:	685b      	ldr	r3, [r3, #4]
}
   b627a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b627e:	220a      	movs	r2, #10
   b6280:	2100      	movs	r1, #0
   b6282:	4418      	add	r0, r3
   b6284:	f001 bfe4 	b.w	b8250 <strtol>
        const char* const s = d_->json + t_->start;
   b6288:	6822      	ldr	r2, [r4, #0]
   b628a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b628c:	6852      	ldr	r2, [r2, #4]
   b628e:	685b      	ldr	r3, [r3, #4]
   b6290:	5cd0      	ldrb	r0, [r2, r3]
   b6292:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b6296:	4258      	negs	r0, r3
   b6298:	4158      	adcs	r0, r3
}
   b629a:	bd10      	pop	{r4, pc}
    switch (type()) {
   b629c:	2000      	movs	r0, #0
   b629e:	e7fc      	b.n	b629a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b62a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b62a0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b62a2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b62a4:	e9c0 3300 	strd	r3, r3, [r0]
   b62a8:	4604      	mov	r4, r0
        n_(0) {
   b62aa:	480e      	ldr	r0, [pc, #56]	; (b62e4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b62ac:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b62b0:	b1a9      	cbz	r1, b62de <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b62b2:	780b      	ldrb	r3, [r1, #0]
   b62b4:	2b03      	cmp	r3, #3
   b62b6:	d006      	beq.n	b62c6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b62b8:	b98b      	cbnz	r3, b62de <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b62ba:	6813      	ldr	r3, [r2, #0]
   b62bc:	6858      	ldr	r0, [r3, #4]
   b62be:	684b      	ldr	r3, [r1, #4]
   b62c0:	5cc3      	ldrb	r3, [r0, r3]
   b62c2:	2b6e      	cmp	r3, #110	; 0x6e
   b62c4:	d007      	beq.n	b62d6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b62c6:	6813      	ldr	r3, [r2, #0]
   b62c8:	684d      	ldr	r5, [r1, #4]
   b62ca:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b62cc:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b62ce:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b62d0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b62d2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b62d4:	60e3      	str	r3, [r4, #12]
   b62d6:	4611      	mov	r1, r2
   b62d8:	4620      	mov	r0, r4
   b62da:	f7ff ff6c 	bl	b61b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b62de:	4620      	mov	r0, r4
   b62e0:	bd38      	pop	{r3, r4, r5, pc}
   b62e2:	bf00      	nop
   b62e4:	000b857a 	.word	0x000b857a

000b62e8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b62e8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b62ea:	2500      	movs	r5, #0
   b62ec:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b62ee:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b62f2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b62f6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b62fa:	4604      	mov	r4, r0
   b62fc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b62fe:	b14b      	cbz	r3, b6314 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b6300:	781a      	ldrb	r2, [r3, #0]
   b6302:	2a01      	cmp	r2, #1
   b6304:	d106      	bne.n	b6314 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b6306:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b630a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b630c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b630e:	6143      	str	r3, [r0, #20]
   b6310:	f7ff ff51 	bl	b61b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6314:	4620      	mov	r0, r4
   b6316:	bd38      	pop	{r3, r4, r5, pc}

000b6318 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b6318:	b510      	push	{r4, lr}
    if (!n_) {
   b631a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b631c:	4604      	mov	r4, r0
    if (!n_) {
   b631e:	b163      	cbz	r3, b633a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b6320:	6880      	ldr	r0, [r0, #8]
   b6322:	60e0      	str	r0, [r4, #12]
    --n_;
   b6324:	3b01      	subs	r3, #1
    ++t_;
   b6326:	3010      	adds	r0, #16
   b6328:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b632a:	6120      	str	r0, [r4, #16]
    --n_;
   b632c:	6163      	str	r3, [r4, #20]
    if (n_) {
   b632e:	b113      	cbz	r3, b6336 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b6330:	f7ff fef2 	bl	b6118 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b6334:	60a0      	str	r0, [r4, #8]
    return true;
   b6336:	2001      	movs	r0, #1
   b6338:	e000      	b.n	b633c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b633a:	4618      	mov	r0, r3
}
   b633c:	bd10      	pop	{r4, pc}

000b633e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b633e:	b510      	push	{r4, lr}
    write('}');
   b6340:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6342:	4604      	mov	r4, r0
    write('}');
   b6344:	f7ff ff49 	bl	b61da <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b6348:	2301      	movs	r3, #1
   b634a:	7123      	strb	r3, [r4, #4]
}
   b634c:	4620      	mov	r0, r4
   b634e:	bd10      	pop	{r4, pc}

000b6350 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b6350:	b508      	push	{r3, lr}
    switch (state_) {
   b6352:	7903      	ldrb	r3, [r0, #4]
   b6354:	2b01      	cmp	r3, #1
   b6356:	d002      	beq.n	b635e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b6358:	2b02      	cmp	r3, #2
   b635a:	d004      	beq.n	b6366 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b635c:	bd08      	pop	{r3, pc}
        write(',');
   b635e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b6360:	f7ff ff3b 	bl	b61da <_ZN5spark10JSONWriter5writeEc>
}
   b6364:	e7fa      	b.n	b635c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b6366:	213a      	movs	r1, #58	; 0x3a
   b6368:	e7fa      	b.n	b6360 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b636a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b636a:	b510      	push	{r4, lr}
   b636c:	4604      	mov	r4, r0
    writeSeparator();
   b636e:	f7ff ffef 	bl	b6350 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b6372:	4620      	mov	r0, r4
   b6374:	217b      	movs	r1, #123	; 0x7b
   b6376:	f7ff ff30 	bl	b61da <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b637a:	2300      	movs	r3, #0
   b637c:	7123      	strb	r3, [r4, #4]
}
   b637e:	4620      	mov	r0, r4
   b6380:	bd10      	pop	{r4, pc}
	...

000b6384 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b6384:	b513      	push	{r0, r1, r4, lr}
   b6386:	4604      	mov	r4, r0
   b6388:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b638a:	f7ff ffe1 	bl	b6350 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b638e:	6823      	ldr	r3, [r4, #0]
   b6390:	9a01      	ldr	r2, [sp, #4]
   b6392:	68db      	ldr	r3, [r3, #12]
   b6394:	4903      	ldr	r1, [pc, #12]	; (b63a4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b6396:	4620      	mov	r0, r4
   b6398:	4798      	blx	r3
    state_ = NEXT;
   b639a:	2301      	movs	r3, #1
}
   b639c:	4620      	mov	r0, r4
    state_ = NEXT;
   b639e:	7123      	strb	r3, [r4, #4]
}
   b63a0:	b002      	add	sp, #8
   b63a2:	bd10      	pop	{r4, pc}
   b63a4:	000b8514 	.word	0x000b8514

000b63a8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b63a8:	b513      	push	{r0, r1, r4, lr}
   b63aa:	4604      	mov	r4, r0
   b63ac:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b63ae:	f7ff ffcf 	bl	b6350 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b63b2:	6823      	ldr	r3, [r4, #0]
   b63b4:	9a01      	ldr	r2, [sp, #4]
   b63b6:	68db      	ldr	r3, [r3, #12]
   b63b8:	4903      	ldr	r1, [pc, #12]	; (b63c8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b63ba:	4620      	mov	r0, r4
   b63bc:	4798      	blx	r3
    state_ = NEXT;
   b63be:	2301      	movs	r3, #1
}
   b63c0:	4620      	mov	r0, r4
    state_ = NEXT;
   b63c2:	7123      	strb	r3, [r4, #4]
}
   b63c4:	b002      	add	sp, #8
   b63c6:	bd10      	pop	{r4, pc}
   b63c8:	000b8517 	.word	0x000b8517

000b63cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b63cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b63d0:	460d      	mov	r5, r1
    write('"');
   b63d2:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b63d4:	4690      	mov	r8, r2
   b63d6:	4604      	mov	r4, r0
    write('"');
   b63d8:	f7ff feff 	bl	b61da <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b63dc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b6484 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b63e0:	44a8      	add	r8, r5
    const char *s = str;
   b63e2:	462f      	mov	r7, r5
    while (s != end) {
   b63e4:	4547      	cmp	r7, r8
   b63e6:	46ba      	mov	sl, r7
   b63e8:	d03d      	beq.n	b6466 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b63ea:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b63ee:	2e22      	cmp	r6, #34	; 0x22
   b63f0:	d006      	beq.n	b6400 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b63f2:	2e5c      	cmp	r6, #92	; 0x5c
   b63f4:	d004      	beq.n	b6400 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b63f6:	4630      	mov	r0, r6
   b63f8:	f001 fddc 	bl	b7fb4 <isprint>
   b63fc:	2800      	cmp	r0, #0
   b63fe:	d1f1      	bne.n	b63e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b6400:	6823      	ldr	r3, [r4, #0]
   b6402:	ebaa 0205 	sub.w	r2, sl, r5
   b6406:	689b      	ldr	r3, [r3, #8]
   b6408:	4629      	mov	r1, r5
   b640a:	4620      	mov	r0, r4
   b640c:	4798      	blx	r3
            write('\\');
   b640e:	215c      	movs	r1, #92	; 0x5c
   b6410:	4620      	mov	r0, r4
   b6412:	f7ff fee2 	bl	b61da <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b6416:	2e0d      	cmp	r6, #13
   b6418:	d80a      	bhi.n	b6430 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b641a:	2e07      	cmp	r6, #7
   b641c:	d91c      	bls.n	b6458 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b641e:	f1a6 0308 	sub.w	r3, r6, #8
   b6422:	2b05      	cmp	r3, #5
   b6424:	d818      	bhi.n	b6458 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6426:	e8df f003 	tbb	[pc, r3]
   b642a:	0f0d      	.short	0x0f0d
   b642c:	15131711 	.word	0x15131711
   b6430:	2e22      	cmp	r6, #34	; 0x22
   b6432:	d001      	beq.n	b6438 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b6434:	2e5c      	cmp	r6, #92	; 0x5c
   b6436:	d10f      	bne.n	b6458 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b6438:	4631      	mov	r1, r6
                write('b');
   b643a:	4620      	mov	r0, r4
   b643c:	f7ff fecd 	bl	b61da <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b6440:	463d      	mov	r5, r7
    while (s != end) {
   b6442:	e7cf      	b.n	b63e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b6444:	2162      	movs	r1, #98	; 0x62
   b6446:	e7f8      	b.n	b643a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b6448:	2174      	movs	r1, #116	; 0x74
   b644a:	e7f6      	b.n	b643a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b644c:	216e      	movs	r1, #110	; 0x6e
   b644e:	e7f4      	b.n	b643a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b6450:	2166      	movs	r1, #102	; 0x66
   b6452:	e7f2      	b.n	b643a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b6454:	2172      	movs	r1, #114	; 0x72
   b6456:	e7f0      	b.n	b643a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b6458:	6823      	ldr	r3, [r4, #0]
   b645a:	4632      	mov	r2, r6
   b645c:	68db      	ldr	r3, [r3, #12]
   b645e:	4649      	mov	r1, r9
   b6460:	4620      	mov	r0, r4
   b6462:	4798      	blx	r3
                break;
   b6464:	e7ec      	b.n	b6440 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b6466:	42bd      	cmp	r5, r7
   b6468:	d005      	beq.n	b6476 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b646a:	6823      	ldr	r3, [r4, #0]
   b646c:	1b7a      	subs	r2, r7, r5
   b646e:	689b      	ldr	r3, [r3, #8]
   b6470:	4629      	mov	r1, r5
   b6472:	4620      	mov	r0, r4
   b6474:	4798      	blx	r3
    }
    write('"');
   b6476:	2122      	movs	r1, #34	; 0x22
   b6478:	4620      	mov	r0, r4
   b647a:	f7ff feae 	bl	b61da <_ZN5spark10JSONWriter5writeEc>
}
   b647e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6482:	bf00      	nop
   b6484:	000b851a 	.word	0x000b851a

000b6488 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b6488:	b513      	push	{r0, r1, r4, lr}
   b648a:	4604      	mov	r4, r0
   b648c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b6490:	f7ff ff5e 	bl	b6350 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b6494:	4620      	mov	r0, r4
   b6496:	e9dd 2100 	ldrd	r2, r1, [sp]
   b649a:	f7ff ff97 	bl	b63cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b649e:	2302      	movs	r3, #2
}
   b64a0:	4620      	mov	r0, r4
    state_ = VALUE;
   b64a2:	7123      	strb	r3, [r4, #4]
}
   b64a4:	b002      	add	sp, #8
   b64a6:	bd10      	pop	{r4, pc}

000b64a8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b64a8:	b513      	push	{r0, r1, r4, lr}
   b64aa:	4604      	mov	r4, r0
   b64ac:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b64b0:	f7ff ff4e 	bl	b6350 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b64b4:	4620      	mov	r0, r4
   b64b6:	e9dd 2100 	ldrd	r2, r1, [sp]
   b64ba:	f7ff ff87 	bl	b63cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b64be:	2301      	movs	r3, #1
}
   b64c0:	4620      	mov	r0, r4
    state_ = NEXT;
   b64c2:	7123      	strb	r3, [r4, #4]
}
   b64c4:	b002      	add	sp, #8
   b64c6:	bd10      	pop	{r4, pc}

000b64c8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b64c8:	6880      	ldr	r0, [r0, #8]
   b64ca:	6803      	ldr	r3, [r0, #0]
   b64cc:	68db      	ldr	r3, [r3, #12]
   b64ce:	4718      	bx	r3

000b64d0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b64d0:	4770      	bx	lr

000b64d2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b64d2:	4608      	mov	r0, r1
   b64d4:	b111      	cbz	r1, b64dc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b64d6:	680b      	ldr	r3, [r1, #0]
   b64d8:	685b      	ldr	r3, [r3, #4]
   b64da:	4718      	bx	r3
}
   b64dc:	4770      	bx	lr

000b64de <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b64de:	4770      	bx	lr

000b64e0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b64e0:	4770      	bx	lr

000b64e2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b64e2:	4770      	bx	lr

000b64e4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b64e4:	4770      	bx	lr

000b64e6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b64e6:	b538      	push	{r3, r4, r5, lr}
   b64e8:	4604      	mov	r4, r0
   b64ea:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b64ec:	6800      	ldr	r0, [r0, #0]
   b64ee:	212e      	movs	r1, #46	; 0x2e
   b64f0:	f001 fdd3 	bl	b809a <strchrnul>
    size = s - category;
   b64f4:	6823      	ldr	r3, [r4, #0]
   b64f6:	1ac3      	subs	r3, r0, r3
   b64f8:	602b      	str	r3, [r5, #0]
    if (size) {
   b64fa:	b123      	cbz	r3, b6506 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b64fc:	7803      	ldrb	r3, [r0, #0]
   b64fe:	b103      	cbz	r3, b6502 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b6500:	3001      	adds	r0, #1
   b6502:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6504:	6020      	str	r0, [r4, #0]
}
   b6506:	4618      	mov	r0, r3
   b6508:	bd38      	pop	{r3, r4, r5, pc}

000b650a <_ZN5spark16JSONStreamWriterD0Ev>:
   b650a:	b510      	push	{r4, lr}
   b650c:	210c      	movs	r1, #12
   b650e:	4604      	mov	r4, r0
   b6510:	f7fe fa89 	bl	b4a26 <_ZdlPvj>
   b6514:	4620      	mov	r0, r4
   b6516:	bd10      	pop	{r4, pc}

000b6518 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b6518:	b510      	push	{r4, lr}
   b651a:	2104      	movs	r1, #4
   b651c:	4604      	mov	r4, r0
   b651e:	f7fe fa82 	bl	b4a26 <_ZdlPvj>
   b6522:	4620      	mov	r0, r4
   b6524:	bd10      	pop	{r4, pc}

000b6526 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b6526:	b510      	push	{r4, lr}
   b6528:	2104      	movs	r1, #4
   b652a:	4604      	mov	r4, r0
   b652c:	f7fe fa7b 	bl	b4a26 <_ZdlPvj>
   b6530:	4620      	mov	r0, r4
   b6532:	bd10      	pop	{r4, pc}

000b6534 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6534:	f7fe bd48 	b.w	b4fc8 <os_mutex_recursive_lock>

000b6538 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b6538:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b653a:	f7fe fa23 	bl	b4984 <strcmp>
}
   b653e:	fab0 f080 	clz	r0, r0
   b6542:	0940      	lsrs	r0, r0, #5
   b6544:	bd08      	pop	{r3, pc}

000b6546 <__tcf_1>:
   b6546:	4770      	bx	lr

000b6548 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b6548:	b510      	push	{r4, lr}
   b654a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b654c:	f001 fb3c 	bl	b7bc8 <_Z16_fetch_usbserialv>
   b6550:	4284      	cmp	r4, r0
   b6552:	d010      	beq.n	b6576 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b6554:	f001 fcfc 	bl	b7f50 <_Z22__fetch_global_Serial1v>
   b6558:	4284      	cmp	r4, r0
   b655a:	d105      	bne.n	b6568 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b655c:	f001 fcf8 	bl	b7f50 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b6560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b6564:	f001 bacb 	b.w	b7afe <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b6568:	b12c      	cbz	r4, b6576 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b656a:	6823      	ldr	r3, [r4, #0]
   b656c:	4620      	mov	r0, r4
   b656e:	685b      	ldr	r3, [r3, #4]
}
   b6570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6574:	4718      	bx	r3
   b6576:	bd10      	pop	{r4, pc}

000b6578 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6578:	680b      	ldr	r3, [r1, #0]
   b657a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b657c:	684b      	ldr	r3, [r1, #4]
   b657e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6580:	b113      	cbz	r3, b6588 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b6582:	685a      	ldr	r2, [r3, #4]
   b6584:	3201      	adds	r2, #1
   b6586:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6588:	4770      	bx	lr

000b658a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b658a:	b513      	push	{r0, r1, r4, lr}
   b658c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b658e:	4608      	mov	r0, r1
   b6590:	9101      	str	r1, [sp, #4]
   b6592:	f7fe fa01 	bl	b4998 <strlen>
   b6596:	9901      	ldr	r1, [sp, #4]
   b6598:	4602      	mov	r2, r0
   b659a:	4620      	mov	r0, r4
}
   b659c:	b002      	add	sp, #8
   b659e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b65a2:	f7ff bf81 	b.w	b64a8 <_ZN5spark10JSONWriter5valueEPKcj>

000b65a6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b65a6:	b513      	push	{r0, r1, r4, lr}
   b65a8:	4604      	mov	r4, r0
    write(str, strlen(str));
   b65aa:	4608      	mov	r0, r1
   b65ac:	9101      	str	r1, [sp, #4]
   b65ae:	f7fe f9f3 	bl	b4998 <strlen>
   b65b2:	6823      	ldr	r3, [r4, #0]
   b65b4:	9901      	ldr	r1, [sp, #4]
   b65b6:	68db      	ldr	r3, [r3, #12]
   b65b8:	4602      	mov	r2, r0
   b65ba:	4620      	mov	r0, r4
}
   b65bc:	b002      	add	sp, #8
   b65be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b65c2:	4718      	bx	r3

000b65c4 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b65c4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b65c6:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b65c8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b65cc:	68db      	ldr	r3, [r3, #12]
   b65ce:	2201      	movs	r2, #1
   b65d0:	f10d 0107 	add.w	r1, sp, #7
   b65d4:	4798      	blx	r3
}
   b65d6:	b003      	add	sp, #12
   b65d8:	f85d fb04 	ldr.w	pc, [sp], #4

000b65dc <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b65dc:	680a      	ldr	r2, [r1, #0]
   b65de:	6002      	str	r2, [r0, #0]
   b65e0:	684a      	ldr	r2, [r1, #4]
   b65e2:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b65e4:	2200      	movs	r2, #0
   b65e6:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b65ea:	b510      	push	{r4, lr}
   b65ec:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b65ee:	688c      	ldr	r4, [r1, #8]
   b65f0:	6084      	str	r4, [r0, #8]
   b65f2:	68cc      	ldr	r4, [r1, #12]
   b65f4:	60c4      	str	r4, [r0, #12]
   b65f6:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b65f8:	608a      	str	r2, [r1, #8]
   b65fa:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b65fc:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b65fe:	610a      	str	r2, [r1, #16]
   b6600:	bd10      	pop	{r4, pc}
	...

000b6604 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b6608:	e9d0 8400 	ldrd	r8, r4, [r0]
   b660c:	f04f 0a14 	mov.w	sl, #20
   b6610:	9300      	str	r3, [sp, #0]
   b6612:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b6616:	4b18      	ldr	r3, [pc, #96]	; (b6678 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b6618:	10a4      	asrs	r4, r4, #2
   b661a:	4617      	mov	r7, r2
   b661c:	435c      	muls	r4, r3
   b661e:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b6620:	2c00      	cmp	r4, #0
   b6622:	dd21      	ble.n	b6668 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b6624:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b6626:	fb0a f006 	mul.w	r0, sl, r6
   b662a:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b662e:	463a      	mov	r2, r7
   b6630:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b6634:	5828      	ldr	r0, [r5, r0]
   b6636:	9101      	str	r1, [sp, #4]
   b6638:	455f      	cmp	r7, fp
   b663a:	bf28      	it	cs
   b663c:	465a      	movcs	r2, fp
   b663e:	f001 fd5c 	bl	b80fa <strncmp>
                if (cmp == 0) {
   b6642:	2800      	cmp	r0, #0
   b6644:	9901      	ldr	r1, [sp, #4]
   b6646:	f04f 0301 	mov.w	r3, #1
   b664a:	d10b      	bne.n	b6664 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b664c:	455f      	cmp	r7, fp
   b664e:	d103      	bne.n	b6658 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b6650:	9a00      	ldr	r2, [sp, #0]
   b6652:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6654:	4634      	mov	r4, r6
   b6656:	e7e3      	b.n	b6620 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b6658:	d9fc      	bls.n	b6654 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b665a:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b665c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b6660:	3e01      	subs	r6, #1
   b6662:	e7f7      	b.n	b6654 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b6664:	dbf9      	blt.n	b665a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b6666:	e7f5      	b.n	b6654 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b6668:	eba5 0508 	sub.w	r5, r5, r8
}
   b666c:	4802      	ldr	r0, [pc, #8]	; (b6678 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b666e:	10ad      	asrs	r5, r5, #2
   b6670:	4368      	muls	r0, r5
   b6672:	b003      	add	sp, #12
   b6674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6678:	cccccccd 	.word	0xcccccccd

000b667c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b667c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b667e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b6680:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b6682:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b6684:	b303      	cbz	r3, b66c8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b6686:	b1f9      	cbz	r1, b66c8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b6688:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b668a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b668e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b6690:	a903      	add	r1, sp, #12
   b6692:	a801      	add	r0, sp, #4
   b6694:	f7ff ff27 	bl	b64e6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6698:	4601      	mov	r1, r0
   b669a:	b1a8      	cbz	r0, b66c8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b669c:	f10d 030b 	add.w	r3, sp, #11
   b66a0:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b66a2:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b66a6:	4620      	mov	r0, r4
   b66a8:	f7ff ffac 	bl	b6604 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b66ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b66b0:	b153      	cbz	r3, b66c8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b66b2:	6823      	ldr	r3, [r4, #0]
   b66b4:	2414      	movs	r4, #20
   b66b6:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b66ba:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b66bc:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b66c0:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b66c2:	bfa8      	it	ge
   b66c4:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b66c6:	e7e3      	b.n	b6690 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b66c8:	4628      	mov	r0, r5
   b66ca:	b004      	add	sp, #16
   b66cc:	bd70      	pop	{r4, r5, r6, pc}

000b66ce <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b66ce:	b40e      	push	{r1, r2, r3}
   b66d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b66d2:	b08c      	sub	sp, #48	; 0x30
   b66d4:	af00      	add	r7, sp, #0
   b66d6:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b66da:	4604      	mov	r4, r0
   b66dc:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b66e0:	607a      	str	r2, [r7, #4]
   b66e2:	462b      	mov	r3, r5
   b66e4:	2120      	movs	r1, #32
   b66e6:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b66ea:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b66ec:	f7fe feda 	bl	b54a4 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b66f0:	281f      	cmp	r0, #31
   b66f2:	687a      	ldr	r2, [r7, #4]
   b66f4:	d91a      	bls.n	b672c <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b66f6:	f100 0308 	add.w	r3, r0, #8
   b66fa:	f023 0307 	bic.w	r3, r3, #7
        }
   b66fe:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b6700:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6704:	1c41      	adds	r1, r0, #1
   b6706:	462b      	mov	r3, r5
   b6708:	4668      	mov	r0, sp
        va_start(args, fmt);
   b670a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b670c:	f7fe feca 	bl	b54a4 <vsnprintf>
        if (n > 0) {
   b6710:	1e02      	subs	r2, r0, #0
   b6712:	dd04      	ble.n	b671e <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b6714:	6823      	ldr	r3, [r4, #0]
   b6716:	4669      	mov	r1, sp
   b6718:	68db      	ldr	r3, [r3, #12]
   b671a:	4620      	mov	r0, r4
   b671c:	4798      	blx	r3
   b671e:	46b5      	mov	sp, r6
}
   b6720:	3730      	adds	r7, #48	; 0x30
   b6722:	46bd      	mov	sp, r7
   b6724:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6728:	b003      	add	sp, #12
   b672a:	4770      	bx	lr
    } else if (n > 0) {
   b672c:	2800      	cmp	r0, #0
   b672e:	d0f7      	beq.n	b6720 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b6730:	6823      	ldr	r3, [r4, #0]
   b6732:	4602      	mov	r2, r0
   b6734:	68db      	ldr	r3, [r3, #12]
   b6736:	f107 0110 	add.w	r1, r7, #16
   b673a:	4620      	mov	r0, r4
   b673c:	4798      	blx	r3
}
   b673e:	e7ef      	b.n	b6720 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b6740 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b6740:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b6742:	4c09      	ldr	r4, [pc, #36]	; (b6768 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b6744:	7823      	ldrb	r3, [r4, #0]
   b6746:	f3bf 8f5b 	dmb	ish
   b674a:	07db      	lsls	r3, r3, #31
   b674c:	d409      	bmi.n	b6762 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b674e:	4620      	mov	r0, r4
   b6750:	f7fe f978 	bl	b4a44 <__cxa_guard_acquire>
   b6754:	b128      	cbz	r0, b6762 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b6756:	4620      	mov	r0, r4
   b6758:	f7fe f979 	bl	b4a4e <__cxa_guard_release>
   b675c:	4803      	ldr	r0, [pc, #12]	; (b676c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b675e:	f001 fc22 	bl	b7fa6 <atexit>
}
   b6762:	4803      	ldr	r0, [pc, #12]	; (b6770 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b6764:	bd10      	pop	{r4, pc}
   b6766:	bf00      	nop
   b6768:	2003e684 	.word	0x2003e684
   b676c:	000b64df 	.word	0x000b64df
   b6770:	2003e57c 	.word	0x2003e57c

000b6774 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b6774:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b6776:	4c09      	ldr	r4, [pc, #36]	; (b679c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b6778:	7823      	ldrb	r3, [r4, #0]
   b677a:	f3bf 8f5b 	dmb	ish
   b677e:	07db      	lsls	r3, r3, #31
   b6780:	d409      	bmi.n	b6796 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b6782:	4620      	mov	r0, r4
   b6784:	f7fe f95e 	bl	b4a44 <__cxa_guard_acquire>
   b6788:	b128      	cbz	r0, b6796 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b678a:	4620      	mov	r0, r4
   b678c:	f7fe f95f 	bl	b4a4e <__cxa_guard_release>
   b6790:	4803      	ldr	r0, [pc, #12]	; (b67a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b6792:	f001 fc08 	bl	b7fa6 <atexit>
    return &factory;
}
   b6796:	4803      	ldr	r0, [pc, #12]	; (b67a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b6798:	bd10      	pop	{r4, pc}
   b679a:	bf00      	nop
   b679c:	2003e688 	.word	0x2003e688
   b67a0:	000b6547 	.word	0x000b6547
   b67a4:	2003e580 	.word	0x2003e580

000b67a8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b67a8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b67aa:	2500      	movs	r5, #0
   b67ac:	4604      	mov	r4, r0
   b67ae:	e9c0 5500 	strd	r5, r5, [r0]
   b67b2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b67b6:	6085      	str	r5, [r0, #8]
   b67b8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b67ba:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b67be:	f7fe fbf3 	bl	b4fa8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b67c2:	f7ff ffbd 	bl	b6740 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b67c6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b67c8:	f7ff ffd4 	bl	b6774 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b67cc:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b67ce:	6220      	str	r0, [r4, #32]
}
   b67d0:	4620      	mov	r0, r4
   b67d2:	bd38      	pop	{r3, r4, r5, pc}

000b67d4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b67d4:	b510      	push	{r4, lr}
    static LogManager mgr;
   b67d6:	4c0a      	ldr	r4, [pc, #40]	; (b6800 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b67d8:	7823      	ldrb	r3, [r4, #0]
   b67da:	f3bf 8f5b 	dmb	ish
   b67de:	07db      	lsls	r3, r3, #31
   b67e0:	d40c      	bmi.n	b67fc <_ZN5spark10LogManager8instanceEv+0x28>
   b67e2:	4620      	mov	r0, r4
   b67e4:	f7fe f92e 	bl	b4a44 <__cxa_guard_acquire>
   b67e8:	b140      	cbz	r0, b67fc <_ZN5spark10LogManager8instanceEv+0x28>
   b67ea:	4806      	ldr	r0, [pc, #24]	; (b6804 <_ZN5spark10LogManager8instanceEv+0x30>)
   b67ec:	f7ff ffdc 	bl	b67a8 <_ZN5spark10LogManagerC1Ev>
   b67f0:	4620      	mov	r0, r4
   b67f2:	f7fe f92c 	bl	b4a4e <__cxa_guard_release>
   b67f6:	4804      	ldr	r0, [pc, #16]	; (b6808 <_ZN5spark10LogManager8instanceEv+0x34>)
   b67f8:	f001 fbd5 	bl	b7fa6 <atexit>
    return &mgr;
}
   b67fc:	4801      	ldr	r0, [pc, #4]	; (b6804 <_ZN5spark10LogManager8instanceEv+0x30>)
   b67fe:	bd10      	pop	{r4, pc}
   b6800:	2003e680 	.word	0x2003e680
   b6804:	2003e690 	.word	0x2003e690
   b6808:	000b6d29 	.word	0x000b6d29

000b680c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b680c:	4a02      	ldr	r2, [pc, #8]	; (b6818 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b680e:	4903      	ldr	r1, [pc, #12]	; (b681c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b6810:	4803      	ldr	r0, [pc, #12]	; (b6820 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b6812:	2300      	movs	r3, #0
   b6814:	f7fe bd48 	b.w	b52a8 <log_set_callbacks>
   b6818:	000b6b0d 	.word	0x000b6b0d
   b681c:	000b6a99 	.word	0x000b6a99
   b6820:	000b6a19 	.word	0x000b6a19

000b6824 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b6824:	2300      	movs	r3, #0
   b6826:	461a      	mov	r2, r3
   b6828:	4619      	mov	r1, r3
   b682a:	4618      	mov	r0, r3
   b682c:	f7fe bd3c 	b.w	b52a8 <log_set_callbacks>

000b6830 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6830:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b6832:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6834:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6836:	4668      	mov	r0, sp
   b6838:	f7ff fe9e 	bl	b6578 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b683c:	466a      	mov	r2, sp
   b683e:	4629      	mov	r1, r5
   b6840:	4620      	mov	r0, r4
   b6842:	f7ff fd51 	bl	b62e8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b6846:	a801      	add	r0, sp, #4
   b6848:	f7fe fea2 	bl	b5590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b684c:	4620      	mov	r0, r4
   b684e:	b003      	add	sp, #12
   b6850:	bd30      	pop	{r4, r5, pc}

000b6852 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6852:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b6854:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6856:	4604      	mov	r4, r0
   b6858:	4668      	mov	r0, sp
   b685a:	f7ff fe8d 	bl	b6578 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b685e:	466a      	mov	r2, sp
   b6860:	4629      	mov	r1, r5
   b6862:	4620      	mov	r0, r4
   b6864:	f7ff fd1c 	bl	b62a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b6868:	a801      	add	r0, sp, #4
   b686a:	f7fe fe91 	bl	b5590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b686e:	4620      	mov	r0, r4
   b6870:	b003      	add	sp, #12
   b6872:	bd30      	pop	{r4, r5, pc}

000b6874 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b6874:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b6876:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b6878:	4604      	mov	r4, r0
   b687a:	4668      	mov	r0, sp
   b687c:	f7ff fe7c 	bl	b6578 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b6880:	466a      	mov	r2, sp
   b6882:	4629      	mov	r1, r5
   b6884:	4620      	mov	r0, r4
   b6886:	f7ff fcb4 	bl	b61f2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b688a:	a801      	add	r0, sp, #4
   b688c:	f7fe fe80 	bl	b5590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6890:	4620      	mov	r0, r4
   b6892:	b003      	add	sp, #12
   b6894:	bd30      	pop	{r4, r5, pc}
	...

000b6898 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b6898:	b570      	push	{r4, r5, r6, lr}
   b689a:	b08a      	sub	sp, #40	; 0x28
   b689c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b689e:	4601      	mov	r1, r0
   b68a0:	a804      	add	r0, sp, #16
   b68a2:	f7ff ffc5 	bl	b6830 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b68a6:	4e14      	ldr	r6, [pc, #80]	; (b68f8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b68a8:	a804      	add	r0, sp, #16
   b68aa:	f7ff fd35 	bl	b6318 <_ZN5spark18JSONObjectIterator4nextEv>
   b68ae:	b1e8      	cbz	r0, b68ec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b68b0:	a904      	add	r1, sp, #16
   b68b2:	4668      	mov	r0, sp
   b68b4:	f7ff ffcd 	bl	b6852 <_ZNK5spark18JSONObjectIterator4nameEv>
   b68b8:	9802      	ldr	r0, [sp, #8]
   b68ba:	4631      	mov	r1, r6
   b68bc:	f7ff fe3c 	bl	b6538 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b68c0:	4604      	mov	r4, r0
   b68c2:	b110      	cbz	r0, b68ca <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b68c4:	1e2c      	subs	r4, r5, #0
   b68c6:	bf18      	it	ne
   b68c8:	2401      	movne	r4, #1
   b68ca:	a801      	add	r0, sp, #4
   b68cc:	f7fe fe60 	bl	b5590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b68d0:	2c00      	cmp	r4, #0
   b68d2:	d0e9      	beq.n	b68a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b68d4:	a904      	add	r1, sp, #16
   b68d6:	4668      	mov	r0, sp
   b68d8:	f7ff ffcc 	bl	b6874 <_ZNK5spark18JSONObjectIterator5valueEv>
   b68dc:	4668      	mov	r0, sp
   b68de:	f7ff fcbe 	bl	b625e <_ZNK5spark9JSONValue5toIntEv>
   b68e2:	6028      	str	r0, [r5, #0]
   b68e4:	a801      	add	r0, sp, #4
   b68e6:	f7fe fe53 	bl	b5590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b68ea:	e7dd      	b.n	b68a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b68ec:	a805      	add	r0, sp, #20
   b68ee:	f7fe fe4f 	bl	b5590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b68f2:	b00a      	add	sp, #40	; 0x28
   b68f4:	bd70      	pop	{r4, r5, r6, pc}
   b68f6:	bf00      	nop
   b68f8:	000b8520 	.word	0x000b8520

000b68fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b68fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b68fe:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b6900:	4620      	mov	r0, r4
   b6902:	4913      	ldr	r1, [pc, #76]	; (b6950 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6904:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b6906:	f7fe f83d 	bl	b4984 <strcmp>
   b690a:	b950      	cbnz	r0, b6922 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b690c:	f001 f95c 	bl	b7bc8 <_Z16_fetch_usbserialv>
   b6910:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6914:	f001 f948 	bl	b7ba8 <_ZN9USBSerial5beginEl>
}
   b6918:	b003      	add	sp, #12
   b691a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b691e:	f001 b953 	b.w	b7bc8 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b6922:	490c      	ldr	r1, [pc, #48]	; (b6954 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b6924:	4620      	mov	r0, r4
   b6926:	f7fe f82d 	bl	b4984 <strcmp>
   b692a:	b978      	cbnz	r0, b694c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b692c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b6930:	a901      	add	r1, sp, #4
   b6932:	4628      	mov	r0, r5
        int baud = 9600;
   b6934:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b6936:	f7ff ffaf 	bl	b6898 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b693a:	f001 fb09 	bl	b7f50 <_Z22__fetch_global_Serial1v>
   b693e:	9901      	ldr	r1, [sp, #4]
   b6940:	f001 f8da 	bl	b7af8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b6944:	f001 fb04 	bl	b7f50 <_Z22__fetch_global_Serial1v>
}
   b6948:	b003      	add	sp, #12
   b694a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b694c:	2000      	movs	r0, #0
   b694e:	e7fb      	b.n	b6948 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b6950:	000b8525 	.word	0x000b8525
   b6954:	000b852c 	.word	0x000b852c

000b6958 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6958:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b695a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b695e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6960:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6962:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6966:	42ae      	cmp	r6, r5
   b6968:	d005      	beq.n	b6976 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b696a:	f105 0008 	add.w	r0, r5, #8
   b696e:	f7ff fff3 	bl	b6958 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6972:	3514      	adds	r5, #20
   b6974:	e7f7      	b.n	b6966 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6976:	6820      	ldr	r0, [r4, #0]
   b6978:	f7fe fd84 	bl	b5484 <free>
}
   b697c:	4620      	mov	r0, r4
   b697e:	bd70      	pop	{r4, r5, r6, pc}

000b6980 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b6980:	b510      	push	{r4, lr}
   b6982:	4604      	mov	r4, r0
   b6984:	300c      	adds	r0, #12
   b6986:	f7ff ffe7 	bl	b6958 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b698a:	4620      	mov	r0, r4
   b698c:	f7fe fdee 	bl	b556c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b6990:	4620      	mov	r0, r4
   b6992:	bd10      	pop	{r4, pc}

000b6994 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b6994:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b6996:	4b04      	ldr	r3, [pc, #16]	; (b69a8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b6998:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b699a:	f840 3b04 	str.w	r3, [r0], #4
   b699e:	f7ff ffef 	bl	b6980 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b69a2:	4620      	mov	r0, r4
   b69a4:	bd10      	pop	{r4, pc}
   b69a6:	bf00      	nop
   b69a8:	000b83e0 	.word	0x000b83e0

000b69ac <_ZN5spark16StreamLogHandlerD0Ev>:
   b69ac:	b510      	push	{r4, lr}
   b69ae:	4604      	mov	r4, r0
   b69b0:	f7ff fff0 	bl	b6994 <_ZN5spark16StreamLogHandlerD1Ev>
   b69b4:	4620      	mov	r0, r4
   b69b6:	2124      	movs	r1, #36	; 0x24
   b69b8:	f7fe f835 	bl	b4a26 <_ZdlPvj>
   b69bc:	4620      	mov	r0, r4
   b69be:	bd10      	pop	{r4, pc}

000b69c0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b69c0:	b510      	push	{r4, lr}
   b69c2:	4b03      	ldr	r3, [pc, #12]	; (b69d0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b69c4:	6003      	str	r3, [r0, #0]
   b69c6:	4604      	mov	r4, r0
   b69c8:	f7ff ffe4 	bl	b6994 <_ZN5spark16StreamLogHandlerD1Ev>
   b69cc:	4620      	mov	r0, r4
   b69ce:	bd10      	pop	{r4, pc}
   b69d0:	000b85cc 	.word	0x000b85cc

000b69d4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b69d4:	b510      	push	{r4, lr}
   b69d6:	4604      	mov	r4, r0
   b69d8:	f7ff fff2 	bl	b69c0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b69dc:	4620      	mov	r0, r4
   b69de:	2124      	movs	r1, #36	; 0x24
   b69e0:	f7fe f821 	bl	b4a26 <_ZdlPvj>
   b69e4:	4620      	mov	r0, r4
   b69e6:	bd10      	pop	{r4, pc}

000b69e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b69e8:	2200      	movs	r2, #0
   b69ea:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b69ee:	b510      	push	{r4, lr}
        capacity_(0) {
   b69f0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b69f2:	680c      	ldr	r4, [r1, #0]
   b69f4:	6004      	str	r4, [r0, #0]
   b69f6:	684c      	ldr	r4, [r1, #4]
   b69f8:	6044      	str	r4, [r0, #4]
   b69fa:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b69fc:	600a      	str	r2, [r1, #0]
   b69fe:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6a00:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a02:	608a      	str	r2, [r1, #8]
}
   b6a04:	bd10      	pop	{r4, pc}

000b6a06 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b6a06:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6a08:	6803      	ldr	r3, [r0, #0]
   b6a0a:	4604      	mov	r4, r0
   b6a0c:	6818      	ldr	r0, [r3, #0]
   b6a0e:	f7fe fae3 	bl	b4fd8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b6a12:	4620      	mov	r0, r4
   b6a14:	bd10      	pop	{r4, pc}
	...

000b6a18 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b6a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6a1c:	b087      	sub	sp, #28
   b6a1e:	4680      	mov	r8, r0
   b6a20:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b6a22:	4b1c      	ldr	r3, [pc, #112]	; (b6a94 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b6a24:	685b      	ldr	r3, [r3, #4]
   b6a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6a2a:	4689      	mov	r9, r1
   b6a2c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b6a2e:	b96b      	cbnz	r3, b6a4c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b6a30:	f7ff fed0 	bl	b67d4 <_ZN5spark10LogManager8instanceEv>
   b6a34:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b6a36:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b6a3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6a3c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b6a3e:	f7ff fd79 	bl	b6534 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b6a42:	7b23      	ldrb	r3, [r4, #12]
   b6a44:	b12b      	cbz	r3, b6a52 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b6a46:	a805      	add	r0, sp, #20
   b6a48:	f7ff ffdd 	bl	b6a06 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b6a4c:	b007      	add	sp, #28
   b6a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b6a52:	2301      	movs	r3, #1
   b6a54:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b6a56:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b6a5a:	fa5f f989 	uxtb.w	r9, r9
   b6a5e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b6a62:	45aa      	cmp	sl, r5
   b6a64:	d012      	beq.n	b6a8c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b6a66:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b6a6a:	4631      	mov	r1, r6
   b6a6c:	1d38      	adds	r0, r7, #4
   b6a6e:	f7ff fe05 	bl	b667c <_ZNK5spark6detail9LogFilter5levelEPKc>
   b6a72:	4581      	cmp	r9, r0
   b6a74:	d3f5      	bcc.n	b6a62 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b6a76:	683b      	ldr	r3, [r7, #0]
   b6a78:	9a03      	ldr	r2, [sp, #12]
   b6a7a:	9200      	str	r2, [sp, #0]
   b6a7c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b6a80:	464a      	mov	r2, r9
   b6a82:	4633      	mov	r3, r6
   b6a84:	4641      	mov	r1, r8
   b6a86:	4638      	mov	r0, r7
   b6a88:	47d8      	blx	fp
   b6a8a:	e7ea      	b.n	b6a62 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b6a8c:	2300      	movs	r3, #0
   b6a8e:	7323      	strb	r3, [r4, #12]
   b6a90:	e7d9      	b.n	b6a46 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b6a92:	bf00      	nop
   b6a94:	e000ed00 	.word	0xe000ed00

000b6a98 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b6a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6a9c:	469b      	mov	fp, r3
   b6a9e:	4b1a      	ldr	r3, [pc, #104]	; (b6b08 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b6aa0:	685b      	ldr	r3, [r3, #4]
   b6aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6aa6:	4680      	mov	r8, r0
   b6aa8:	4689      	mov	r9, r1
   b6aaa:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b6aac:	b96b      	cbnz	r3, b6aca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b6aae:	f7ff fe91 	bl	b67d4 <_ZN5spark10LogManager8instanceEv>
   b6ab2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b6ab4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b6ab8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6aba:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6abc:	f7ff fd3a 	bl	b6534 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b6ac0:	7b23      	ldrb	r3, [r4, #12]
   b6ac2:	b12b      	cbz	r3, b6ad0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b6ac4:	a801      	add	r0, sp, #4
   b6ac6:	f7ff ff9e 	bl	b6a06 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b6aca:	b003      	add	sp, #12
   b6acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b6ad0:	2301      	movs	r3, #1
   b6ad2:	7323      	strb	r3, [r4, #12]
   b6ad4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b6ad8:	b2f6      	uxtb	r6, r6
   b6ada:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b6ade:	4555      	cmp	r5, sl
   b6ae0:	d00e      	beq.n	b6b00 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b6ae2:	f855 7b04 	ldr.w	r7, [r5], #4
   b6ae6:	4659      	mov	r1, fp
   b6ae8:	1d38      	adds	r0, r7, #4
   b6aea:	f7ff fdc7 	bl	b667c <_ZNK5spark6detail9LogFilter5levelEPKc>
   b6aee:	4286      	cmp	r6, r0
   b6af0:	d3f5      	bcc.n	b6ade <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b6af2:	683b      	ldr	r3, [r7, #0]
   b6af4:	464a      	mov	r2, r9
   b6af6:	68db      	ldr	r3, [r3, #12]
   b6af8:	4641      	mov	r1, r8
   b6afa:	4638      	mov	r0, r7
   b6afc:	4798      	blx	r3
   b6afe:	e7ee      	b.n	b6ade <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b6b00:	2300      	movs	r3, #0
   b6b02:	7323      	strb	r3, [r4, #12]
   b6b04:	e7de      	b.n	b6ac4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b6b06:	bf00      	nop
   b6b08:	e000ed00 	.word	0xe000ed00

000b6b0c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b6b0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6b10:	4b16      	ldr	r3, [pc, #88]	; (b6b6c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b6b12:	685b      	ldr	r3, [r3, #4]
   b6b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6b18:	4605      	mov	r5, r0
   b6b1a:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b6b1c:	bb1b      	cbnz	r3, b6b66 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b6b1e:	f7ff fe59 	bl	b67d4 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b6b22:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b6b26:	4604      	mov	r4, r0
   b6b28:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6b2a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6b2c:	f7ff fd02 	bl	b6534 <_ZN14RecursiveMutex4lockEv.isra.0>
   b6b30:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b6b34:	2446      	movs	r4, #70	; 0x46
   b6b36:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b6b3a:	45b0      	cmp	r8, r6
   b6b3c:	d109      	bne.n	b6b52 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b6b3e:	a801      	add	r0, sp, #4
   b6b40:	f7ff ff61 	bl	b6a06 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b6b44:	42a5      	cmp	r5, r4
   b6b46:	bfb4      	ite	lt
   b6b48:	2000      	movlt	r0, #0
   b6b4a:	2001      	movge	r0, #1
}
   b6b4c:	b002      	add	sp, #8
   b6b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b6b52:	f856 0b04 	ldr.w	r0, [r6], #4
   b6b56:	4639      	mov	r1, r7
   b6b58:	3004      	adds	r0, #4
   b6b5a:	f7ff fd8f 	bl	b667c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b6b5e:	4284      	cmp	r4, r0
   b6b60:	bfa8      	it	ge
   b6b62:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b6b64:	e7e9      	b.n	b6b3a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b6b66:	2000      	movs	r0, #0
   b6b68:	e7f0      	b.n	b6b4c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b6b6a:	bf00      	nop
   b6b6c:	e000ed00 	.word	0xe000ed00

000b6b70 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6b72:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b6b76:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6b78:	4604      	mov	r4, r0
   b6b7a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6b7c:	db0d      	blt.n	b6b9a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b6b7e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b6b80:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6b82:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6b84:	dd04      	ble.n	b6b90 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b6b86:	00b9      	lsls	r1, r7, #2
   b6b88:	f7fe fc84 	bl	b5494 <realloc>
            if (!d) {
   b6b8c:	b918      	cbnz	r0, b6b96 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b6b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b6b90:	f7fe fc78 	bl	b5484 <free>
        T* d = nullptr;
   b6b94:	2000      	movs	r0, #0
        data_ = d;
   b6b96:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6b98:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b6b9a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6b9c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6b9e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b6ba2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6ba4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b6ba8:	1d08      	adds	r0, r1, #4
   b6baa:	f001 fa19 	bl	b7fe0 <memmove>
    new(p) T(std::move(value));
   b6bae:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b6bb2:	6863      	ldr	r3, [r4, #4]
   b6bb4:	3301      	adds	r3, #1
   b6bb6:	6063      	str	r3, [r4, #4]
    return true;
   b6bb8:	2001      	movs	r0, #1
   b6bba:	e7e8      	b.n	b6b8e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b6bbc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b6bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b6bbe:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b6bc2:	4604      	mov	r4, r0
   b6bc4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6bc6:	9301      	str	r3, [sp, #4]
   b6bc8:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b6bca:	f7ff fcb3 	bl	b6534 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b6bce:	e9d4 3200 	ldrd	r3, r2, [r4]
   b6bd2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b6bd6:	4293      	cmp	r3, r2
   b6bd8:	4619      	mov	r1, r3
   b6bda:	d00b      	beq.n	b6bf4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b6bdc:	6809      	ldr	r1, [r1, #0]
   b6bde:	42a9      	cmp	r1, r5
   b6be0:	f103 0304 	add.w	r3, r3, #4
   b6be4:	d1f7      	bne.n	b6bd6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b6be6:	a801      	add	r0, sp, #4
   b6be8:	f7ff ff0d 	bl	b6a06 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6bec:	2500      	movs	r5, #0
}
   b6bee:	4628      	mov	r0, r5
   b6bf0:	b003      	add	sp, #12
   b6bf2:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b6bf4:	4629      	mov	r1, r5
   b6bf6:	4620      	mov	r0, r4
   b6bf8:	f7ff ffba 	bl	b6b70 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b6bfc:	4605      	mov	r5, r0
   b6bfe:	2800      	cmp	r0, #0
   b6c00:	d0f1      	beq.n	b6be6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b6c02:	6863      	ldr	r3, [r4, #4]
   b6c04:	2b01      	cmp	r3, #1
   b6c06:	d101      	bne.n	b6c0c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b6c08:	f7ff fe00 	bl	b680c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6c0c:	a801      	add	r0, sp, #4
   b6c0e:	f7ff fefa 	bl	b6a06 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6c12:	e7ec      	b.n	b6bee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b6c14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6c14:	b570      	push	{r4, r5, r6, lr}
   b6c16:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b6c18:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6c1c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b6c1e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b6c22:	4282      	cmp	r2, r0
   b6c24:	d00f      	beq.n	b6c46 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b6c26:	4601      	mov	r1, r0
            if (*p == value) {
   b6c28:	681d      	ldr	r5, [r3, #0]
   b6c2a:	f851 6b04 	ldr.w	r6, [r1], #4
   b6c2e:	42ae      	cmp	r6, r5
   b6c30:	d107      	bne.n	b6c42 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6c32:	1a52      	subs	r2, r2, r1
   b6c34:	f001 f9d4 	bl	b7fe0 <memmove>
    --size_;
   b6c38:	6863      	ldr	r3, [r4, #4]
   b6c3a:	3b01      	subs	r3, #1
   b6c3c:	6063      	str	r3, [r4, #4]
    return true;
   b6c3e:	2001      	movs	r0, #1
}
   b6c40:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b6c42:	4608      	mov	r0, r1
   b6c44:	e7ed      	b.n	b6c22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b6c46:	2000      	movs	r0, #0
   b6c48:	e7fa      	b.n	b6c40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b6c4a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b6c4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b6c4c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b6c50:	4604      	mov	r4, r0
   b6c52:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b6c54:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6c56:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b6c58:	f7ff fc6c 	bl	b6534 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b6c5c:	a901      	add	r1, sp, #4
   b6c5e:	4620      	mov	r0, r4
   b6c60:	f7ff ffd8 	bl	b6c14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b6c64:	b118      	cbz	r0, b6c6e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b6c66:	6863      	ldr	r3, [r4, #4]
   b6c68:	b90b      	cbnz	r3, b6c6e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b6c6a:	f7ff fddb 	bl	b6824 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6c6e:	a803      	add	r0, sp, #12
   b6c70:	f7ff fec9 	bl	b6a06 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b6c74:	b004      	add	sp, #16
   b6c76:	bd10      	pop	{r4, pc}

000b6c78 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b6c78:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b6c7a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b6c7e:	2318      	movs	r3, #24
   b6c80:	4604      	mov	r4, r0
   b6c82:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b6c86:	42ae      	cmp	r6, r5
   b6c88:	d015      	beq.n	b6cb6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b6c8a:	f105 0110 	add.w	r1, r5, #16
   b6c8e:	4620      	mov	r0, r4
   b6c90:	f7ff ffc0 	bl	b6c14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b6c94:	6863      	ldr	r3, [r4, #4]
   b6c96:	b90b      	cbnz	r3, b6c9c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b6c98:	f7ff fdc4 	bl	b6824 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b6c9c:	69e0      	ldr	r0, [r4, #28]
   b6c9e:	6929      	ldr	r1, [r5, #16]
   b6ca0:	6803      	ldr	r3, [r0, #0]
   b6ca2:	68db      	ldr	r3, [r3, #12]
   b6ca4:	4798      	blx	r3
        if (h.stream) {
   b6ca6:	6969      	ldr	r1, [r5, #20]
   b6ca8:	b119      	cbz	r1, b6cb2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b6caa:	6a20      	ldr	r0, [r4, #32]
   b6cac:	6803      	ldr	r3, [r0, #0]
   b6cae:	68db      	ldr	r3, [r3, #12]
   b6cb0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b6cb2:	3518      	adds	r5, #24
   b6cb4:	e7e7      	b.n	b6c86 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b6cb6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b6cba:	2618      	movs	r6, #24
   b6cbc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6cc0:	42ae      	cmp	r6, r5
   b6cc2:	d004      	beq.n	b6cce <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b6cc4:	4628      	mov	r0, r5
   b6cc6:	f000 fda5 	bl	b7814 <_ZN6StringD1Ev>
   b6cca:	3518      	adds	r5, #24
   b6ccc:	e7f8      	b.n	b6cc0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b6cce:	2300      	movs	r3, #0
   b6cd0:	6163      	str	r3, [r4, #20]
}
   b6cd2:	bd70      	pop	{r4, r5, r6, pc}

000b6cd4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b6cd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6cd6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b6cd8:	f7ff fda4 	bl	b6824 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6cdc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b6ce0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6ce2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6ce4:	f7ff fc26 	bl	b6534 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b6ce8:	4620      	mov	r0, r4
   b6cea:	f7ff ffc5 	bl	b6c78 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b6cee:	a801      	add	r0, sp, #4
   b6cf0:	f7ff fe89 	bl	b6a06 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b6cf4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6cf6:	b108      	cbz	r0, b6cfc <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b6cf8:	f7fe f95e 	bl	b4fb8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b6cfc:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b6d00:	2618      	movs	r6, #24
   b6d02:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6d06:	42ae      	cmp	r6, r5
   b6d08:	d004      	beq.n	b6d14 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b6d0a:	4628      	mov	r0, r5
   b6d0c:	f000 fd82 	bl	b7814 <_ZN6StringD1Ev>
   b6d10:	3518      	adds	r5, #24
   b6d12:	e7f8      	b.n	b6d06 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b6d14:	6920      	ldr	r0, [r4, #16]
   b6d16:	f7fe fbb5 	bl	b5484 <free>
   b6d1a:	6820      	ldr	r0, [r4, #0]
   b6d1c:	f7fe fbb2 	bl	b5484 <free>
}
   b6d20:	4620      	mov	r0, r4
   b6d22:	b002      	add	sp, #8
   b6d24:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6d28 <__tcf_2>:
    static LogManager mgr;
   b6d28:	4801      	ldr	r0, [pc, #4]	; (b6d30 <__tcf_2+0x8>)
   b6d2a:	f7ff bfd3 	b.w	b6cd4 <_ZN5spark10LogManagerD1Ev>
   b6d2e:	bf00      	nop
   b6d30:	2003e690 	.word	0x2003e690

000b6d34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b6d34:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d38:	4604      	mov	r4, r0
   b6d3a:	460d      	mov	r5, r1
   b6d3c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6d3e:	d915      	bls.n	b6d6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b6d40:	4290      	cmp	r0, r2
   b6d42:	d214      	bcs.n	b6d6e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b6d44:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6d48:	1a75      	subs	r5, r6, r1
   b6d4a:	f1a1 0714 	sub.w	r7, r1, #20
   b6d4e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6d50:	42b7      	cmp	r7, r6
   b6d52:	d01a      	beq.n	b6d8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b6d54:	b11c      	cbz	r4, b6d5e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b6d56:	4631      	mov	r1, r6
   b6d58:	4620      	mov	r0, r4
   b6d5a:	f7ff fc3f 	bl	b65dc <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b6d5e:	f106 0008 	add.w	r0, r6, #8
   b6d62:	f7ff fdf9 	bl	b6958 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b6d66:	3e14      	subs	r6, #20
   b6d68:	3c14      	subs	r4, #20
   b6d6a:	e7f1      	b.n	b6d50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b6d6c:	d00d      	beq.n	b6d8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b6d6e:	42b5      	cmp	r5, r6
   b6d70:	d00b      	beq.n	b6d8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b6d72:	b11c      	cbz	r4, b6d7c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b6d74:	4629      	mov	r1, r5
   b6d76:	4620      	mov	r0, r4
   b6d78:	f7ff fc30 	bl	b65dc <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b6d7c:	f105 0008 	add.w	r0, r5, #8
   b6d80:	f7ff fdea 	bl	b6958 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b6d84:	3514      	adds	r5, #20
   b6d86:	3414      	adds	r4, #20
   b6d88:	e7f1      	b.n	b6d6e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b6d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6d8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6d8c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d90:	4604      	mov	r4, r0
   b6d92:	460d      	mov	r5, r1
   b6d94:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6d96:	d914      	bls.n	b6dc2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b6d98:	4290      	cmp	r0, r2
   b6d9a:	d213      	bcs.n	b6dc4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b6d9c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b6da0:	1a75      	subs	r5, r6, r1
   b6da2:	f1a1 0710 	sub.w	r7, r1, #16
   b6da6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6da8:	42b7      	cmp	r7, r6
   b6daa:	d018      	beq.n	b6dde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b6dac:	b11c      	cbz	r4, b6db6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b6dae:	4631      	mov	r1, r6
   b6db0:	4620      	mov	r0, r4
   b6db2:	f000 fdab 	bl	b790c <_ZN6StringC1EOS_>
                end->~T();
   b6db6:	4630      	mov	r0, r6
   b6db8:	f000 fd2c 	bl	b7814 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6dbc:	3e10      	subs	r6, #16
   b6dbe:	3c10      	subs	r4, #16
   b6dc0:	e7f2      	b.n	b6da8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b6dc2:	d00c      	beq.n	b6dde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b6dc4:	42b5      	cmp	r5, r6
   b6dc6:	d00a      	beq.n	b6dde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b6dc8:	b11c      	cbz	r4, b6dd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b6dca:	4629      	mov	r1, r5
   b6dcc:	4620      	mov	r0, r4
   b6dce:	f000 fd9d 	bl	b790c <_ZN6StringC1EOS_>
                p->~T();
   b6dd2:	4628      	mov	r0, r5
   b6dd4:	f000 fd1e 	bl	b7814 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6dd8:	3510      	adds	r5, #16
   b6dda:	3410      	adds	r4, #16
   b6ddc:	e7f2      	b.n	b6dc4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b6dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6de0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b6de0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6de2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6de4:	4605      	mov	r5, r0
        if (n > 0) {
   b6de6:	dd11      	ble.n	b6e0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6de8:	0130      	lsls	r0, r6, #4
   b6dea:	f7fe fb43 	bl	b5474 <malloc>
            if (!d) {
   b6dee:	4604      	mov	r4, r0
   b6df0:	b158      	cbz	r0, b6e0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6df2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6df6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b6dfa:	f7ff ffc7 	bl	b6d8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b6dfe:	6828      	ldr	r0, [r5, #0]
   b6e00:	f7fe fb40 	bl	b5484 <free>
        data_ = d;
   b6e04:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6e06:	60ae      	str	r6, [r5, #8]
        return true;
   b6e08:	2001      	movs	r0, #1
    }
   b6e0a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6e0c:	2400      	movs	r4, #0
   b6e0e:	e7f6      	b.n	b6dfe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b6e10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6e14:	4690      	mov	r8, r2
   b6e16:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b6e18:	2300      	movs	r3, #0
   b6e1a:	9103      	str	r1, [sp, #12]
    return size_;
   b6e1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b6e20:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6e22:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b6e24:	4299      	cmp	r1, r3
        capacity_(0) {
   b6e26:	e9c0 3300 	strd	r3, r3, [r0]
   b6e2a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6e32:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6e36:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6e38:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b6e3a:	dc23      	bgt.n	b6e84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b6e3c:	e9d8 5700 	ldrd	r5, r7, [r8]
   b6e40:	2314      	movs	r3, #20
   b6e42:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b6e46:	42af      	cmp	r7, r5
   b6e48:	d03b      	beq.n	b6ec2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b6e4a:	4629      	mov	r1, r5
   b6e4c:	a80b      	add	r0, sp, #44	; 0x2c
   b6e4e:	f000 fd5d 	bl	b790c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b6e52:	a90b      	add	r1, sp, #44	; 0x2c
   b6e54:	a80f      	add	r0, sp, #60	; 0x3c
   b6e56:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b6e58:	f000 fd58 	bl	b790c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6e5c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b6e60:	4299      	cmp	r1, r3
   b6e62:	da1b      	bge.n	b6e9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b6e64:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b6e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b6e68:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b6e6c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b6e70:	4631      	mov	r1, r6
   b6e72:	f106 0010 	add.w	r0, r6, #16
   b6e76:	f7ff ff89 	bl	b6d8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b6e7a:	b9ee      	cbnz	r6, b6eb8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b6e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6e7e:	3301      	adds	r3, #1
   b6e80:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b6e82:	e011      	b.n	b6ea8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b6e84:	a808      	add	r0, sp, #32
   b6e86:	f7ff ffab 	bl	b6de0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6e8a:	2800      	cmp	r0, #0
   b6e8c:	d1d6      	bne.n	b6e3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b6e8e:	a808      	add	r0, sp, #32
   b6e90:	f7fe fb6c 	bl	b556c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b6e94:	4620      	mov	r0, r4
   b6e96:	b015      	add	sp, #84	; 0x54
   b6e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6e9c:	3101      	adds	r1, #1
   b6e9e:	a808      	add	r0, sp, #32
   b6ea0:	f7ff ff9e 	bl	b6de0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6ea4:	2800      	cmp	r0, #0
   b6ea6:	d1dd      	bne.n	b6e64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b6ea8:	a80f      	add	r0, sp, #60	; 0x3c
   b6eaa:	f000 fcb3 	bl	b7814 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b6eae:	a80b      	add	r0, sp, #44	; 0x2c
   b6eb0:	f000 fcb0 	bl	b7814 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b6eb4:	3514      	adds	r5, #20
   b6eb6:	e7c6      	b.n	b6e46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b6eb8:	a90f      	add	r1, sp, #60	; 0x3c
   b6eba:	4630      	mov	r0, r6
   b6ebc:	f000 fd26 	bl	b790c <_ZN6StringC1EOS_>
   b6ec0:	e7dc      	b.n	b6e7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b6ec2:	2600      	movs	r6, #0
   b6ec4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b6ec8:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b6eca:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b6ece:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b6ed2:	429e      	cmp	r6, r3
   b6ed4:	da7c      	bge.n	b6fd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b6ed6:	0133      	lsls	r3, r6, #4
   b6ed8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b6eda:	9306      	str	r3, [sp, #24]
        if (!category) {
   b6edc:	b90b      	cbnz	r3, b6ee2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b6ede:	3601      	adds	r6, #1
   b6ee0:	e7f5      	b.n	b6ece <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b6ee2:	2300      	movs	r3, #0
   b6ee4:	9307      	str	r3, [sp, #28]
   b6ee6:	fb09 f306 	mul.w	r3, r9, r6
   b6eea:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b6eec:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b6eee:	a907      	add	r1, sp, #28
   b6ef0:	a806      	add	r0, sp, #24
   b6ef2:	f7ff faf8 	bl	b64e6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6ef6:	4682      	mov	sl, r0
   b6ef8:	2800      	cmp	r0, #0
   b6efa:	d0f0      	beq.n	b6ede <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b6efc:	f04f 0300 	mov.w	r3, #0
   b6f00:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6f04:	4601      	mov	r1, r0
   b6f06:	9a07      	ldr	r2, [sp, #28]
   b6f08:	f10d 0317 	add.w	r3, sp, #23
   b6f0c:	4628      	mov	r0, r5
   b6f0e:	f7ff fb79 	bl	b6604 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6f12:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6f16:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6f18:	2f00      	cmp	r7, #0
   b6f1a:	d14a      	bne.n	b6fb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b6f1c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b6f20:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b6f24:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b6f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6f2c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b6f30:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b6f34:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6f36:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b6f3a:	4293      	cmp	r3, r2
   b6f3c:	db17      	blt.n	b6f6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b6f3e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b6f42:	f1ba 0f00 	cmp.w	sl, #0
   b6f46:	dd30      	ble.n	b6faa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b6f48:	fb09 f00a 	mul.w	r0, r9, sl
   b6f4c:	f7fe fa92 	bl	b5474 <malloc>
            if (!d) {
   b6f50:	4683      	mov	fp, r0
   b6f52:	b360      	cbz	r0, b6fae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b6f54:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6f58:	fb09 1202 	mla	r2, r9, r2, r1
   b6f5c:	f7ff feea 	bl	b6d34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b6f60:	6828      	ldr	r0, [r5, #0]
   b6f62:	f7fe fa8f 	bl	b5484 <free>
        data_ = d;
   b6f66:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b6f6a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b6f6e:	682b      	ldr	r3, [r5, #0]
   b6f70:	9a01      	ldr	r2, [sp, #4]
   b6f72:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b6f76:	686a      	ldr	r2, [r5, #4]
   b6f78:	4651      	mov	r1, sl
   b6f7a:	fb09 3202 	mla	r2, r9, r2, r3
   b6f7e:	f10a 0014 	add.w	r0, sl, #20
   b6f82:	f7ff fed7 	bl	b6d34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b6f86:	f1ba 0f00 	cmp.w	sl, #0
   b6f8a:	d003      	beq.n	b6f94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b6f8c:	a90f      	add	r1, sp, #60	; 0x3c
   b6f8e:	4650      	mov	r0, sl
   b6f90:	f7ff fb24 	bl	b65dc <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b6f94:	686b      	ldr	r3, [r5, #4]
   b6f96:	3301      	adds	r3, #1
   b6f98:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b6f9a:	a811      	add	r0, sp, #68	; 0x44
   b6f9c:	f7ff fcdc 	bl	b6958 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6fa0:	b13f      	cbz	r7, b6fb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b6fa2:	a80b      	add	r0, sp, #44	; 0x2c
   b6fa4:	f7ff fcd8 	bl	b6958 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6fa8:	e771      	b.n	b6e8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b6faa:	46bb      	mov	fp, r7
   b6fac:	e7d8      	b.n	b6f60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6fae:	2701      	movs	r7, #1
   b6fb0:	e7f3      	b.n	b6f9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b6fb2:	9b01      	ldr	r3, [sp, #4]
   b6fb4:	682d      	ldr	r5, [r5, #0]
   b6fb6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b6fba:	9b06      	ldr	r3, [sp, #24]
   b6fbc:	781b      	ldrb	r3, [r3, #0]
   b6fbe:	b92b      	cbnz	r3, b6fcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b6fc0:	f8d8 3000 	ldr.w	r3, [r8]
   b6fc4:	9a02      	ldr	r2, [sp, #8]
   b6fc6:	4413      	add	r3, r2
   b6fc8:	7c1b      	ldrb	r3, [r3, #16]
   b6fca:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b6fcc:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b6fce:	e78e      	b.n	b6eee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6fd0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b6fd2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6fd4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6fd6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6fd8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6fda:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b6fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b6fde:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6fe0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6fe2:	60a2      	str	r2, [r4, #8]
   b6fe4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b6fe6:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6fe8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6fea:	60e2      	str	r2, [r4, #12]
   b6fec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b6fee:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6ff0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6ff2:	6122      	str	r2, [r4, #16]
   b6ff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b6ff6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b6ff8:	9b03      	ldr	r3, [sp, #12]
   b6ffa:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b6ffc:	6162      	str	r2, [r4, #20]
   b6ffe:	7623      	strb	r3, [r4, #24]
   b7000:	e7cf      	b.n	b6fa2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b7004 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b7004:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7006:	4604      	mov	r4, r0
   b7008:	b087      	sub	sp, #28
   b700a:	460d      	mov	r5, r1
        filter_(level, filters) {
   b700c:	4626      	mov	r6, r4
        stream_(&stream) {
   b700e:	4619      	mov	r1, r3
   b7010:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b7012:	4617      	mov	r7, r2
        stream_(&stream) {
   b7014:	f7fd fef3 	bl	b4dfe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b7018:	4b0b      	ldr	r3, [pc, #44]	; (b7048 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b701a:	f846 3b04 	str.w	r3, [r6], #4
   b701e:	4669      	mov	r1, sp
   b7020:	a803      	add	r0, sp, #12
   b7022:	f7fd feec 	bl	b4dfe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b7026:	aa03      	add	r2, sp, #12
   b7028:	4639      	mov	r1, r7
   b702a:	4630      	mov	r0, r6
   b702c:	f7ff fef0 	bl	b6e10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7030:	a803      	add	r0, sp, #12
   b7032:	f7fd fea3 	bl	b4d7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b7036:	4668      	mov	r0, sp
   b7038:	f7fd fea0 	bl	b4d7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b703c:	4b03      	ldr	r3, [pc, #12]	; (b704c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b703e:	6023      	str	r3, [r4, #0]
}
   b7040:	4620      	mov	r0, r4
        stream_(&stream) {
   b7042:	6225      	str	r5, [r4, #32]
}
   b7044:	b007      	add	sp, #28
   b7046:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7048:	000b83e0 	.word	0x000b83e0
   b704c:	000b85b4 	.word	0x000b85b4

000b7050 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b7050:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7052:	460f      	mov	r7, r1
   b7054:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b7056:	491d      	ldr	r1, [pc, #116]	; (b70cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b7058:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b705a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b705c:	4616      	mov	r6, r2
   b705e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b7060:	f7fd fc90 	bl	b4984 <strcmp>
   b7064:	b9c0      	cbnz	r0, b7098 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b7066:	b1a4      	cbz	r4, b7092 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b7068:	4629      	mov	r1, r5
   b706a:	a801      	add	r0, sp, #4
   b706c:	f7ff fcbc 	bl	b69e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b7070:	4917      	ldr	r1, [pc, #92]	; (b70d0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b7072:	2024      	movs	r0, #36	; 0x24
   b7074:	f000 ff90 	bl	b7f98 <_ZnwjRKSt9nothrow_t>
   b7078:	4605      	mov	r5, r0
   b707a:	b130      	cbz	r0, b708a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b707c:	ab01      	add	r3, sp, #4
   b707e:	4632      	mov	r2, r6
   b7080:	4621      	mov	r1, r4
   b7082:	f7ff ffbf 	bl	b7004 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7086:	4b13      	ldr	r3, [pc, #76]	; (b70d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b7088:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b708a:	a801      	add	r0, sp, #4
   b708c:	f7fd fe76 	bl	b4d7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b7090:	462c      	mov	r4, r5
}
   b7092:	4620      	mov	r0, r4
   b7094:	b005      	add	sp, #20
   b7096:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b7098:	490f      	ldr	r1, [pc, #60]	; (b70d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b709a:	4638      	mov	r0, r7
   b709c:	f7fd fc72 	bl	b4984 <strcmp>
   b70a0:	b990      	cbnz	r0, b70c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b70a2:	2c00      	cmp	r4, #0
   b70a4:	d0f5      	beq.n	b7092 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b70a6:	4629      	mov	r1, r5
   b70a8:	a801      	add	r0, sp, #4
   b70aa:	f7ff fc9d 	bl	b69e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b70ae:	4908      	ldr	r1, [pc, #32]	; (b70d0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b70b0:	2024      	movs	r0, #36	; 0x24
   b70b2:	f000 ff71 	bl	b7f98 <_ZnwjRKSt9nothrow_t>
   b70b6:	4605      	mov	r5, r0
   b70b8:	2800      	cmp	r0, #0
   b70ba:	d0e6      	beq.n	b708a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b70bc:	ab01      	add	r3, sp, #4
   b70be:	4632      	mov	r2, r6
   b70c0:	4621      	mov	r1, r4
   b70c2:	f7ff ff9f 	bl	b7004 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b70c6:	e7e0      	b.n	b708a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b70c8:	2400      	movs	r4, #0
   b70ca:	e7e2      	b.n	b7092 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b70cc:	000b8534 	.word	0x000b8534
   b70d0:	000b86ec 	.word	0x000b86ec
   b70d4:	000b85cc 	.word	0x000b85cc
   b70d8:	000b8538 	.word	0x000b8538

000b70dc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b70dc:	4b01      	ldr	r3, [pc, #4]	; (b70e4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b70de:	4a02      	ldr	r2, [pc, #8]	; (b70e8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b70e0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b70e2:	4770      	bx	lr
   b70e4:	2003e68c 	.word	0x2003e68c
   b70e8:	000b8549 	.word	0x000b8549

000b70ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b70ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b70f0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b70f2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b70f6:	4604      	mov	r4, r0
   b70f8:	460e      	mov	r6, r1
   b70fa:	4617      	mov	r7, r2
   b70fc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b70fe:	f000 fd63 	bl	b7bc8 <_Z16_fetch_usbserialv>
   b7102:	4581      	cmp	r9, r0
   b7104:	d04c      	beq.n	b71a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b7106:	792b      	ldrb	r3, [r5, #4]
   b7108:	0719      	lsls	r1, r3, #28
   b710a:	d504      	bpl.n	b7116 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b710c:	696a      	ldr	r2, [r5, #20]
   b710e:	4954      	ldr	r1, [pc, #336]	; (b7260 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b7110:	4620      	mov	r0, r4
   b7112:	f7ff fadc 	bl	b66ce <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b7116:	f1b8 0f00 	cmp.w	r8, #0
   b711a:	d00d      	beq.n	b7138 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b711c:	215b      	movs	r1, #91	; 0x5b
   b711e:	4620      	mov	r0, r4
   b7120:	f7ff fa50 	bl	b65c4 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b7124:	4641      	mov	r1, r8
   b7126:	4620      	mov	r0, r4
   b7128:	f7ff fa3d 	bl	b65a6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b712c:	6823      	ldr	r3, [r4, #0]
   b712e:	494d      	ldr	r1, [pc, #308]	; (b7264 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b7130:	68db      	ldr	r3, [r3, #12]
   b7132:	2202      	movs	r2, #2
   b7134:	4620      	mov	r0, r4
   b7136:	4798      	blx	r3
    if (attr.has_file) {
   b7138:	792b      	ldrb	r3, [r5, #4]
   b713a:	07da      	lsls	r2, r3, #31
   b713c:	d523      	bpl.n	b7186 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b713e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b7142:	212f      	movs	r1, #47	; 0x2f
   b7144:	4640      	mov	r0, r8
   b7146:	f000 ffec 	bl	b8122 <strrchr>
    if (s1) {
   b714a:	b108      	cbz	r0, b7150 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b714c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b7150:	4641      	mov	r1, r8
   b7152:	4620      	mov	r0, r4
   b7154:	f7ff fa27 	bl	b65a6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b7158:	792b      	ldrb	r3, [r5, #4]
   b715a:	079b      	lsls	r3, r3, #30
   b715c:	d508      	bpl.n	b7170 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b715e:	213a      	movs	r1, #58	; 0x3a
   b7160:	4620      	mov	r0, r4
   b7162:	f7ff fa2f 	bl	b65c4 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b7166:	68ea      	ldr	r2, [r5, #12]
   b7168:	493f      	ldr	r1, [pc, #252]	; (b7268 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b716a:	4620      	mov	r0, r4
   b716c:	f7ff faaf 	bl	b66ce <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b7170:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b7172:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b7174:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b7178:	68db      	ldr	r3, [r3, #12]
   b717a:	bf14      	ite	ne
   b717c:	493b      	ldrne	r1, [pc, #236]	; (b726c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b717e:	493c      	ldreq	r1, [pc, #240]	; (b7270 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b7180:	2202      	movs	r2, #2
            write(": ", 2);
   b7182:	4620      	mov	r0, r4
   b7184:	4798      	blx	r3
    if (attr.has_function) {
   b7186:	792b      	ldrb	r3, [r5, #4]
   b7188:	0758      	lsls	r0, r3, #29
   b718a:	d51d      	bpl.n	b71c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b718c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b718e:	460b      	mov	r3, r1
   b7190:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b7192:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7196:	b160      	cbz	r0, b71b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b7198:	2820      	cmp	r0, #32
   b719a:	d108      	bne.n	b71ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b719c:	4619      	mov	r1, r3
   b719e:	e7f7      	b.n	b7190 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b71a0:	4834      	ldr	r0, [pc, #208]	; (b7274 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b71a2:	f000 f982 	bl	b74aa <_ZN5spark12NetworkClass9listeningEv>
   b71a6:	2800      	cmp	r0, #0
   b71a8:	d0ad      	beq.n	b7106 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b71aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b71ae:	2828      	cmp	r0, #40	; 0x28
   b71b0:	d1ee      	bne.n	b7190 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b71b2:	6823      	ldr	r3, [r4, #0]
   b71b4:	1a52      	subs	r2, r2, r1
   b71b6:	68db      	ldr	r3, [r3, #12]
   b71b8:	4620      	mov	r0, r4
   b71ba:	4798      	blx	r3
        write("(): ", 4);
   b71bc:	6823      	ldr	r3, [r4, #0]
   b71be:	492e      	ldr	r1, [pc, #184]	; (b7278 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b71c0:	68db      	ldr	r3, [r3, #12]
   b71c2:	2204      	movs	r2, #4
   b71c4:	4620      	mov	r0, r4
   b71c6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b71c8:	2100      	movs	r1, #0
   b71ca:	4638      	mov	r0, r7
   b71cc:	f7fe f864 	bl	b5298 <log_level_name>
   b71d0:	4601      	mov	r1, r0
    write(s);
   b71d2:	4620      	mov	r0, r4
   b71d4:	f7ff f9e7 	bl	b65a6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b71d8:	6823      	ldr	r3, [r4, #0]
   b71da:	4925      	ldr	r1, [pc, #148]	; (b7270 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b71dc:	68db      	ldr	r3, [r3, #12]
   b71de:	2202      	movs	r2, #2
   b71e0:	4620      	mov	r0, r4
   b71e2:	4798      	blx	r3
    if (msg) {
   b71e4:	b11e      	cbz	r6, b71ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b71e6:	4631      	mov	r1, r6
   b71e8:	4620      	mov	r0, r4
   b71ea:	f7ff f9dc 	bl	b65a6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b71ee:	792b      	ldrb	r3, [r5, #4]
   b71f0:	f013 0f30 	tst.w	r3, #48	; 0x30
   b71f4:	d02c      	beq.n	b7250 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b71f6:	6823      	ldr	r3, [r4, #0]
   b71f8:	4920      	ldr	r1, [pc, #128]	; (b727c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b71fa:	68db      	ldr	r3, [r3, #12]
   b71fc:	2202      	movs	r2, #2
   b71fe:	4620      	mov	r0, r4
   b7200:	4798      	blx	r3
        if (attr.has_code) {
   b7202:	792b      	ldrb	r3, [r5, #4]
   b7204:	06d9      	lsls	r1, r3, #27
   b7206:	d50a      	bpl.n	b721e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b7208:	6823      	ldr	r3, [r4, #0]
   b720a:	491d      	ldr	r1, [pc, #116]	; (b7280 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b720c:	68db      	ldr	r3, [r3, #12]
   b720e:	2207      	movs	r2, #7
   b7210:	4620      	mov	r0, r4
   b7212:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b7214:	69aa      	ldr	r2, [r5, #24]
   b7216:	491b      	ldr	r1, [pc, #108]	; (b7284 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b7218:	4620      	mov	r0, r4
   b721a:	f7ff fa58 	bl	b66ce <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b721e:	792b      	ldrb	r3, [r5, #4]
   b7220:	069a      	lsls	r2, r3, #26
   b7222:	d511      	bpl.n	b7248 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b7224:	06db      	lsls	r3, r3, #27
   b7226:	d505      	bpl.n	b7234 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b7228:	6823      	ldr	r3, [r4, #0]
   b722a:	4910      	ldr	r1, [pc, #64]	; (b726c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b722c:	68db      	ldr	r3, [r3, #12]
   b722e:	2202      	movs	r2, #2
   b7230:	4620      	mov	r0, r4
   b7232:	4798      	blx	r3
            write("details = ", 10);
   b7234:	6823      	ldr	r3, [r4, #0]
   b7236:	4914      	ldr	r1, [pc, #80]	; (b7288 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b7238:	68db      	ldr	r3, [r3, #12]
   b723a:	4620      	mov	r0, r4
   b723c:	220a      	movs	r2, #10
   b723e:	4798      	blx	r3
            write(attr.details);
   b7240:	69e9      	ldr	r1, [r5, #28]
   b7242:	4620      	mov	r0, r4
   b7244:	f7ff f9af 	bl	b65a6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b7248:	215d      	movs	r1, #93	; 0x5d
   b724a:	4620      	mov	r0, r4
   b724c:	f7ff f9ba 	bl	b65c4 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b7250:	6823      	ldr	r3, [r4, #0]
   b7252:	490e      	ldr	r1, [pc, #56]	; (b728c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b7254:	68db      	ldr	r3, [r3, #12]
   b7256:	4620      	mov	r0, r4
   b7258:	2202      	movs	r2, #2
}
   b725a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b725e:	4718      	bx	r3
   b7260:	000b854d 	.word	0x000b854d
   b7264:	000b8554 	.word	0x000b8554
   b7268:	000b8514 	.word	0x000b8514
   b726c:	000b8557 	.word	0x000b8557
   b7270:	000b855c 	.word	0x000b855c
   b7274:	2003e6b8 	.word	0x2003e6b8
   b7278:	000b855a 	.word	0x000b855a
   b727c:	000b855f 	.word	0x000b855f
   b7280:	000b8562 	.word	0x000b8562
   b7284:	000b856a 	.word	0x000b856a
   b7288:	000b856d 	.word	0x000b856d
   b728c:	000b8578 	.word	0x000b8578

000b7290 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b7290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7294:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b7296:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b7298:	460d      	mov	r5, r1
   b729a:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b729c:	f000 fc94 	bl	b7bc8 <_Z16_fetch_usbserialv>
   b72a0:	4287      	cmp	r7, r0
   b72a2:	d007      	beq.n	b72b4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b72a4:	6a20      	ldr	r0, [r4, #32]
   b72a6:	6803      	ldr	r3, [r0, #0]
   b72a8:	4632      	mov	r2, r6
   b72aa:	4629      	mov	r1, r5
   b72ac:	68db      	ldr	r3, [r3, #12]
}
   b72ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b72b2:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b72b4:	4803      	ldr	r0, [pc, #12]	; (b72c4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b72b6:	f000 f8f8 	bl	b74aa <_ZN5spark12NetworkClass9listeningEv>
   b72ba:	2800      	cmp	r0, #0
   b72bc:	d0f2      	beq.n	b72a4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b72be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b72c2:	bf00      	nop
   b72c4:	2003e6b8 	.word	0x2003e6b8

000b72c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b72c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b72cc:	b085      	sub	sp, #20
    return stream_;
   b72ce:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b72d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b72d4:	4605      	mov	r5, r0
   b72d6:	460f      	mov	r7, r1
   b72d8:	4690      	mov	r8, r2
   b72da:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b72dc:	f000 fc74 	bl	b7bc8 <_Z16_fetch_usbserialv>
   b72e0:	4581      	cmp	r9, r0
   b72e2:	d105      	bne.n	b72f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b72e4:	4849      	ldr	r0, [pc, #292]	; (b740c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b72e6:	f000 f8e0 	bl	b74aa <_ZN5spark12NetworkClass9listeningEv>
   b72ea:	2800      	cmp	r0, #0
   b72ec:	f040 808a 	bne.w	b7404 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b72f0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b72f2:	4a47      	ldr	r2, [pc, #284]	; (b7410 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b72f4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b72f6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b72fa:	a801      	add	r0, sp, #4
        strm_(stream) {
   b72fc:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b72fe:	f88d 9008 	strb.w	r9, [sp, #8]
   b7302:	f7ff f832 	bl	b636a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b7306:	4649      	mov	r1, r9
   b7308:	4640      	mov	r0, r8
   b730a:	f7fd ffc5 	bl	b5298 <log_level_name>
    json.name("l", 1).value(s);
   b730e:	4941      	ldr	r1, [pc, #260]	; (b7414 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b7310:	4680      	mov	r8, r0
   b7312:	2201      	movs	r2, #1
   b7314:	a801      	add	r0, sp, #4
   b7316:	f7ff f8b7 	bl	b6488 <_ZN5spark10JSONWriter4nameEPKcj>
   b731a:	4641      	mov	r1, r8
   b731c:	f7ff f935 	bl	b658a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b7320:	b13f      	cbz	r7, b7332 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b7322:	493d      	ldr	r1, [pc, #244]	; (b7418 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b7324:	2201      	movs	r2, #1
   b7326:	a801      	add	r0, sp, #4
   b7328:	f7ff f8ae 	bl	b6488 <_ZN5spark10JSONWriter4nameEPKcj>
   b732c:	4639      	mov	r1, r7
   b732e:	f7ff f92c 	bl	b658a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b7332:	b13e      	cbz	r6, b7344 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b7334:	4939      	ldr	r1, [pc, #228]	; (b741c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b7336:	2201      	movs	r2, #1
   b7338:	a801      	add	r0, sp, #4
   b733a:	f7ff f8a5 	bl	b6488 <_ZN5spark10JSONWriter4nameEPKcj>
   b733e:	4631      	mov	r1, r6
   b7340:	f7ff f923 	bl	b658a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b7344:	7923      	ldrb	r3, [r4, #4]
   b7346:	07df      	lsls	r7, r3, #31
   b7348:	d50e      	bpl.n	b7368 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b734a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b734c:	212f      	movs	r1, #47	; 0x2f
   b734e:	4630      	mov	r0, r6
   b7350:	f000 fee7 	bl	b8122 <strrchr>
    if (s1) {
   b7354:	b100      	cbz	r0, b7358 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b7356:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b7358:	4931      	ldr	r1, [pc, #196]	; (b7420 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b735a:	2201      	movs	r2, #1
   b735c:	a801      	add	r0, sp, #4
   b735e:	f7ff f893 	bl	b6488 <_ZN5spark10JSONWriter4nameEPKcj>
   b7362:	4631      	mov	r1, r6
   b7364:	f7ff f911 	bl	b658a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b7368:	7923      	ldrb	r3, [r4, #4]
   b736a:	079e      	lsls	r6, r3, #30
   b736c:	d507      	bpl.n	b737e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b736e:	492d      	ldr	r1, [pc, #180]	; (b7424 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b7370:	2202      	movs	r2, #2
   b7372:	a801      	add	r0, sp, #4
   b7374:	f7ff f888 	bl	b6488 <_ZN5spark10JSONWriter4nameEPKcj>
   b7378:	68e1      	ldr	r1, [r4, #12]
   b737a:	f7ff f803 	bl	b6384 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b737e:	7923      	ldrb	r3, [r4, #4]
   b7380:	0758      	lsls	r0, r3, #29
   b7382:	d514      	bpl.n	b73ae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b7384:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b7386:	4633      	mov	r3, r6
   b7388:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b738a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b738e:	b12a      	cbz	r2, b739c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b7390:	2a20      	cmp	r2, #32
   b7392:	d101      	bne.n	b7398 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b7394:	461e      	mov	r6, r3
   b7396:	e7f7      	b.n	b7388 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b7398:	2a28      	cmp	r2, #40	; 0x28
   b739a:	d1f5      	bne.n	b7388 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b739c:	4922      	ldr	r1, [pc, #136]	; (b7428 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b739e:	2202      	movs	r2, #2
   b73a0:	a801      	add	r0, sp, #4
   b73a2:	f7ff f871 	bl	b6488 <_ZN5spark10JSONWriter4nameEPKcj>
   b73a6:	1bba      	subs	r2, r7, r6
   b73a8:	4631      	mov	r1, r6
   b73aa:	f7ff f87d 	bl	b64a8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b73ae:	7923      	ldrb	r3, [r4, #4]
   b73b0:	0719      	lsls	r1, r3, #28
   b73b2:	d507      	bpl.n	b73c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b73b4:	491d      	ldr	r1, [pc, #116]	; (b742c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b73b6:	2201      	movs	r2, #1
   b73b8:	a801      	add	r0, sp, #4
   b73ba:	f7ff f865 	bl	b6488 <_ZN5spark10JSONWriter4nameEPKcj>
   b73be:	6961      	ldr	r1, [r4, #20]
   b73c0:	f7fe fff2 	bl	b63a8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b73c4:	7923      	ldrb	r3, [r4, #4]
   b73c6:	06da      	lsls	r2, r3, #27
   b73c8:	d508      	bpl.n	b73dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b73ca:	2204      	movs	r2, #4
   b73cc:	4918      	ldr	r1, [pc, #96]	; (b7430 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b73ce:	eb0d 0002 	add.w	r0, sp, r2
   b73d2:	f7ff f859 	bl	b6488 <_ZN5spark10JSONWriter4nameEPKcj>
   b73d6:	69a1      	ldr	r1, [r4, #24]
   b73d8:	f7fe ffd4 	bl	b6384 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b73dc:	7923      	ldrb	r3, [r4, #4]
   b73de:	069b      	lsls	r3, r3, #26
   b73e0:	d507      	bpl.n	b73f2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b73e2:	4914      	ldr	r1, [pc, #80]	; (b7434 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b73e4:	2206      	movs	r2, #6
   b73e6:	a801      	add	r0, sp, #4
   b73e8:	f7ff f84e 	bl	b6488 <_ZN5spark10JSONWriter4nameEPKcj>
   b73ec:	69e1      	ldr	r1, [r4, #28]
   b73ee:	f7ff f8cc 	bl	b658a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b73f2:	a801      	add	r0, sp, #4
   b73f4:	f7fe ffa3 	bl	b633e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b73f8:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b73fa:	490f      	ldr	r1, [pc, #60]	; (b7438 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b73fc:	6803      	ldr	r3, [r0, #0]
   b73fe:	2202      	movs	r2, #2
   b7400:	68db      	ldr	r3, [r3, #12]
   b7402:	4798      	blx	r3
}
   b7404:	b005      	add	sp, #20
   b7406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b740a:	bf00      	nop
   b740c:	2003e6b8 	.word	0x2003e6b8
   b7410:	000b859c 	.word	0x000b859c
   b7414:	000b852a 	.word	0x000b852a
   b7418:	000b857b 	.word	0x000b857b
   b741c:	000b875b 	.word	0x000b875b
   b7420:	000b83c6 	.word	0x000b83c6
   b7424:	000b857d 	.word	0x000b857d
   b7428:	000b8580 	.word	0x000b8580
   b742c:	000b8583 	.word	0x000b8583
   b7430:	000b8585 	.word	0x000b8585
   b7434:	000b858a 	.word	0x000b858a
   b7438:	000b8578 	.word	0x000b8578

000b743c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b743c:	2300      	movs	r3, #0
   b743e:	6840      	ldr	r0, [r0, #4]
   b7440:	461a      	mov	r2, r3
   b7442:	f7fd bfb7 	b.w	b53b4 <network_connect>

000b7446 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7446:	6840      	ldr	r0, [r0, #4]
   b7448:	2200      	movs	r2, #0
   b744a:	2102      	movs	r1, #2
   b744c:	f7fd bfc2 	b.w	b53d4 <network_disconnect>

000b7450 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7450:	2200      	movs	r2, #0
   b7452:	6840      	ldr	r0, [r0, #4]
   b7454:	4611      	mov	r1, r2
   b7456:	f7fd bfb5 	b.w	b53c4 <network_connecting>

000b745a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b745a:	2200      	movs	r2, #0
   b745c:	6840      	ldr	r0, [r0, #4]
   b745e:	4611      	mov	r1, r2
   b7460:	f7fd bfc0 	b.w	b53e4 <network_ready>

000b7464 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7464:	2300      	movs	r3, #0
   b7466:	6840      	ldr	r0, [r0, #4]
   b7468:	461a      	mov	r2, r3
   b746a:	4619      	mov	r1, r3
   b746c:	f7fd bfc2 	b.w	b53f4 <network_on>

000b7470 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7470:	2300      	movs	r3, #0
   b7472:	6840      	ldr	r0, [r0, #4]
   b7474:	461a      	mov	r2, r3
   b7476:	4619      	mov	r1, r3
   b7478:	f7fd bfc4 	b.w	b5404 <network_off>

000b747c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b747c:	6840      	ldr	r0, [r0, #4]
   b747e:	2100      	movs	r1, #0
   b7480:	f7fd bfe8 	b.w	b5454 <network_is_on>

000b7484 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7484:	6840      	ldr	r0, [r0, #4]
   b7486:	2100      	movs	r1, #0
   b7488:	f7fd bfec 	b.w	b5464 <network_is_off>

000b748c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b748c:	6840      	ldr	r0, [r0, #4]
   b748e:	2200      	movs	r2, #0
   b7490:	f081 0101 	eor.w	r1, r1, #1
   b7494:	f7fd bfbe 	b.w	b5414 <network_listen>

000b7498 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7498:	6840      	ldr	r0, [r0, #4]
   b749a:	2200      	movs	r2, #0
   b749c:	f7fd bfca 	b.w	b5434 <network_set_listen_timeout>

000b74a0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b74a0:	2200      	movs	r2, #0
   b74a2:	6840      	ldr	r0, [r0, #4]
   b74a4:	4611      	mov	r1, r2
   b74a6:	f7fd bfcd 	b.w	b5444 <network_get_listen_timeout>

000b74aa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b74aa:	2200      	movs	r2, #0
   b74ac:	6840      	ldr	r0, [r0, #4]
   b74ae:	4611      	mov	r1, r2
   b74b0:	f7fd bfb8 	b.w	b5424 <network_listening>

000b74b4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b74b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b74b8:	b095      	sub	sp, #84	; 0x54
   b74ba:	4614      	mov	r4, r2
   b74bc:	460d      	mov	r5, r1
   b74be:	4607      	mov	r7, r0
    IPAddress addr;
   b74c0:	f7fe fdec 	bl	b609c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b74c4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b74c6:	221c      	movs	r2, #28
   b74c8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b74ca:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b74cc:	f000 fda2 	bl	b8014 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b74d0:	2340      	movs	r3, #64	; 0x40
   b74d2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b74d4:	4620      	mov	r0, r4
   b74d6:	466b      	mov	r3, sp
   b74d8:	aa0c      	add	r2, sp, #48	; 0x30
   b74da:	2100      	movs	r1, #0
   b74dc:	f7fd fe24 	bl	b5128 <netdb_getaddrinfo>
    if (!r) {
   b74e0:	4604      	mov	r4, r0
   b74e2:	2800      	cmp	r0, #0
   b74e4:	d14b      	bne.n	b757e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b74e6:	4602      	mov	r2, r0
   b74e8:	2101      	movs	r1, #1
   b74ea:	6868      	ldr	r0, [r5, #4]
   b74ec:	f7fd ff7a 	bl	b53e4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b74f0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b74f2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b74f4:	4622      	mov	r2, r4
   b74f6:	6868      	ldr	r0, [r5, #4]
   b74f8:	f7fd ff74 	bl	b53e4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b74fc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b74fe:	4681      	mov	r9, r0
        bool ok = false;
   b7500:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7502:	2e00      	cmp	r6, #0
   b7504:	d03b      	beq.n	b757e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7506:	2900      	cmp	r1, #0
   b7508:	d139      	bne.n	b757e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b750a:	6873      	ldr	r3, [r6, #4]
   b750c:	2b02      	cmp	r3, #2
   b750e:	d003      	beq.n	b7518 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7510:	2b0a      	cmp	r3, #10
   b7512:	d011      	beq.n	b7538 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7514:	69f6      	ldr	r6, [r6, #28]
   b7516:	e7f4      	b.n	b7502 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7518:	f1b8 0f00 	cmp.w	r8, #0
   b751c:	d0fa      	beq.n	b7514 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b751e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7520:	a806      	add	r0, sp, #24
   b7522:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7524:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7526:	f7fe fde7 	bl	b60f8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b752a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b752c:	1d3c      	adds	r4, r7, #4
   b752e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7530:	682b      	ldr	r3, [r5, #0]
   b7532:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7534:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7536:	e7ed      	b.n	b7514 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7538:	f1b9 0f00 	cmp.w	r9, #0
   b753c:	d0ea      	beq.n	b7514 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b753e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7540:	2210      	movs	r2, #16
   b7542:	a801      	add	r0, sp, #4
   b7544:	f000 fd66 	bl	b8014 <memset>
                    a.v = 6;
   b7548:	2306      	movs	r3, #6
   b754a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b754e:	ad01      	add	r5, sp, #4
   b7550:	f104 0308 	add.w	r3, r4, #8
   b7554:	3418      	adds	r4, #24
   b7556:	6818      	ldr	r0, [r3, #0]
   b7558:	6859      	ldr	r1, [r3, #4]
   b755a:	462a      	mov	r2, r5
   b755c:	c203      	stmia	r2!, {r0, r1}
   b755e:	3308      	adds	r3, #8
   b7560:	42a3      	cmp	r3, r4
   b7562:	4615      	mov	r5, r2
   b7564:	d1f7      	bne.n	b7556 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7566:	a901      	add	r1, sp, #4
   b7568:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b756a:	ad07      	add	r5, sp, #28
   b756c:	f7fe fda4 	bl	b60b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7572:	1d3c      	adds	r4, r7, #4
   b7574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7576:	682b      	ldr	r3, [r5, #0]
   b7578:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b757a:	4649      	mov	r1, r9
   b757c:	e7ca      	b.n	b7514 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b757e:	9800      	ldr	r0, [sp, #0]
   b7580:	f7fd fdca 	bl	b5118 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7584:	4638      	mov	r0, r7
   b7586:	b015      	add	sp, #84	; 0x54
   b7588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b758c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b758c:	4b02      	ldr	r3, [pc, #8]	; (b7598 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b758e:	4a03      	ldr	r2, [pc, #12]	; (b759c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7590:	601a      	str	r2, [r3, #0]
   b7592:	2200      	movs	r2, #0
   b7594:	605a      	str	r2, [r3, #4]

} // spark
   b7596:	4770      	bx	lr
   b7598:	2003e6b8 	.word	0x2003e6b8
   b759c:	000b8614 	.word	0x000b8614

000b75a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b75a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75a2:	4606      	mov	r6, r0
   b75a4:	460d      	mov	r5, r1
  size_t n = 0;
   b75a6:	188f      	adds	r7, r1, r2
   b75a8:	2400      	movs	r4, #0
  while (size--) {
   b75aa:	42bd      	cmp	r5, r7
   b75ac:	d00c      	beq.n	b75c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b75ae:	6833      	ldr	r3, [r6, #0]
   b75b0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b75b4:	689b      	ldr	r3, [r3, #8]
   b75b6:	4630      	mov	r0, r6
   b75b8:	4798      	blx	r3
     if (chunk>=0)
   b75ba:	1e03      	subs	r3, r0, #0
   b75bc:	db01      	blt.n	b75c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b75be:	441c      	add	r4, r3
  while (size--) {
   b75c0:	e7f3      	b.n	b75aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b75c2:	2c00      	cmp	r4, #0
   b75c4:	bf08      	it	eq
   b75c6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b75c8:	4620      	mov	r0, r4
   b75ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b75cc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b75cc:	b513      	push	{r0, r1, r4, lr}
   b75ce:	4604      	mov	r4, r0
    }
   b75d0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b75d2:	b159      	cbz	r1, b75ec <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b75d4:	9101      	str	r1, [sp, #4]
   b75d6:	f7fd f9df 	bl	b4998 <strlen>
   b75da:	6823      	ldr	r3, [r4, #0]
   b75dc:	9901      	ldr	r1, [sp, #4]
   b75de:	68db      	ldr	r3, [r3, #12]
   b75e0:	4602      	mov	r2, r0
   b75e2:	4620      	mov	r0, r4
    }
   b75e4:	b002      	add	sp, #8
   b75e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b75ea:	4718      	bx	r3
    }
   b75ec:	b002      	add	sp, #8
   b75ee:	bd10      	pop	{r4, pc}

000b75f0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b75f0:	6803      	ldr	r3, [r0, #0]
   b75f2:	689b      	ldr	r3, [r3, #8]
   b75f4:	4718      	bx	r3

000b75f6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b75f6:	b530      	push	{r4, r5, lr}
   b75f8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b75fa:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b75fc:	2a01      	cmp	r2, #1
  *str = '\0';
   b75fe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7602:	bf98      	it	ls
   b7604:	220a      	movls	r2, #10
   b7606:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7608:	460d      	mov	r5, r1
   b760a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b760e:	fb01 5312 	mls	r3, r1, r2, r5
   b7612:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7616:	2b09      	cmp	r3, #9
   b7618:	bf94      	ite	ls
   b761a:	3330      	addls	r3, #48	; 0x30
   b761c:	3337      	addhi	r3, #55	; 0x37
   b761e:	b2db      	uxtb	r3, r3
  } while(n);
   b7620:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7622:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7626:	d9ef      	bls.n	b7608 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7628:	4621      	mov	r1, r4
   b762a:	f7ff ffcf 	bl	b75cc <_ZN5Print5writeEPKc>
}
   b762e:	b00b      	add	sp, #44	; 0x2c
   b7630:	bd30      	pop	{r4, r5, pc}
	...

000b7634 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b7634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7638:	ec55 4b10 	vmov	r4, r5, d0
   b763c:	4606      	mov	r6, r0
   b763e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b7640:	ee10 2a10 	vmov	r2, s0
   b7644:	ee10 0a10 	vmov	r0, s0
   b7648:	462b      	mov	r3, r5
   b764a:	4629      	mov	r1, r5
   b764c:	f7fd f93c 	bl	b48c8 <__aeabi_dcmpun>
   b7650:	b140      	cbz	r0, b7664 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b7652:	4953      	ldr	r1, [pc, #332]	; (b77a0 <_ZN5Print10printFloatEdh+0x16c>)
   b7654:	4630      	mov	r0, r6
   b7656:	f7ff ffb9 	bl	b75cc <_ZN5Print5writeEPKc>
   b765a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b765c:	4650      	mov	r0, sl
   b765e:	b003      	add	sp, #12
   b7660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b7664:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b7668:	4b4e      	ldr	r3, [pc, #312]	; (b77a4 <_ZN5Print10printFloatEdh+0x170>)
   b766a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b766e:	4620      	mov	r0, r4
   b7670:	4649      	mov	r1, r9
   b7672:	f7fd f929 	bl	b48c8 <__aeabi_dcmpun>
   b7676:	b948      	cbnz	r0, b768c <_ZN5Print10printFloatEdh+0x58>
   b7678:	4b4a      	ldr	r3, [pc, #296]	; (b77a4 <_ZN5Print10printFloatEdh+0x170>)
   b767a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b767e:	4620      	mov	r0, r4
   b7680:	4649      	mov	r1, r9
   b7682:	f7fd f903 	bl	b488c <__aeabi_dcmple>
   b7686:	b908      	cbnz	r0, b768c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b7688:	4947      	ldr	r1, [pc, #284]	; (b77a8 <_ZN5Print10printFloatEdh+0x174>)
   b768a:	e7e3      	b.n	b7654 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b768c:	4b47      	ldr	r3, [pc, #284]	; (b77ac <_ZN5Print10printFloatEdh+0x178>)
   b768e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b7692:	4620      	mov	r0, r4
   b7694:	4629      	mov	r1, r5
   b7696:	f7fd f90d 	bl	b48b4 <__aeabi_dcmpgt>
   b769a:	b108      	cbz	r0, b76a0 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b769c:	4944      	ldr	r1, [pc, #272]	; (b77b0 <_ZN5Print10printFloatEdh+0x17c>)
   b769e:	e7d9      	b.n	b7654 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b76a0:	4b44      	ldr	r3, [pc, #272]	; (b77b4 <_ZN5Print10printFloatEdh+0x180>)
   b76a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b76a6:	4620      	mov	r0, r4
   b76a8:	4629      	mov	r1, r5
   b76aa:	f7fd f8e5 	bl	b4878 <__aeabi_dcmplt>
   b76ae:	2800      	cmp	r0, #0
   b76b0:	d1f4      	bne.n	b769c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b76b2:	2200      	movs	r2, #0
   b76b4:	2300      	movs	r3, #0
   b76b6:	4620      	mov	r0, r4
   b76b8:	4629      	mov	r1, r5
   b76ba:	f7fd f8dd 	bl	b4878 <__aeabi_dcmplt>
   b76be:	b1d0      	cbz	r0, b76f6 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b76c0:	212d      	movs	r1, #45	; 0x2d
   b76c2:	4630      	mov	r0, r6
   b76c4:	f7ff ff94 	bl	b75f0 <_ZN5Print5printEc>
     number = -number;
   b76c8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b76cc:	4682      	mov	sl, r0
     number = -number;
   b76ce:	461d      	mov	r5, r3
  double rounding = 0.5;
   b76d0:	4939      	ldr	r1, [pc, #228]	; (b77b8 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b76d2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b77c0 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b76d6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b76da:	2000      	movs	r0, #0
    rounding /= 10.0;
   b76dc:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b76e0:	fa5f f38b 	uxtb.w	r3, fp
   b76e4:	429f      	cmp	r7, r3
   b76e6:	d908      	bls.n	b76fa <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b76e8:	4642      	mov	r2, r8
   b76ea:	464b      	mov	r3, r9
   b76ec:	f7fc ff7c 	bl	b45e8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b76f0:	f10b 0b01 	add.w	fp, fp, #1
   b76f4:	e7f4      	b.n	b76e0 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b76f6:	4682      	mov	sl, r0
   b76f8:	e7ea      	b.n	b76d0 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b76fa:	4622      	mov	r2, r4
   b76fc:	462b      	mov	r3, r5
   b76fe:	f7fc fc93 	bl	b4028 <__adddf3>
   b7702:	460d      	mov	r5, r1
   b7704:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b7706:	f7fd f91d 	bl	b4944 <__aeabi_d2uiz>
   b770a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b770c:	f7fc fdc8 	bl	b42a0 <__aeabi_ui2d>
   b7710:	4602      	mov	r2, r0
   b7712:	460b      	mov	r3, r1
   b7714:	4620      	mov	r0, r4
   b7716:	4629      	mov	r1, r5
   b7718:	f7fc fc84 	bl	b4024 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b771c:	220a      	movs	r2, #10
   b771e:	4604      	mov	r4, r0
   b7720:	460d      	mov	r5, r1
   b7722:	4630      	mov	r0, r6
   b7724:	4641      	mov	r1, r8
   b7726:	f7ff ff66 	bl	b75f6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b772a:	4482      	add	sl, r0
  if (digits > 0) {
   b772c:	2f00      	cmp	r7, #0
   b772e:	d095      	beq.n	b765c <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b7730:	4922      	ldr	r1, [pc, #136]	; (b77bc <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b7732:	f8df 908c 	ldr.w	r9, [pc, #140]	; b77c0 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b7736:	4630      	mov	r0, r6
   b7738:	f7ff ff48 	bl	b75cc <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b773c:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b7740:	4482      	add	sl, r0
  while (digits-- > 0)
   b7742:	2f00      	cmp	r7, #0
   b7744:	d08a      	beq.n	b765c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b7746:	4642      	mov	r2, r8
   b7748:	464b      	mov	r3, r9
   b774a:	4620      	mov	r0, r4
   b774c:	4629      	mov	r1, r5
   b774e:	f7fc fe21 	bl	b4394 <__aeabi_dmul>
   b7752:	4604      	mov	r4, r0
   b7754:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b7756:	f7fd f8cd 	bl	b48f4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b775a:	f1b0 0b00 	subs.w	fp, r0, #0
   b775e:	da1c      	bge.n	b779a <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b7760:	212d      	movs	r1, #45	; 0x2d
   b7762:	4630      	mov	r0, r6
   b7764:	f7ff ff44 	bl	b75f0 <_ZN5Print5printEc>
            val = -n;
   b7768:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b776c:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b776e:	220a      	movs	r2, #10
   b7770:	4630      	mov	r0, r6
   b7772:	9301      	str	r3, [sp, #4]
   b7774:	f7ff ff3f 	bl	b75f6 <_ZN5Print11printNumberEmh>
   b7778:	9b01      	ldr	r3, [sp, #4]
   b777a:	4418      	add	r0, r3
    n += print(toPrint);
   b777c:	4482      	add	sl, r0
    remainder -= toPrint;
   b777e:	4658      	mov	r0, fp
   b7780:	f7fc fd9e 	bl	b42c0 <__aeabi_i2d>
   b7784:	4602      	mov	r2, r0
   b7786:	460b      	mov	r3, r1
   b7788:	4620      	mov	r0, r4
   b778a:	4629      	mov	r1, r5
   b778c:	f7fc fc4a 	bl	b4024 <__aeabi_dsub>
   b7790:	3f01      	subs	r7, #1
   b7792:	4604      	mov	r4, r0
   b7794:	460d      	mov	r5, r1
   b7796:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b7798:	e7d3      	b.n	b7742 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b779a:	4659      	mov	r1, fp
        size_t t = 0;
   b779c:	2300      	movs	r3, #0
   b779e:	e7e6      	b.n	b776e <_ZN5Print10printFloatEdh+0x13a>
   b77a0:	000b8648 	.word	0x000b8648
   b77a4:	7fefffff 	.word	0x7fefffff
   b77a8:	000b864c 	.word	0x000b864c
   b77ac:	41efffff 	.word	0x41efffff
   b77b0:	000b8650 	.word	0x000b8650
   b77b4:	c1efffff 	.word	0xc1efffff
   b77b8:	3fe00000 	.word	0x3fe00000
   b77bc:	000b8654 	.word	0x000b8654
   b77c0:	40240000 	.word	0x40240000

000b77c4 <_ZN5Print5printEfi>:
{
   b77c4:	b538      	push	{r3, r4, r5, lr}
   b77c6:	4604      	mov	r4, r0
   b77c8:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b77cc:	b2cd      	uxtb	r5, r1
   b77ce:	f7fc fd89 	bl	b42e4 <__aeabi_f2d>
   b77d2:	ec41 0b10 	vmov	d0, r0, r1
   b77d6:	4629      	mov	r1, r5
   b77d8:	4620      	mov	r0, r4
}
   b77da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b77de:	f7ff bf29 	b.w	b7634 <_ZN5Print10printFloatEdh>
	...

000b77e4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b77e4:	4b01      	ldr	r3, [pc, #4]	; (b77ec <_GLOBAL__sub_I_RGB+0x8>)
   b77e6:	2200      	movs	r2, #0
   b77e8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b77ea:	4770      	bx	lr
   b77ec:	2003e6c0 	.word	0x2003e6c0

000b77f0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b77f0:	b510      	push	{r4, lr}
   b77f2:	4604      	mov	r4, r0
   b77f4:	4608      	mov	r0, r1
{
    _spi = spi;
   b77f6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b77f8:	f7fd fc9e 	bl	b5138 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b77fc:	2300      	movs	r3, #0
   b77fe:	6063      	str	r3, [r4, #4]
}
   b7800:	4620      	mov	r0, r4
   b7802:	bd10      	pop	{r4, pc}

000b7804 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   b7804:	4770      	bx	lr

000b7806 <_ZN21StringPrintableHelperD0Ev>:
   b7806:	b510      	push	{r4, lr}
   b7808:	210c      	movs	r1, #12
   b780a:	4604      	mov	r4, r0
   b780c:	f7fd f90b 	bl	b4a26 <_ZdlPvj>
   b7810:	4620      	mov	r0, r4
   b7812:	bd10      	pop	{r4, pc}

000b7814 <_ZN6StringD1Ev>:
String::~String()
   b7814:	b510      	push	{r4, lr}
   b7816:	4604      	mov	r4, r0
	free(buffer);
   b7818:	6800      	ldr	r0, [r0, #0]
   b781a:	f7fd fe33 	bl	b5484 <free>
}
   b781e:	4620      	mov	r0, r4
   b7820:	bd10      	pop	{r4, pc}

000b7822 <_ZN6String10invalidateEv>:
{
   b7822:	b510      	push	{r4, lr}
   b7824:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7826:	6800      	ldr	r0, [r0, #0]
   b7828:	b108      	cbz	r0, b782e <_ZN6String10invalidateEv+0xc>
   b782a:	f7fd fe2b 	bl	b5484 <free>
	buffer = NULL;
   b782e:	2300      	movs	r3, #0
	capacity = len = 0;
   b7830:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7834:	6023      	str	r3, [r4, #0]
}
   b7836:	bd10      	pop	{r4, pc}

000b7838 <_ZN6String12changeBufferEj>:
{
   b7838:	b538      	push	{r3, r4, r5, lr}
   b783a:	4604      	mov	r4, r0
   b783c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b783e:	6800      	ldr	r0, [r0, #0]
   b7840:	3101      	adds	r1, #1
   b7842:	f7fd fe27 	bl	b5494 <realloc>
	if (newbuffer) {
   b7846:	b110      	cbz	r0, b784e <_ZN6String12changeBufferEj+0x16>
		capacity = maxStrLen;
   b7848:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b784c:	2001      	movs	r0, #1
}
   b784e:	bd38      	pop	{r3, r4, r5, pc}

000b7850 <_ZN6String7reserveEj>:
{
   b7850:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7852:	6803      	ldr	r3, [r0, #0]
{
   b7854:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7856:	b123      	cbz	r3, b7862 <_ZN6String7reserveEj+0x12>
   b7858:	6843      	ldr	r3, [r0, #4]
   b785a:	428b      	cmp	r3, r1
   b785c:	d301      	bcc.n	b7862 <_ZN6String7reserveEj+0x12>
   b785e:	2001      	movs	r0, #1
}
   b7860:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7862:	4620      	mov	r0, r4
   b7864:	f7ff ffe8 	bl	b7838 <_ZN6String12changeBufferEj>
   b7868:	2800      	cmp	r0, #0
   b786a:	d0f9      	beq.n	b7860 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b786c:	68a3      	ldr	r3, [r4, #8]
   b786e:	2b00      	cmp	r3, #0
   b7870:	d1f5      	bne.n	b785e <_ZN6String7reserveEj+0xe>
   b7872:	6822      	ldr	r2, [r4, #0]
   b7874:	7013      	strb	r3, [r2, #0]
   b7876:	e7f2      	b.n	b785e <_ZN6String7reserveEj+0xe>

000b7878 <_ZN6String4copyEPKcj>:
{
   b7878:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b787a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b787c:	4611      	mov	r1, r2
   b787e:	9201      	str	r2, [sp, #4]
{
   b7880:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7882:	f7ff ffe5 	bl	b7850 <_ZN6String7reserveEj>
   b7886:	9a01      	ldr	r2, [sp, #4]
   b7888:	b928      	cbnz	r0, b7896 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b788a:	4620      	mov	r0, r4
   b788c:	f7ff ffc9 	bl	b7822 <_ZN6String10invalidateEv>
}
   b7890:	4620      	mov	r0, r4
   b7892:	b003      	add	sp, #12
   b7894:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7896:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7898:	4629      	mov	r1, r5
   b789a:	6820      	ldr	r0, [r4, #0]
   b789c:	f000 fb92 	bl	b7fc4 <memcpy>
	buffer[len] = 0;
   b78a0:	6822      	ldr	r2, [r4, #0]
   b78a2:	68a3      	ldr	r3, [r4, #8]
   b78a4:	2100      	movs	r1, #0
   b78a6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b78a8:	e7f2      	b.n	b7890 <_ZN6String4copyEPKcj+0x18>

000b78aa <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b78aa:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b78ac:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b78ae:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b78b2:	4604      	mov	r4, r0
	len = 0;
   b78b4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b78b6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b78b8:	b141      	cbz	r1, b78cc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b78ba:	4608      	mov	r0, r1
   b78bc:	9101      	str	r1, [sp, #4]
   b78be:	f7fd f86b 	bl	b4998 <strlen>
   b78c2:	9901      	ldr	r1, [sp, #4]
   b78c4:	4602      	mov	r2, r0
   b78c6:	4620      	mov	r0, r4
   b78c8:	f7ff ffd6 	bl	b7878 <_ZN6String4copyEPKcj>
}
   b78cc:	4620      	mov	r0, r4
   b78ce:	b002      	add	sp, #8
   b78d0:	bd10      	pop	{r4, pc}

000b78d2 <_ZN6String4moveERS_>:
{
   b78d2:	b538      	push	{r3, r4, r5, lr}
   b78d4:	4605      	mov	r5, r0
	if (buffer) {
   b78d6:	6800      	ldr	r0, [r0, #0]
{
   b78d8:	460c      	mov	r4, r1
	if (buffer) {
   b78da:	b168      	cbz	r0, b78f8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b78dc:	686a      	ldr	r2, [r5, #4]
   b78de:	688b      	ldr	r3, [r1, #8]
   b78e0:	429a      	cmp	r2, r3
   b78e2:	d307      	bcc.n	b78f4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b78e4:	6809      	ldr	r1, [r1, #0]
   b78e6:	f000 fbe2 	bl	b80ae <strcpy>
			len = rhs.len;
   b78ea:	68a3      	ldr	r3, [r4, #8]
   b78ec:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b78ee:	2300      	movs	r3, #0
	rhs.len = 0;
   b78f0:	60a3      	str	r3, [r4, #8]
}
   b78f2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b78f4:	f7fd fdc6 	bl	b5484 <free>
	buffer = rhs.buffer;
   b78f8:	6823      	ldr	r3, [r4, #0]
   b78fa:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b78fc:	6863      	ldr	r3, [r4, #4]
   b78fe:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b7900:	68a3      	ldr	r3, [r4, #8]
   b7902:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b7904:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b7906:	e9c4 3300 	strd	r3, r3, [r4]
   b790a:	e7f1      	b.n	b78f0 <_ZN6String4moveERS_+0x1e>

000b790c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b790c:	b510      	push	{r4, lr}
	buffer = NULL;
   b790e:	2300      	movs	r3, #0
	capacity = 0;
   b7910:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b7914:	4604      	mov	r4, r0
	len = 0;
   b7916:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7918:	7303      	strb	r3, [r0, #12]
	move(rval);
   b791a:	f7ff ffda 	bl	b78d2 <_ZN6String4moveERS_>
}
   b791e:	4620      	mov	r0, r4
   b7920:	bd10      	pop	{r4, pc}

000b7922 <_ZN6StringaSERKS_>:
	if (this == &rhs) return *this;
   b7922:	4288      	cmp	r0, r1
{
   b7924:	b510      	push	{r4, lr}
   b7926:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7928:	d005      	beq.n	b7936 <_ZN6StringaSERKS_+0x14>
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b792a:	680b      	ldr	r3, [r1, #0]
   b792c:	b12b      	cbz	r3, b793a <_ZN6StringaSERKS_+0x18>
   b792e:	688a      	ldr	r2, [r1, #8]
   b7930:	4619      	mov	r1, r3
   b7932:	f7ff ffa1 	bl	b7878 <_ZN6String4copyEPKcj>
}
   b7936:	4620      	mov	r0, r4
   b7938:	bd10      	pop	{r4, pc}
	else invalidate();
   b793a:	f7ff ff72 	bl	b7822 <_ZN6String10invalidateEv>
   b793e:	e7fa      	b.n	b7936 <_ZN6StringaSERKS_+0x14>

000b7940 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7940:	b510      	push	{r4, lr}
	buffer = NULL;
   b7942:	2300      	movs	r3, #0
String::String(const String &value)
   b7944:	4604      	mov	r4, r0
	capacity = 0;
   b7946:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b794a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b794c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b794e:	f7ff ffe8 	bl	b7922 <_ZN6StringaSERKS_>
}
   b7952:	4620      	mov	r0, r4
   b7954:	bd10      	pop	{r4, pc}

000b7956 <_ZN6String6concatEPKcj>:
{
   b7956:	b570      	push	{r4, r5, r6, lr}
   b7958:	4605      	mov	r5, r0
	if (!cstr) return 0;
   b795a:	460e      	mov	r6, r1
   b795c:	b909      	cbnz	r1, b7962 <_ZN6String6concatEPKcj+0xc>
   b795e:	2000      	movs	r0, #0
}
   b7960:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b7962:	b16a      	cbz	r2, b7980 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b7964:	6884      	ldr	r4, [r0, #8]
   b7966:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b7968:	4621      	mov	r1, r4
   b796a:	f7ff ff71 	bl	b7850 <_ZN6String7reserveEj>
   b796e:	2800      	cmp	r0, #0
   b7970:	d0f5      	beq.n	b795e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7972:	6828      	ldr	r0, [r5, #0]
   b7974:	68ab      	ldr	r3, [r5, #8]
   b7976:	4631      	mov	r1, r6
   b7978:	4418      	add	r0, r3
   b797a:	f000 fb98 	bl	b80ae <strcpy>
	len = newlen;
   b797e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b7980:	2001      	movs	r0, #1
   b7982:	e7ed      	b.n	b7960 <_ZN6String6concatEPKcj+0xa>

000b7984 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   b7984:	b538      	push	{r3, r4, r5, lr}
   b7986:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   b7988:	6880      	ldr	r0, [r0, #8]
	inline unsigned int length(void) const {return len;}
   b798a:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   b798c:	f7ff ffe3 	bl	b7956 <_ZN6String6concatEPKcj>
   b7990:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   b7992:	6898      	ldr	r0, [r3, #8]
    }
   b7994:	1b40      	subs	r0, r0, r5
   b7996:	bd38      	pop	{r3, r4, r5, pc}

000b7998 <_ZN6String6concatEc>:
{
   b7998:	b507      	push	{r0, r1, r2, lr}
	buf[1] = 0;
   b799a:	2300      	movs	r3, #0
	buf[0] = c;
   b799c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b79a0:	2201      	movs	r2, #1
   b79a2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b79a4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b79a8:	f7ff ffd5 	bl	b7956 <_ZN6String6concatEPKcj>
}
   b79ac:	b003      	add	sp, #12
   b79ae:	f85d fb04 	ldr.w	pc, [sp], #4

000b79b2 <_ZN21StringPrintableHelper5writeEh>:

    virtual size_t write(uint8_t c) override
   b79b2:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   b79b4:	6880      	ldr	r0, [r0, #8]
   b79b6:	f7ff ffef 	bl	b7998 <_ZN6String6concatEc>
    }
   b79ba:	bd08      	pop	{r3, pc}

000b79bc <_ZNK6String6equalsEPKc>:
{
   b79bc:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b79be:	6882      	ldr	r2, [r0, #8]
   b79c0:	b93a      	cbnz	r2, b79d2 <_ZNK6String6equalsEPKc+0x16>
   b79c2:	b121      	cbz	r1, b79ce <_ZNK6String6equalsEPKc+0x12>
   b79c4:	7808      	ldrb	r0, [r1, #0]
	return strcmp(buffer, cstr) == 0;
   b79c6:	fab0 f080 	clz	r0, r0
   b79ca:	0940      	lsrs	r0, r0, #5
   b79cc:	e000      	b.n	b79d0 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b79ce:	2001      	movs	r0, #1
}
   b79d0:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b79d2:	6800      	ldr	r0, [r0, #0]
   b79d4:	b909      	cbnz	r1, b79da <_ZNK6String6equalsEPKc+0x1e>
   b79d6:	7800      	ldrb	r0, [r0, #0]
   b79d8:	e7f5      	b.n	b79c6 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b79da:	f7fc ffd3 	bl	b4984 <strcmp>
   b79de:	e7f2      	b.n	b79c6 <_ZNK6String6equalsEPKc+0xa>

000b79e0 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   b79e0:	b530      	push	{r4, r5, lr}
   b79e2:	b085      	sub	sp, #20
	buffer = NULL;
   b79e4:	2300      	movs	r3, #0
String::String(const Printable& printable)
   b79e6:	460d      	mov	r5, r1
    Print() : write_error(0) {}
   b79e8:	9302      	str	r3, [sp, #8]
	capacity = 0;
   b79ea:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b79ee:	6083      	str	r3, [r0, #8]
	flags = 0;
   b79f0:	7303      	strb	r3, [r0, #12]
        s.reserve(20);
   b79f2:	2114      	movs	r1, #20
    StringPrintableHelper(String& s_) : s(s_) {
   b79f4:	4b06      	ldr	r3, [pc, #24]	; (b7a10 <_ZN6StringC1ERK9Printable+0x30>)
   b79f6:	9301      	str	r3, [sp, #4]
String::String(const Printable& printable)
   b79f8:	4604      	mov	r4, r0
    StringPrintableHelper(String& s_) : s(s_) {
   b79fa:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   b79fc:	f7ff ff28 	bl	b7850 <_ZN6String7reserveEj>
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   b7a00:	682b      	ldr	r3, [r5, #0]
   b7a02:	a901      	add	r1, sp, #4
   b7a04:	681b      	ldr	r3, [r3, #0]
   b7a06:	4628      	mov	r0, r5
   b7a08:	4798      	blx	r3
}
   b7a0a:	4620      	mov	r0, r4
   b7a0c:	b005      	add	sp, #20
   b7a0e:	bd30      	pop	{r4, r5, pc}
   b7a10:	000b8660 	.word	0x000b8660

000b7a14 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7a14:	4b05      	ldr	r3, [pc, #20]	; (b7a2c <_GLOBAL__sub_I_System+0x18>)
   b7a16:	2202      	movs	r2, #2
   b7a18:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7a1a:	4b05      	ldr	r3, [pc, #20]	; (b7a30 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7a1c:	4a05      	ldr	r2, [pc, #20]	; (b7a34 <_GLOBAL__sub_I_System+0x20>)
   b7a1e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7a20:	2000      	movs	r0, #0
   b7a22:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7a26:	f7fd bc47 	b.w	b52b8 <set_system_mode>
   b7a2a:	bf00      	nop
   b7a2c:	2003e6dc 	.word	0x2003e6dc
   b7a30:	2003e6d0 	.word	0x2003e6d0
   b7a34:	ffff0000 	.word	0xffff0000

000b7a38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7a38:	4b02      	ldr	r3, [pc, #8]	; (b7a44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7a3a:	681a      	ldr	r2, [r3, #0]
   b7a3c:	4b02      	ldr	r3, [pc, #8]	; (b7a48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7a3e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7a40:	4770      	bx	lr
   b7a42:	bf00      	nop
   b7a44:	2003e584 	.word	0x2003e584
   b7a48:	2003e6e0 	.word	0x2003e6e0

000b7a4c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7a4c:	4770      	bx	lr

000b7a4e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7a4e:	7441      	strb	r1, [r0, #17]
}
   b7a50:	4770      	bx	lr

000b7a52 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7a52:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7a54:	7c00      	ldrb	r0, [r0, #16]
   b7a56:	f7fd fbb7 	bl	b51c8 <hal_usart_available_data_for_write>
}
   b7a5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7a5e:	bd08      	pop	{r3, pc}

000b7a60 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7a60:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7a62:	7c00      	ldrb	r0, [r0, #16]
   b7a64:	f7fd fb88 	bl	b5178 <hal_usart_available>
}
   b7a68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7a6c:	bd08      	pop	{r3, pc}

000b7a6e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7a6e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7a70:	7c00      	ldrb	r0, [r0, #16]
   b7a72:	f7fd fb91 	bl	b5198 <hal_usart_peek>
}
   b7a76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7a7a:	bd08      	pop	{r3, pc}

000b7a7c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7a7c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7a7e:	7c00      	ldrb	r0, [r0, #16]
   b7a80:	f7fd fb82 	bl	b5188 <hal_usart_read>
}
   b7a84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7a88:	bd08      	pop	{r3, pc}

000b7a8a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7a8a:	7c00      	ldrb	r0, [r0, #16]
   b7a8c:	f7fd bb8c 	b.w	b51a8 <hal_usart_flush>

000b7a90 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7a92:	7c45      	ldrb	r5, [r0, #17]
{
   b7a94:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7a96:	b12d      	cbz	r5, b7aa4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7a98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7a9a:	b003      	add	sp, #12
   b7a9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7aa0:	f7fd bb62 	b.w	b5168 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7aa4:	7c00      	ldrb	r0, [r0, #16]
   b7aa6:	9101      	str	r1, [sp, #4]
   b7aa8:	f7fd fb8e 	bl	b51c8 <hal_usart_available_data_for_write>
   b7aac:	2800      	cmp	r0, #0
   b7aae:	9901      	ldr	r1, [sp, #4]
   b7ab0:	dcf2      	bgt.n	b7a98 <_ZN11USARTSerial5writeEh+0x8>
}
   b7ab2:	4628      	mov	r0, r5
   b7ab4:	b003      	add	sp, #12
   b7ab6:	bd30      	pop	{r4, r5, pc}

000b7ab8 <_ZN11USARTSerialD0Ev>:
   b7ab8:	b510      	push	{r4, lr}
   b7aba:	2114      	movs	r1, #20
   b7abc:	4604      	mov	r4, r0
   b7abe:	f7fc ffb2 	bl	b4a26 <_ZdlPvj>
   b7ac2:	4620      	mov	r0, r4
   b7ac4:	bd10      	pop	{r4, pc}
	...

000b7ac8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7ac8:	b510      	push	{r4, lr}
   b7aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7ace:	4604      	mov	r4, r0
   b7ad0:	4608      	mov	r0, r1
   b7ad2:	4611      	mov	r1, r2
   b7ad4:	2200      	movs	r2, #0
   b7ad6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7ada:	4b04      	ldr	r3, [pc, #16]	; (b7aec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7adc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7ade:	2301      	movs	r3, #1
  _serial = serial;
   b7ae0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7ae2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7ae4:	f7fd fb80 	bl	b51e8 <hal_usart_init_ex>
}
   b7ae8:	4620      	mov	r0, r4
   b7aea:	bd10      	pop	{r4, pc}
   b7aec:	000b8694 	.word	0x000b8694

000b7af0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b7af0:	7c00      	ldrb	r0, [r0, #16]
   b7af2:	2300      	movs	r3, #0
   b7af4:	f7fd bb70 	b.w	b51d8 <hal_usart_begin_config>

000b7af8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b7af8:	2200      	movs	r2, #0
   b7afa:	f7ff bff9 	b.w	b7af0 <_ZN11USARTSerial5beginEmm>

000b7afe <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b7afe:	7c00      	ldrb	r0, [r0, #16]
   b7b00:	f7fd bb2a 	b.w	b5158 <hal_usart_end>

000b7b04 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7b04:	7441      	strb	r1, [r0, #17]
}
   b7b06:	4770      	bx	lr

000b7b08 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7b08:	4770      	bx	lr

000b7b0a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7b0a:	4770      	bx	lr

000b7b0c <_ZN9USBSerial4readEv>:
{
   b7b0c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7b0e:	2100      	movs	r1, #0
   b7b10:	7c00      	ldrb	r0, [r0, #16]
   b7b12:	f7fd fb99 	bl	b5248 <HAL_USB_USART_Receive_Data>
}
   b7b16:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7b1a:	bd08      	pop	{r3, pc}

000b7b1c <_ZN9USBSerial4peekEv>:
{
   b7b1c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7b1e:	2101      	movs	r1, #1
   b7b20:	7c00      	ldrb	r0, [r0, #16]
   b7b22:	f7fd fb91 	bl	b5248 <HAL_USB_USART_Receive_Data>
}
   b7b26:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7b2a:	bd08      	pop	{r3, pc}

000b7b2c <_ZN9USBSerial17availableForWriteEv>:
{
   b7b2c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7b2e:	7c00      	ldrb	r0, [r0, #16]
   b7b30:	f7fd fb82 	bl	b5238 <HAL_USB_USART_Available_Data_For_Write>
}
   b7b34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7b38:	bd08      	pop	{r3, pc}

000b7b3a <_ZN9USBSerial9availableEv>:
{
   b7b3a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7b3c:	7c00      	ldrb	r0, [r0, #16]
   b7b3e:	f7fd fb73 	bl	b5228 <HAL_USB_USART_Available_Data>
}
   b7b42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7b46:	bd08      	pop	{r3, pc}

000b7b48 <_ZN9USBSerial5writeEh>:
{
   b7b48:	b513      	push	{r0, r1, r4, lr}
   b7b4a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7b4c:	7c00      	ldrb	r0, [r0, #16]
{
   b7b4e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7b50:	f7fd fb72 	bl	b5238 <HAL_USB_USART_Available_Data_For_Write>
   b7b54:	2800      	cmp	r0, #0
   b7b56:	9901      	ldr	r1, [sp, #4]
   b7b58:	dc01      	bgt.n	b7b5e <_ZN9USBSerial5writeEh+0x16>
   b7b5a:	7c60      	ldrb	r0, [r4, #17]
   b7b5c:	b120      	cbz	r0, b7b68 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7b5e:	7c20      	ldrb	r0, [r4, #16]
   b7b60:	f7fd fb7a 	bl	b5258 <HAL_USB_USART_Send_Data>
   b7b64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7b68:	b002      	add	sp, #8
   b7b6a:	bd10      	pop	{r4, pc}

000b7b6c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7b6c:	7c00      	ldrb	r0, [r0, #16]
   b7b6e:	f7fd bb7b 	b.w	b5268 <HAL_USB_USART_Flush_Data>

000b7b72 <_ZN9USBSerialD0Ev>:
   b7b72:	b510      	push	{r4, lr}
   b7b74:	2114      	movs	r1, #20
   b7b76:	4604      	mov	r4, r0
   b7b78:	f7fc ff55 	bl	b4a26 <_ZdlPvj>
   b7b7c:	4620      	mov	r0, r4
   b7b7e:	bd10      	pop	{r4, pc}

000b7b80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7b80:	b510      	push	{r4, lr}
   b7b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7b86:	4604      	mov	r4, r0
   b7b88:	4608      	mov	r0, r1
   b7b8a:	2100      	movs	r1, #0
   b7b8c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7b90:	4b04      	ldr	r3, [pc, #16]	; (b7ba4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7b92:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7b94:	2301      	movs	r3, #1
  _serial = serial;
   b7b96:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7b98:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7b9a:	4611      	mov	r1, r2
   b7b9c:	f7fd fb2c 	bl	b51f8 <HAL_USB_USART_Init>
}
   b7ba0:	4620      	mov	r0, r4
   b7ba2:	bd10      	pop	{r4, pc}
   b7ba4:	000b86c4 	.word	0x000b86c4

000b7ba8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7ba8:	7c00      	ldrb	r0, [r0, #16]
   b7baa:	2200      	movs	r2, #0
   b7bac:	f7fd bb2c 	b.w	b5208 <HAL_USB_USART_Begin>

000b7bb0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b7bb0:	7c00      	ldrb	r0, [r0, #16]
   b7bb2:	f7fd bb31 	b.w	b5218 <HAL_USB_USART_End>

000b7bb6 <_Z19acquireSerialBufferv>:
{
   b7bb6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7bb8:	2214      	movs	r2, #20
{
   b7bba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7bbc:	2100      	movs	r1, #0
   b7bbe:	f000 fa29 	bl	b8014 <memset>
}
   b7bc2:	4620      	mov	r0, r4
   b7bc4:	bd10      	pop	{r4, pc}
	...

000b7bc8 <_Z16_fetch_usbserialv>:
{
   b7bc8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7bca:	4c0f      	ldr	r4, [pc, #60]	; (b7c08 <_Z16_fetch_usbserialv+0x40>)
{
   b7bcc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7bce:	a803      	add	r0, sp, #12
   b7bd0:	f7ff fff1 	bl	b7bb6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7bd4:	7821      	ldrb	r1, [r4, #0]
   b7bd6:	f3bf 8f5b 	dmb	ish
   b7bda:	f011 0101 	ands.w	r1, r1, #1
   b7bde:	d10f      	bne.n	b7c00 <_Z16_fetch_usbserialv+0x38>
   b7be0:	4620      	mov	r0, r4
   b7be2:	9101      	str	r1, [sp, #4]
   b7be4:	f7fc ff2e 	bl	b4a44 <__cxa_guard_acquire>
   b7be8:	9901      	ldr	r1, [sp, #4]
   b7bea:	b148      	cbz	r0, b7c00 <_Z16_fetch_usbserialv+0x38>
   b7bec:	aa03      	add	r2, sp, #12
   b7bee:	4807      	ldr	r0, [pc, #28]	; (b7c0c <_Z16_fetch_usbserialv+0x44>)
   b7bf0:	f7ff ffc6 	bl	b7b80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7bf4:	4620      	mov	r0, r4
   b7bf6:	f7fc ff2a 	bl	b4a4e <__cxa_guard_release>
   b7bfa:	4805      	ldr	r0, [pc, #20]	; (b7c10 <_Z16_fetch_usbserialv+0x48>)
   b7bfc:	f000 f9d3 	bl	b7fa6 <atexit>
	return _usbserial;
}
   b7c00:	4802      	ldr	r0, [pc, #8]	; (b7c0c <_Z16_fetch_usbserialv+0x44>)
   b7c02:	b008      	add	sp, #32
   b7c04:	bd10      	pop	{r4, pc}
   b7c06:	bf00      	nop
   b7c08:	2003e6e4 	.word	0x2003e6e4
   b7c0c:	2003e6e8 	.word	0x2003e6e8
   b7c10:	000b7b09 	.word	0x000b7b09

000b7c14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7c14:	4b01      	ldr	r3, [pc, #4]	; (b7c1c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7c16:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7c18:	4770      	bx	lr
   b7c1a:	bf00      	nop
   b7c1c:	2003e588 	.word	0x2003e588

000b7c20 <serialEventRun>:
{
   b7c20:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7c22:	4b0b      	ldr	r3, [pc, #44]	; (b7c50 <serialEventRun+0x30>)
   b7c24:	b143      	cbz	r3, b7c38 <serialEventRun+0x18>
   b7c26:	f7ff ffcf 	bl	b7bc8 <_Z16_fetch_usbserialv>
   b7c2a:	6803      	ldr	r3, [r0, #0]
   b7c2c:	691b      	ldr	r3, [r3, #16]
   b7c2e:	4798      	blx	r3
   b7c30:	2800      	cmp	r0, #0
   b7c32:	dd01      	ble.n	b7c38 <serialEventRun+0x18>
        serialEvent();
   b7c34:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7c38:	4b06      	ldr	r3, [pc, #24]	; (b7c54 <serialEventRun+0x34>)
   b7c3a:	b143      	cbz	r3, b7c4e <serialEventRun+0x2e>
   b7c3c:	f000 f988 	bl	b7f50 <_Z22__fetch_global_Serial1v>
   b7c40:	6803      	ldr	r3, [r0, #0]
   b7c42:	691b      	ldr	r3, [r3, #16]
   b7c44:	4798      	blx	r3
   b7c46:	2800      	cmp	r0, #0
   b7c48:	dd01      	ble.n	b7c4e <serialEventRun+0x2e>
        serialEvent1();
   b7c4a:	f3af 8000 	nop.w
}
   b7c4e:	bd08      	pop	{r3, pc}
	...

000b7c58 <_post_loop>:
{
   b7c58:	b508      	push	{r3, lr}
	serialEventRun();
   b7c5a:	f7ff ffe1 	bl	b7c20 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7c5e:	f7fd f9d3 	bl	b5008 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7c62:	4b01      	ldr	r3, [pc, #4]	; (b7c68 <_post_loop+0x10>)
   b7c64:	6018      	str	r0, [r3, #0]
}
   b7c66:	bd08      	pop	{r3, pc}
   b7c68:	2003e710 	.word	0x2003e710

000b7c6c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7c6c:	4805      	ldr	r0, [pc, #20]	; (b7c84 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7c6e:	4a06      	ldr	r2, [pc, #24]	; (b7c88 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7c70:	4906      	ldr	r1, [pc, #24]	; (b7c8c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7c72:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7c74:	1a12      	subs	r2, r2, r0
   b7c76:	f000 f9a5 	bl	b7fc4 <memcpy>
    __backup_sram_signature = signature;
   b7c7a:	4b05      	ldr	r3, [pc, #20]	; (b7c90 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7c7c:	4a05      	ldr	r2, [pc, #20]	; (b7c94 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7c7e:	601a      	str	r2, [r3, #0]
}
   b7c80:	bd08      	pop	{r3, pc}
   b7c82:	bf00      	nop
   b7c84:	2003f400 	.word	0x2003f400
   b7c88:	2003f404 	.word	0x2003f404
   b7c8c:	000b8920 	.word	0x000b8920
   b7c90:	2003f400 	.word	0x2003f400
   b7c94:	9a271c1e 	.word	0x9a271c1e

000b7c98 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7c98:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7c9a:	2300      	movs	r3, #0
   b7c9c:	9300      	str	r3, [sp, #0]
   b7c9e:	461a      	mov	r2, r3
   b7ca0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7ca4:	f7fd fb44 	bl	b5330 <system_ctrl_set_result>
}
   b7ca8:	b003      	add	sp, #12
   b7caa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7cb0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7cb0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7cb2:	8843      	ldrh	r3, [r0, #2]
   b7cb4:	2b0a      	cmp	r3, #10
   b7cb6:	d008      	beq.n	b7cca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7cb8:	2b50      	cmp	r3, #80	; 0x50
   b7cba:	d10b      	bne.n	b7cd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7cbc:	4b09      	ldr	r3, [pc, #36]	; (b7ce4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7cbe:	681b      	ldr	r3, [r3, #0]
   b7cc0:	b14b      	cbz	r3, b7cd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7cc2:	b003      	add	sp, #12
   b7cc4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7cc8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7cca:	f7ff ffe5 	bl	b7c98 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7cce:	b003      	add	sp, #12
   b7cd0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7cd4:	2300      	movs	r3, #0
   b7cd6:	9300      	str	r3, [sp, #0]
   b7cd8:	461a      	mov	r2, r3
   b7cda:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7cde:	f7fd fb27 	bl	b5330 <system_ctrl_set_result>
}
   b7ce2:	e7f4      	b.n	b7cce <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7ce4:	2003e700 	.word	0x2003e700

000b7ce8 <module_user_init_hook>:
{
   b7ce8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7cea:	4812      	ldr	r0, [pc, #72]	; (b7d34 <module_user_init_hook+0x4c>)
   b7cec:	2100      	movs	r1, #0
   b7cee:	f7fd fc01 	bl	b54f4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7cf2:	4b11      	ldr	r3, [pc, #68]	; (b7d38 <module_user_init_hook+0x50>)
   b7cf4:	681a      	ldr	r2, [r3, #0]
   b7cf6:	4b11      	ldr	r3, [pc, #68]	; (b7d3c <module_user_init_hook+0x54>)
   b7cf8:	429a      	cmp	r2, r3
   b7cfa:	4b11      	ldr	r3, [pc, #68]	; (b7d40 <module_user_init_hook+0x58>)
   b7cfc:	bf0c      	ite	eq
   b7cfe:	2201      	moveq	r2, #1
   b7d00:	2200      	movne	r2, #0
   b7d02:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7d04:	d001      	beq.n	b7d0a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7d06:	f7ff ffb1 	bl	b7c6c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7d0a:	f7fd f96d 	bl	b4fe8 <HAL_RNG_GetRandomNumber>
   b7d0e:	4604      	mov	r4, r0
    srand(seed);
   b7d10:	f000 f988 	bl	b8024 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7d14:	4b0b      	ldr	r3, [pc, #44]	; (b7d44 <module_user_init_hook+0x5c>)
   b7d16:	b113      	cbz	r3, b7d1e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7d18:	4620      	mov	r0, r4
   b7d1a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7d1e:	2100      	movs	r1, #0
   b7d20:	4808      	ldr	r0, [pc, #32]	; (b7d44 <module_user_init_hook+0x5c>)
   b7d22:	f7fd fb37 	bl	b5394 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7d2a:	4807      	ldr	r0, [pc, #28]	; (b7d48 <module_user_init_hook+0x60>)
   b7d2c:	2100      	movs	r1, #0
   b7d2e:	f7fd baf5 	b.w	b531c <system_ctrl_set_app_request_handler>
   b7d32:	bf00      	nop
   b7d34:	000b7c15 	.word	0x000b7c15
   b7d38:	2003f400 	.word	0x2003f400
   b7d3c:	9a271c1e 	.word	0x9a271c1e
   b7d40:	2003e6fc 	.word	0x2003e6fc
   b7d44:	00000000 	.word	0x00000000
   b7d48:	000b7cb1 	.word	0x000b7cb1

000b7d4c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7d4c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7d4e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7d50:	d902      	bls.n	b7d58 <pinAvailable+0xc>
    return false;
   b7d52:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7d54:	b002      	add	sp, #8
   b7d56:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7d58:	f1a0 030b 	sub.w	r3, r0, #11
   b7d5c:	2b02      	cmp	r3, #2
   b7d5e:	d81a      	bhi.n	b7d96 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7d60:	4c17      	ldr	r4, [pc, #92]	; (b7dc0 <pinAvailable+0x74>)
   b7d62:	7821      	ldrb	r1, [r4, #0]
   b7d64:	f3bf 8f5b 	dmb	ish
   b7d68:	f011 0101 	ands.w	r1, r1, #1
   b7d6c:	d10b      	bne.n	b7d86 <pinAvailable+0x3a>
   b7d6e:	4620      	mov	r0, r4
   b7d70:	9101      	str	r1, [sp, #4]
   b7d72:	f7fc fe67 	bl	b4a44 <__cxa_guard_acquire>
   b7d76:	9901      	ldr	r1, [sp, #4]
   b7d78:	b128      	cbz	r0, b7d86 <pinAvailable+0x3a>
   b7d7a:	4812      	ldr	r0, [pc, #72]	; (b7dc4 <pinAvailable+0x78>)
   b7d7c:	f7ff fd38 	bl	b77f0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7d80:	4620      	mov	r0, r4
   b7d82:	f7fc fe64 	bl	b4a4e <__cxa_guard_release>
   b7d86:	4b0f      	ldr	r3, [pc, #60]	; (b7dc4 <pinAvailable+0x78>)
   b7d88:	7818      	ldrb	r0, [r3, #0]
   b7d8a:	f7fd f9dd 	bl	b5148 <hal_spi_is_enabled>
   b7d8e:	2800      	cmp	r0, #0
   b7d90:	d1df      	bne.n	b7d52 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7d92:	2001      	movs	r0, #1
   b7d94:	e7de      	b.n	b7d54 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7d96:	2801      	cmp	r0, #1
   b7d98:	d809      	bhi.n	b7dae <pinAvailable+0x62>
   b7d9a:	f000 f875 	bl	b7e88 <_Z19__fetch_global_Wirev>
   b7d9e:	2100      	movs	r1, #0
   b7da0:	7c00      	ldrb	r0, [r0, #16]
   b7da2:	f7fd f989 	bl	b50b8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7da6:	f080 0001 	eor.w	r0, r0, #1
   b7daa:	b2c0      	uxtb	r0, r0
   b7dac:	e7d2      	b.n	b7d54 <pinAvailable+0x8>
   b7dae:	3809      	subs	r0, #9
   b7db0:	2801      	cmp	r0, #1
   b7db2:	d8ee      	bhi.n	b7d92 <pinAvailable+0x46>
   b7db4:	f000 f8cc 	bl	b7f50 <_Z22__fetch_global_Serial1v>
   b7db8:	7c00      	ldrb	r0, [r0, #16]
   b7dba:	f7fd f9fd 	bl	b51b8 <hal_usart_is_enabled>
   b7dbe:	e7f2      	b.n	b7da6 <pinAvailable+0x5a>
   b7dc0:	2003e704 	.word	0x2003e704
   b7dc4:	2003e708 	.word	0x2003e708

000b7dc8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7dc8:	2823      	cmp	r0, #35	; 0x23
{
   b7dca:	b538      	push	{r3, r4, r5, lr}
   b7dcc:	4604      	mov	r4, r0
   b7dce:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7dd0:	d80a      	bhi.n	b7de8 <pinMode+0x20>
   b7dd2:	29ff      	cmp	r1, #255	; 0xff
   b7dd4:	d008      	beq.n	b7de8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7dd6:	f7ff ffb9 	bl	b7d4c <pinAvailable>
   b7dda:	b128      	cbz	r0, b7de8 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b7ddc:	4629      	mov	r1, r5
   b7dde:	4620      	mov	r0, r4
}
   b7de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b7de4:	f7fd b918 	b.w	b5018 <hal_gpio_mode>
}
   b7de8:	bd38      	pop	{r3, r4, r5, pc}

000b7dea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b7dea:	b538      	push	{r3, r4, r5, lr}
   b7dec:	4604      	mov	r4, r0
   b7dee:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b7df0:	f7fd f91a 	bl	b5028 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7df4:	28ff      	cmp	r0, #255	; 0xff
   b7df6:	d010      	beq.n	b7e1a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7df8:	2806      	cmp	r0, #6
   b7dfa:	d804      	bhi.n	b7e06 <digitalWrite+0x1c>
   b7dfc:	234d      	movs	r3, #77	; 0x4d
   b7dfe:	fa23 f000 	lsr.w	r0, r3, r0
   b7e02:	07c3      	lsls	r3, r0, #31
   b7e04:	d409      	bmi.n	b7e1a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7e06:	4620      	mov	r0, r4
   b7e08:	f7ff ffa0 	bl	b7d4c <pinAvailable>
   b7e0c:	b128      	cbz	r0, b7e1a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b7e0e:	4629      	mov	r1, r5
   b7e10:	4620      	mov	r0, r4
}
   b7e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b7e16:	f7fd b90f 	b.w	b5038 <hal_gpio_write>
}
   b7e1a:	bd38      	pop	{r3, r4, r5, pc}

000b7e1c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7e1c:	4770      	bx	lr

000b7e1e <__tcf_1>:
   b7e1e:	4770      	bx	lr

000b7e20 <_Z17acquireWireBufferv>:
{
   b7e20:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7e22:	4b0a      	ldr	r3, [pc, #40]	; (b7e4c <_Z17acquireWireBufferv+0x2c>)
   b7e24:	6003      	str	r3, [r0, #0]
   b7e26:	2301      	movs	r3, #1
{
   b7e28:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7e2a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7e2c:	4908      	ldr	r1, [pc, #32]	; (b7e50 <_Z17acquireWireBufferv+0x30>)
   b7e2e:	2020      	movs	r0, #32
   b7e30:	f000 f8b4 	bl	b7f9c <_ZnajRKSt9nothrow_t>
	};
   b7e34:	2520      	movs	r5, #32
   b7e36:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7e38:	4905      	ldr	r1, [pc, #20]	; (b7e50 <_Z17acquireWireBufferv+0x30>)
	};
   b7e3a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7e3c:	4628      	mov	r0, r5
   b7e3e:	f000 f8ad 	bl	b7f9c <_ZnajRKSt9nothrow_t>
	};
   b7e42:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7e46:	4620      	mov	r0, r4
   b7e48:	bd38      	pop	{r3, r4, r5, pc}
   b7e4a:	bf00      	nop
   b7e4c:	00010018 	.word	0x00010018
   b7e50:	000b86ec 	.word	0x000b86ec

000b7e54 <_Z18acquireWire1Bufferv>:
{
   b7e54:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7e56:	4b0a      	ldr	r3, [pc, #40]	; (b7e80 <_Z18acquireWire1Bufferv+0x2c>)
   b7e58:	6003      	str	r3, [r0, #0]
   b7e5a:	2301      	movs	r3, #1
{
   b7e5c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7e5e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7e60:	4908      	ldr	r1, [pc, #32]	; (b7e84 <_Z18acquireWire1Bufferv+0x30>)
   b7e62:	2020      	movs	r0, #32
   b7e64:	f000 f89a 	bl	b7f9c <_ZnajRKSt9nothrow_t>
	};
   b7e68:	2520      	movs	r5, #32
   b7e6a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7e6c:	4905      	ldr	r1, [pc, #20]	; (b7e84 <_Z18acquireWire1Bufferv+0x30>)
	};
   b7e6e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7e70:	4628      	mov	r0, r5
   b7e72:	f000 f893 	bl	b7f9c <_ZnajRKSt9nothrow_t>
	};
   b7e76:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7e7a:	4620      	mov	r0, r4
   b7e7c:	bd38      	pop	{r3, r4, r5, pc}
   b7e7e:	bf00      	nop
   b7e80:	00010018 	.word	0x00010018
   b7e84:	000b86ec 	.word	0x000b86ec

000b7e88 <_Z19__fetch_global_Wirev>:
{
   b7e88:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7e8a:	4d0e      	ldr	r5, [pc, #56]	; (b7ec4 <_Z19__fetch_global_Wirev+0x3c>)
   b7e8c:	7829      	ldrb	r1, [r5, #0]
   b7e8e:	f3bf 8f5b 	dmb	ish
   b7e92:	f011 0401 	ands.w	r4, r1, #1
{
   b7e96:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7e98:	d111      	bne.n	b7ebe <_Z19__fetch_global_Wirev+0x36>
   b7e9a:	4628      	mov	r0, r5
   b7e9c:	f7fc fdd2 	bl	b4a44 <__cxa_guard_acquire>
   b7ea0:	b168      	cbz	r0, b7ebe <_Z19__fetch_global_Wirev+0x36>
   b7ea2:	4668      	mov	r0, sp
   b7ea4:	f7ff ffbc 	bl	b7e20 <_Z17acquireWireBufferv>
   b7ea8:	466a      	mov	r2, sp
   b7eaa:	4621      	mov	r1, r4
   b7eac:	4806      	ldr	r0, [pc, #24]	; (b7ec8 <_Z19__fetch_global_Wirev+0x40>)
   b7eae:	f7fe f857 	bl	b5f60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7eb2:	4628      	mov	r0, r5
   b7eb4:	f7fc fdcb 	bl	b4a4e <__cxa_guard_release>
   b7eb8:	4804      	ldr	r0, [pc, #16]	; (b7ecc <_Z19__fetch_global_Wirev+0x44>)
   b7eba:	f000 f874 	bl	b7fa6 <atexit>
	return wire;
}
   b7ebe:	4802      	ldr	r0, [pc, #8]	; (b7ec8 <_Z19__fetch_global_Wirev+0x40>)
   b7ec0:	b007      	add	sp, #28
   b7ec2:	bd30      	pop	{r4, r5, pc}
   b7ec4:	2003e714 	.word	0x2003e714
   b7ec8:	2003e71c 	.word	0x2003e71c
   b7ecc:	000b7e1d 	.word	0x000b7e1d

000b7ed0 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b7ed0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b7ed2:	4c0e      	ldr	r4, [pc, #56]	; (b7f0c <_Z20__fetch_global_Wire1v+0x3c>)
   b7ed4:	7823      	ldrb	r3, [r4, #0]
   b7ed6:	f3bf 8f5b 	dmb	ish
   b7eda:	07db      	lsls	r3, r3, #31
{
   b7edc:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b7ede:	d411      	bmi.n	b7f04 <_Z20__fetch_global_Wire1v+0x34>
   b7ee0:	4620      	mov	r0, r4
   b7ee2:	f7fc fdaf 	bl	b4a44 <__cxa_guard_acquire>
   b7ee6:	b168      	cbz	r0, b7f04 <_Z20__fetch_global_Wire1v+0x34>
   b7ee8:	4668      	mov	r0, sp
   b7eea:	f7ff ffb3 	bl	b7e54 <_Z18acquireWire1Bufferv>
   b7eee:	466a      	mov	r2, sp
   b7ef0:	2101      	movs	r1, #1
   b7ef2:	4807      	ldr	r0, [pc, #28]	; (b7f10 <_Z20__fetch_global_Wire1v+0x40>)
   b7ef4:	f7fe f834 	bl	b5f60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7ef8:	4620      	mov	r0, r4
   b7efa:	f7fc fda8 	bl	b4a4e <__cxa_guard_release>
   b7efe:	4805      	ldr	r0, [pc, #20]	; (b7f14 <_Z20__fetch_global_Wire1v+0x44>)
   b7f00:	f000 f851 	bl	b7fa6 <atexit>
	return wire;
}
   b7f04:	4802      	ldr	r0, [pc, #8]	; (b7f10 <_Z20__fetch_global_Wire1v+0x40>)
   b7f06:	b006      	add	sp, #24
   b7f08:	bd10      	pop	{r4, pc}
   b7f0a:	bf00      	nop
   b7f0c:	2003e718 	.word	0x2003e718
   b7f10:	2003e730 	.word	0x2003e730
   b7f14:	000b7e1f 	.word	0x000b7e1f

000b7f18 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f18:	4770      	bx	lr
	...

000b7f1c <_Z20acquireSerial1Bufferv>:
{
   b7f1c:	b538      	push	{r3, r4, r5, lr}
   b7f1e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7f20:	2514      	movs	r5, #20
   b7f22:	462a      	mov	r2, r5
   b7f24:	2100      	movs	r1, #0
   b7f26:	f000 f875 	bl	b8014 <memset>
   b7f2a:	8025      	strh	r5, [r4, #0]
   b7f2c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f2e:	4907      	ldr	r1, [pc, #28]	; (b7f4c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7f30:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f32:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7f34:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f36:	f000 f831 	bl	b7f9c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f3a:	4904      	ldr	r1, [pc, #16]	; (b7f4c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7f3c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f3e:	4628      	mov	r0, r5
   b7f40:	f000 f82c 	bl	b7f9c <_ZnajRKSt9nothrow_t>
    };
   b7f44:	60e0      	str	r0, [r4, #12]
}
   b7f46:	4620      	mov	r0, r4
   b7f48:	bd38      	pop	{r3, r4, r5, pc}
   b7f4a:	bf00      	nop
   b7f4c:	000b86ec 	.word	0x000b86ec

000b7f50 <_Z22__fetch_global_Serial1v>:
{
   b7f50:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f52:	4d0e      	ldr	r5, [pc, #56]	; (b7f8c <_Z22__fetch_global_Serial1v+0x3c>)
   b7f54:	7829      	ldrb	r1, [r5, #0]
   b7f56:	f3bf 8f5b 	dmb	ish
   b7f5a:	f011 0401 	ands.w	r4, r1, #1
{
   b7f5e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f60:	d111      	bne.n	b7f86 <_Z22__fetch_global_Serial1v+0x36>
   b7f62:	4628      	mov	r0, r5
   b7f64:	f7fc fd6e 	bl	b4a44 <__cxa_guard_acquire>
   b7f68:	b168      	cbz	r0, b7f86 <_Z22__fetch_global_Serial1v+0x36>
   b7f6a:	a801      	add	r0, sp, #4
   b7f6c:	f7ff ffd6 	bl	b7f1c <_Z20acquireSerial1Bufferv>
   b7f70:	aa01      	add	r2, sp, #4
   b7f72:	4621      	mov	r1, r4
   b7f74:	4806      	ldr	r0, [pc, #24]	; (b7f90 <_Z22__fetch_global_Serial1v+0x40>)
   b7f76:	f7ff fda7 	bl	b7ac8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7f7a:	4628      	mov	r0, r5
   b7f7c:	f7fc fd67 	bl	b4a4e <__cxa_guard_release>
   b7f80:	4804      	ldr	r0, [pc, #16]	; (b7f94 <_Z22__fetch_global_Serial1v+0x44>)
   b7f82:	f000 f810 	bl	b7fa6 <atexit>
    return serial1;
}
   b7f86:	4802      	ldr	r0, [pc, #8]	; (b7f90 <_Z22__fetch_global_Serial1v+0x40>)
   b7f88:	b007      	add	sp, #28
   b7f8a:	bd30      	pop	{r4, r5, pc}
   b7f8c:	2003e744 	.word	0x2003e744
   b7f90:	2003e748 	.word	0x2003e748
   b7f94:	000b7f19 	.word	0x000b7f19

000b7f98 <_ZnwjRKSt9nothrow_t>:
   b7f98:	f7fc bd41 	b.w	b4a1e <_Znwj>

000b7f9c <_ZnajRKSt9nothrow_t>:
   b7f9c:	f7fc bd41 	b.w	b4a22 <_Znaj>

000b7fa0 <_ZSt25__throw_bad_function_callv>:
   b7fa0:	b508      	push	{r3, lr}
   b7fa2:	f7fd fa87 	bl	b54b4 <abort>

000b7fa6 <atexit>:
   b7fa6:	2300      	movs	r3, #0
   b7fa8:	4601      	mov	r1, r0
   b7faa:	461a      	mov	r2, r3
   b7fac:	4618      	mov	r0, r3
   b7fae:	f000 b959 	b.w	b8264 <__register_exitproc>
	...

000b7fb4 <isprint>:
   b7fb4:	4b02      	ldr	r3, [pc, #8]	; (b7fc0 <isprint+0xc>)
   b7fb6:	4418      	add	r0, r3
   b7fb8:	7840      	ldrb	r0, [r0, #1]
   b7fba:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7fbe:	4770      	bx	lr
   b7fc0:	000b875d 	.word	0x000b875d

000b7fc4 <memcpy>:
   b7fc4:	440a      	add	r2, r1
   b7fc6:	4291      	cmp	r1, r2
   b7fc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7fcc:	d100      	bne.n	b7fd0 <memcpy+0xc>
   b7fce:	4770      	bx	lr
   b7fd0:	b510      	push	{r4, lr}
   b7fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7fd6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7fda:	4291      	cmp	r1, r2
   b7fdc:	d1f9      	bne.n	b7fd2 <memcpy+0xe>
   b7fde:	bd10      	pop	{r4, pc}

000b7fe0 <memmove>:
   b7fe0:	4288      	cmp	r0, r1
   b7fe2:	b510      	push	{r4, lr}
   b7fe4:	eb01 0402 	add.w	r4, r1, r2
   b7fe8:	d902      	bls.n	b7ff0 <memmove+0x10>
   b7fea:	4284      	cmp	r4, r0
   b7fec:	4623      	mov	r3, r4
   b7fee:	d807      	bhi.n	b8000 <memmove+0x20>
   b7ff0:	1e43      	subs	r3, r0, #1
   b7ff2:	42a1      	cmp	r1, r4
   b7ff4:	d008      	beq.n	b8008 <memmove+0x28>
   b7ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7ffa:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7ffe:	e7f8      	b.n	b7ff2 <memmove+0x12>
   b8000:	4402      	add	r2, r0
   b8002:	4601      	mov	r1, r0
   b8004:	428a      	cmp	r2, r1
   b8006:	d100      	bne.n	b800a <memmove+0x2a>
   b8008:	bd10      	pop	{r4, pc}
   b800a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b800e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b8012:	e7f7      	b.n	b8004 <memmove+0x24>

000b8014 <memset>:
   b8014:	4402      	add	r2, r0
   b8016:	4603      	mov	r3, r0
   b8018:	4293      	cmp	r3, r2
   b801a:	d100      	bne.n	b801e <memset+0xa>
   b801c:	4770      	bx	lr
   b801e:	f803 1b01 	strb.w	r1, [r3], #1
   b8022:	e7f9      	b.n	b8018 <memset+0x4>

000b8024 <srand>:
   b8024:	b538      	push	{r3, r4, r5, lr}
   b8026:	4b10      	ldr	r3, [pc, #64]	; (b8068 <srand+0x44>)
   b8028:	681d      	ldr	r5, [r3, #0]
   b802a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b802c:	4604      	mov	r4, r0
   b802e:	b9b3      	cbnz	r3, b805e <srand+0x3a>
   b8030:	2018      	movs	r0, #24
   b8032:	f7fd fa1f 	bl	b5474 <malloc>
   b8036:	4602      	mov	r2, r0
   b8038:	63a8      	str	r0, [r5, #56]	; 0x38
   b803a:	b920      	cbnz	r0, b8046 <srand+0x22>
   b803c:	4b0b      	ldr	r3, [pc, #44]	; (b806c <srand+0x48>)
   b803e:	480c      	ldr	r0, [pc, #48]	; (b8070 <srand+0x4c>)
   b8040:	2142      	movs	r1, #66	; 0x42
   b8042:	f7fd fa4f 	bl	b54e4 <__assert_func>
   b8046:	490b      	ldr	r1, [pc, #44]	; (b8074 <srand+0x50>)
   b8048:	4b0b      	ldr	r3, [pc, #44]	; (b8078 <srand+0x54>)
   b804a:	e9c0 1300 	strd	r1, r3, [r0]
   b804e:	4b0b      	ldr	r3, [pc, #44]	; (b807c <srand+0x58>)
   b8050:	6083      	str	r3, [r0, #8]
   b8052:	230b      	movs	r3, #11
   b8054:	8183      	strh	r3, [r0, #12]
   b8056:	2100      	movs	r1, #0
   b8058:	2001      	movs	r0, #1
   b805a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b805e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8060:	2200      	movs	r2, #0
   b8062:	611c      	str	r4, [r3, #16]
   b8064:	615a      	str	r2, [r3, #20]
   b8066:	bd38      	pop	{r3, r4, r5, pc}
   b8068:	2003e588 	.word	0x2003e588
   b806c:	000b86ed 	.word	0x000b86ed
   b8070:	000b8704 	.word	0x000b8704
   b8074:	abcd330e 	.word	0xabcd330e
   b8078:	e66d1234 	.word	0xe66d1234
   b807c:	0005deec 	.word	0x0005deec

000b8080 <strchr>:
   b8080:	b2c9      	uxtb	r1, r1
   b8082:	4603      	mov	r3, r0
   b8084:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8088:	b11a      	cbz	r2, b8092 <strchr+0x12>
   b808a:	428a      	cmp	r2, r1
   b808c:	d1f9      	bne.n	b8082 <strchr+0x2>
   b808e:	4618      	mov	r0, r3
   b8090:	4770      	bx	lr
   b8092:	2900      	cmp	r1, #0
   b8094:	bf18      	it	ne
   b8096:	2300      	movne	r3, #0
   b8098:	e7f9      	b.n	b808e <strchr+0xe>

000b809a <strchrnul>:
   b809a:	b510      	push	{r4, lr}
   b809c:	4604      	mov	r4, r0
   b809e:	f7ff ffef 	bl	b8080 <strchr>
   b80a2:	b918      	cbnz	r0, b80ac <strchrnul+0x12>
   b80a4:	4620      	mov	r0, r4
   b80a6:	f7fc fc77 	bl	b4998 <strlen>
   b80aa:	4420      	add	r0, r4
   b80ac:	bd10      	pop	{r4, pc}

000b80ae <strcpy>:
   b80ae:	4603      	mov	r3, r0
   b80b0:	f811 2b01 	ldrb.w	r2, [r1], #1
   b80b4:	f803 2b01 	strb.w	r2, [r3], #1
   b80b8:	2a00      	cmp	r2, #0
   b80ba:	d1f9      	bne.n	b80b0 <strcpy+0x2>
   b80bc:	4770      	bx	lr
	...

000b80c0 <strdup>:
   b80c0:	4b02      	ldr	r3, [pc, #8]	; (b80cc <strdup+0xc>)
   b80c2:	4601      	mov	r1, r0
   b80c4:	6818      	ldr	r0, [r3, #0]
   b80c6:	f000 b803 	b.w	b80d0 <_strdup_r>
   b80ca:	bf00      	nop
   b80cc:	2003e588 	.word	0x2003e588

000b80d0 <_strdup_r>:
   b80d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b80d2:	4604      	mov	r4, r0
   b80d4:	4608      	mov	r0, r1
   b80d6:	460d      	mov	r5, r1
   b80d8:	f7fc fc5e 	bl	b4998 <strlen>
   b80dc:	1c42      	adds	r2, r0, #1
   b80de:	4611      	mov	r1, r2
   b80e0:	4620      	mov	r0, r4
   b80e2:	9201      	str	r2, [sp, #4]
   b80e4:	f7fd f9ee 	bl	b54c4 <_malloc_r>
   b80e8:	4604      	mov	r4, r0
   b80ea:	b118      	cbz	r0, b80f4 <_strdup_r+0x24>
   b80ec:	9a01      	ldr	r2, [sp, #4]
   b80ee:	4629      	mov	r1, r5
   b80f0:	f7ff ff68 	bl	b7fc4 <memcpy>
   b80f4:	4620      	mov	r0, r4
   b80f6:	b003      	add	sp, #12
   b80f8:	bd30      	pop	{r4, r5, pc}

000b80fa <strncmp>:
   b80fa:	b510      	push	{r4, lr}
   b80fc:	b17a      	cbz	r2, b811e <strncmp+0x24>
   b80fe:	4603      	mov	r3, r0
   b8100:	3901      	subs	r1, #1
   b8102:	1884      	adds	r4, r0, r2
   b8104:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8108:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b810c:	4290      	cmp	r0, r2
   b810e:	d101      	bne.n	b8114 <strncmp+0x1a>
   b8110:	42a3      	cmp	r3, r4
   b8112:	d101      	bne.n	b8118 <strncmp+0x1e>
   b8114:	1a80      	subs	r0, r0, r2
   b8116:	bd10      	pop	{r4, pc}
   b8118:	2800      	cmp	r0, #0
   b811a:	d1f3      	bne.n	b8104 <strncmp+0xa>
   b811c:	e7fa      	b.n	b8114 <strncmp+0x1a>
   b811e:	4610      	mov	r0, r2
   b8120:	e7f9      	b.n	b8116 <strncmp+0x1c>

000b8122 <strrchr>:
   b8122:	b538      	push	{r3, r4, r5, lr}
   b8124:	4603      	mov	r3, r0
   b8126:	460c      	mov	r4, r1
   b8128:	b969      	cbnz	r1, b8146 <strrchr+0x24>
   b812a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b812e:	f7ff bfa7 	b.w	b8080 <strchr>
   b8132:	1c43      	adds	r3, r0, #1
   b8134:	4605      	mov	r5, r0
   b8136:	4621      	mov	r1, r4
   b8138:	4618      	mov	r0, r3
   b813a:	f7ff ffa1 	bl	b8080 <strchr>
   b813e:	2800      	cmp	r0, #0
   b8140:	d1f7      	bne.n	b8132 <strrchr+0x10>
   b8142:	4628      	mov	r0, r5
   b8144:	bd38      	pop	{r3, r4, r5, pc}
   b8146:	2500      	movs	r5, #0
   b8148:	e7f5      	b.n	b8136 <strrchr+0x14>
	...

000b814c <_strtol_l.constprop.0>:
   b814c:	2b01      	cmp	r3, #1
   b814e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8152:	d001      	beq.n	b8158 <_strtol_l.constprop.0+0xc>
   b8154:	2b24      	cmp	r3, #36	; 0x24
   b8156:	d906      	bls.n	b8166 <_strtol_l.constprop.0+0x1a>
   b8158:	f7fd f9bc 	bl	b54d4 <__errno>
   b815c:	2316      	movs	r3, #22
   b815e:	6003      	str	r3, [r0, #0]
   b8160:	2000      	movs	r0, #0
   b8162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8166:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b824c <_strtol_l.constprop.0+0x100>
   b816a:	460d      	mov	r5, r1
   b816c:	462e      	mov	r6, r5
   b816e:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8172:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8176:	f017 0708 	ands.w	r7, r7, #8
   b817a:	d1f7      	bne.n	b816c <_strtol_l.constprop.0+0x20>
   b817c:	2c2d      	cmp	r4, #45	; 0x2d
   b817e:	d132      	bne.n	b81e6 <_strtol_l.constprop.0+0x9a>
   b8180:	782c      	ldrb	r4, [r5, #0]
   b8182:	2701      	movs	r7, #1
   b8184:	1cb5      	adds	r5, r6, #2
   b8186:	2b00      	cmp	r3, #0
   b8188:	d05b      	beq.n	b8242 <_strtol_l.constprop.0+0xf6>
   b818a:	2b10      	cmp	r3, #16
   b818c:	d109      	bne.n	b81a2 <_strtol_l.constprop.0+0x56>
   b818e:	2c30      	cmp	r4, #48	; 0x30
   b8190:	d107      	bne.n	b81a2 <_strtol_l.constprop.0+0x56>
   b8192:	782c      	ldrb	r4, [r5, #0]
   b8194:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8198:	2c58      	cmp	r4, #88	; 0x58
   b819a:	d14d      	bne.n	b8238 <_strtol_l.constprop.0+0xec>
   b819c:	786c      	ldrb	r4, [r5, #1]
   b819e:	2310      	movs	r3, #16
   b81a0:	3502      	adds	r5, #2
   b81a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b81a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b81aa:	f04f 0c00 	mov.w	ip, #0
   b81ae:	fbb8 f9f3 	udiv	r9, r8, r3
   b81b2:	4666      	mov	r6, ip
   b81b4:	fb03 8a19 	mls	sl, r3, r9, r8
   b81b8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b81bc:	f1be 0f09 	cmp.w	lr, #9
   b81c0:	d816      	bhi.n	b81f0 <_strtol_l.constprop.0+0xa4>
   b81c2:	4674      	mov	r4, lr
   b81c4:	42a3      	cmp	r3, r4
   b81c6:	dd24      	ble.n	b8212 <_strtol_l.constprop.0+0xc6>
   b81c8:	f1bc 0f00 	cmp.w	ip, #0
   b81cc:	db1e      	blt.n	b820c <_strtol_l.constprop.0+0xc0>
   b81ce:	45b1      	cmp	r9, r6
   b81d0:	d31c      	bcc.n	b820c <_strtol_l.constprop.0+0xc0>
   b81d2:	d101      	bne.n	b81d8 <_strtol_l.constprop.0+0x8c>
   b81d4:	45a2      	cmp	sl, r4
   b81d6:	db19      	blt.n	b820c <_strtol_l.constprop.0+0xc0>
   b81d8:	fb06 4603 	mla	r6, r6, r3, r4
   b81dc:	f04f 0c01 	mov.w	ip, #1
   b81e0:	f815 4b01 	ldrb.w	r4, [r5], #1
   b81e4:	e7e8      	b.n	b81b8 <_strtol_l.constprop.0+0x6c>
   b81e6:	2c2b      	cmp	r4, #43	; 0x2b
   b81e8:	bf04      	itt	eq
   b81ea:	782c      	ldrbeq	r4, [r5, #0]
   b81ec:	1cb5      	addeq	r5, r6, #2
   b81ee:	e7ca      	b.n	b8186 <_strtol_l.constprop.0+0x3a>
   b81f0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b81f4:	f1be 0f19 	cmp.w	lr, #25
   b81f8:	d801      	bhi.n	b81fe <_strtol_l.constprop.0+0xb2>
   b81fa:	3c37      	subs	r4, #55	; 0x37
   b81fc:	e7e2      	b.n	b81c4 <_strtol_l.constprop.0+0x78>
   b81fe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8202:	f1be 0f19 	cmp.w	lr, #25
   b8206:	d804      	bhi.n	b8212 <_strtol_l.constprop.0+0xc6>
   b8208:	3c57      	subs	r4, #87	; 0x57
   b820a:	e7db      	b.n	b81c4 <_strtol_l.constprop.0+0x78>
   b820c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8210:	e7e6      	b.n	b81e0 <_strtol_l.constprop.0+0x94>
   b8212:	f1bc 0f00 	cmp.w	ip, #0
   b8216:	da05      	bge.n	b8224 <_strtol_l.constprop.0+0xd8>
   b8218:	2322      	movs	r3, #34	; 0x22
   b821a:	6003      	str	r3, [r0, #0]
   b821c:	4646      	mov	r6, r8
   b821e:	b942      	cbnz	r2, b8232 <_strtol_l.constprop.0+0xe6>
   b8220:	4630      	mov	r0, r6
   b8222:	e79e      	b.n	b8162 <_strtol_l.constprop.0+0x16>
   b8224:	b107      	cbz	r7, b8228 <_strtol_l.constprop.0+0xdc>
   b8226:	4276      	negs	r6, r6
   b8228:	2a00      	cmp	r2, #0
   b822a:	d0f9      	beq.n	b8220 <_strtol_l.constprop.0+0xd4>
   b822c:	f1bc 0f00 	cmp.w	ip, #0
   b8230:	d000      	beq.n	b8234 <_strtol_l.constprop.0+0xe8>
   b8232:	1e69      	subs	r1, r5, #1
   b8234:	6011      	str	r1, [r2, #0]
   b8236:	e7f3      	b.n	b8220 <_strtol_l.constprop.0+0xd4>
   b8238:	2430      	movs	r4, #48	; 0x30
   b823a:	2b00      	cmp	r3, #0
   b823c:	d1b1      	bne.n	b81a2 <_strtol_l.constprop.0+0x56>
   b823e:	2308      	movs	r3, #8
   b8240:	e7af      	b.n	b81a2 <_strtol_l.constprop.0+0x56>
   b8242:	2c30      	cmp	r4, #48	; 0x30
   b8244:	d0a5      	beq.n	b8192 <_strtol_l.constprop.0+0x46>
   b8246:	230a      	movs	r3, #10
   b8248:	e7ab      	b.n	b81a2 <_strtol_l.constprop.0+0x56>
   b824a:	bf00      	nop
   b824c:	000b875e 	.word	0x000b875e

000b8250 <strtol>:
   b8250:	4613      	mov	r3, r2
   b8252:	460a      	mov	r2, r1
   b8254:	4601      	mov	r1, r0
   b8256:	4802      	ldr	r0, [pc, #8]	; (b8260 <strtol+0x10>)
   b8258:	6800      	ldr	r0, [r0, #0]
   b825a:	f7ff bf77 	b.w	b814c <_strtol_l.constprop.0>
   b825e:	bf00      	nop
   b8260:	2003e588 	.word	0x2003e588

000b8264 <__register_exitproc>:
   b8264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8268:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8324 <__register_exitproc+0xc0>
   b826c:	4606      	mov	r6, r0
   b826e:	f8d8 0000 	ldr.w	r0, [r8]
   b8272:	461f      	mov	r7, r3
   b8274:	460d      	mov	r5, r1
   b8276:	4691      	mov	r9, r2
   b8278:	f000 f856 	bl	b8328 <__retarget_lock_acquire_recursive>
   b827c:	4b25      	ldr	r3, [pc, #148]	; (b8314 <__register_exitproc+0xb0>)
   b827e:	681c      	ldr	r4, [r3, #0]
   b8280:	b934      	cbnz	r4, b8290 <__register_exitproc+0x2c>
   b8282:	4c25      	ldr	r4, [pc, #148]	; (b8318 <__register_exitproc+0xb4>)
   b8284:	601c      	str	r4, [r3, #0]
   b8286:	4b25      	ldr	r3, [pc, #148]	; (b831c <__register_exitproc+0xb8>)
   b8288:	b113      	cbz	r3, b8290 <__register_exitproc+0x2c>
   b828a:	681b      	ldr	r3, [r3, #0]
   b828c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8290:	6863      	ldr	r3, [r4, #4]
   b8292:	2b1f      	cmp	r3, #31
   b8294:	dd07      	ble.n	b82a6 <__register_exitproc+0x42>
   b8296:	f8d8 0000 	ldr.w	r0, [r8]
   b829a:	f000 f847 	bl	b832c <__retarget_lock_release_recursive>
   b829e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b82a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b82a6:	b34e      	cbz	r6, b82fc <__register_exitproc+0x98>
   b82a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b82ac:	b988      	cbnz	r0, b82d2 <__register_exitproc+0x6e>
   b82ae:	4b1c      	ldr	r3, [pc, #112]	; (b8320 <__register_exitproc+0xbc>)
   b82b0:	b923      	cbnz	r3, b82bc <__register_exitproc+0x58>
   b82b2:	f8d8 0000 	ldr.w	r0, [r8]
   b82b6:	f000 f838 	bl	b832a <__retarget_lock_release>
   b82ba:	e7f0      	b.n	b829e <__register_exitproc+0x3a>
   b82bc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b82c0:	f7fd f8d8 	bl	b5474 <malloc>
   b82c4:	2800      	cmp	r0, #0
   b82c6:	d0f4      	beq.n	b82b2 <__register_exitproc+0x4e>
   b82c8:	2300      	movs	r3, #0
   b82ca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b82ce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b82d2:	6863      	ldr	r3, [r4, #4]
   b82d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b82d8:	2201      	movs	r2, #1
   b82da:	409a      	lsls	r2, r3
   b82dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b82e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b82e4:	4313      	orrs	r3, r2
   b82e6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b82ea:	2e02      	cmp	r6, #2
   b82ec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b82f0:	bf02      	ittt	eq
   b82f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b82f6:	4313      	orreq	r3, r2
   b82f8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b82fc:	6863      	ldr	r3, [r4, #4]
   b82fe:	f8d8 0000 	ldr.w	r0, [r8]
   b8302:	1c5a      	adds	r2, r3, #1
   b8304:	3302      	adds	r3, #2
   b8306:	6062      	str	r2, [r4, #4]
   b8308:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b830c:	f000 f80e 	bl	b832c <__retarget_lock_release_recursive>
   b8310:	2000      	movs	r0, #0
   b8312:	e7c6      	b.n	b82a2 <__register_exitproc+0x3e>
   b8314:	2003e7e8 	.word	0x2003e7e8
   b8318:	2003e75c 	.word	0x2003e75c
   b831c:	00000000 	.word	0x00000000
   b8320:	000b5475 	.word	0x000b5475
   b8324:	2003e5ec 	.word	0x2003e5ec

000b8328 <__retarget_lock_acquire_recursive>:
   b8328:	4770      	bx	lr

000b832a <__retarget_lock_release>:
   b832a:	4770      	bx	lr

000b832c <__retarget_lock_release_recursive>:
   b832c:	4770      	bx	lr

000b832e <link_code_end>:
	...

000b8330 <dynalib_user>:
   b8330:	49a9 000b 49e5 000b 4a0d 000b 4a11 000b     .I...I...J...J..
   b8340:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8350:	7620 7269 7574 6c61 6f00 006e 666f 0066      virtual.on.off.
   b8360:	6564 7562 0067 656c 0064 6543 6c6c 6c75     debug.led.Cellul
   b8370:	7261 7220 6165 7964 6120 2074 7473 7261     ar ready at star
   b8380:	7574 3a70 2520 2066 7473 6572 676e 6874     tup: %f strength
   b8390:	6120 646e 2520 2066 7571 6c61 7469 0079      and %f quality.
   b83a0:	6f6c 6163 496c 3a50 2520 0073 7543 7272     localIP: %s.Curr
   b83b0:	6e65 2074 6162 7474 7265 2079 6f76 746c     ent battery volt
   b83c0:	6761 3a65 2520 0066 7274 6575 6f00 426e     age: %f.true.onB
   b83d0:	7461 6574 7972 0000                         attery..

000b83d8 <_ZTVN5spark10LogHandlerE>:
	...
   b83e8:	4a2d 000b 4a55 000b                         -J..UJ..

000b83f0 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b83f8:	4a85 000b 4ab9 000b 70ed 000b 7291 000b     .J...J...p...r..

000b8408 <_ZTVN5spark13CellularClassE>:
	...
   b8410:	5633 000b 5629 000b 561f 000b 55d5 000b     3V..)V...V...U..
   b8420:	5613 000b 5607 000b 747d 000b 7485 000b     .V...V..}t...t..
   b8430:	55fb 000b 55f3 000b 55e9 000b 55df 000b     .U...U...U...U..
   b8440:	74b5 000b                                   .t..

000b8444 <_ZTV14CellularSignal>:
	...
   b844c:	56c1 000b 5725 000b 56c3 000b 5735 000b     .V..%W...V..5W..
   b845c:	5769 000b 5795 000b 57c9 000b 56e9 000b     iW...W...W...V..
   b846c:	56c7 000b 56e3 000b fffc ffff 0000 0000     .V...V..........
   b847c:	571d 000b                                   .W..

000b8480 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8488:	580d 000b 5813 000b 5851 000b 5821 000b     .X...X..QX..!X..
   b8498:	580f 000b                                   .X..

000b849c <_ZTVN5spark13EthernetClassE>:
	...
   b84a4:	5de7 000b 5ddd 000b 5dd3 000b 5dc9 000b     .]...]...]...]..
   b84b4:	5dbd 000b 5db1 000b 747d 000b 7485 000b     .]...]..}t...t..
   b84c4:	5da5 000b 5d9d 000b 5d93 000b 5d89 000b     .]...]...]...]..
   b84d4:	74b5 000b                                   .t..

000b84d8 <_ZTV7TwoWire>:
	...
   b84e0:	5f09 000b 5f53 000b 5f2b 000b 5f0b 000b     ._..S_..+_..._..
   b84f0:	5f33 000b 5f3b 000b 5f43 000b 5f4b 000b     3_..;_..C_..K_..

000b8500 <_ZTV9IPAddress>:
	...
   b8508:	6037 000b 6027 000b 6029 000b 6425 2500     7`..'`..)`..%d.%
   b8518:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
   b8528:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   b8538:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   b8548:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
   b8558:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   b8568:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   b8578:	0a0d 6d00 6c00 006e 6e66 7400 6300 646f     ...m.ln.fn.t.cod
   b8588:	0065 6564 6174 6c69 0000 0000               e.detail....

000b8594 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b859c:	64e5 000b 650b 000b 64c9 000b 6147 000b     .d...e...d..Ga..

000b85ac <_ZTVN5spark16StreamLogHandlerE>:
	...
   b85b4:	6995 000b 69ad 000b 70ed 000b 7291 000b     .i...i...p...r..

000b85c4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b85cc:	69c1 000b 69d5 000b 72c9 000b 64d1 000b     .i...i...r...d..

000b85dc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b85e4:	64e3 000b 6519 000b 7051 000b 64d3 000b     .d...e..Qp...d..

000b85f4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b85fc:	64e1 000b 6527 000b 68fd 000b 6549 000b     .d..'e...h..Ie..

000b860c <_ZTVN5spark12NetworkClassE>:
	...
   b8614:	743d 000b 7447 000b 7451 000b 745b 000b     =t..Gt..Qt..[t..
   b8624:	7465 000b 7471 000b 747d 000b 7485 000b     et..qt..}t...t..
   b8634:	748d 000b 7499 000b 74a1 000b 74ab 000b     .t...t...t...t..
   b8644:	74b5 000b 616e 006e 6e69 0066 766f 0066     .t..nan.inf.ovf.
   b8654:	002e 0000                                   ....

000b8658 <_ZTV21StringPrintableHelper>:
	...
   b8660:	7805 000b 7807 000b 79b3 000b 7985 000b     .x...x...y...y..
   b8670:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b8680:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b868c <_ZTV11USARTSerial>:
	...
   b8694:	7a4d 000b 7ab9 000b 7a91 000b 75a1 000b     Mz...z...z...u..
   b86a4:	7a61 000b 7a7d 000b 7a6f 000b 7a8b 000b     az..}z..oz...z..
   b86b4:	7a4f 000b 7a53 000b                         Oz..Sz..

000b86bc <_ZTV9USBSerial>:
	...
   b86c4:	7b0b 000b 7b73 000b 7b49 000b 75a1 000b     .{..s{..I{...u..
   b86d4:	7b3b 000b 7b0d 000b 7b1d 000b 7b6d 000b     ;{...{...{..m{..
   b86e4:	7b2d 000b 7b05 000b                         -{...{..

000b86ec <_ZSt7nothrow>:
   b86ec:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b86fc:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b870c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b871c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b872c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b873c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b874c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b875d <_ctype_>:
   b875d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b876d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b877d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b878d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b879d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b87ad:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b87bd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b87cd:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b87dd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b885e <link_const_data_end>:
	...

000b8860 <link_constructors_location>:
   b8860:	000b4e65 	.word	0x000b4e65
   b8864:	000b55c5 	.word	0x000b55c5
   b8868:	000b5691 	.word	0x000b5691
   b886c:	000b5df1 	.word	0x000b5df1
   b8870:	000b70dd 	.word	0x000b70dd
   b8874:	000b758d 	.word	0x000b758d
   b8878:	000b77e5 	.word	0x000b77e5
   b887c:	000b7a15 	.word	0x000b7a15
   b8880:	000b7a39 	.word	0x000b7a39
